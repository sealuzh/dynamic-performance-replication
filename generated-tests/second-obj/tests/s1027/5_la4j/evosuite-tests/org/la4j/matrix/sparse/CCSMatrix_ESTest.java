/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:32:40 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 48;
      doubleArray0[4] = (double) 48;
      doubleArray0[5] = (double) 48;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(48, 48, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1729;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1729;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1729, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix.diagonal(586, 586);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.setAll((-37));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 4;
      cCSMatrix0.diagonalProduct();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(4, 4, 4);
      cCSMatrix1.isColumnMajor();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(1773, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1773
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      Matrix matrix0 = cCSMatrix0.blankOfShape(5, 5);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-376.8934);
      doubleArray0[0] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.getRow(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      byte[] byteArray0 = new byte[0];
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2147483629);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(2, 0.0, (Random) mockRandom0);
      org.evosuite.runtime.Random.setNextRandom(3);
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.setAll(3);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      byte[] byteArray0 = new byte[0];
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6, 6);
      cCSMatrix0.norm();
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape((-64), (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -64x-64
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 3);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(0, 7506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7506
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-3116);
      MockRandom mockRandom0 = new MockRandom(29L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(2775, (-3116), (double) (-3116), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17, 17);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 8, matrixFunction0);
      int int0 = (-1621);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-1621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1620
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix.identity(17);
      int int0 = 2042;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 2042;
      doubleArray0[1] = (double) 2042;
      doubleArray0[2] = (double) 17;
      CCSMatrix.from1DArray(2418, 2740, doubleArray0);
      int int1 = (-2146360830);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(int1, int0, doubleArray0);
      cCSMatrix0.shuffle();
      double[][] doubleArray1 = new double[0][9];
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2320);
      int int0 = 5;
      ColumnMajorSparseMatrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(13, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      int int1 = 322;
      cCSMatrix0.set(int0, int1, int0);
      int int2 = (-1593);
      CCSMatrix.diagonal(int2, int2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(57, 4, 57);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      cCSMatrix0.nonZeroAt(0, 5);
      cCSMatrix0.minInColumn(0);
      double[] doubleArray0 = new double[6];
      CCSMatrix.zero(0, 12);
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 12;
      cCSMatrix0.maxInColumn(5);
      cCSMatrix0.nonZeroIteratorOfColumn(5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt((-1038), 1937, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1937
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(17);
      cCSMatrix0.copyOfShape(0, 17);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(994, 1);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '995' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      int int0 = 0;
      cCSMatrix0.nonZeroAt(0, 0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-1882), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1882x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-1218.3341);
      doubleArray0[5] = (double) 4;
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = (double) 4;
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      int int1 = 0;
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = 5;
      intArray0[3] = 12;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 16, 6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1960.189, (double)16, (double)6, (double)6, (double)16).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.swapColumns(16, 16);
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      cCSMatrix0.select(intArray0, intArray0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      Integer integer0 = new Integer(8);
      cCSMatrix0.setAll(3388.0095);
      cCSMatrix0.setAll(6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1, 4, (double) 4, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(31L);
      mockRandom0.longs(31L);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(402);
      cCSMatrix0.copyOfShape(1009, 0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMaximumIntegerDigits(3);
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      SparseMatrix.diagonal(3, 3);
      cCSMatrix0.toDenseMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-3039), (-3039));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3039
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparseMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2904, 3476.7745441);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      SparseMatrix.fromCSV("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      CCSMatrix.fromBinary(byteArray0);
      int int0 = 1;
      cCSMatrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 3);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      numberFormat0.setMaximumIntegerDigits(0);
      cCSMatrix0.toCSV(numberFormat0);
      SparseMatrix.diagonal(0, (-755.3328044));
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        CCSMatrix.random(3, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.subtract(1.0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 3);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(3, 3, 1.0, (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(matrixAccumulator0).accumulate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix1.fold(matrixAccumulator0);
      cCSMatrix1.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
          cCSMatrix0.nonZeroAt(0, 5);
          LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
          cCSMatrix0.minInColumn(0);
          int[] intArray0 = new int[8];
          intArray0[1] = 0;
          intArray0[2] = 5;
          intArray0[3] = 12;
          intArray0[5] = 0;
          intArray0[6] = 5;
          intArray0[7] = 5;
          cCSMatrix0.getRow(0);
          // Undeclared exception!
          try { 
            CCSMatrix.fromCSV("WA^k+&2U>Sh`Nm");
            fail("Expecting exception: NumberFormatException");
          
          } catch(NumberFormatException e) {
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setAll((-4083.077));
      cCSMatrix0.diagonalProduct();
      int int1 = (-2010);
      cCSMatrix0.getRow((-2010));
      cCSMatrix0.columnMajorIterator();
      int int2 = 2042;
      double[] doubleArray0 = new double[0];
      CCSMatrix.from1DArray(3, 2042, doubleArray0);
      int int3 = 2409;
      int int4 = (-1458);
      cCSMatrix0.nonZeroAt(int3, int4);
      cCSMatrix0.nonZeroAt(int1, int2);
      int int5 = 1016;
      int int6 = 2172;
      cCSMatrix0.getColumn(int6);
      int int7 = 1335;
      int int8 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int8, int5, doubleArray0);
      cCSMatrix1.diagonalProduct();
      CCSMatrix.diagonal(int0, int0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      int int9 = 2655;
      int int10 = 614;
      CCSMatrix.zero(int7, int9, int10);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 80;
      SparseVector.zero(80);
      org.evosuite.runtime.Random.setNextRandom(80);
      CCSMatrix cCSMatrix0 = new CCSMatrix(80, 80);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.getRow(80);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.getRow(int0);
      matrix0.blankOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1911.58465857);
      doubleArray1[1] = (-1911.58465857);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1911.58465857);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1911.58465857);
      doubleArray2[4] = (-1911.58465857);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1911.58465857);
      doubleArray0[2] = doubleArray0[0];
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1911.58465857);
      doubleArray3[1] = (-1806.958571835);
      doubleArray3[2] = (-1911.58465857);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray3;
      doubleArray0[4] = doubleArray2;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-1911.58465857);
      cCSMatrix0.transpose();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, (-1911.58465857));
      cCSMatrix1.min();
      // Undeclared exception!
      try { 
        CCSMatrix.zero(2609, (-2694), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2609x-2694
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 6;
      int int1 = (-64);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      cCSMatrix0.nonZeroRowMajorIterator();
      int int2 = (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-290.05)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-1), 2, matrixFunction0);
      CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal((-64), 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 4;
      int int1 = 1000;
      Matrix.zero(60, 1000);
      CCSMatrix.zero(4, 4, 1);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(4, (double) 1, (Random) mockRandom0);
      SparseMatrix.identity((-1638));
      double[][] doubleArray0 = new double[0][2];
      CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.from2DArray(doubleArray0);
      int int2 = 195225787;
      CCSMatrix.randomSymmetric(int2, (double) int0, (Random) mockRandom0);
      int int3 = (-1308);
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix.diagonal(2, 0);
      cCSMatrix0.toBinary();
      cCSMatrix0.insert((Matrix) cCSMatrix0, 2, 0);
      cCSMatrix0.multiplyByItsTranspose();
      int int0 = 2266;
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setRow(0, 1843.227319);
      cCSMatrix0.setRow(0, 1843.227319);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(2072, 2283.8809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2072' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      cCSMatrix0.infinityNorm();
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(12, 0);
      SparseMatrix sparseMatrix0 = cCSMatrix1.toSparseMatrix();
      cCSMatrix1.iteratorOfRow(8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInRow(Integer.MAX_VALUE, vectorProcedure0);
      cCSMatrix0.maxInColumn(5);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = (double) 1000;
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int0 = 1171;
      cCSMatrix0.nonZeroIteratorOfColumn(1);
      cCSMatrix1.swapRows(1171, 2);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(2, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17, 17);
      int int0 = 0;
      cCSMatrix0.nonZeroAt(0, 11);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      cCSMatrix0.maxInColumn(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(11, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 5, 12);
      SparseMatrix sparseMatrix0 = cCSMatrix1.toSparseMatrix();
      cCSMatrix0.iteratorOfColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInRow(Integer.MAX_VALUE, vectorProcedure0);
      cCSMatrix0.maxInColumn(5);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(0);
      cCSMatrix2.infinityNorm();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      cCSMatrix1.setAll(Double.NEGATIVE_INFINITY);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3668.4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.add((double) 0);
      cCSMatrix1.updateAt(0, 0, matrixFunction0);
      CCSMatrix cCSMatrix3 = CCSMatrix.diagonal(0, 0.0);
      // Undeclared exception!
      try { 
        cCSMatrix3.insert((Matrix) sparseMatrix0, 5, (-1185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 5x-1185
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 12;
      cCSMatrix0.maxInColumn(5);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(5, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 2004;
      double double0 = (-254.48606);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2004, (-254.48606));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(48, vectorProcedure0);
      cCSMatrix0.maxInColumn(2004);
      int int1 = 968;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix1.toMatrixMarket();
      cCSMatrix0.min();
      int int2 = 1690;
      cCSMatrix1.getRow(int2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 69;
      org.evosuite.runtime.Random.setNextRandom(69);
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("6");
      cCSMatrix0.getRow(69);
      int int1 = 1184;
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1184
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      int int0 = 0;
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 5, 12);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.iteratorOfColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInRow(Integer.MAX_VALUE, vectorProcedure0);
      cCSMatrix0.maxInColumn(5);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(0);
      cCSMatrix2.infinityNorm();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      cCSMatrix1.setAll(Double.NEGATIVE_INFINITY);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.add((double) 0);
      cCSMatrix1.updateAt(0, 0, matrixFunction0);
      CCSMatrix.diagonal(0, 0.0);
      cCSMatrix1.rowMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(2737, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      matrix0.removeLastColumn();
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.diagonal(2, 11.0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction1);
      int int1 = 10;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(10);
      cCSMatrix1.getRow(2);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("7q{hsuQD)T~l6_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      int int1 = 0;
      int int2 = 5;
      cCSMatrix0.nonZeroAt(0, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 5;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(5, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.removeLastRow();
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.diagonal(2, 11.0);
      int int1 = (-901);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("EIGEN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.zero(2, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = Matrix.zero(98, 1000);
      cCSMatrix0.divide(98);
      cCSMatrix0.iteratorOfRow(4);
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix.zero(4, 4, 1);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1000;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (-1218.3341);
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = (double) 98;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      double[][] doubleArray2 = new double[6][0];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(1000, (-1218.3341));
      cCSMatrix0.min();
      matrix0.iteratorOfColumn(4);
      cCSMatrix0.toBinary();
      cCSMatrix2.minInColumn(4);
      cCSMatrix1.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(4, 976.6348539334, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 16, 16);
      cCSMatrix0.iterator();
      Matrix matrix0 = Matrix.zero(16, 32);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 31;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(31);
      int int1 = 5;
      cCSMatrix0.nonZeroAt(19, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(19);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) 19;
      doubleArray0[0] = (double) 5;
      double[] doubleArray1 = new double[7];
      Matrix matrix0 = cCSMatrix0.blankOfColumns(31);
      cCSMatrix0.transformColumn(5, (VectorFunction) null);
      int int2 = 3;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int2, vectorProcedure0);
      int int3 = 611;
      cCSMatrix0.getRow(int3);
      doubleArray1[0] = (double) int0;
      cCSMatrix0.maxInColumn(int1);
      cCSMatrix0.nonZeroIteratorOfColumn(int1);
      matrix0.iteratorOfRow(int1);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 31;
      CCSMatrix cCSMatrix0 = new CCSMatrix(31, 31, 31);
      int int1 = 5;
      cCSMatrix0.nonZeroAt(19, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(19);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) 19;
      doubleArray0[0] = (double) 5;
      cCSMatrix0.transpose();
      double[] doubleArray1 = new double[4];
      cCSMatrix0.blankOfColumns(31);
      cCSMatrix0.transformColumn(5, (VectorFunction) null);
      doubleArray1[0] = (double) int0;
      cCSMatrix0.maxInColumn(int1);
      cCSMatrix0.nonZeroIteratorOfColumn(int1);
      byte byte0 = (byte)56;
      byte byte1 = (byte) (-28);
      byte byte2 = (byte)40;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = byte2;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix.zero(98, 1000);
      Matrix matrix0 = cCSMatrix0.divide(98);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix1 = matrix0.copyOfColumns(545);
      cCSMatrix0.iteratorOfRow(4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      columnMajorSparseMatrix0.iteratorOfRow(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      matrix1.transpose();
      matrix0.transformColumn(0, (VectorFunction) null);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1653, 0, 1000);
      double double0 = Double.NEGATIVE_INFINITY;
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(double0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.power(2);
      // Undeclared exception!
      try { 
        cCSMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(39);
      cCSMatrix0.nonZeroAt(19, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Matrix.identity(5);
      cCSMatrix0.minInColumn(19);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) 19;
      doubleArray0[0] = (double) 5;
      cCSMatrix0.transpose();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 39;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 19.0, (double)25, (double)39, (double)5).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(25, vectorFunction0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-798);
      intArray0[1] = 2795;
      intArray0[2] = 5;
      intArray0[3] = 39;
      intArray0[4] = (-3472);
      intArray0[5] = 5;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = 8;
      CCSMatrix.zero(int0, intArray0[4]);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 39;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(39);
      cCSMatrix0.nonZeroAt(19, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(19);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) 19;
      doubleArray0[0] = (double) 5;
      cCSMatrix0.transpose();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 39;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(25, vectorFunction0);
      cCSMatrix0.maxInColumn(5);
      cCSMatrix0.iteratorOfColumn(5);
      byte byte0 = (byte)40;
      int int1 = 537;
      cCSMatrix0.nonZeroAt(5, (byte)40);
      double[] doubleArray2 = null;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray2);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector.fromMap(hashMap0, byte0);
      sparseVector0.toDiagonalMatrix();
      int int2 = 2493;
      int int3 = (-154);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int1, int2, int3);
      cCSMatrix1.rank();
      cCSMatrix1.nonZeroRowMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      int int4 = (-1548);
      cCSMatrix1.copyOfShape(int0, int4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(2, 0);
      cCSMatrix2.toBinary();
      cCSMatrix1.insert((Matrix) cCSMatrix0, 2, 0);
      cCSMatrix1.euclideanNorm();
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix2.kroneckerProduct(cRSMatrix0);
      cCSMatrix0.copy();
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix1.apply(matrixOperation0);
      int int1 = (-4291);
      // Undeclared exception!
      try { 
        cCSMatrix2.transformColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(39);
      cCSMatrix0.nonZeroAt(19, 5);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      cCSMatrix0.minInColumn(19);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 19;
      doubleArray0[0] = (double) 5;
      cCSMatrix0.transpose();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 39;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)19, 19.0, (double)19, (-3448.919752344), 19.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(48.0, 536.7159025236, (double)19, 100.0, 48.0).when(vectorAccumulator0).accumulate();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.updateColumn(5, vectorFunction0);
      cCSMatrix0.maxInColumn(5);
      cCSMatrix0.iteratorOfColumn(5);
      cCSMatrix0.getColumn(14);
      cCSMatrix0.swapRows((-12), 5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Matrix matrix0 = cCSMatrix0.power(2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 0);
      byte[] byteArray0 = ((CCSMatrix) columnMajorSparseMatrix0).toBinary();
      matrix0.insert((Matrix) cCSMatrix0, 2, 0);
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.multiplyByItsTranspose();
      int int2 = 17;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }
}
