/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:18:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "";
      Regexp regexp1 = Parser.parse("", 32);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 0;
      regexp0.runes = intArray0;
      regexpArray0[3] = regexp3;
      regexp3.reinit();
      regexp2.subs = regexpArray0;
      Regexp regexp4 = Parser.parse("", 1083);
      regexp4.max = 32;
      regexpArray0[4] = regexp4;
      regexp3.min = 57;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 32, 1083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("(?-s:.)", 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("+Rr[z)yH1I?lpKwEe", 404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".", 45);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$,", 1528);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("P(?P<", (-2080));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("`(", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): ``(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("(]", (-2080));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("P(?P<", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 309;
      Parser.parse("9%~L.", 309);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 309, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      int int0 = 0;
      try { 
        Parser.parse("&f<{jJ+U:(", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `&f<{jJ+U:(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("?szzy@k$", 1109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Parser.parse("{*", (-129675063));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Parser.parse("(", 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{:", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("", 0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("}g*@:<mbJc", 952);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("}g*@:<mbJc", (-1659));
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("", (-117));
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("", 0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("er8U!8.", (-117));
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp8;
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      Regexp regexp9 = new Regexp(regexp_Op2);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 8032;
      Parser.parse("C", 8032);
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = (-15);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{3dH1%A3A\"+??";
      Parser parser0 = new Parser("{3dH1%A3A\"+??", 1387);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("{3dH1%A3A\"+??", 272);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "com.google.re2j.Regexp$Op";
      regexpArray0[0] = regexp1;
      String string1 = "";
      Regexp regexp2 = Parser.parse("", 272);
      regexp0.equals(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp1.subs = regexpArray0;
      regexp0.equals(regexp3);
      int int0 = 1617;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1617, 272);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!^{2 ", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse("^(?t", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?t`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = new Parser("Lt", (-2281));
      Parser.parse("Lt", (-2281));
      Parser.parse("c0m7?'^qxYn4hEvR9;k", 0);
      Parser.parse("C T+Q`Xh%Q>", 0);
      Parser.parse("Lt", (-2281));
      Regexp regexp0 = Parser.parse("CYWsx'n$VOj7;QD!w", 1910);
      Parser.parse("Lt", 0);
      Regexp regexp1 = Parser.parse("Lt", 5398);
      Parser.parse("C T+Q`Xh%Q>", 2576);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1910, 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "E{[IZu!VE";
      int int0 = 0;
      try { 
        Parser.parse("E{[IZu!VE", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[IZu!VE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "[:";
      int int0 = 36;
      try { 
        Parser.parse("[:", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "[:-(]\"7zE\\dj|[";
      int int0 = 65;
      try { 
        Parser.parse("[:-(]\"7zEdj|[", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      try { 
        Parser.parse("bF@}-$&(Uus.rs", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `bF@}-$&(Uus.rs`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 4);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "ko(_WZV|q";
      int int0 = (-1325);
      Parser parser0 = new Parser("ko(_WZV|q", (-1325));
      try { 
        Parser.parse("ko(_WZV|q", (-4015));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `ko(_WZV|q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-3736);
      try { 
        Parser.parse("|+fd=V!aQ~+(WS3@nO", (-3736));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("W|", 2261);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-|C4", 65380);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A|", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|c", 2984);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Parser.parse("[", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Parser.parse("-]", 0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Parser.parse("-]", 1968);
      Parser.parse("E{[IZu!VE", 278);
      try { 
        Parser.parse("E{[IZu!VE", 993);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[IZu!VE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 9665;
      String string0 = "\\Prl:]";
      Parser.parse("Prl:]", 9665);
      String string1 = null;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\Pr`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 93;
      Parser.parse("p", 93);
      String string0 = "|!\"q|oWI^G%!,a~Op";
      Parser.parse(string0, int0);
      int int1 = 2400;
      Parser parser0 = new Parser(string0, int1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser parser0 = new Parser("com.google.re2j.Parser", (-1784));
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser", 0);
      Regexp regexp1 = Parser.parse("[:xdigit:]", 348);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "ko(_WZV|q";
      try { 
        Parser.parse("ko(_WZV|q", (-4008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `ko(_WZV|q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "com.google.re2j.Parser";
      int int0 = 0;
      String string1 = "\\PE";
      Parser.parse("PE", 0);
      int int1 = (-1207);
      String string2 = "#mVhhb_TG/Qe `6e";
      int int2 = 1373;
      Parser.parse(string2, int2);
      String string3 = "m{_AS!";
      Parser.parse(string3, int0);
      Parser.parse(string3, int1);
      int int3 = 1579;
      Parser.parse(string0, int2);
      String string4 = "Syloti_Nagri";
      Parser.parse(string4, int1);
      int int4 = 0;
      Regexp[] regexpArray0 = null;
      int int5 = (-476);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "OZuytScCAQxxUi9n4";
      int int0 = 105;
      String string1 = "\\PE";
      Parser.parse("PE", 105);
      int int1 = (-1207);
      String string2 = "#mVhhb_TG/Qe `6e";
      int int2 = 1373;
      Parser.parse(string2, int2);
      String string3 = "m{_AS!";
      Parser.parse(string3, int0);
      Parser.parse(string3, int1);
      int int3 = 1579;
      Parser.parse(string0, int2);
      String string4 = "Syloti_Nagri";
      Parser.parse(string4, int1);
      int int4 = 0;
      Regexp[] regexpArray0 = null;
      int int5 = (-476);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`n,FqG`\b$Qir f@'", (-2320));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      int int0 = 256;
      Regexp regexp0 = Parser.parse("|!Iw", 256);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("pPpu!VE", 256);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp3);
      regexpArray0[5] = regexp6;
      String string0 = "::";
      Regexp regexp7 = Parser.parse(string0, int0);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp2);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp8);
      regexpArray0[8] = regexp9;
      int int1 = 123;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "))";
      try { 
        Parser.parse("))", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Parser.subarray(regexpArray0, 93, 93);
      Regexp regexp0 = Parser.parse("nCll/W|q JxQ{8\"`", 93);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("nCll/W|q JxQ{8\"`", 93);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("nCll/W|q JxQ{8\"`", 93);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp2);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2342, 2846);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|!\"q|oWI^G%!,a~Op", 105);
      Parser.parse("Pc", 105);
      Parser parser0 = new Parser("|!\"q|oWI^G%!,a~Op", 2400);
      Regexp regexp1 = Parser.parse("Pc", 105);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("BP|", (-10783));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 120686;
      Parser.parse("pE", 120686);
      Parser parser0 = new Parser("pE", 120686);
      Parser.parse("pE", 9665);
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP:C+sk", 1744);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", (-511));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 404;
      try { 
        Parser.parse("P&\u0001JMWeDfkf[l+!I", 404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[l+!I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005py&JJK", (-1112));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Variation_Selector", 9665);
      Regexp regexp1 = Parser.parse("PPpOL5}1uP", 9665);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", (-4671));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 48;
      Parser parser0 = new Parser(">k3@1`@", 9);
      int int1 = 2074;
      Regexp regexp0 = Parser.parse("\t", 2074);
      Regexp regexp1 = Parser.parse("\t", 48);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 9, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "{3dH1%A3A\"+??";
      int int0 = 1387;
      Parser parser0 = new Parser("{3dH1%A3A\"+??", 1387);
      try { 
        Parser.parse("{3dH1%A3A\"+??", 3785);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+??`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$DK&q$_7fP/NV!oV+{", (-4015));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-1426);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("C.dS5f[", 4038);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("C.dS5f[", 4038);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("invalid nested repetition operator", 4038);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse("C.dS5f[", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "Rk[@RS-y";
      try { 
        Parser.parse("Rk[@RS-y", (-811));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[@RS-y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("qUlW|0cR qBL", 8032);
      Regexp regexp1 = Parser.parse("A", 8032);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int0 = 3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8032, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Parser.parse(";_]KpI]X(D`+u6('E", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `;_]KpI]X(D`+u6('E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser.parse("X|R", 120328);
      try { 
        Parser.parse("c:V3~LxFRH?IL |)Pr", 3713);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 8032;
      Parser.parse("'CddFa", 8032);
      String string0 = "\\A";
      Parser.parse("D", 8032);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 8032);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser.parse("qUlW|0cR qBL", 8032);
      Regexp regexp0 = Parser.parse("qUlW|0cR qBL", 8032);
      Regexp regexp1 = Parser.parse("xZp<Q|", 8032);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("", 8032);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser.parse("$IvykI1H&D9x\nrn", 85);
      Parser parser0 = new Parser("$IvykI1H&D9x\nrn", 52);
      Parser.parse("$IvykI1H&D9x\nrn", 52);
      Parser.parse("$IvykI1H&D9x\nrn", 85);
      Parser.parse("$IvykI1H&D9x\nrn", 85);
      Parser.parse("`R", 2);
      Parser.parse("$IvykI1H&D9x\nrn", 85);
      Parser.parse("Lydian", 128549);
      Parser.parse("$IvykI1H&D9x\nrn", (-2679));
      Parser.parse("$IvykI1H&D9x\nrn", 2189);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 85, 55);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 1114101);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 16;
      Parser.parse("\t", 16);
      Parser.parse("F[m],2]5a9kiVu ", 16);
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      Parser.parse("F[m],2]5a9kiVu ", 16);
      Regexp[] regexpArray0 = null;
      int int1 = 3788;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 16, 3788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(y.)", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser.parse("t", 16);
      Parser.parse("zF[m],2]5akiVu ", 16);
      Regexp regexp0 = Parser.parse("zF[m],2]5akiVu ", (-1872));
      Regexp regexp1 = Parser.parse("x(HMmC`)z}9gtqAY8+", (-1872));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser.parse("zF[m],2]5akiVu ", (-1719));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("F[m],2]5akiVu ", 3541);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3541, 3541);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 1348, 3541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 37);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_t", 116);
      Parser.parse("_t", 50);
      Regexp regexp1 = Parser.parse("_t", 12350);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("xO,%J$S", 2064);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 2549);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 2569);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPpOL5}1uP", 9684);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser.parse("P", 50);
      Regexp regexp0 = Parser.parse("Rk[`RS-y", 50);
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 80);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse(". `k\r2V-V{K+rp", 16);
      Regexp regexp1 = Parser.parse(". `k\r2V-V{K+rp", 16);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", (-623));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000`", 113);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000`", 1336);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "(?<";
      try { 
        Parser.parse("(?<", 1528);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser.parse("F1A?nu", (-3807));
      Parser parser0 = new Parser("yeqT1q", (-3807));
      Parser.parse("yeqT1q", 2953);
      try { 
        Parser.parse("(?", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1528;
      String string0 = "(?<";
      try { 
        Parser.parse("(?<", 1528);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("com.google.re2j.PatternSyntaxException", (-514));
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = Parser.parse("=Q pu*;obW<okZ:@ZA", (-514));
      regexp1.reinit();
      regexpArray0[0] = regexp1;
      int[] intArray0 = new int[3];
      intArray0[0] = (-514);
      intArray0[1] = 32;
      regexp0.toString();
      regexp0.equals("&ny7j8cF!fKqC");
      intArray0[2] = 1012;
      regexp1.runes = intArray0;
      regexp1.reinit();
      regexp1.subs = regexpArray0;
      regexp0.name = "H}AXDHH[^%8YCeL7CK";
      regexpArray0[1] = regexp0;
      Parser.subarray(regexpArray0, (-514), (-514));
      try { 
        Parser.parse("H}AXDHH[^%8YCeL7CK", 1012);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^%8YCeL7CK`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Parser.parse("(?:", (-2080));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Parser.parse("t(?-:.)", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("BaTNBh:o?u|Qv7E", (-2080));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      String string0 = "\\5";
      int int0 = 8125;
      Regexp regexp0 = Parser.parse("\u0005", 8125);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int1 = 65;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = new Parser("g5S8[#_[kmAB}nN}S", 7578);
      Regexp regexp0 = Parser.parse("\u0000", (-100));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2MBbiAV=S\u0002vH|Gxc#", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("\fEx~j0Sm", 100);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Parser.subarray(regexpArray0, 100, 100);
      Parser parser0 = new Parser("s/lOy0,dV:b;4B", 1497);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser.parse("{80qI", (-996));
      try { 
        Parser.parse("`6l#.4v)eOz", (-1727));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser.parse("{80qI", (-1010));
      Regexp regexp0 = Parser.parse("{80qI", (-1727));
      Parser parser0 = new Parser("Pi", (-1727));
      Parser.parse("{80qI", (-1010));
      Regexp regexp1 = Parser.parse("`6#.v)eOz", (-1010));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[0] = regexp2;
      Regexp regexp3 = Parser.parse("Pi", (-1010));
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Parser.subarray(regexpArray0, (-1010), (-1010));
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1010), (-1010));
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser parser0 = new Parser("(?(?P,", 46);
      Parser.parse("\"nU+9%N|'73!k'D>", 46);
      Parser.parse("%$D{j", 46);
      try { 
        Parser.parse("QW$\"&7y=[_\u0005!j(R", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[_\u0005!j(R`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("x~|Xgt.;D", 2);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("x~|Xgt.;D", 201);
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("x~|Xgt.;D", 201);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("ha", 2);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = Parser.parse("x~|Xgt.;D", 2);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2, 201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x~|Xg.;D", 121);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2;`Xr@te6Q&I:", 1393);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("2;`Xr@te6Q&I:", 229);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Parser.parse("[-(]\"7zEdj|[", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      int int0 = 1553;
      try { 
        Parser.parse("[-(]\"7zEdj|[", 1553);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("fczi`X\u0004$  T_8", (-155));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = new Parser("&=42vl|-4>TmU", (-4007));
      Regexp regexp0 = Parser.parse("&=42vl|-4>TmU", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("7bX", 94);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("@ud,*5\"8", 94);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("@ud,*5\"8", 64);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("@ud,*5\"8", 64);
      regexp2.name = "stack underflow";
      regexpArray0[4] = regexp5;
      regexp4.flags = 3084;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexp5.reinit();
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp4);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op0);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Parser.parse("[-(]\"7zEdj|[", (-2595));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", 124);
      Parser parser0 = new Parser("invalid repeat count", 124);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 73, 963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Parser.parse("(?-s", (-3223));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("W,1z>p#", (-10783));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pLI-v|", 1005);
      Regexp regexp1 = Parser.parse("pLI-v|", 1005);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = (-3186);
      Regexp regexp2 = Parser.parse("b9|QI~(PYPQoc;", (-3186));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("b9|QI~(PYPQoc;", (-3186));
      regexpArray0[3] = regexp4;
      int int1 = 301;
      Regexp regexp5 = Parser.parse("l9/n;f\u0007hZ#{", 301);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp3);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp7;
      String string0 = "4[\"4J";
      // Undeclared exception!
      try { 
        regexp0.equals(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp2;
      regexp1.op = regexp_Op0;
      int int0 = (-540);
      Regexp regexp3 = Parser.parse("\u0003bV", (-540));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      int int1 = (-5320);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser.parse("(?-m:$)", 452);
      Parser parser0 = new Parser("Hiragana", 452);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("[::^graph:]", 452);
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 673, 452);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 3545;
      try { 
        Parser.parse("[e[RJ3e-", 3545);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[e[RJ3e-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("m0*|mZQ62", 872);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("m0*|mZQ62", 872);
      assertTrue(regexp1.equals((Object)regexp0));
  }
}
