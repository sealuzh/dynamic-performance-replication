/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 09:47:24 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<Integer, Map<String, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<Integer, Map<String, String>>>();
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      doubleKeyMap0.put((Map<String, String>) null, (Map<String, String>) null, hashMap0);
      Map<Map<String, String>, HashMap<Integer, Map<String, String>>> map0 = doubleKeyMap0.remove((Map<String, String>) null);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, Object>();
      Integer integer0 = new Integer((-1455));
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      String string0 = doubleKeyMap0.remove((Integer) null, (Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<Integer, Map<String, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<Integer, Map<String, String>>>();
      Map<Map<String, String>, HashMap<Integer, Map<String, String>>> map0 = doubleKeyMap0.remove((Map<String, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<String, Map<String, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, HashMap<String, Map<String, String>>>();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<String, HashMap<Integer, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, HashMap<Object, Object>>(class0);
      HashMap<Object, Object> hashMap1 = doubleKeyMap0.put("e/xi>E^3cC'F9", hashMap0, (HashMap<Object, Object>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      HashMap<String, Map<String, String>> hashMap1 = new HashMap<String, Map<String, String>>();
      HashMap<HashMap<String, Map<String, String>>, Map<Object, String>> hashMap2 = new HashMap<HashMap<String, Map<String, String>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<String, Map<String, String>>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<String, String>>, Object, String>(hashMap2);
      String string0 = doubleKeyMap1.put(hashMap1, (Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Integer integer0 = new Integer((-1970));
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get(integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Integer>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap1.get((Object) doubleKeyMap0, (Map<String, String>) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>(2155, 1164.1F);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      Object object0 = new Object();
      Map<Object, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer(2338);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, String>, HashMap<Map<String, String>, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, HashMap<Map<String, String>, Object>>((Map<String, Map<HashMap<Object, String>, HashMap<Map<String, String>, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Map<Object, Object> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Integer integer0 = new Integer((-1));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("%E~l+N+9SqKA?Y", "");
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.remove(integer0, "{[`M|kPiy&");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Integer, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, String>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap0.put(hashMap1, hashMap2);
      String string0 = doubleKeyMap0.put(hashMap1, (Integer) null, "z,GaD7Ja/&L PQFe");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap0.get(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Map<String, Object>> hashMap1 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap1);
      doubleKeyMap0.put((String) null, "", (Object) hashMap0);
      doubleKeyMap0.get((String) null, "#L(,i;S");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Integer integer0 = new Integer((-1));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.remove(integer0, "|[^MpkPiy&");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      DoubleKeyMap<Integer, Object, HashMap<Map<String, String>, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Map<String, String>, Integer>>();
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Integer integer0 = new Integer((-1845));
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) map0, integer0, (Object) doubleKeyMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
