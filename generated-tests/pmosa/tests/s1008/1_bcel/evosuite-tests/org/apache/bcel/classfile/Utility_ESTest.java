/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:38:13 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.RuntimeInvisibleAnnotations;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2E", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2E", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("<L~tIugH&hf&a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VoXIqRC#xik_BL");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.accessToString(34, false);
      assertEquals("private synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup(" fields:\n", 2088, true, ']');
      Utility.accessToString(2088, false);
      Utility.accessToString(2088, true);
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
      
      String string1 = Utility.accessToString(161, true);
      assertEquals("public transient", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = Utility.fillup("J", (-2361), true, 'v');
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.getSignature(")");
      try { 
        Utility.methodSignatureArgumentTypes("putStatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putStatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.getSignature("if_icmpne");
      assertEquals("Lif_icmpne;", string0);
      
      String string1 = Utility.compactClassName("vZ\"u2UE[}\":Redy^", "vZ\"u2UE[}\":Redy^", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = Constants.ATTR_SOURCE_FILE;
      Utility.isSet(858, (byte)0);
      try { 
        Utility.typeOfSignature("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.accessToString(900, false);
      Utility.isSet((-4260), (-4260));
      Utility.getSignature("protected transient native interface");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "wX";
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.classOrInterface(56);
      // Undeclared exception!
      try { 
        Utility.signatureToString("wX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A$8a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A$8a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JI");
      assertEquals((byte)11, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
      
      String string0 = ">G{d[^b=EJsuK`Hc\"";
      try { 
        Utility.methodSignatureReturnType(">G{d[^b=EJsuK`Hc\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>G{d[^b=EJsuK`Hc\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "QxMfp{z`OIDyCa6gl>";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("QxMfp{z`OIDyCa6gl>", "QxMfp{z`OIDyCa6gl>", "QxMfp{z`OIDyCa6gl>", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QxMfp{z`OIDyCa6gl>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.fillup("BNzR/u&MH~UdD?:L", 1227, true, '7');
      Utility.signatureToString("BNzR/u&MH~UdD?:L", false);
      Utility.convertString(string0);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.methodSignatureArgumentTypes("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-2546);
      int int1 = 20;
      Utility.format((-2546), 20, true, 'N');
      try { 
        Utility.decode("-2546NNNNNNNNNNNNNNN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-100);
      Utility.toHexString(byteArray0);
      Utility.isSet(201, (byte)59);
      Utility.searchOpcode("*{Ak?F");
      Utility.classOrInterface(0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 59
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.searchOpcode("'");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-1222);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1222), (byte) (-40));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-622), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 34);
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-106);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$bd$96";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0);
      Utility.convertString("P$axMOBK?-+6I]rd/j");
      Utility.compactClassName("java.lang.Object@10982172, java.lang.Object@712cc43e, java.lang.Object@49c1d338, java.lang.Object@61c44580, java.lang.Object@30067b7b, java.lang.Object@271c5471", "c", false);
      Utility.compactClassName("java.lang.Object@10982172, java.lang.Object@712cc43e, java.lang.Object@49c1d338, java.lang.Object@61c44580, java.lang.Object@30067b7b, java.lang.Object@271c5471");
      try { 
        Utility.typeOfSignature("java.lang.Object@10982172, java.lang.Object@712cc43e, java.lang.Object@49c1d338, java.lang.Object@61c44580, java.lang.Object@30067b7b, java.lang.Object@271c5471");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@10982172, java.lang.Object@712cc43e, java.lang.Object@49c1d338, java.lang.Object@61c44580, java.lang.Object@30067b7b, java.lang.Object@271c5471
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char char0 = '}';
      Utility.fillup("java.lang.", 41, false, '}');
      Utility.compactClassName("java.lang.");
      String string0 = "ax";
      try { 
        MockURI.URI("invokedynamic", "ax", "oD>", "ax");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: invokedynamic://axoD%3E#ax
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.replace("(o^p~q3g]", "(o^p~q3g]", "(o^p~q3g]");
      try { 
        Utility.methodSignatureArgumentTypes("4E[7s2d26RFO~IuG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4E[7s2d26RFO~IuG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pattern.quote("BNzR/u&MH~UdD?:L");
      Utility.signatureToString("BNzR/u&MH~UdD?:L", false);
      Utility.convertString("QBNzR/u&MH~UdD?:LE");
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-63);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2f 16 0d 29 c1", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = Utility.searchOpcode("'");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1222), (byte) (-40));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)62, (byte) (-40));
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 184, false);
      Utility.compactClassName("0:    ifgt\t\t#-16985\n3:    f2l\n4:    <illegal opcode>\n5:    if_acmpeq\t\t#27645\n", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "0:    ifgt\t\t#-16985\n3:    f2l\n4:    <illegal opcode>\n5:    if_acmpeq\t\t#27645\n";
      Utility.methodTypeToSignature("0:    ifgt\t\t#-16985\n3:    f2l\n4:    <illegal opcode>\n5:    if_acmpeq\t\t#27645\n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 185, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.isSet((-1), 123);
      Utility.convertString("'.Z8'hn78uM5Yh#N5'@");
      Utility.clearBit((-1119), (-1));
      String string0 = "invokevirtual";
      MockFile mockFile0 = new MockFile("invokevirtual", "byte");
      String string1 = "Illegally nested brackets:";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "Illegally nested brackets:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Illegally nested brackets:
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.clearBit((-4522), (-4522));
      // Undeclared exception!
      try { 
        Utility.signatureToString("8-:icRRg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8-:icRRg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.getSignature("Warning: Padding byte != 0 in ");
      assertEquals("LWarning:;", string0);
      
      Utility.getSignature("LWarning:;");
      String string1 = Utility.signatureToString("LLWarning:;;", false);
      assertEquals("LWarning:", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L5Af}x $.N@WN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L5Af}x $.N@WN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "(\\o^p~q3g]";
      try { 
        Utility.methodSignatureArgumentTypes("(o^p~q3g]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o^p~q3g]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(o^p~q3g]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (o^p~q3g]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(o^p~q3g]", (String) null, "BD&E%mIV.Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o^p~q3g]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.convertString("\"*&hU4S&LX]!");
      assertEquals("\\\"*&hU4S&LX]!", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0f 0f", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Iv>gBRAw),-F?00/");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.getSignature("Warning: Padding byte != 0 in ");
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 0, false);
      String string0 = Utility.compactClassName("LWarning:;", true);
      assertEquals("LWarning:;", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "LWarning:;";
      stringArray0[2] = "|,mE(cvL=8o{'1";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string1 = Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
      assertEquals("(L;LLWarning:;;L|,mE(cvL=8o{'1;L;L;)LWarning:;", string1);
      
      String string2 = Utility.accessToString(753);
      assertEquals("public final synchronized volatile transient interface", string2);
      
      String string3 = Utility.fillup("float", 85, false, 'A');
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfloat", string3);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte) (-61);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-87);
      byteArray1[7] = (byte) (-62);
      byteArray1[8] = (byte)40;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("f}V3eax Y}ani-).V", "<clinit>", "f}V3eax Y}ani-).V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f}V3eax Y}ani-).V";
      stringArray0[1] = "BNzR/u&MH~UdD?:L";
      stringArray0[2] = "<clinit>";
      stringArray0[3] = "f}V3eax Y}ani-).V";
      stringArray0[4] = "<clinit>";
      stringArray0[5] = "<clinit>";
      stringArray0[6] = "[]";
      stringArray0[7] = "[]";
      stringArray0[8] = "f}V3eax Y}ani-).V";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.searchOpcode(".\r");
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)62;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      Utility.getSignature("\t\t<");
      try { 
        Utility.methodSignatureArgumentTypes("L<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("arraylength", "arraylength", "f}V3eax Y}ani-).V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<clinit>";
      stringArray0[1] = "<clinit>";
      stringArray0[2] = "arraylength";
      stringArray0[3] = "f}V3eax Y}ani-).V";
      stringArray0[4] = "f}V3eax Y}ani-).V";
      stringArray0[5] = "arraylength";
      stringArray0[6] = "f}V3eax Y}ani-).V";
      stringArray0[7] = "f}V3eax Y}ani-).V";
      stringArray0[8] = "<clinit>";
      Utility.methodTypeToSignature("arraylength", stringArray0);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.accessToString(753);
      assertEquals("public final synchronized volatile transient interface", string0);
      
      String string1 = Utility.fillup("5J|9", 117, true, 'A');
      assertEquals("5J|9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0~.$27<W4");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "float";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-86);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.classOrInterface((-845));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "BNzR/u&MH~UdD?:L";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)0);
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), (int) (byte) (-8), true);
      Utility.compactClassName("(o^p~q3g]", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:    <illegal opcode>\n1:    <illegal opcode>\n";
      stringArray0[1] = "";
      stringArray0[2] = "(o^p~q3g]";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "(o^p~q3g]";
      stringArray0[6] = "(o^p~q3g]";
      Utility.methodTypeToSignature("0:    <illegal opcode>\n1:    <illegal opcode>\n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 185, 2482);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-334), 1024);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool1.copy();
      constantPool3.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool3);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pTl#?~\"`Q!");
      Utility.searchOpcode("'");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1222), (byte) (-40));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D-e<");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "D-e<");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      constantPool0.copy();
      try { 
        Utility.typeOfSignature("0`mwf3bNa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0`mwf3bNa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "BNzR/u&MH~UdD?:L";
      Utility.signatureToString("BNzR/u&MH~UdD?:L", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)107;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-116));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)107, (int) (byte) (-28), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.getSignature("Warning: Padding byte != 0 iL ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 iL ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 iL '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-89);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wide";
      stringArray0[1] = "bL2*}!>OOg";
      stringArray0[2] = "bL2*}!>OOg";
      stringArray0[3] = "byte";
      stringArray0[4] = "bL2*}!>OOg";
      stringArray0[5] = "bL2*}!>OOg";
      stringArray0[6] = "bL2*}!>OOg";
      stringArray0[7] = "bL2*}!>OOg";
      String string0 = Utility.methodTypeToSignature("bL2*}!>OOg", stringArray0);
      assertEquals("(Lwide;LbL2*}!>OOg;LbL2*}!>OOg;BLbL2*}!>OOg;LbL2*}!>OOg;LbL2*}!>OOg;LbL2*}!>OOg;)LbL2*}!>OOg;", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("9d bd a7 00 00 00 00 00", string1);
      
      int int0 = Utility.setBit((byte)36, (byte) (-99));
      assertEquals(536870948, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.searchOpcode("'");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 126, (int) (byte) (-40), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-99);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "FS\\J*If";
      Utility.typeOfSignature("FSJ*If");
      String string1 = "TIo tEBqZ(K5uqsyOn";
      MockPrintStream mockPrintStream0 = new MockPrintStream("TIo tEBqZ(K5uqsyOn");
      String string2 = "void";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, "void");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // void
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-334), 1024);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H|Li,X6Y_e(<l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H|Li,X6Y_e(<l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("f}V3eax Y}ani-).V", "<clinit>", "f}V3eax Y}ani-).V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f}V3eax Y}ani-).V";
      String string1 = Utility.getSignature("<clinit>");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2l", string2);
      
      String string3 = Utility.compactClassName("L<clinit>;", false);
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-116);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DH+[x~4FS9)P";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("DH+[x~4FS9)P", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[x~4FS9)P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "pTl#\\?~\"`Q!";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pTl#?~\"`Q!");
      Utility.searchOpcode("'");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1222), (byte) (-40));
      String string1 = "HJ@mwK[?k";
      // Undeclared exception!
      try { 
        Utility.getSignature("HJ@mwK[?k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[?k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P|/;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P|/;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-28);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 184, false);
      Utility.compactClassName("0:    ifgt\t\t#-16985\n3:    if_icmple\t\t#-7165\n6:    dmul\n7:    <illegal opcode>\n", true);
      try { 
        Utility.typeOfMethodSignature("0:    ifgt\t\t#-16985\n3:    if_icmple\t\t#-7165\n6:    dmul\n7:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ifgt\t\t#-16985
         // 3:    if_icmple\t\t#-7165
         // 6:    dmul
         // 7:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[zeGb", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zeGb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)55;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.signatureToString("[JI8", true);
      assertEquals("long[]", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("f}V3eax Y}ani-).V", "<clinit>", "f}V3eax Y}ani-).V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f}V3eax Y}ani-).V";
      Utility.getSignature("<clinit>");
      Utility.getSignature("<clinit>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<clinit>;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("L<init>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.getSignature("<illegal type>");
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      byte[] byteArray1 = Utility.decode("$A", false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      String string1 = Utility.getSignature("$A");
      assertEquals("L$A;", string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      try { 
        Utility.decode("~tV#g$`", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.signatureToString("BNzR/u&MH~UdD?:L", false);
      assertEquals("byte", string0);
      
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("BNzR/u&MH~UdD?:L");
      assertEquals((byte)8, byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "BNzR/u&MH~UdD?:L";
      objectArray0[1] = (Object) "BNzR/u&MH~UdD?:L";
      objectArray0[2] = (Object) "byte";
      objectArray0[3] = (Object) "BNzR/u&MH~UdD?:L";
      objectArray0[4] = (Object) "byte";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"BNzR/u&MH~UdD?:L\", \"BNzR/u&MH~UdD?:L\", \"byte\", \"BNzR/u&MH~UdD?:L\", \"byte\"}", string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("f}V3eax Y}ani-).V", "<clinit>", "f}V3eax Y}ani-).V");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f}V3eax Y}ani-).V";
      Utility.getSignature("<clinit>");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 126, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "7:;5,)Rw:G53t";
      try { 
        Utility.typeOfSignature("7:;5,)Rw:G53t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7:;5,)Rw:G53t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.compactClassName("(o^p~q3g]");
      try { 
        Utility.typeOfSignature("-}.,I=;'@{{M&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -}.,I=;'@{{M&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2l", string0);
      
      String string1 = Utility.compactClassName(">rXIN{%WX9$5$Vu,", true);
      assertEquals(">rXIN{%WX9$5$Vu,", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(49, 49, false, 't');
      Utility.fillup("ttttttttttttttttttttttttttttttttttttttttttttttt49", (-32768), false, 'y');
      Utility.methodTypeToSignature("ttttttttttttttttttttttttttttttttttttttttttttttt49", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AK\b.EcNpQd'bQ6TM^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AK\b.EcNpQd'bQ6TM^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      try { 
        Utility.typeOfSignature("#56(?f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #56(?f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",;>G@J$NC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,;>G@J$NC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.compactClassName("invokestatic");
      assertEquals("invokestatic", string0);
      
      byte byte0 = ObjectStreamConstants.TC_NULL;
      byte byte1 = Utility.typeOfSignature("C%<f2&I().jq]m}");
      assertEquals((byte)5, byte1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifge\t\t#-25524", string0);
      
      String string1 = Utility.compactClassName("[eS\"\"zM`T4)", false);
      assertEquals("[eS\"\"zM`T4)", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)80;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_0", string0);
      
      String string1 = Utility.compactClassName("xPym[MJ", true);
      assertEquals("xPym[MJ", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Exceptions: ";
      try { 
        Utility.typeOfSignature("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        Utility.typeOfSignature("3M[eWei1dts*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3M[eWei1dts*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lsub", string0);
      
      String string1 = Utility.compactClassName("ifnull", false);
      assertEquals("ifnull", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.typeOfSignature("L8-:icRRg;V");
      String string0 = "lsub";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "lsub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OZ2diPsi^r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OZ2diPsi^r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dup_x2", string0);
      
      int int0 = Utility.setBit((byte)109, 1610);
      assertEquals(1133, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[1] = (byte)20;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("ishr", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.compactClassName("aaload", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        Utility.typeOfSignature("\"v3@%m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"v3@%m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-19), (-19));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)113;
      byte byte0 = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)7;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-206), 165, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_0
         // 1:    lconst_1
         // 2:    lrem
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.compactClassName("invokestatic");
      byte byte0 = ObjectStreamConstants.TC_NULL;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("irem", string0);
      
      String string1 = Utility.compactClassName("return", false);
      assertEquals("return", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.typeOfSignature("Sh!&4YK<FxB*M$>lZE");
      String string0 = Utility.signatureToString("Sh!&4YK<FxB*M$>lZE");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = Utility.signatureToString("Zx(>>dky:%#{nqnPXjC");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UoOitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UoOitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[LB#");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_2", string0);
      
      String string1 = Utility.compactClassName("org.apache.commons.io.IOCase", true);
      assertEquals("org.apache.commons.io.IOCase", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "GJrnoKqu>z}1VO(v";
      try { 
        Utility.typeOfSignature("GJrnoKqu>z}1VO(v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GJrnoKqu>z}1VO(v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<Unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R`,+<|Gwe)A09K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R`,+<|Gwe)A09K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Iv>gBRAw),-F?00/");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P|/;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P|/;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2ko&S:KoDRt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2ko&S:KoDRt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "? extends ";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6sr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6sr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("caload", string0);
      
      String string1 = Utility.compactClassName("9By", true);
      assertEquals("9By", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ret\t\t%67", string0);
      
      String string1 = Utility.compactClassName("", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = Constants.ATTR_DEPRECATED;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("/gz,-&[6m3c.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /gz,-&[6m3c.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1^1Oup>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1^1Oup>%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&#<]7z/gs;=CSYS9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &#<]7z/gs;=CSYS9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QVoN0M@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QVoN0M@`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z(>dy:%#{nqnPXjC");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.setBit(61, 61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)90;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-98), 63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    drem
         // 1:    isub
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T\"4EpGpSSWfEoWv-h*");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("T\"4EpGpSSWfEoWv-h*", true);
      assertEquals("T\"4EpGpSSWfEoWv-h*", string0);
      
      boolean boolean0 = Utility.isSet((byte)14, 29);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YZ(>dy:%#{nqnvXtC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YZ(>dy:%#{nqnvXtC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("BKz)O&", true);
      assertEquals("BKz)O&", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("pW", true);
      assertEquals("pW", string0);
      
      String string1 = Utility.fillup("+y*SvHo}CB/\"", (byte)19, true, ' ');
      assertEquals("+y*SvHo}CB/\"       ", string1);
      
      int int0 = Utility.clearBit(738, (byte)19);
      assertEquals(738, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QVoN0M@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QVoN0M@`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8nOp(75");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8nOp(75
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Iv>gBRAw),-F?00/");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+~!Xf;m0h>R,$?'C4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~!Xf;m0h>R,$?'C4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)66;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("J<+uHU", "aload_1", true);
      assertEquals("J<+uHU", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte) (-121));
      assertEquals("0:    aload_1\n1:    i2d\n2:    lstore_3\n3:    nop\n4:    lreturn\n5:    aload_0\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".%7!DfPYOj}L`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .%7!DfPYOj}L`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "P|/;";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = ";u_92LJ[-r}b5";
      try { 
        Utility.typeOfSignature(";u_92LJ[-r}b5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;u_92LJ[-r}b5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = Utility.typeOfSignature("Dont call getValueBoolean() on a non BOOLEAN ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = Utility.searchOpcode("newarray");
      assertEquals((short)188, short0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1191, 41);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodHandle0.clone();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-5), 1293, false);
      assertEquals("0:    dreturn\n", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$af", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Hc]8Sc|89EWy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hc]8Sc|89EWy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mnc:&J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mnc:&J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E`Az");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E`Az'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.signatureToString("Invalid class name ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("return", true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.decode("l`$D1PaeFI(A$n;rk", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("m,-R%[f$sWU0$6+>?", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.signatureToString("Sh!&4YK<FxB*M$>lZE");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byte byte0 = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 184, false);
      Utility.compactClassName("0:    ifgt\t\t#-16985\n3:    f2l\n4:    <illegal opcode>\n5:    arraylength\n6:    dmul\n7:    <illegal opcode>\n", true);
      String string0 = "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("0:    ifgt\t\t#-16985\n3:    f2l\n4:    <illegal opcode>\n5:    arraylength\n6:    dmul\n7:    <illegal opcode>\n", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName(")\"xatb_1#oa!j?6=", false);
      assertEquals(")\"xatb_1#oa!j?6=", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("YZ(>dy:%#{nqnvXtC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YZ(>dy:%#{nqnvXtC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byte");
      String string0 = Utility.replace("C/UCO[)/D1(<E|", "C/UCO[)/D1(<E|", "C/UCO[)/D1(<E|");
      assertEquals("C/UCO[)/D1(<E|", string0);
      
      String string1 = Utility.signatureToString("C/UCO[)/D1(<E|");
      String string2 = Utility.compactClassName("char");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.signatureToString("SyntheticRepository could not load ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)110;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1313), (int) (byte)62, true);
      assertEquals("0:    <illegal opcode>\n1:    aload_2\n2:    <illegal opcode>\n3:    dup2_x1\n4:    <illegal opcode>\n5:    dcmpg\n6:    istore_3\n7:    fdiv\n", string0);
      
      String string1 = Utility.accessToString((int) (byte)110, true);
      assertEquals("private protected static volatile", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X6f@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X6f@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O,Z2diQ-i^r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O,Z2diQ-i^r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K,&%E>L)'6. u@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K,&%E>L)'6. u@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "Ra";
      try { 
        Utility.typeOfSignature("Ra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ra
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(77, 147);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("=");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantFloat constantFloat0 = new ConstantFloat((-4.4554F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("WC kO+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WC kO+G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "SBt_dRq6";
      Utility.signatureToString("SBt_dRq6");
      Utility.isJavaIdentifierPart('4');
      Utility.compactClassName("SBt_dRq6");
      Utility.compactClassName("SBt_dRq6", "short", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byte byte0 = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.getSignature("N/pA(xSq-Hld]");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-50);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1425, (byte) (-10));
      Constant constant0 = constantFieldref0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (int) (byte) (-10), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("SBt_dRq6", true);
      assertEquals("SBt_dRq6", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[3] = (byte) (-28);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[3] = (byte) (-28);
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("newarray\t\t<<illegal type>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray\t\t<<illegal type>>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("istore\t\t%249", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(77, (byte)31);
      constantFieldref0.setNameAndTypeIndex((byte)31);
      constantArray0[0] = (Constant) constantFieldref0;
      String string0 = "GXclxW%";
      try { 
        Utility.methodSignatureReturnType("GXclxW%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GXclxW%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload\t\t%159", string0);
      
      String string1 = Utility.compactClassName("areturn", true);
      assertEquals("areturn", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "=E*-:[BRX!& h g`N";
      try { 
        Utility.typeOfSignature("=E*-:[BRX!& h g`N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =E*-:[BRX!& h g`N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("aload_3", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(":3w>/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :3w>/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-334), 1024);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-7);
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte) (-50);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-7), (-1191));
      assertEquals("0:    <illegal opcode>\n1:    istore\t\t%231\n3:    lshl\n4:    <illegal opcode>\n5:    istore\t\t%206\n", string0);
      
      int int0 = Utility.setBit((byte)121, 734);
      assertEquals(1073741945, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.compactClassName("F", true);
      Utility.methodSignatureReturnType("F");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("float", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-59);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-113);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-334), 1024);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("$VALUES");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $VALUES
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.setBit(59, 90);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 247, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("lmul");
      assertEquals("lmul", string0);
      
      int int0 = Utility.clearBit((byte) (-8), 2533);
      assertEquals((-40), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.convertString("bfECZ6yz$");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)82;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)82, (int) (byte)45, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte byte0 = Utility.typeOfSignature("SyntheticRepository could not load ");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.setBit(61, 61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)90;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)115, 63, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "6sr_w";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-127);
      Utility.compactClassName("YZ(>dy:%#{nqnvXtC", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 121, (int) (byte) (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-30);
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)113;
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-59);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-113);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("<illegal", false);
      assertEquals("<illegal", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("s/VS$nW/=J'cgTh", false);
      assertEquals("s.VS$nW.=J'cgTh", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "SyntheticRepository could not load ";
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (byte)66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte byte0 = Constants.ATTR_SYNTHETIC;
      try { 
        Utility.typeOfMethodSignature("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.signatureToString("V");
      Utility.signatureToString("V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 157);
      assertEquals("0:    return\n1:    isub\n2:    areturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1638), 59, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 895, 1787, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("idiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: idiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-625), (int) (byte) (-96));
      assertEquals("0:    if_icmpne\t\t#-24296\n3:    land\n4:    lstore_1\n5:    ifle\t\t#16901\n", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.setBit(61, 61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "<illegal opcode>";
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-72), 63, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@TB`.bAzWT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @TB`.bAzWT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("V?|cm0|m5LN!OE_,X", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.signatureToString("SyntheticRepository could not load ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, (int) (byte) (-120), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore\t\t%249", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("idiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: idiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 852, false);
      assertEquals("0:    l2f\n1:    iand\n", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.convertString("impdep2");
      Utility.setBit((-777), (-777));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "impdep2";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "impdep2";
      objectArray0[3] = (Object) "impdep2";
      objectArray0[4] = (Object) "impdep2";
      objectArray0[5] = (Object) "impdep2";
      objectArray0[6] = (Object) "impdep2";
      objectArray0[7] = (Object) "impdep2";
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.printArray(objectArray0, false, false);
      Utility.setBit(4153, 4153);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      Constant constant0 = Constant.readConstant(byteSequence0);
      constantArray0[0] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(33558585, 66);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      Constant constant1 = constantFieldref1.copy();
      constantArray0[2] = constant1;
      ConstantClass constantClass0 = new ConstantClass((byte)74);
      constantArray0[3] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)123, 122);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("double");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte)24, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.convertString("java.lang.\t");
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-1938));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (int) (byte)87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.\t", false);
      Utility.getSignature("java.lang.\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 159, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("Nh?O'JbLOgR'fh^@#;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nh?O'JbLOgR'fh^@#;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("anewarray", true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-238), 36);
      Utility.replace("=sf#FaU?Ub[~aL`NV>0", "V?|cm0|m5LN!OE_,X", "void");
      try { 
        Utility.typeOfMethodSignature("V?|cm0|m5LN!OE_,X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V?|cm0|m5LN!OE_,X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("anewarray", true);
      int int0 = 36;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-238), 36);
      Utility.replace("=sf#FaU?Ub[~aL`NV>0", "V?|cm0|m5LN!OE_,X", "void");
      try { 
        Utility.typeOfMethodSignature("V?|cm0|m5LN!OE_,X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V?|cm0|m5LN!OE_,X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("XP\"XZ7c;`<Erc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XP\"XZ7c;`<Erc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.getSignature("? super ");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 159, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)86;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "(IOz*p6K5A!NKDHM(";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.compactClassName("~", true);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.getSignature("(IOz*p6K5A!NKDHM(");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 10, (int) (byte)64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("double");
      try { 
        Utility.typeOfSignature("Mi[Nl0qN.f^.05");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mi[Nl0qN.f^.05
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("double");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte)22, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UQ@($h[A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UQ@($h[A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, (int) (byte) (-120), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-834), (int) (byte)70);
      assertEquals("0:    fstore_3\n1:    fstore_3\n2:    fstore_3\n3:    fstore_3\n4:    fstore_3\n5:    fstore_3\n6:    fstore_3\n7:    nop\n8:    nop\n", string0);
      
      int int0 = Utility.setBit((byte)70, (byte)70);
      assertEquals(70, int0);
      
      String string1 = Utility.convertString("0:    fstore_3\n1:    fstore_3\n2:    fstore_3\n3:    fstore_3\n4:    fstore_3\n5:    fstore_3\n6:    fstore_3\n7:    nop\n8:    nop\n");
      assertEquals("0:    fstore_3\\n1:    fstore_3\\n2:    fstore_3\\n3:    fstore_3\\n4:    fstore_3\\n5:    fstore_3\\n6:    fstore_3\\n7:    nop\\n8:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, 442);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("TV@@Kz`w]V:>TQ6v@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TV@@Kz`w]V:>TQ6v@T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("TV@@Kz`w]V:>TQ6v@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TV@@Kz`w]V:>TQ6v@T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("ja.l]ng\t", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -93
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)62;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore\t\t%63", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.signatureToString("SyntheticRepository could not load ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore\t\t%164", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-81);
      byte byte0 = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)71, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "ja.l]ng\t";
      Utility.compactClassName("ja.l]ng\t", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-37);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte) (-65), true);
      String string1 = "return";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(bytes = ", "return", "return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bytes = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.signatureToString("L@TB`.bAzWT)S;5jJ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-93);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byte byte0 = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.setBit(61, 61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)24;
      Utility.getSignature("<illegal opode>");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 536870973);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 906, (-1165));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.signatureToString("L@TB`.bAzWT)S;5jJ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "r+R2g;eaS~ctP";
      try { 
        Utility.methodSignatureArgumentTypes("L@TB`.bAzWT)S;5jJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L@TB`.bAzWT)S;5jJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("Nu~]!{g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nu~]!{g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-51);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 906, (-1165));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("4,ym_KWU!`,ITe{+`5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4,ym_KWU!`,ITe{+`5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.encode(byteArray0, true);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      Utility.encode(byteArray0, false);
      Utility.decode("$b6", false);
      try { 
        Utility.methodSignatureArgumentTypes("$b6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $b6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-453.7509F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-118));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-118), 115);
      try { 
        Utility.methodSignatureReturnType("K}JvVc(=c3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K}JvVc(=c3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 45, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.signatureToString("Deprecated attribute with length > 0", true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 2996);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.convertString(".{1!uM+Q7");
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-43);
      byte byte0 = (byte)86;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), (int) (byte) (-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.convertString(".{1!uM+Q7");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      try { 
        Utility.typeOfSignature("!!|Sd>jQY(JSh7na232");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |Sd>jQY(JSh7na232
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      Utility.decode("5'hu4k>u{-u[", false);
      try { 
        Utility.typeOfSignature("5'hu4k>u{-u[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5'hu4k>u{-u[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1276), (-1276));
      assertEquals("0:    nop\n1:    astore_3\n2:    iload\t\t%0\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      String string0 = "s|z";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("s|z");
      constantArray0[0] = (Constant) constantUtf8_0;
      String string1 = "!R3})Bns>5=dE";
      ConstantClass constantClass0 = new ConstantClass((-1970));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-84), (byte) (-84));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 386, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray1 = Utility.decode("<illegal type>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 45, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_acmpne\t\t#-15604", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      Utility.decode("$*E", false);
      try { 
        Utility.typeOfSignature("$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putField");
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.decode("TBXHT0\"$3yf", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-106);
      byteArray0[1] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byte byte0 = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-3020));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fstore_2", "<illegal opcode>", ")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("goto\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("lload_3");
      Locale locale0 = Locale.ITALY;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "lload_3", (Object[]) constantArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) "lload_3";
      objectArray0[4] = (Object) constantPool0;
      objectArray0[5] = (Object) constantPool0;
      objectArray0[6] = (Object) "lload_3";
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-102);
      byteArray0[3] = (byte)91;
      byteArray0[6] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte)61;
      byteArray1[6] = (byte)78;
      byteArray1[7] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)61, (-297));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.isSet((-271), (-271));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Insensitive";
      stringArray0[1] = "Insensitive";
      stringArray0[2] = "Insensitive";
      Utility.methodTypeToSignature("Insensitive", stringArray0);
      Utility.methodSignatureArgumentTypes("(LInsensitive;LInsensitive;LInsensitive;)LInsensitive;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.compactClassName("TmptLC @s", "Insensitive", false);
      Utility.signatureToString("Insensitive", false);
      Utility.compactClassName("int", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-1091), (-271));
      // Undeclared exception!
      try { 
        Utility.signatureToString("l5,zT(0^`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l5,zT(0^`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(90, true);
      assertEquals("private static final volatile", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "private static final volatile";
      stringArray0[1] = "private static final volatile";
      stringArray0[2] = "!*c:9b\"V!1=t)|@_}>";
      String string1 = Utility.methodTypeToSignature("private static final volatile", stringArray0);
      assertEquals("(Lprivate;Lprivate;L!*c:9b\"V!1=t)|@_}>;)Lprivate;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)106;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), 60);
      assertEquals("0:    iinc\t\t%104\t121\n3:    dload_2\n4:    fmul\n", string2);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte) (-95);
      byteArray0[4] = (byte)60;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1124), 2940);
      assertEquals("0:    iinc\t\t%0\t-95\n3:    nop\n4:    istore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("ifnonnull\t\t#1459", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull\t\t#1459'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-110));
      assertEquals("0:    i2c\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (-468));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature(">aQCkO*@3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >aQCkO*@3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.methodTypeToSignature("|", (String[]) null);
      Utility.methodSignatureToString("()L|;", "java.lang.ret", "|");
      try { 
        Utility.typeOfMethodSignature("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("9 _h5c'e", stringArray0);
      Utility.methodSignatureToString("()L9;", "()L9;", "()L9;");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("()L9; 9 ()L9;()", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()L9; 9 ()L9;()'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.classOrInterface((byte)40);
      assertEquals("class", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66), false);
      assertEquals("0:    <illegal opcode>\n1:    dload_2\n2:    iastore\n3:    fadd\n4:    arraylength\n5:    lcmp\n", string1);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2924, (int) (byte)15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "|";
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("|", (String[]) null);
      Utility.methodSignatureToString("()L|;", "java.lang.ret", "");
      try { 
        Utility.typeOfMethodSignature("s:IF]2Y=AoR?cW,aBv!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s:IF]2Y=AoR?cW,aBv!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
      assertEquals("0:    lookupswitch\tdefault = 0, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }
}
