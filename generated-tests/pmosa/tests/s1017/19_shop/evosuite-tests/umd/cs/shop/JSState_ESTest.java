/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 11:51:34 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSTasks jSTasks0 = jSPlan0.cdr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator(0);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSState0.satisfies(jSTasks0, jSSubstitution0, jSListAxioms0);
      jSState0.addElementsToState(jSTasks0);
      assertFalse(jSTasks0.fail());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSState0, jSSubstitution0, jSListAxioms0);
      assertEquals(1, jSListSubstitution0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.add((Object) jSState0);
      jSPlan0.add((Object) "");
      jSPlan0.assignFailure();
      jSState0.apply(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      // Undeclared exception!
      try { 
        jSState0.satisfiesAll(jSPlan0, jSSubstitution0, jSListAxioms0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSState cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSListAxioms", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSState jSState0 = null;
      try {
        jSState0 = new JSState((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = 58;
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSTerm0, (JSSubstitution) null);
      assertEquals(10, jSListSubstitution0.capacity());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.add((Object) jSState0);
      JSPlan jSPlan1 = new JSPlan();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSState0.addElementsToState(jSPlan0);
      assertEquals("[[(this Collection)]]", jSPlan0.toString());
      assertEquals(1, jSState0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.stream();
      jSState0.add((Object) jSTaskAtom0);
      JSOperator jSOperator0 = new JSOperator();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSTerm0, (JSSubstitution) null);
      assertTrue(jSListSubstitution0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSState0.add((Object) jSTaskAtom0);
      JSOperator jSOperator0 = new JSOperator();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSTerm0, (JSSubstitution) null);
      assertEquals("[]", jSListSubstitution0.toString());
  }
}
