/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:22:30 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hex");
      jSONScanner0.scanFloat('u');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J", 93);
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.putChar('+');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanBoolean(',');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanUUID('/');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{xmX!Qe");
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 58);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDouble('l');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.close();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 3392903);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OCZ", (-861));
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-861), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, (-1834));
      jSONReaderScanner0.scanDouble('!');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFloat('u');
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', 1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tjx", 1);
      jSONReaderScanner1.token = 0;
      jSONReaderScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
      jSONReaderScanner1.getCalendar();
      jSONReaderScanner0.scanUUID('/');
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.close();
      assertEquals(17373, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldString(charArray0);
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<init>", (-2320));
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.getCalendar();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("53].s_");
      jSONReaderScanner1.scanDouble('f');
      jSONReaderScanner0.scanUUID('f');
      jSONReaderScanner2.resetStringPosition();
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("36p^|4Ao{<3smtZN", 1041);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1932);
      jSONReaderScanner0.token();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 863, 863);
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanBoolean('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0CI6h|XrrHN;o");
      jSONReaderScanner0.scanType("0CI6h|XrrHN;o");
      jSONReaderScanner0.scanDouble('K');
      JSONScanner jSONScanner0 = new JSONScanner("0CI6h|XrrHN;o", (-2));
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{xmX!Qe");
      Locale locale0 = Locale.ITALIAN;
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0^CB6h|XrrHN;o", (-2324));
      jSONScanner0.scanFloat('j');
      jSONScanner0.intValue();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 863, 863);
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("", (-751));
      jSONScanner0.hasSpecial = false;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 'S');
      jSONReaderScanner0.nextToken(7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 5014);
      char char0 = File.separatorChar;
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextToken(12);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Instant");
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : pos 0, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextToken(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z", (-1345));
      jSONReaderScanner0.ch = 'b';
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'b');
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.putChar('[');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&Z*jx2?UK");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner.charArrayCompare("&Z*jx2?UK", 59, charArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", (-970));
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("");
      JSONScanner jSONScanner2 = new JSONScanner("");
      jSONScanner2.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      jSONReaderScanner0.scanDouble('');
      jSONReaderScanner0.scanUUID(',');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      jSONReaderScanner0.scanLong('y');
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1932);
      jSONReaderScanner0.token();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "#k{X!Qe");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(80);
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 25);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner(";eVmja[~R;:A5Qg-", '\u0000');
      jSONScanner0.scanFloat('\u0000');
      jSONScanner0.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("W`d:rzqGRYFWPt|N");
      jSONScanner0.scanString('.');
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.skipWhitespace();
      int int0 = Calendar.HOUR;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONScanner0.scanNumber();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      char char0 = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = '4';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '\\';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{xmX!Qe");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X7~e_P\"gv1E.~#+OB=");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.isEnabled(feature0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?", 999);
      jSONReaderScanner0.scanDecimal('m');
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanBoolean('U');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(");
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '1';
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(77, charArray0, 77, (-2995));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[4] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      int int0 = Calendar.SECOND;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanInt('\u0000');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 1362);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, '<');
      jSONReaderScanner0.putChar('<');
      jSONReaderScanner0.nextToken((int) '<');
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '\"';
      charArray0[0] = '\"';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, (-257));
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("", 8);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2398);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[4] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      int int0 = Calendar.SECOND;
      jSONReaderScanner0.scanLong('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K", 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1501, 1501);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("3] S$>F##o`'C", 0);
      jSONReaderScanner3.scanLong('Q');
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner1.matchField(charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P`DOmMl7$U");
      jSONScanner0.getLocale();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P`DOmMl7$U", 63);
      jSONReaderScanner0.scanDouble('L');
      SymbolTable symbolTable0 = new SymbolTable(6);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'L');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('(');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2404);
      jSONReaderScanner0.scanDouble('(');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanUUID('(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 470, 16);
      jSONReaderScanner0.scanBoolean('.');
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("$`i.sQ)Sy)^`Ed2<0K");
      jSONScanner0.scanFloat('1');
      int int0 = Calendar.UNDECIMBER;
      jSONScanner0.stringVal();
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.isEnabled(feature0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("2.");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('4');
      jSONScanner0.info();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EAYE+JqT", '_');
      JSONScanner jSONScanner1 = new JSONScanner("EAYE+JqT");
      jSONScanner0.scanNumber();
      jSONScanner1.info();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '_';
      JSONScanner jSONScanner0 = new JSONScanner("E+WV9Pvf_G.", '_');
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableFieldSmartMatch", 1350);
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("DisableFieldSmartMatch", 0);
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner1.nextToken(31);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 118);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanDouble('');
      jSONReaderScanner0.info();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.setToken(0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0CB6h|XrrHN;o", (-2320));
      jSONScanner0.scanFloat('j');
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[4] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      int int0 = Calendar.SECOND;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.scanSymbol(symbolTable0, '\u0000');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanUUID('/');
      jSONReaderScanner0.resetStringPosition();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONScanner jSONScanner0 = new JSONScanner("$`i.sQ)Sy)^`Ed2<0K", (-3066));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("WI/", 2666);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, (-1055));
      jSONReaderScanner1.scanLong('j');
      jSONReaderScanner1.pos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int0 = Calendar.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      JSONLexerBase.readString(charArray0, 5);
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      JSONScanner jSONScanner1 = new JSONScanner("3\u0000\u0000\u0000\u0000");
      jSONScanner1.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..");
      jSONReaderScanner0.scanDouble('');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.putChar('j');
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.nextIdent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", 115);
      jSONReaderScanner1.stringDefaultValue();
      jSONReaderScanner1.scanBoolean('>');
      JSONScanner jSONScanner0 = new JSONScanner("true", 70);
      jSONScanner0.scanNumber();
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(3867);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      jSONReaderScanner0.scanBoolean('7');
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("$`i.sQ)Sy)^`Ed2<0K", 83);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1297);
      jSONReaderScanner1.nextToken(123);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?", 999);
      char[] charArray0 = new char[4];
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Class<Feature> class1 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("+Kk", 999);
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, (-1596));
      jSONReaderScanner0.nextToken(17);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.putChar('r');
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.nextIdent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D,WWcuY~-#D", 4096);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanDate('B');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      jSONReaderScanner0.scanBoolean('i');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Feature.AllowSingleQuotes is false");
      jSONReaderScanner0.stringDefaultValue();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, (-4047));
      jSONReaderScanner0.nextToken(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 44);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.scanDate('>');
      jSONScanner0.scanFloat('T');
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.config(feature0, false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.next();
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner1 = new JSONScanner("syntax error");
      jSONScanner1.scanFieldFloatArray(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner1.scanDate('y');
      jSONScanner0.scanFloat('e');
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanFloat('~');
      int int0 = Calendar.UNDECIMBER;
      jSONScanner0.scanIdent();
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.stringVal();
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.next();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("E+WV9Pvf_G.", 66);
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("scan false error");
      jSONScanner1.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner0.nextToken(66);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("W#6A@c~zivgF", 264);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46");
      jSONScanner1.scanNumber();
      jSONScanner1.info();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner1.nextToken();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 2);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringDefaultValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 58);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanUUID('n');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '_';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2216, '_');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, '3');
      JSONScanner jSONScanner0 = new JSONScanner("dOHIb!:", '_');
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanLong('_');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'S', 103);
      jSONReaderScanner0.scanFloat('S');
      jSONReaderScanner0.nextToken(82);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 44);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanDouble('4');
      jSONReaderScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      charArray0[5] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("_}J|iP#RHPcts,pE9", (-981));
      jSONScanner0.scanFloat('i');
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.scanDate('4');
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      jSONScanner0.isEnabled((-328), (-328));
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      JSONScanner jSONScanner0 = new JSONScanner("unclosed", 330);
      jSONScanner0.getTimeZone();
      JSONScanner jSONScanner1 = new JSONScanner("unclosed");
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      StringReader stringReader0 = new StringReader("yyyy-MM-dd HH:mm:ss");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.scanDate('#');
      jSONReaderScanner0.next();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray1 = new char[6];
      charArray1[0] = '3';
      charArray1[1] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, '3');
      jSONReaderScanner0.scanDate('3');
      jSONReaderScanner0.scanLong(' ');
      jSONReaderScanner0.getTimeZone();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 1741, '3');
      jSONReaderScanner1.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("1QOr0M9Z", '3');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9YZfID@q>");
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-35);
      int int0 = Calendar.FRIDAY;
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'S';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDate('K');
      jSONReaderScanner0.scanDate('T');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 5529);
      jSONReaderScanner1.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 32);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(32);
      SymbolTable symbolTable0 = new SymbolTable(1486);
      jSONReaderScanner0.addSymbol(60, 5, 60, symbolTable0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '_';
      JSONLexerBase.readString(charArray0, 5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 83);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(5);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 58);
      jSONScanner0.nextToken();
      jSONScanner0.next();
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      jSONScanner0.scanFloat('1');
      int int0 = Calendar.UNDECIMBER;
      Feature feature0 = Feature.AutoCloseSource;
      JSONScanner jSONScanner1 = new JSONScanner("hCp1p=`}f02M9Jwb<k", (-1));
      jSONScanner1.scanNumber();
      jSONScanner1.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'Z';
      charArray0[3] = '^';
      charArray0[0] = ')';
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false", 84);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner0.nextToken((-1596));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 24;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDouble('W');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1736);
      jSONReaderScanner0.scanDecimal('\\');
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 70);
      jSONReaderScanner0.scanFloat('X');
      TimeZone.getTimeZone(", ");
      JSONScanner jSONScanner0 = new JSONScanner(", ", 70);
      jSONScanner0.scanFloat('|');
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanDate('|');
      jSONReaderScanner0.nextToken((-1227));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P`DOmMl7$U");
      jSONScanner0.scanDate('a');
      jSONScanner0.getLocale();
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 1153);
      jSONReaderScanner0.nextToken((-1));
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = 'S';
      charArray0[3] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("syntax error", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 0);
      jSONReaderScanner0.nextToken(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(16, charArray0, 76, 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 2);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextTokenWithChar('-');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P`DOmMl7$U");
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jj=33QR095f", (-2335));
      jSONReaderScanner0.scanInt('j');
      jSONReaderScanner0.setToken((-2335));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ',';
      charArray0[2] = 'N';
      charArray0[3] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("'7OP1>|QJmu|(;|b:");
      jSONScanner0.bytesValue();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 244);
      jSONReaderScanner0.nextToken(128);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"~9", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 35;
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '\\';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("53].s_", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e~P%<y@", 0);
      JSONScanner jSONScanner1 = new JSONScanner("53].s_", 0);
      jSONScanner1.scanDate('Z');
      jSONReaderScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONScanner jSONScanner0 = new JSONScanner("set", 1293);
      JSONScanner jSONScanner1 = new JSONScanner("4");
      jSONScanner1.scanFloat('-');
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[23];
      JSONScanner jSONScanner0 = new JSONScanner("new", 3118);
      JSONScanner jSONScanner1 = new JSONScanner("undefined", 0);
      JSONScanner jSONScanner2 = new JSONScanner("new");
      Class<Feature> class0 = Feature.class;
      jSONScanner2.scanEnum(class0, (SymbolTable) null, '+');
      JSONScanner jSONScanner3 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner3.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2216, (-1794705076));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("?", 93);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("53");
      JSONScanner jSONScanner0 = new JSONScanner("}9vZ]", 96);
      jSONScanner0.scanNumber();
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner1.nextToken(850);
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 110, (-1124523551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1932);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 2);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanUUID('-');
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanString('-');
      jSONReaderScanner0.nextToken(2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('6');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 2404);
      jSONReaderScanner0.scanDouble('6');
      jSONReaderScanner1.scanUUID('6');
      jSONReaderScanner1.scanFieldLong(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '\"';
      jSONReaderScanner1.scanFieldLong(charArray1);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.close();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe");
      jSONReaderScanner0.skipWhitespace();
      jSONScanner0.nextToken(0);
      SymbolTable symbolTable0 = new SymbolTable(669);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1R8h(3^_-", (-887));
      jSONReaderScanner0.scanBoolean('@');
      jSONReaderScanner0.info();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("53].s_");
      jSONReaderScanner0.scanDouble('4');
      SymbolTable symbolTable0 = new SymbolTable('4');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      SymbolTable symbolTable1 = new SymbolTable('4');
      SymbolTable symbolTable2 = new SymbolTable('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable2, '4');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = File.separatorChar;
      char[] charArray0 = new char[5];
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONReaderScanner0.nextToken(711);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFloat(']');
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('6');
      jSONReaderScanner0.info();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", (-3643));
      jSONReaderScanner0.scanLong('\u0000');
      jSONReaderScanner0.scanDouble('6');
      SymbolTable symbolTable0 = new SymbolTable(219);
      jSONReaderScanner0.scanDouble('\"');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.close();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 70);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("lvA-=", 70);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      jSONReaderScanner1.timeZone = timeZone0;
      jSONReaderScanner0.scanLong('k');
      jSONReaderScanner0.charAt(0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('6');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", (-3643));
      jSONReaderScanner0.scanLong('6');
      jSONReaderScanner0.scanDouble('6');
      SymbolTable symbolTable0 = new SymbolTable(219);
      jSONReaderScanner0.scanDouble('\"');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.close();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'x';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115);
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 0);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined", 3968);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner1.scanFieldFloat(charArray0);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e~P%<y@", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("scan true error");
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-504), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 5014);
      char char0 = File.separatorChar;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[5];
      charArray1[1] = '/';
      charArray1[2] = '/';
      charArray1[3] = '/';
      charArray1[4] = '/';
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanString('/');
      JSONScanner jSONScanner0 = new JSONScanner("", 2144);
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanFloat('P');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 5);
      jSONReaderScanner1.stringDefaultValue();
      jSONScanner0.scanFloat('/');
      jSONScanner0.scanNumber();
      jSONReaderScanner1.scanFieldLong(charArray1);
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner1.close();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 116);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONScanner0.scanFloat('c');
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(117, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, '\u0000');
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      jSONReaderScanner0.nextToken((-24));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 4 - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 5014);
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[5];
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanString('t');
      JSONScanner jSONScanner0 = new JSONScanner("", 2131);
      Locale locale0 = jSONReaderScanner0.getLocale();
      MockCalendar.getInstance(locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(5014);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 't');
      jSONScanner0.nextIdent();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.lookup(arrayList0, linkedList0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 597);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(2404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      Locale locale0 = jSONScanner0.getLocale();
      MockCalendar.getInstance(locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      SymbolTable symbolTable0 = new SymbolTable('\"');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.nextIdent();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      int int0 = Calendar.SECOND;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '.';
      charArray0[1] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 44);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.scanNumber();
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 1, json : .
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h.y,t6}?VswCNdOX[@");
      jSONReaderScanner0.scanLong('-');
      char[] charArray0 = new char[5];
      jSONReaderScanner0.putChar('i');
      char char0 = 'a';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"h\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[5];
      SymbolTable symbolTable0 = new SymbolTable(80);
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 25);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ntax", 7);
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("$@fPxzx%-e}A>}4(", 80);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '\u0000');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(");
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '1';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[7] = '.';
      charArray0[8] = 'K';
      JSONScanner jSONScanner1 = new JSONScanner("2s2<,Xvqxp?F4}6x");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1437);
      jSONReaderScanner0.nextToken(11);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, (-257));
      jSONReaderScanner0.scanFloat('Y');
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("", 31);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      String string0 = "V4x`E!EO";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V4x`E!EO");
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONScanner0.scanFieldLong(charArray0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      jSONScanner0.scanStringArray(list0, '\\');
      jSONScanner0.scanFloat('\\');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zFPf'v9)+8l{(_&");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("new", 2216);
      jSONReaderScanner0.nextToken(14);
      jSONReaderScanner1.scanNullOrNew();
      char[] charArray0 = new char[3];
      charArray0[1] = '_';
      jSONReaderScanner1.arrayCopy(2707, charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = "!BbMd\\ +%{";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!BbMd +%{");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 84);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner1.scanDecimal('G');
      char[] charArray1 = null;
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("error parse false", 1545);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      char[] charArray1 = new char[4];
      charArray1[0] = 'j';
      charArray1[1] = 'B';
      charArray1[0] = 'B';
      charArray1[3] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1);
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '_';
      JSONLexerBase.readString(charArray0, 5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, 512);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringDefaultValue();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 295, 295);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDouble('_');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(1678);
      SymbolTable symbolTable1 = new SymbolTable(153);
      jSONReaderScanner0.charArrayCompare(charArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OCZ", 4317);
      jSONScanner0.scanNumber();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.isEnabled((-861), (-861));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 9;
      char[] charArray0 = new char[5];
      charArray0[3] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '\\';
      charArray0[4] = '4';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char char0 = '1';
      JSONScanner jSONScanner0 = new JSONScanner("1=mIN#ONA/oqcZjP4");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 2959);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('g');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, (-1653));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner1.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 70);
      jSONReaderScanner0.scanFloat('`');
      TimeZone.getTimeZone("J]X+3^lS GoM");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 127);
      jSONReaderScanner1.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("*KLVSO");
      jSONScanner0.scanFloat('-');
      jSONReaderScanner1.nextToken(70);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      JSONScanner jSONScanner0 = new JSONScanner("xP/?1<\"7~,>?Wm", (-2702));
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2702));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. P
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char char0 = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zFPf'v9)+8l{(_&");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("zFPf'v9)+8l{(_&", 0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("zFPf'v9)+8l{(_&", 2216);
      jSONReaderScanner0.nextToken(14);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}Sq", 93);
      jSONReaderScanner0.scanLong('b');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 737);
      jSONReaderScanner0.nextToken(0);
      SymbolTable symbolTable0 = new SymbolTable(93);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner1.intValue();
      jSONReaderScanner1.close();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("_\u0000", 1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_\u0000", 110);
      jSONReaderScanner0.scanLong('.');
      jSONScanner0.getTimeZone();
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("-0V^cADZ");
      jSONScanner1.scanNumber();
      jSONScanner0.scanIdent();
      jSONScanner0.isEnabled((-1), 110);
      JSONScanner jSONScanner2 = new JSONScanner("-0V^cADZ", 59);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char char0 = 'j';
      JSONScanner jSONScanner0 = new JSONScanner("0CB6h|XrrHN;o", (-2320));
      SymbolTable symbolTable0 = new SymbolTable(25);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 0pos 0, json : 0CB6h|XrrHN;o
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('\"');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2404);
      jSONReaderScanner0.scanDouble('\"');
      jSONReaderScanner1.scanUUID('\"');
      jSONReaderScanner1.resetStringPosition();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 83, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 2);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1063));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 5014);
      char char0 = File.separatorChar;
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 17, 0);
      jSONReaderScanner0.scanBoolean('7');
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      int int0 = 16;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EAYE+JqT", '_');
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONScanner0.scanSymbol(symbolTable0);
      JSONScanner jSONScanner1 = new JSONScanner("illegal state, textLength is zero");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero", 0);
      jSONReaderScanner0.scanDouble('_');
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner0 = new JSONScanner("false", 1);
      jSONScanner0.getLocale();
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(78);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanFloat('.');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[2] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 2);
      jSONReaderScanner0.scanDouble('-');
      jSONReaderScanner0.scanUUID('&');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '4', 80);
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("9C\"CMJE_;Q:Qi&@Q", 2);
      jSONReaderScanner0.scanLong('4');
      jSONReaderScanner1.scanDouble('!');
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONReaderScanner0.scanSymbol(symbolTable0, '4');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-687));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_\u0000");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_\u0000", 57);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '4', 80);
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(80);
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 25);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ntax", 7);
      jSONReaderScanner1.scanDouble('4');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable1 = new SymbolTable(25);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 9, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      charArray0[8] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 206, 0);
      jSONReaderScanner0.scanFloat('`');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illegal identifier : ");
      char[] charArray1 = new char[4];
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = '`';
      charArray1[3] = '`';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", 3426);
      jSONReaderScanner2.scanDouble('`');
      JSONScanner jSONScanner1 = new JSONScanner("yyyy-MM-dd HH:mm:ss");
      jSONScanner1.scanFieldDate(charArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("RpG|;XQU");
      String string0 = " nI_^a|6C)is";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_\u0000");
      char[] charArray0 = new char[3];
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{xmX!Qe");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner0.nextToken(20);
      SymbolTable symbolTable0 = new SymbolTable(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#k{X!Qe", 24);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'C';
      charArray0[2] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, (-1711));
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("scan null error", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match y - C, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 123);
      jSONReaderScanner0.nextToken(2526);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2404, 2404);
      jSONReaderScanner0.scanBoolean('6');
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFloat('6');
      jSONReaderScanner0.scanDecimal('}');
      char[] charArray1 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      charArray0[5] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("_}J|iP#RHPcts,pE9", (-981));
      jSONScanner0.scanFloat('i');
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.scanDate('4');
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      charArray0[5] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("_}J|iP#RHPcts,pE9", (-981));
      jSONScanner0.scanFloat('i');
      jSONScanner0.scanNumber();
      int int0 = 17;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 66);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '.');
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('p');
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      char char0 = '_';
      charArray0[1] = '_';
      int int0 = 5;
      JSONLexerBase.readString(charArray0, 5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('|');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DLL");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '.';
      jSONReaderScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 28, 68);
      jSONReaderScanner0.longValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("qP+W*P+~=", (-1788));
      jSONReaderScanner1.scanLong('-');
      JSONScanner jSONScanner0 = new JSONScanner("0CB6h|XrrHN;o");
      jSONScanner0.scanNumber();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.isEnabled(0, 0);
      jSONReaderScanner1.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      charArray0[8] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 206, 0);
      jSONReaderScanner0.scanFloat('`');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illegal identifier : ");
      char[] charArray1 = new char[4];
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = '`';
      charArray1[3] = '`';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", 3426);
      jSONReaderScanner2.scanUUID('b');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("float overflow : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner3.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[5] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, '4');
      jSONReaderScanner0.nextToken(2526);
      SymbolTable symbolTable0 = new SymbolTable(58);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.intValue();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1980, 17);
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONException", (-284));
      jSONReaderScanner1.nextToken(4);
      jSONScanner0.isEnabled((-4208), 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("com.alibaba.fastjson.JSONException");
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 999;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?", 999);
      char[] charArray0 = new char[4];
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Class<Feature> class1 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("?", 999);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONReaderScanner0.nextToken(3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner1 = new JSONScanner("TJx", (-2));
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("SortField", 1958);
      jSONScanner2.scanNumber();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 278);
      jSONReaderScanner0.nextToken(1070);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", fieldName ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TJx_JwX4\"2-q8EE}'", 604);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("orderedfield", 0);
      jSONScanner0.scanFloat('5');
      jSONScanner0.scanNumber();
      jSONReaderScanner0.nextToken(19);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[3] = '4';
      charArray0[3] = '4';
      charArray0[0] = '4';
      char[] charArray1 = new char[5];
      charArray1[0] = '4';
      charArray1[1] = '4';
      charArray1[2] = ':';
      charArray1[3] = '4';
      charArray1[4] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 295, 295);
      jSONReaderScanner0.scanInt(':');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.info();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDouble('4');
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      SymbolTable symbolTable0 = new SymbolTable(295);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '9', 80);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 10, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner1.info();
      jSONReaderScanner1.scanFloat('-');
      char[] charArray1 = new char[3];
      charArray1[0] = '9';
      charArray1[1] = '9';
      charArray1[2] = '9';
      int[] intArray0 = JSONLexerBase.digits;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray1, 44);
      jSONReaderScanner2.scanInt('9');
      jSONReaderScanner2.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon((-1386));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      charArray0[2] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~Cv2HB$4Ag", 117);
      jSONReaderScanner0.scanDouble('P');
      SymbolTable symbolTable0 = new SymbolTable(25);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[1] = 'S';
      charArray0[3] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 5);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("zFPf'v9)+8l{(_&", 5);
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner1.scanLong('S');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.getFeatures();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}Sq", 93);
      jSONReaderScanner0.scanLong('b');
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("}Sq", '\u0000');
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      jSONScanner0.isEnabled(93, 16);
      JSONScanner jSONScanner1 = new JSONScanner("yyyy-MM-dd HH:mm:ss", 93);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 70);
      jSONReaderScanner0.nextToken((-1158));
      int int0 = Calendar.ZONE_OFFSET;
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      jSONScanner0.scanFieldLong(charArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{xmX!Qe");
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1178);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, 0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$`i.sQ)Sy)^`Ed2<0K");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 68);
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalDateTime", 0);
      jSONScanner0.getLocale();
      jSONScanner0.matchField2(charArray0);
      int int0 = 3037;
      SymbolTable symbolTable0 = new SymbolTable(3037);
      SymbolTable symbolTable1 = new SymbolTable(2691);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.scanFloat('X');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("53].s_", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e~P%<y@", 0);
      JSONScanner jSONScanner1 = new JSONScanner("53].s_", 0);
      jSONScanner1.scanDate('Z');
      JSONScanner jSONScanner2 = new JSONScanner("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONScanner2.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 55232);
      JSONScanner jSONScanner0 = new JSONScanner("fP/");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.info();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192);
      jSONReaderScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("\"K", 2031);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONScanner0.scanType("\"K");
      jSONScanner0.indexOf('%', (-2));
      int int0 = (-2147483647);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '^';
      charArray0[2] = 'f';
      charArray0[3] = '{';
      charArray0[4] = '$';
      charArray0[5] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 311);
      jSONReaderScanner0.nextToken(2);
      SymbolTable symbolTable0 = new SymbolTable(101);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          char[] charArray0 = new char[8];
          charArray0[0] = '4';
          charArray0[1] = '4';
          charArray0[2] = '4';
          charArray0[3] = '4';
          charArray0[3] = '4';
          charArray0[5] = '4';
          CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
          JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 123);
          JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 48, 0);
          int[] intArray0 = JSONLexerBase.digits;
          jSONReaderScanner1.scanUUID('4');
          jSONReaderScanner0.scanNumber();
          jSONReaderScanner1.scanUUID('b');
          jSONReaderScanner0.getCurrent();
          jSONReaderScanner1.token();
          jSONReaderScanner1.scanString('J');
          jSONReaderScanner1.nextToken(0);
          jSONReaderScanner0.isRef();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_\u0000");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4444", 57);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '4', '4');
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable('4');
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 25);
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken((int) '4');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.longValue();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E;YE+JqT", '_');
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.putChar('n');
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable('_');
      JSONScanner jSONScanner1 = new JSONScanner("E;YE+JqT", 34);
      jSONScanner1.nextToken(93);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      int int0 = Calendar.SECOND;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[5];
      SymbolTable symbolTable0 = new SymbolTable(80);
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 25);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ntax", 7);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.longValue();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("e~P%<y@");
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-2), 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("W#6A@c~zivgF", 264);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      char char0 = 'i';
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46");
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONScanner1.scanFloat('i');
      jSONScanner1.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("_}J|iP#RHPcts,pE9", 68);
      char char0 = 'i';
      jSONScanner0.scanFloat('i');
      jSONScanner0.scanNumber();
      int int0 = 17;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1204);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Locale locale0 = jSONReaderScanner0.getLocale();
      MockCalendar.getInstance(locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      SymbolTable symbolTable0 = new SymbolTable(84);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      int int0 = 68;
      JSONScanner jSONScanner1 = new JSONScanner(" Rkw(}f!w.t", 68);
      jSONScanner1.nextIdent();
      jSONScanner0.scanEnum(class0, symbolTable0, '4');
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 43, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[5];
      SymbolTable symbolTable0 = new SymbolTable(115);
      JSONScanner jSONScanner0 = new JSONScanner("ntax", 50);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-849));
      jSONReaderScanner0.nextToken(0);
      SymbolTable symbolTable1 = new SymbolTable(2526);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{A\"fMqiWp$X!=?v");
      jSONReaderScanner1.getCurrent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("ntax");
      jSONReaderScanner2.token();
      jSONReaderScanner2.scanString('/');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2526);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'G';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[2] = '<';
      charArray0[3] = 'z';
      charArray0[4] = 'N';
      charArray0[5] = 'T';
      charArray0[6] = 'g';
      charArray0[7] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      jSONReaderScanner0.nextToken(40);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner(" -> ", 307);
      jSONScanner0.indexOf(':', 307);
      jSONReaderScanner0.scanType("InitStringFieldAsEmpty");
      jSONScanner0.bp = 40;
      jSONReaderScanner0.subString(40, 8192);
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayCountry();
      locale0.getExtensionKeys();
      jSONScanner0.setLocale(locale0);
      jSONReaderScanner0.nextIdent();
      jSONScanner0.scanDouble('A');
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#k{X!Qe", 24);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("X#j0nt9=*G[0Q_amh_n");
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(24);
      JSONScanner jSONScanner2 = new JSONScanner("#k{X!Qe", 0);
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken(24);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner1.scanEnum(class0, symbolTable0, '*');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":-y>]SUcZO8");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[5] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e~P%<y@", 111);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("y*teI#QStuQh,eD0");
      jSONScanner0.scanFloat(',');
      jSONScanner0.skipComment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }
}
