/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:54:13 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1218), "1(,^", "wheel.asm.ClassReader", "1(,^", "wheel.asm.ClassReader");
      ByteVector byteVector0 = new ByteVector(8);
      classWriter0.version = 49;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2311));
      classWriter0.index = (-2311);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1218), "1(,^", "wheel.asm.ClassReader", "1(,^", "wheel.asm.ClassReader");
      classWriter0.version = 49;
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2311));
      classWriter0.index = (-2311);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "h^hL/' ACeH", "wheel.asm.FieldWriter", "86!S>g%-*szhEhsmOR", "86!S>g%-*szhEhsmOR");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "SogBnaur", "SogBnaur", "SogBnaur", "SogBnaur");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2301));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "SourceDebugExtension", "SourceDebugExtension", "", "SourceDebugExtension");
      // Undeclared exception!
      try { 
        fieldVisitor0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-51));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Signtpre", "Signtpre", "Signtpre", "Signtpre");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1116);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(425);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "mmo!)Bl}CI", "mmo!)Bl}CI", "mmo!)Bl}CI", "mmo!)Bl}CI");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = (-1743);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 197, "j", "j", "j", "j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-16), "", "Signature", "Signature", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-167), "", "", "", "");
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2075));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2075), "G&~!ywQ:U", "G&~!ywQ:U", "G&~!ywQ:U", "G&~!ywQ:U");
      fieldWriter0.visitAnnotation("G&~!ywQ:U", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(4);
      Attribute[] attributeArray0 = new Attribute[5];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1218), "1(,^", "wheel.asm.ClassReader", "1(,^", "wheel.asm.ClassReader");
      ByteVector byteVector0 = new ByteVector(8);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(154);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "wheel.asm.FieldWriter", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2082));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2082), "G&~!\"ywQU", "G&~!\"ywQU", "G&~!\"ywQU", "G&~!\"ywQU");
      Attribute attribute0 = new Attribute("G&~!\"ywQU");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(154);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "wheel.asm.FieldWriter", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2075));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2075), "G&~!ywQ:U", "G&~!ywQ:U", "G&~!ywQ:U", "G&~!ywQ:U");
      fieldWriter0.visitAnnotation("G&~!ywQ:U", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(154);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "wheel.asm.FieldWriter", "", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(4);
      Attribute[] attributeArray0 = new Attribute[5];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1218), "1(,^", "wheel.asm.ClassReader", "1(,^", "wheel.asm.ClassReader");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2311));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension");
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
