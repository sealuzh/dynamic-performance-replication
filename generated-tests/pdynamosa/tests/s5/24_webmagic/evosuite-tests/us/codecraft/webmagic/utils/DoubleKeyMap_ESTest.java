/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:15:12 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Map<Map<Object, Object>, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<Map<Object, Object>, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Map<Object, Object>, Integer> hashMap2 = new HashMap<Map<Object, Object>, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Integer, Integer>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Map<Object, Object>, Integer>(hashMap0);
      Map<Map<Object, Object>, Integer> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, "`d(fAX0!!Mc;", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<Object, String, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, String>>();
      Map<Object, Integer> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      Map<Object, Integer> map1 = doubleKeyMap0.get((Map<Object, Object>) hashMap1);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      doubleKeyMap0.put(integer0, "", "^vIY=");
      Map<String, String> map0 = doubleKeyMap0.get(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.DoubleKeyMap", (Map<Object, Object>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = doubleKeyMap0.remove((Object) null, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, "", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Map<Object, Object>) null, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.DoubleKeyMap", (Map<Object, Object>) null);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<Object, Object>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, Object>>, Object, String>();
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Object, String> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (Map<Object, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object1 = doubleKeyMap0.get("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap0.get((String) null, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>();
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Map<Object, Object>, Map<String, Integer>>, String, String> doubleKeyMap1 = new DoubleKeyMap<Map<Map<Object, Object>, Map<String, Integer>>, String, String>();
      Map<Map<Object, Object>, Map<String, Integer>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Object>, String, Integer>(map1, class0);
      Integer integer0 = doubleKeyMap2.remove(map0, "");
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer1 = doubleKeyMap3.get((Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Integer) null, (Object) integer0, "Ln';n*K_;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Map<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Object>();
      Map<Map<Object, Object>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0, 738.74F);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, "`d(fAX0!!Mc;", integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0, ",oaw.6k");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "", "uM3X=>bAZZ");
      doubleKeyMap0.put(integer0, "ExQ?k", ",oaw.6k");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      HashMap<Map<Object, Object>, Map<Map<Object, Object>, String>> hashMap1 = new HashMap<Map<Object, Object>, Map<Map<Object, Object>, String>>();
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>(hashMap1, class0);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put("", map0);
      Object object0 = doubleKeyMap0.get("", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Map<Object, Object>>();
      Map<Map<Object, Object>, Map<Map<Object, Object>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>(map0);
      Map<Object, Object> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) map1, "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
