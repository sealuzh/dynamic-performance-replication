/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:22:04 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Okio;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8<");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[7];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.CREATE_NEW;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      openOptionArray0[4] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(94L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      BufferedSource bufferedSource0 = Okio.buffer((Source) pipe_PipeSource0);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Socket socket0 = null;
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Okio.blackhole();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SYNC;
      StandardOpenOption[] standardOpenOptionArray0 = StandardOpenOption.values();
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, (OpenOption[]) standardOpenOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError((-3243.5F));
      Sink sink0 = Okio.blackhole();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeHexadecimalUnsignedLong((-3434));
      realBufferedSink0.emit();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.getAbsolutePath();
      try { 
        Okio.source((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      hashingSink0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Okio.source((Path) null, (OpenOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Okio.blackhole();
      MockFile mockFile0 = new MockFile("", "?i,e == nul+l");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeHexadecimalUnsignedLong(8230);
      realBufferedSink0.timeout();
      Okio.buffer((Sink) buffer0);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        LinkOption.valueOf("?i,e == nul+l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.LinkOption.?i,e == nul+l
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti.e-ut == cull", "ti.e-ut == cull");
      Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ti.e-ut == cull/ti.e-ut == cull");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "g^Eu|F^Ok8:FW?n");
      realBufferedSink0.write(source0, 1L);
      Okio.blackhole();
      MockFile mockFile1 = new MockFile(mockFile0, "ti.e-ut == cull");
      try { 
        Okio.sink((File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError('S');
      MockThrowable mockThrowable0 = new MockThrowable(assertionError0);
      AssertionError assertionError1 = new AssertionError("A1.~/^", mockThrowable0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      AssertionError assertionError0 = new AssertionError();
      Object object0 = new Object();
      AssertionError assertionError1 = new AssertionError(object0);
      assertionError0.initCause(assertionError1);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      MockFile mockFile0 = new MockFile("timeout == null", "timeout == null");
      Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink2.timeout();
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/Failed to close timed out socket ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Sink sink1 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      Sink sink2 = Okio.blackhole();
      assertNotSame(sink2, sink1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Failed to close timed out socket ", "Qr_1*%#x/lcli(DK");
      AssertionError assertionError0 = new AssertionError((-3218.9666F));
      Okio.isAndroidGetsocknameError(assertionError0);
      Okio.isAndroidGetsocknameError(assertionError0);
      AssertionError assertionError1 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError1);
      Sink sink0 = Okio.appendingSink(mockFile0);
      Sink sink1 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(sink1);
      realBufferedSink0.flush();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Okio.isAndroidGetsocknameError(assertionError0);
      BufferedSink bufferedSink0 = Okio.buffer((Sink) realBufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ti.e-ut == cull");
      MockFile mockFile0 = new MockFile("ti.e-ut == cull", "ti.e-ut == cull");
      Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError();
      mockFile0.setExecutable(false, true);
      Okio.isAndroidGetsocknameError(assertionError0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardOpenOption.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ti.e-ut == cull", "ti.e-ut == cull");
      Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      mockFile0.setWritable(false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.timeout();
      realBufferedSink1.emit();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "getsockname failed";
      MockThrowable mockThrowable0 = new MockThrowable("getsockname failed");
      AssertionError assertionError0 = new AssertionError("getsockname failed", mockThrowable0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "getsockname failed");
      assertionError0.fillInStackTrace();
      Okio.isAndroidGetsocknameError(assertionError0);
      MockFile mockFile0 = new MockFile("gxl5G\"z8");
      String string1 = "";
      try { 
        MockURI.URI("", "", " text=", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%20text=#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("timeout == null", "timeout == null");
      Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      Buffer buffer0 = new Buffer();
      mockFile0.toPath();
      AssertionError assertionError0 = new AssertionError(source0);
      Okio.isAndroidGetsocknameError(assertionError0);
      Sink sink0 = Okio.blackhole();
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      assertNotNull(bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("timeout == null", "timeout == null");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError(sink0);
      MockThrowable mockThrowable0 = new MockThrowable(assertionError0);
      assertionError0.addSuppressed(mockThrowable0);
      Okio.isAndroidGetsocknameError(assertionError0);
      HashingSource.md5(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSource0.readByteString();
      Path path0 = mockFile0.toPath();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SYNC;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.READ;
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Okio.blackhole();
      MockFile mockFile0 = new MockFile("ti.e-ut == cull", "ti.e-ut == cull");
      Sink sink0 = Okio.appendingSink(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError(true);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      realBufferedSource1.readUtf8();
      realBufferedSource1.inputStream();
      Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      realBufferedSource0.readByteString();
      realBufferedSink0.buffer();
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf("kmcb-$-W*ySS4y9s_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardOpenOption.kmcb-$-W*ySS4y9s_
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
