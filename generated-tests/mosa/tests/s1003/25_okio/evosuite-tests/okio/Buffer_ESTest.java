/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:31:57 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-35);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-485L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.skip(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.indexOfElement(byteString0);
      String string0 = "7A`GbF";
      try { 
        realBufferedSource0.readByteArray(72057594037927L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(997L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("aXF2Po8\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-21);
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer1.indexOfElement(byteString0, 183L);
      assertEquals(8L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("EWkh7w", 613, 613);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 613 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.next();
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      try { 
        buffer2.write((Source) buffer0, (long) 5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      pipe0.source();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(9223372036L);
      buffer1.inputStream();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)6);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(9918170112L);
      buffer1.readLong();
      byte[] byteArray0 = new byte[7];
      try { 
        buffer1.skip(13L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      buffer0.writeUtf8CodePoint(1263);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      buffer1.writeShortLe(8);
      buffer1.readUtf8CodePoint();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0800\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(255L);
      buffer3.readByteString();
      realBufferedSource0.buffer.readByteArray();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer0.outputStream();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong((-2312L));
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1385L);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-201L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=0 byteCount=-201
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-5L));
      buffer0.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      buffer1.flush();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals((-1260L), byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(9223372036L);
      ByteString byteString0 = buffer2.md5();
      realBufferedSource0.buffer.indexOf(byteString0, 9223372036L);
      buffer0.sha512();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("{m+.Nq`2.=B03UM%A*!", charset0);
      buffer1.sha1();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      ByteString[] byteStringArray0 = new ByteString[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      HashingSource.md5(realBufferedSource0);
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(936L);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(1393L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString0);
      buffer0.readUtf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      realBufferedSink0.buffer.hmacSha256(byteString1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = 10000000000L;
      buffer_UnsafeCursor0.resizeBuffer(10000000000L);
      buffer_UnsafeCursor0.resizeBuffer(long0);
      buffer0.readLongLe();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-56);
      Buffer buffer2 = buffer1.writeLong((byte) (-60));
      ByteString byteString0 = buffer2.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.writeLongLe((byte) (-60));
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(1000000L);
      ByteString byteString0 = buffer0.md5();
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.rangeEquals((long) (byte)121, byteString0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(10000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.outputStream();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=0000000000002710\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      Buffer buffer2 = buffer0.writeDecimalLong((-2312L));
      buffer2.segmentSizes();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0, 1385L);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-2312L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(1469L);
      ByteString byteString0 = buffer2.md5();
      buffer0.indexOf(byteString0, 2147483647L);
      buffer2.indexOf(byteString0, 1469L);
      Buffer buffer3 = new Buffer();
      buffer3.snapshot();
      buffer3.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.writeLong((-602L));
      buffer1.writeDecimalLong((-602L));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSource0.buffer.hashCode();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.buffer();
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) inflaterSource0, 1065L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      buffer0.indexOf((byte)88, (long) (byte)88);
      String string0 = "WDO`~!|N\\=3\"e<t;";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(1469L);
      realBufferedSource0.buffer.segmentSizes();
      ByteString byteString0 = hashingSource0.hash();
      buffer2.indexOf(byteString0, 1469L);
      buffer1.indexOf(byteString0, 1L);
      buffer0.snapshot();
      buffer2.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      pipe0.source();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(72057594037927L);
      buffer1.snapshot();
      buffer0.writeDecimalLong(72057594037927L);
      buffer0.writableSegment(3);
      buffer0.size();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size();
      byte[] byteArray0 = new byte[5];
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource1.close();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(realBufferedSource1.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSource2, byteString0);
      hashingSource0.hash();
      realBufferedSource2.buffer.hmacSha256(byteString1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource2.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer0.md5();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.outputStream();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=2d31ffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      buffer1.writeShortLe(8);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        realBufferedSink0.write((Source) buffer0, 3445L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      buffer1.readByteArray();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, (-350L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-350
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      buffer1.writeShortLe(8);
      buffer1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = new Buffer();
      buffer2.copyTo(outputStream0);
      long long0 = (-1256L);
      buffer0.write((Source) buffer2, (-1256L));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      realBufferedSource0.buffer.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeTo(outputStream0, 184L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=184
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong(4L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.copyTo(outputStream0, 4L, 4L);
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) null, (-1322L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1322
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer2 = buffer0.write(byteString0);
      buffer2.readAll(buffer1);
      buffer1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.outputStream();
      Buffer buffer3 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer;
      try { 
        buffer3.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      buffer0.sha512();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("wE].X8d>5cMJ\"4n7A", charset0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      realBufferedSource0.buffer.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.outputStream();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer0.write((Source) buffer_UnsafeCursor1.buffer, (long) (-1));
      buffer0.flush();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y8Q{}5v|m{wMn!wy08");
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeDecimalLong((-72057594037927936L));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      pipe0.source();
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.sha512();
      try { 
        buffer1.readUtf8LineStrict(878L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong(4L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.hmacSha256(byteString0);
      pipe0.sinkClosed = true;
      buffer1.readUtf8();
      realBufferedSink0.buffer.read(byteArray0);
      realBufferedSink0.buffer.readUtf8Line();
      buffer1.size();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor2.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer1, 8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[7];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      buffer0.md5();
      buffer1.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Inflater inflater1 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.writeDecimalLong((-1));
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      try { 
        buffer3.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer0.writeHexadecimalUnsignedLong((-65L));
      realBufferedSink0.buffer.timeout();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      buffer0.readUnsafe();
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[2];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      buffer0.readAll(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor0.buffer.selectPrefix(options0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAndWriteUnsafe();
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      GzipSource gzipSource0 = new GzipSource(source0);
      HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = new Buffer();
      buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer1.writeUtf8CodePoint((-2811));
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink1.buffer.writeString("", charset0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer1 = realBufferedSource2.buffer;
      Buffer buffer2 = realBufferedSource2.buffer.writeDecimalLong(3372L);
      realBufferedSource0.buffer.md5();
      realBufferedSource2.buffer.segmentSizes();
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(0L);
      buffer3.md5();
      buffer2.readUtf8Line(0L);
      buffer1.writeDecimalLong(0L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = (-2312L);
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (-2312L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read(buffer1, (-867L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -867
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Inflater inflater0 = new Inflater(true);
      Pipe pipe0 = new Pipe(698L);
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(9223372036854775807L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(32);
      realBufferedSink0.buffer.readAll(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      ByteString[] byteStringArray0 = new ByteString[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.segmentSizes();
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      buffer1.writeShortLe(8);
      buffer1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSink0.buffer.sha512();
      // Undeclared exception!
      try { 
        buffer2.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-4);
      int int1 = 2118066063;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2118066063);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e3f1f8f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(3393L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[5];
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource1.close();
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = realBufferedSource0.buffer.writeLong((-1L));
      buffer0.readUtf8CodePoint();
      buffer1.hashCode();
      Buffer buffer2 = (Buffer)realBufferedSource1.buffer.write((Source) buffer1, (-1L));
      realBufferedSource0.buffer.flush();
      buffer2.writeUtf8CodePoint(65533);
      // Undeclared exception!
      try { 
        buffer2.readByteArray((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(1469L);
      realBufferedSource0.buffer.segmentSizes();
      ByteString byteString0 = hashingSource0.hash();
      buffer2.indexOf(byteString0, 1469L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeUtf8CodePoint(8075);
      Charset charset0 = Charset.defaultCharset();
      buffer4.writeString("", charset0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeDecimalLong(20L);
      buffer2.md5();
      buffer2.segmentSizes();
      buffer2.readAndWriteUnsafe();
      HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(3750L);
      Buffer buffer2 = buffer1.writeDecimalLong(4L);
      buffer0.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSource0.readByteString(4L);
      Charset charset0 = Charset.defaultCharset();
      buffer3.readString(charset0);
      buffer2.indexOf(byteString0, 2035L);
      buffer3.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readAll(realBufferedSource0.buffer);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2073432487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(1393L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line(31L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=30 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = false;
      Inflater inflater0 = new Inflater(true);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-4890L));
      realBufferedSource0.buffer.md5();
      buffer1.segmentSizes();
      buffer0.writeHexadecimalUnsignedLong((-4890L));
      buffer0.readUtf8Line(15L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = new Buffer();
      buffer0.readUtf8CodePoint();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.next();
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer1.readAll((Sink) null);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Pipe pipe0 = new Pipe(200L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeShortLe((-1));
      buffer1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(92233720L);
      buffer2.md5();
      buffer2.segmentSizes();
      buffer1.writeHexadecimalUnsignedLong((-1815L));
      // Undeclared exception!
      try { 
        buffer3.readUtf8Line(15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=14 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      source0.close();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      ByteString byteString0 = buffer0.md5();
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong((-2312L));
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("Expected leading [0-9a-fA-F] character but was 0x", charset0);
      Buffer buffer2 = new Buffer();
      buffer2.indexOf((byte)1, 1804L);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)1, 1804L, (long) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=57 fromIndex=1804 toIndex=1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      try { 
        buffer0.require((byte)120);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[7];
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(4L);
      buffer1.readLongLe();
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.require((-1L));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-2312L));
      buffer0.readLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString(")", 2145336164, (-1), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 2145336164
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(1385L);
      Inflater inflater0 = new Inflater(false);
      Pipe pipe1 = new Pipe(1385L);
      Pipe.PipeSource pipe_PipeSource0 = pipe1.new PipeSource();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(7205759403792L);
      ByteString byteString0 = buffer1.md5();
      buffer1.indexOf(byteString0, 9223372036854775807L);
      buffer1.indexOf(byteString0, 2347L);
      Buffer buffer2 = new Buffer();
      buffer1.snapshot();
      buffer2.readAndWriteUnsafe();
      realBufferedSource0.buffer.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Inflater inflater1 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-56);
      buffer1.writeLong((byte) (-74));
      Buffer buffer2 = buffer1.writeDecimalLong(2204L);
      buffer2.request((byte) (-56));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Pipe pipe0 = new Pipe(6L);
      Pipe pipe1 = new Pipe(6L);
      Pipe.PipeSource pipe_PipeSource0 = pipe1.new PipeSource();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(pipe_PipeSource0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = pipe1.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(9223372036854775807L);
      ByteString byteString0 = buffer1.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(32);
      buffer0.readAll(buffer2);
      buffer2.indexOf(byteString0, 10L);
      buffer3.indexOf(byteString0, 6L);
      Buffer buffer4 = new Buffer();
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=20000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      pipe0.source();
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036L);
      ByteString byteString0 = buffer1.md5();
      buffer0.sha512();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      buffer1.writeString("{m+.Nq`2.=B03UM%A*!", charset0);
      buffer0.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.writeDecimalLong(1000000000000000L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(1000000000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(9223372036L);
      realBufferedSource0.buffer.readIntLe();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-107);
      realBufferedSource0.buffer.write(byteArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.close();
      buffer0.writeDecimalLong(922337203685477580L);
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer3 = buffer1.writeDecimalLong(922337203685477580L);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer3.rangeEquals((long) (byte)77, byteString0);
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=39 content=0808003932323333373230333638353437373538303932323333373230333638\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(999985L);
      ByteString byteString0 = buffer0.md5();
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      realBufferedSource0.buffer.exhausted();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      buffer0.writeLong((byte)11);
      Buffer buffer2 = buffer1.writeDecimalLong(99998L);
      ByteString[] byteStringArray0 = new ByteString[5];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer2, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString1;
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString2;
      ByteString byteString3 = hashingSource0.hash();
      byteStringArray0[2] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      String string0 = "source == null";
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("source == null", (-2814), 914);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2814
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = false;
      pipe0.source();
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = pipe1.buffer;
      Buffer buffer1 = buffer0.writeLong(10000L);
      Buffer buffer2 = buffer1.writeLong(10000L);
      buffer0.writeDecimalLong((-3179L));
      buffer2.request(10000L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.readUtf8CodePoint();
      buffer1.indexOf((byte) (-63), 32L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/25_okio/okio.Okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      buffer0.readShort();
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Okio");
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) mockPrintStream0, 32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(9918170112L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)121;
      buffer0.write(byteArray0);
      buffer0.writeUtf8CodePoint((byte)121);
      ByteString byteString0 = buffer0.md5();
      buffer1.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer1.indexOf((byte)100);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1729L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readByteString((-627L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-627
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(1000000L);
      ByteString byteString0 = buffer0.md5();
      buffer0.segmentSizes();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-15);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      realBufferedSource0.buffer.readShort();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      realBufferedSource0.buffer.readShort();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1));
      buffer1.writeShortLe((-1));
      buffer1.readUtf8CodePoint();
      buffer1.indexOf((byte) (-63), 32L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Okio");
      Buffer buffer2 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(922337203685477L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = buffer2.writeDecimalLong(6L);
      ByteString byteString0 = buffer1.md5();
      realBufferedSource0.buffer.segmentSizes();
      buffer1.rangeEquals(6L, byteString0, (int) (byte) (-112), 8);
      buffer2.writeHexadecimalUnsignedLong(1000000L);
      buffer4.readUtf8Line((long) 8);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      buffer1.writeShortLe(8);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLong(71776119061217280L);
      realBufferedSink0.outputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" DAGpo4HG[>PZ8}e");
      mockPrintStream0.print((float) 8);
      realBufferedSink0.buffer.writeTo((OutputStream) mockPrintStream0, (long) 8);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer0.md5();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer1 = pipe0.buffer;
      realBufferedSink0.buffer.writeLong((-1));
      realBufferedSink0.buffer.readUtf8CodePoint();
      buffer1.indexOf((byte)101, 749L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Okio");
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) mockPrintStream0, 1L);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(940);
      Buffer buffer2 = buffer1.writeShortLe(940);
      buffer1.close();
      Buffer buffer3 = buffer0.writeDecimalLong(922337203685477580L);
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      hashingSink0.hash();
      buffer1.writeDecimalLong(922337203685477580L);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)2;
      buffer3.hashCode();
      try { 
        buffer1.write((Source) inflaterSource0, 922337203685477580L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(92233L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      buffer1.hmacSha256(byteString0);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.readUtf8();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)100;
      realBufferedSink0.buffer.read(byteArray1);
      buffer0.readUtf8Line();
      realBufferedSink0.buffer.size();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.skip((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, (-1), (-49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer0.md5();
      buffer0.segmentSizes();
      byte byte0 = (byte)32;
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong((-234L));
      ByteString byteString0 = realBufferedSource0.buffer.md5();
      buffer2.rangeEquals(337L, byteString0, (-2161), (int) (byte)32);
      buffer1.readUnsafe();
      buffer2.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.resizeBuffer(8L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully(buffer2, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(1000000L);
      ByteString byteString0 = buffer0.md5();
      buffer0.segmentSizes();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)8;
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((-234L));
      realBufferedSource0.buffer.md5();
      buffer0.rangeEquals(8L, byteString0, (int) (byte)32, (-294));
      buffer1.readUnsafe();
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.size = 4294967295L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(338L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = true;
      pipe0.source();
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(10000L);
      buffer1.rangeEquals(92233720368547758L, (ByteString) null, 2369, (-2519));
      buffer0.readUnsafe();
      Buffer buffer2 = pipe0.buffer;
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      buffer1.sha256();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1500L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1500 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.md5();
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeIntLe(731);
      buffer3.readUnsafe();
      buffer3.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 731, 731);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[7];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer2 = buffer0.write(byteString0);
      buffer2.readAll(buffer1);
      buffer1.sha256();
      buffer1.readShortLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer0.writeTo(outputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = false;
      pipe0.source();
      Pipe pipe1 = new Pipe(4L);
      Buffer buffer0 = pipe1.buffer;
      Buffer buffer1 = buffer0.writeLong(10000L);
      buffer1.readUtf8CodePoint();
      buffer0.indexOf((byte) (-63), 1983L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Okio");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      buffer0.snapshot();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer2);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1758), (byte) (-112));
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (long) 8);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      pipe0.source();
      pipe0.source();
      Pipe pipe1 = new Pipe(3372L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(3372L);
      buffer1.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      long long0 = (-330L);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte) (-58), (-330L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-330 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer2 = buffer0.write(byteString0);
      buffer2.readAll(buffer1);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer3 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeDecimalLong(10000000000L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      buffer1.writeShortLe(8);
      buffer1.close();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor1.resizeBuffer(2248L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(9918170112L);
      buffer1.readLong();
      Buffer buffer2 = buffer0.writeDecimalLong((-762L));
      buffer0.md5();
      buffer2.segmentSizes();
      buffer1.hashCode();
      Buffer buffer3 = (Buffer)buffer1.write((Source) buffer0, (long) (byte) (-15));
      Pipe pipe1 = new Pipe(60L);
      buffer2.flush();
      buffer2.readIntLe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.buffer();
      try { 
        buffer1.write((Source) buffer3, 216L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer2.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource1.buffer();
      Buffer buffer3 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readUtf8Line(3527L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3526 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      Buffer buffer2 = buffer1.writeShortLe(8);
      buffer1.close();
      buffer0.writeDecimalLong(922337203685477580L);
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer3 = buffer1.writeDecimalLong(922337203685477580L);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.readShort();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      buffer3.selectPrefix(options0);
      buffer3.readShort();
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer1 = buffer0.writeDecimalLong((-5L));
      buffer0.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      realBufferedSource0.buffer.snapshot();
      buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(4L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      buffer1.md5();
      realBufferedSink0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writableSegment((-1194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(3372L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeDecimalLong(1000000L);
      buffer0.md5();
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeIntLe(731);
      buffer3.readUnsafe();
      buffer3.readUtf8CodePoint();
      Buffer buffer4 = realBufferedSource0.buffer();
      try { 
        buffer4.write((Source) realBufferedSink0.buffer, 1246L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(2258L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeDecimalLong(100000000L);
      buffer0.md5();
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer.writeIntLe(731);
      buffer2.readUnsafe();
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-45), (-45));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(9223372036L);
      ByteString byteString0 = buffer2.md5();
      buffer0.sha512();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = buffer0.writeString("{m+.Nq`2.=B03UM%A*!", charset0);
      buffer2.hmacSha1(byteString0);
      buffer3.indexOf((byte)113, 2529L);
      byte[] byteArray0 = new byte[0];
      buffer1.write(byteArray0);
      realBufferedSource0.buffer.readString(charset0);
  }
}
