/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:27:13 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParser;
import wheel.ErrorPage;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "yOt,yo";
      ElExpression elExpression0 = new ElExpression("yOt,yo");
      ElExpression elExpression1 = elExpression0.errorMessage("yOt,yo");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("updateTargetId=");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel((-2219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "s@!t";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("s@!t");
      dynamicSelectModel0.getTopLevelComponent();
      String string1 = "duplicated attributes ";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("duplicated attributes ");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression duplicated attributes .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = XmlPullParser.FEATURE_REPORT_NAMESPACE_ATTRIBUTES;
      Any any0 = new Any(errorPage0, "http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");
      DynamicSelectModel dynamicSelectModel0 = any0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label((String) null);
      dynamicSelectModel3.setComponent(any0);
      dynamicSelectModel2.collection(" />");
      // Undeclared exception!
      try { 
        dynamicSelectModel3.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression  /> to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      String string0 = "E*owfh^3\"ad{hR9y";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("E*owfh^3\"ad{hR9y");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("E*owfh^3\"ad{hR9y");
      dynamicSelectModel2.collection("Form field with name ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel1.empty(mockThaiBuddhistDate0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        dynamicSelectModel3.getValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression Form field with name  to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "5<[3mdB_$CaBsx]W5@N";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5<[3mdB_$CaBsx]W5@N");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection("5<[3mdB_$CaBsx]W5@N");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("e%XS)d:");
      StandaloneComponent standaloneComponent0 = null;
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("e%XS)d:");
      String string0 = "";
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression e%XS)d:.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5<[3mdB_$CaBsx]W5@N");
      dynamicSelectModel1.collection("5<[3mdB_$CaBsx]W5@N");
      dynamicSelectModel1.label(".values()");
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.reset();
      DynamicSelectModel dynamicSelectModel2 = new DynamicSelectModel();
      Component component0 = dynamicSelectModel2.getComponent();
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection((String) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression null evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label((String) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("");
      dynamicSelectModel3.empty(dynamicSelectModel1);
      dynamicSelectModel1.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection(".");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression . evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("[] from ");
      int int0 = dynamicSelectModel0.getOptionCount();
      assertEquals(0, int0);
  }
}
