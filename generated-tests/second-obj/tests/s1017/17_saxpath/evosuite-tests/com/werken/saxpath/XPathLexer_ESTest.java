/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:29:39 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;W(9SO`Dh`");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*'L");
      xPathLexer0.LA(5439);
      xPathLexer0.nextToken();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("R_7H{L(vB S*");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer1.consume();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("_", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath(";\".");
      Token token3 = xPathLexer1.nextToken();
      Token token4 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer1.and();
      Token token5 = xPathLexer3.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer3.endPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(30, token3.getTokenType());
      assertEquals("7", token3.getTokenText());
      
      char char0 = xPathLexer2.LA(5439);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4&=IfI*y-}w");
      boolean boolean0 = xPathLexer0.isIdentifierChar('r');
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y]jad[mvR3w=N");
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.minus();
      xPathLexer1.consume();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">-?Jfs^#,je~q1v");
      Token token0 = xPathLexer0.colon();
      assertEquals(">", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(6, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      Token token0 = xPathLexer0.comma();
      assertEquals(")", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R_7H{L(vB S*");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("R_7H", token0.getTokenText());
      
      Token token1 = xPathLexer2.rightBracket();
      assertEquals(4, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals("p", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      Token token2 = xPathLexer0.dollar();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (32) (V)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (26) ([)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.identifier();
      assertEquals("6oW", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("\"", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('X');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yE;/NS(FNKt2");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("yE", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('S');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*'L");
      xPathLexer0.LA(5439);
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token2 = xPathLexer2.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      boolean boolean0 = xPathLexer2.isIdentifierChar('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R_7H{L(vB S*");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("*'L");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("~\"%F");
      xPathLexer1.dots();
      xPathLexer0.consume((-466));
      xPathLexer0.consume(1073);
      xPathLexer1.endPosition();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("");
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer2.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-466));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("99*XJw 8(eH");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("9", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("9", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("X");
      xPathLexer0.getPreviousToken();
      xPathLexer1.nextToken();
      xPathLexer0.notEquals();
      xPathLexer1.and();
      xPathLexer1.number();
      Token token0 = xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KAGe");
      Token token0 = xPathLexer0.plus();
      assertEquals("K", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.and();
      xPathLexer0.isIdentifierStartChar('T');
      xPathLexer1.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("AGe", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.getXPath();
      XPathLexer xPathLexer3 = new XPathLexer("w");
      Token token2 = xPathLexer3.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5l?YsO6V3:hwmT`Af");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("5", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      char char0 = xPathLexer0.LA(111);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("Y", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J .");
      xPathLexer0.currentPosition();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">0hSwE*tBKUx/Ehcl8");
      xPathLexer0.endPosition();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("}oT]dBN0<VfC!I");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("}o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("T", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("\n", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("l]", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("]", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath(";x");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";x", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(";x", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer("_MS&aE");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      xPathLexer2.at();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer4.operatorName();
      xPathLexer3.rightBracket();
      xPathLexer4.and();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.number();
      Token token1 = xPathLexer2.at();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.setXPath("B)jyDH\"aUSy)$l<j");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(")", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4&=IfI*y-}w");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('r');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("&=IfI*y-}w", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("&", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("T^^M+c;_@:p@,ewuZ");
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("T^", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^M+c;_@:p@,ewuZ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*'L");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.not();
      token0.toString();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      Token token2 = xPathLexer0.not();
      xPathLexer0.setXPath("{*O3h9$$V47acHQ$p<");
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.nextToken();
      xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("N?+j,&Rh");
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.div();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("N?", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(5, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("l", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.div();
      int int0 = xPathLexer0.endPosition();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setXPath("jriI|tqS{PB");
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("|*v@F(");
      xPathLexer0.relationalOperator();
      xPathLexer1.endPosition();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      Token token0 = xPathLexer2.nextToken();
      assertEquals(17, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b2~kW?3lBL&j#k");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.setXPath("b2~kW?3lBL&j#k");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("b2~kW?3lBL&j#k");
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "sH-^G&pI=e";
      XPathLexer xPathLexer0 = new XPathLexer("sH-^G&pI=e");
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      xPathLexer0.setXPath("2]n/4");
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token4);
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xmdSoA#$G#d N<#");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("xmdSoA#$G#d N<#");
      xPathLexer1.at();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer2.operatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("5(HY^$.P");
      Token token0 = xPathLexer0.dots();
      assertEquals("5", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("(H", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Y", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o[ .");
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath(":6(<CwJF1cW1");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.plus();
      xPathLexer2.plus();
      xPathLexer2.pipe();
      xPathLexer1.isIdentifierChar('\\');
      xPathLexer1.getXPath();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.comma();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("~\"%F");
      xPathLexer1.dots();
      xPathLexer0.consume((-466));
      xPathLexer0.consume(1073);
      xPathLexer1.rightParen();
      xPathLexer1.endPosition();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("~\"%F");
      xPathLexer2.and();
      xPathLexer1.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer1.setXPath("y]jad[mR3w=N");
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer2.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-466));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("sc><'~rd$2U");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1j<5m#QLL;_;#a)8");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer5.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer2.consume(1895);
      Token token2 = xPathLexer3.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer2.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer1.div();
      xPathLexer5.getPreviousToken();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      token3.toString();
      token3.toString();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("FDLX", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("&o", token7.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (11) (Z)", string0);
      assertEquals("Z", token0.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("2G", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("J-", token9.getTokenText());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("J", token10.getTokenText());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.div();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$jriI|tqS{PB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(26, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.nextToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("jriI|tqS{PB");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("riI", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y]jad[mvR3w=N");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.dollar();
      token1.toString();
      token1.toString();
      xPathLexer0.setXPath("y]jad[mvR3w=N");
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("/P!IRq;+Qms-U#");
      xPathLexer3.nextToken();
      xPathLexer3.colon();
      xPathLexer2.slashes();
      String string0 = null;
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/P!IRq;+Qms-U#");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.comma();
      assertEquals("I", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Qms-U#", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/P!IRq;+Qms-U#");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("P", token8.getTokenText());
      
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token9 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("/P!IRq;+Qms-U#");
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gl2z.Q\"&Kzkvmm`");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("z", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      token0.toString();
      Token token4 = xPathLexer0.dollar();
      assertEquals("Q", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p?f");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("dwkSoA$#d N<#");
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("dw", token1.getTokenText());
      
      xPathLexer1.and();
      String string0 = token0.toString();
      assertEquals("[ (15) (p)", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("T^^M+c;_@:p@,ewuZ");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("^^", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" C!>?3 501.bZ");
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(" C!>?3 501.bZ");
      xPathLexer1.consume((-1307));
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer1.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R_7H{L(vB S*");
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("*'L");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer3.rightBracket();
      xPathLexer3.endPosition();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      int int0 = xPathLexer0.endPosition();
      int int1 = xPathLexer0.endPosition();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".=[v");
      Token token0 = xPathLexer0.plus();
      assertEquals(".", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Nj");
      xPathLexer0.isIdentifierChar('r');
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Nj", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/P!IRq;+Qms-U#");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.minus();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.literal();
      assertNull(token2);
      
      xPathLexer1.rightBracket();
      xPathLexer0.div();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer2.not();
      xPathLexer2.setXPath(") (");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer3.notEquals();
      xPathLexer4.setPreviousToken(token5);
      xPathLexer3.and();
      Token token6 = xPathLexer3.dollar();
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.endPosition();
      Token token8 = xPathLexer4.identifierOrOperatorName();
      assertNotNull(token8);
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer5.not();
      assertEquals(23, token9.getTokenType());
      
      boolean boolean0 = xPathLexer4.isIdentifierChar('3');
      assertTrue(boolean0);
      
      xPathLexer2.setPreviousToken(token6);
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("&", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      xPathLexer0.setXPath("upF0");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("up", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("F", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('#');
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
      assertNotNull(token13);
      
      Token token14 = xPathLexer1.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      Token token15 = xPathLexer2.pipe();
      assertEquals(17, token15.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.isIdentifierChar('*');
      xPathLexer0.setPreviousToken(token4);
      assertEquals("+", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("jriI|tqS{PB");
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume((-2203));
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-2266));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath(" C8?501.bl");
      xPathLexer0.setPreviousToken(token3);
      assertEquals(19, token3.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals(" ", token6.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer0.not();
      assertEquals("8", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("I~");
      Token token10 = xPathLexer4.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      xPathLexer3.mod();
      xPathLexer2.setPreviousToken(token8);
      assertEquals(16, token8.getTokenType());
      
      Token token12 = xPathLexer3.pipe();
      assertEquals(17, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("/XN&~c");
      xPathLexer1.operatorName();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer4.or();
      Token token6 = xPathLexer2.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer1.and();
      xPathLexer3.number();
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/P!IRq;+Qms-U#");
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("/P!IRq;+Qms-U#");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">0hSwE*tBKUx/Ehcl8");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer1.mod();
      Token token0 = xPathLexer1.at();
      xPathLexer0.slashes();
      xPathLexer1.and();
      xPathLexer1.not();
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.literal();
      xPathLexer1.relationalOperator();
      xPathLexer1.notEquals();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.equals();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.colon();
      xPathLexer0.mod();
      xPathLexer1.whitespace();
      xPathLexer2.getXPath();
      char char0 = xPathLexer3.LA(3684);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!2XkW?3lBLdj#k");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setXPath("@7GMC|]tx?YYJw");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("6=0AZ3Jg[");
      xPathLexer0.consume(24);
      xPathLexer0.div();
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("6=0AZ3Jg[");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&1m]H~h`");
      xPathLexer0.or();
      Token token0 = xPathLexer0.star();
      assertEquals("&", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("H", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.colon();
      assertEquals("h", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(" (", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (23) ())", string0);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.consume(3160);
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      char char0 = xPathLexer0.LA(3160);
      assertEquals('\uFFFF', char0);
      
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals(23, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer2.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token1 = xPathLexer3.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer3.nextToken();
      assertEquals("(", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer3.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer2.whitespace();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.whitespace();
      Token token5 = xPathLexer5.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer2.identifier();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A<4fwE,VU7Z6rW");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("4", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("f", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("E", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("o`k%zR72");
      xPathLexer0.slashes();
      xPathLexer1.and();
      Token token0 = xPathLexer1.not();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.slashes();
      token0.toString();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.rightBracket();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token1 = xPathLexer7.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("+ef");
      xPathLexer0.consume();
      xPathLexer2.star();
      xPathLexer0.consume();
      xPathLexer2.nextToken();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer("#4gKWM_sk<x");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(" ", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token6 = xPathLexer4.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer4.relationalOperator();
      xPathLexer2.operatorName();
      Token token7 = xPathLexer2.dots();
      assertEquals(13, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cW3>ACp\u0002VUXXI~h<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("cW3", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y*$4<`vJ58|");
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.consume(2623);
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      String string0 = xPathLexer0.getXPath();
      assertEquals("Y*$4<`vJ58|", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.slashes();
      xPathLexer0.number();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.setXPath(":6(<CwJF1cW1");
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.setXPath("7}(#,4>9S(DF#N2");
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.minus();
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer1.div();
      xPathLexer0.number();
      xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TiFE{#*k`b(0[Vj");
      XPathLexer xPathLexer1 = new XPathLexer("Fwf'wc&Pzs%");
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.not();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer1.not();
      xPathLexer0.setXPath(":6(7<EC^JJz1cQP3");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer(":6(7<EC^JJz1cQP3");
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer2.rightBracket();
      xPathLexer4.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4Ey7");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Ey7", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.and();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.consume(166);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('?');
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&I9#+FLX&o2GJ-");
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.div();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.setXPath(" C8?50y.bl");
      token0.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.star();
      Token token2 = xPathLexer0.relationalOperator();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M]=B58WcKR@'M");
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (4) (])", string0);
      
      xPathLexer0.setPreviousToken(token0);
      char char0 = xPathLexer0.LA(2109);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("58", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wvt{8XZ[-GxHhC\u001B+");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('');
      assertFalse(boolean0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("vt", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wvt{8XZ[-GxHhC\u001B+");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('');
      assertFalse(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      assertEquals("wvt", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g({1X");
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("g({1X");
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.equals();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      xPathLexer2.pipe();
      Token token0 = xPathLexer6.colon();
      xPathLexer3.setPreviousToken(token0);
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer4.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Oe");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".3bv");
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.plus();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer("YK");
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume((-2191));
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.consume((-2266));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j-(UxE{`nBFZPUr");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("j-(UxE{`nBFZPUr");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("j-", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(15);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.dots();
      assertEquals("(", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("$3+.tx-^SNDf2U");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".=[v");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "3=kv";
      XPathLexer xPathLexer1 = new XPathLexer("3=kv");
      xPathLexer1.getPreviousToken();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".=[v");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.rightParen();
      assertEquals(".", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      xPathLexer0.identifier();
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" C!>?3 501.bZ");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(" C!>?3 501.bZ");
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.star();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.plus();
      xPathLexer5.number();
      xPathLexer0.dots();
      xPathLexer6.at();
      xPathLexer3.comma();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.number();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gl2z.Q\"&Kzkvmm`");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&Kzkvmm`", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
      
      xPathLexer0.nextToken();
      token1.toString();
      Token token4 = xPathLexer0.dollar();
      assertEquals("K", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ".3bv";
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".3bv");
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.at();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(".3bv");
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
