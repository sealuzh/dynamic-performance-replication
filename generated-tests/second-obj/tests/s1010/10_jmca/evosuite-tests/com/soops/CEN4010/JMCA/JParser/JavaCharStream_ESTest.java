/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:37:36 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('\u0000');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\'');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 98);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charset0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = (-2598);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, (-2598), 0);
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(0, 0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(237);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 237, (-1), (-1));
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e wh<}:i \"||]'6s");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@%l");
      JavaCharStream.hexval('4');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream(71);
      javaCharStream0.readChar();
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.column = 1220;
      javaCharStream0.ReInit((Reader) null, 1220, 1220, 800);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      javaCharStream0.GetImage();
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) null);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-190);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 90, (-190), 3766);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.skip((byte)74);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-3620), (int) (byte)13);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 4086);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      javaCharStream0.BeginToken();
      javaCharStream0.ReadByte();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1049, 8, 458);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      javaCharStream0.adjustBeginLineColumn(1049, 271);
      javaCharStream0.ReInit((Reader) charArrayReader1, 5020, (-126), 458);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.FillBuff();
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn((-1188), 1362);
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      javaCharStream0.backup(97);
      javaCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.maxNextCharInd = 1362;
      javaCharStream0.inputStream = (Reader) stringReader0;
      javaCharStream0.FillBuff();
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn((-363), 0);
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaCharStream.hexval('2');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-2496), (-2496));
      javaCharStream0.getBeginLine();
      javaCharStream0.GetSuffix(88);
      javaCharStream0.Done();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.maxNextCharInd = (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 4096;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.maxNextCharInd = 4096;
      javaCharStream0.inputStream = (Reader) stringReader0;
      javaCharStream0.FillBuff();
      javaCharStream0.GetImage();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.adjustBeginLineColumn(1, (-2845));
      // Undeclared exception!
      try { 
        javaCharStream1.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Inv&lid escape character at line ");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      javaCharStream0.GetSuffix(802);
      javaCharStream0.GetImage();
      stringReader0.close();
      javaCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      char[] charArray0 = new char[0];
      javaCharStream0.nextCharBuf = charArray0;
      javaCharStream0.backup(515);
      javaCharStream0.backup(93);
      javaCharStream0.getColumn();
      javaCharStream0.GetSuffix(3505);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaCharStream.hexval('1');
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 88, 88);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream.hexval('a');
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFile mockFile0 = new MockFile("");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 0, 73);
      javaCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid esca_e character at line ");
      StringReader stringReader1 = new StringReader("Invalid esca_e character at line ");
      JavaCharStream.hexval('7');
      MockFile mockFile0 = new MockFile("Invalid esca_e character at line ");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(18);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.reset();
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaCharStream.hexval('9');
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 9, 708, 0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      javaCharStream0.ReInit((Reader) pushbackReader0, 888, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaCharStream.hexval('1');
      StringReader stringReader0 = new StringReader("");
      JavaCharStream.hexval('3');
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid esca_e character at lne ");
      StringReader stringReader1 = new StringReader("*");
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char char0 = ']';
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('2');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "h$yq.8I+Rhj7";
      StringReader stringReader0 = new StringReader("h$yq.8I+Rhj7");
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char char0 = ':';
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = 'N';
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaCharStream.hexval('E');
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      JavaCharStream.hexval('A');
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JavaCharStream.hexval('e');
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)79;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1882);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("e wh<}:i \"||]'6s");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@%l");
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char char0 = '_';
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1882);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader("e wh<}:i \"||]'6s");
      JavaCharStream.hexval('4');
      Enumeration<InputStream> enumeration0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FXffS;O%C@BPPXkT-");
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream.hexval('D');
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream.hexval('8');
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "e wh<}:i \"||]'6s";
      StringReader stringReader0 = new StringReader("e wh<}:i \"||]'6s");
      char char0 = '4';
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JavaCharStream.hexval('1');
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 12);
      StringReader stringReader0 = new StringReader("J$jc$IGk%'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 8);
      javaCharStream0.tokenBegin = 12;
      javaCharStream0.BeginToken();
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(58);
      StringReader stringReader0 = new StringReader(").mMj]2jR;=~PV");
      JavaCharStream.hexval('0');
      MockFile mockFile0 = new MockFile("Invalid escape character at line ");
      MockFile mockFile1 = new MockFile(mockFile0, ").mMj]2jR;=~PV");
      mockFile1.delete();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char char0 = 'S';
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = ',';
      charArray0[0] = ',';
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JavaCharStream.hexval('8');
      PipedReader pipedReader0 = new PipedReader(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2919, 97);
      javaCharStream0.backup(1275);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.line = (int) (byte)8;
      javaCharStream0.readChar();
      JavaCharStream.hexval('8');
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JavaCharStream.hexval('C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream.hexval('6');
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 67;
      PipedReader pipedReader0 = new PipedReader(67);
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e wh<}:i \"||]'6s");
      char char0 = '<';
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JavaCharStream.hexval('f');
      try { 
        JavaCharStream.hexval('j');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JavaCharStream.hexval('5');
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char char0 = 'X';
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(18);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)11, 14);
      javaCharStream0.BeginToken();
      byteArrayInputStream0.mark(85);
      javaCharStream0.backup((byte)11);
      javaCharStream0.BeginToken();
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.GetImage();
      javaCharStream0.getEndColumn();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.readChar();
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[2];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader("LGh.(&4\"\"X>-}LH@~");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 2, (byte)0);
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      javaCharStream0.Done();
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.readChar();
      javaCharStream0.ReInit((Reader) charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-89);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char char0 = '^';
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JavaCharStream.hexval('e');
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)126;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)126);
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      javaCharStream0.ReInit((Reader) pipedReader0, (int) (byte)126, (int) (byte)126, 0);
      PipedReader pipedReader1 = new PipedReader();
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (-1412));
      javaCharStream0.bufsize = 13;
      javaCharStream0.available = (-1641);
      javaCharStream0.BeginToken();
      javaCharStream0.ReInit((Reader) pipedReader0, 147, (int) (byte)0);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JavaCharStream.hexval('8');
      JavaCharStream.hexval('8');
      PipedReader pipedReader0 = new PipedReader(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[5] = (byte)100;
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (-1412));
      javaCharStream0.bufsize = (-1542);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.AdjustBuffSize();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.Done();
      javaCharStream0.backup((byte)100);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0, (byte)8, (-1542));
      javaCharStream0.ReInit((Reader) pipedReader0, (int) (byte)100, (int) (byte)100);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream.hexval('F');
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      char char0 = 'W';
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedReader pipedReader1 = new PipedReader(1);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1963), (-1963));
      javaCharStream0.adjustBeginLineColumn((-1963), 238);
      javaCharStream0.ReInit((Reader) null);
      javaCharStream0.bufpos = 850;
      javaCharStream0.backup(1454);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-13), (-204));
      javaCharStream0.BeginToken();
      dataInputStream0.read();
      JavaCharStream javaCharStream2 = new JavaCharStream(dataInputStream0, (byte)100, 100);
      javaCharStream0.AdjustBuffSize();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      charArrayReader0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream(73);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JavaCharStream.hexval('b');
      PipedInputStream pipedInputStream0 = new PipedInputStream(93);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn(pipedInputStream0).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration1).hasMoreElements();
      doReturn(bufferedInputStream0).when(enumeration1).nextElement();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      JavaCharStream.hexval('c');
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = 91;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 91, 91, 1);
      char[] charArray1 = javaCharStream0.nextCharBuf;
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      javaCharStream0.readChar();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream1);
      javaCharStream0.Done();
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.close();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 100, 100);
      javaCharStream0.GetSuffix(100);
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('d');
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.close();
      dataInputStream0.readChar();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      pushbackInputStream0.close();
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-4481), 72);
      char[] charArray0 = javaCharStream0.nextCharBuf;
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 91, 91, 1);
      char[] charArray1 = javaCharStream0.nextCharBuf;
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      char char0 = File.pathSeparatorChar;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream1);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      charArrayReader1.read();
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      javaCharStream0.ReInit((Reader) pushbackReader0, 91, 1);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JavaCharStream.hexval('B');
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JavaCharStream.hexval('8');
      PipedReader pipedReader0 = new PipedReader(24);
      byte byte0 = (byte)8;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[5] = (byte)100;
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (-1412));
      javaCharStream0.bufsize = (-1542);
      javaCharStream0.available = (-1641);
      javaCharStream0.prevCharIsLF = true;
      javaCharStream0.BeginToken();
      int int0 = (-229);
      javaCharStream0.ReInit((Reader) pipedReader0, 147, (int) (byte)8);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JavaCharStream.hexval('8');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedReader pipedReader0 = new PipedReader(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (byte)8);
      javaCharStream0.bufsize = (-1542);
      javaCharStream0.available = (-4371);
      int int1 = (-1);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 8, (-1));
      javaCharStream0.BeginToken();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.AdjustBuffSize();
      SequenceInputStream sequenceInputStream1 = null;
      try {
        sequenceInputStream1 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)12;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = JavaCharStream.staticFlag;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, (byte)12);
      String string0 = "]*A ";
      StringReader stringReader0 = new StringReader("]*A ");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1117, (-1));
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      char char0 = File.pathSeparatorChar;
      dataInputStream0.close();
      javaCharStream1.inputStream = (Reader) stringReader0;
      javaCharStream1.backup(10);
      javaCharStream1.ReInit((Reader) stringReader0);
      char char1 = File.pathSeparatorChar;
      javaCharStream0.ReInit((InputStream) dataInputStream0, 740, 2, 740);
      javaCharStream2.BeginToken();
      javaCharStream0.backup(1117);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-2254), (-1), 10);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = JavaCharStream.staticFlag;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (byte)8);
      StringReader stringReader0 = new StringReader("]*A ");
      stringReader0.read();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1117, (-1));
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      char char0 = File.pathSeparatorChar;
      javaCharStream1.backup(2);
      javaCharStream1.ReInit((Reader) stringReader0);
      javaCharStream2.prevCharIsCR = true;
      boolean boolean1 = javaCharStream0.prevCharIsLF;
      char char1 = File.pathSeparatorChar;
      javaCharStream2.BeginToken();
      javaCharStream0.backup(1117);
      javaCharStream1.AdjustBuffSize();
      PipedReader pipedReader0 = new PipedReader();
      javaCharStream2.ReInit((InputStream) byteArrayInputStream0);
      char[] charArray0 = new char[0];
      try { 
        pipedReader0.read(charArray0, 928, (int) (byte)8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
