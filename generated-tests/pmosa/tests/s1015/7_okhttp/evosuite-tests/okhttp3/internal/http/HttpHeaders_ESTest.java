/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:05:57 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "5V";
      HttpHeaders.parseSeconds("5V", 1560);
      String string1 = "pT";
      HttpHeaders.parseSeconds("pT", 1560);
      String string2 = "qc'!El>R";
      HttpHeaders.parseSeconds("qc'!El>R", (-740));
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("", 1425, "");
      assertEquals(1425, int0);
      
      int int1 = HttpHeaders.parseSeconds("S", 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipWhitespace("", 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string1 = "";
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        Headers.of((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: : 
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "26d87*:oSy-=zeY1";
      stringArray0[1] = "26d87*:oSy-=zeY1";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "26d87*:oSy-=zeY1");
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpHeaders.parseSeconds("", 63);
      HttpHeaders.parseSeconds((String) null, 32);
      int int0 = HttpHeaders.skipUntil("5Q>,>N}._y)lsU", 63, "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(")j<*", "5Q>,>N}._y)lsU");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
      
      int int1 = HttpHeaders.parseSeconds("", 63);
      assertTrue(int1 == int0);
      assertEquals(63, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpHeaders.skipWhitespace("okhttp3.internal.http.HttpHeaders", 65280);
      int int0 = (-1879);
      HttpHeaders.parseSeconds("okhttp3.internal.http.HttpHeaders", (-1879));
      String string0 = "n/Wey9:yYN1mN*bY";
      HttpHeaders.skipWhitespace("n/Wey9:yYN1mN*bY", 1873);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.hasVaryAll(headers0);
      headers0.values("n/Wey9:yYN1mN*bY");
      HttpHeaders.contentLength(headers0);
      String[] stringArray0 = new String[0];
      Headers headers1 = Headers.of(stringArray0);
      HttpHeaders.contentLength(headers1);
      hashMap0.put("n/Wey9:yYN1mN*bY", " ah");
      Headers.of(stringArray0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      URI uRI0 = null;
      Headers.of(stringArray0);
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("", 0);
      int int1 = HttpHeaders.skipWhitespace("NE|08", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.newBuilder();
      hashMap0.put("qs}FE}-T#(5U>;J)Gf", "qs}FE}-T#(5U>;J)Gf");
      hashMap0.put("fGkVrj1V`VkUo=Cmb?", "\"([^\"]*)\"");
      hashMap0.put("K-Ss/}B/", "");
      hashMap0.values();
      hashMap0.keySet();
      headers0.getDate("HTTP_1_1");
      Challenge challenge0 = new Challenge(":@", "");
      String[] stringArray0 = new String[0];
      Headers headers1 = Headers.of(stringArray0);
      challenge0.toString();
      hashMap0.remove((Object) challenge0);
      headers0.toString();
      headers1.toMultimap();
      headers0.names();
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.parseChallenges(headers0, "\"([^\"]*)\"");
      HttpHeaders.contentLength(headers0);
      HttpHeaders.parseChallenges(headers0, "K-Ss/}B/");
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      HttpHeaders.varyFields(headers0);
      Set<String> set1 = HttpHeaders.varyFields(headers1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.getDate("");
      hashMap0.putIfAbsent("<!(nsK7Vuy(p&Wn [T", "<!(nsK7Vuy(p&Wn [T");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap1);
      HttpHeaders.parseChallenges(headers0, "^t");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(")m5z,pKtFA$", 542);
      assertEquals(542, int0);
      
      int int1 = HttpHeaders.skipUntil("#{Y30zG:", 5, "Transfer-Encoding");
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "01Fy`H&";
      HttpHeaders.skipWhitespace("01Fy`H&", 0);
      HttpHeaders.skipUntil("01Fy`H&", 0, "01Fy`H&");
      HttpHeaders.parseSeconds("%~5zkpktf$", 0);
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpHeaders.parseSeconds("okhttp3.internal.http.HttpHeaders", (-506));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "okhttp3.internal.http.HttpHeaders");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      HttpHeaders.varyHeaders(headers0, headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil("okhttp3.internal.http.HttpHeaders", (-506), "okhttp3.internal.http.HttpHeaders");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpHeaders.parseSeconds("vary", 31);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vary";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "26d87*:oSy-=zeY1";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "vary");
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(headers0, headers0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x7f at 1 in vary value: 26d87*:oSy-=zeY1
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      hashMap0.put("([^ \"=]*)", "qu");
      hashMap0.put("P|'aD0Q<<+U", "Vk!28<T[H/JD");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.getDate("m");
      HttpHeaders.varyHeaders(headers0, headers0);
      int int0 = HttpHeaders.parseSeconds("9", 15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int0);
      
      int int1 = HttpHeaders.parseSeconds("cg'L~T/s;UkY:_m", 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vary";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(3, headers1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "beginIndex < 0: ";
      stringArray0[1] = "T^9(T+%wp";
      stringArray0[2] = "Content-Length";
      stringArray0[3] = "aI[,@}";
      Headers headers0 = Headers.of(stringArray0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^ .=]k*)";
      stringArray0[1] = "[^ .=]k*)";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "[^ .=]k*)");
      HttpHeaders.skipWhitespace("%q,|KY]}Ns^[", 2048);
      HttpHeaders.skipUntil("%q,|KY]}Ns^[", 119, ")j<*");
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^ .=]k*)";
      stringArray0[1] = "[^ .=]k*)";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "[^ .=]k*)");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of(stringArray0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseSeconds("[^ .=]k*)", 2889);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers1, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      stringArray0[4] = "getsockname failed";
      stringArray0[5] = "";
      stringArray0[6] = "vary";
      stringArray0[7] = "zNJ.X2.PW~&jbr'";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(3, headers1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Content-Length";
      stringArray0[1] = ",P_$\"kL.ISn>O?x?`:/";
      stringArray0[2] = "EEE MMM d yyyy HH:mm:ss z";
      stringArray0[3] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[4] = "1>";
      stringArray0[5] = "c realmg=v|*";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "1>");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K&>aNDT+*}@tdIT3spx";
      stringArray0[1] = ",P_\"L.ISn>O?x?`:/";
      stringArray0[2] = ",P_\"L.ISn>O?x?`:/";
      stringArray0[3] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[4] = "1>";
      stringArray0[5] = "c realmg=v|*";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "1>");
      assertEquals(0, list0.size());
  }
}
