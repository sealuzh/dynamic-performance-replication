/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:07:24 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      constantPoolGen0.getConstant(52);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass("e");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(6);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(6, 6);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = (-183);
      ConstantString constantString0 = new ConstantString((-183));
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-183), 184);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(213, 213);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      long long0 = (-1L);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(213);
      constantArray0[2] = (Constant) constantString0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(233, (-202));
      Constant constant0 = constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -202
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2123), (-2123));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2123
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(806, 806);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass(870);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.lookupDouble(1);
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.adjustSize();
      String[] stringArray0 = new String[10];
      stringArray0[1] = "";
      stringArray0[2] = "K!v";
      constantPoolGen0.addClass(objectType0);
      stringArray0[3] = "#";
      stringArray0[4] = "address";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3wMF[L]#");
      stringArray0[6] = "address";
      stringArray0[7] = "3wMF[L]#";
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL();
      InstructionList instructionList0 = new InstructionList(iNVOKEVIRTUAL0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      int int0 = Character.MAX_CODE_POINT;
      assertEquals(1114111, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(25, 25);
      Constant constant0 = constantMethodHandle0.copy();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[1] = constant0;
      int int0 = Pattern.LITERAL;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 25, reference_index = 25)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-706), (-706));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((-706));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-706));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat((-18.847F));
      constantPoolGen0.lookupMethodref("X_Q7>'uz|tftbXK1R", "|;=ux7PD2+o\"?^\"J", (String) null);
      int int0 = Byte.SIZE;
      ConstantClass constantClass0 = new ConstantClass((-1));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.copy();
      constantPoolGen0.lookupMethodref("5W1", "Stack next-to-top must be of type short[] but is '", "5W1");
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupLong((-3038L));
      constantPoolGen0.lookupInterfaceMethodref("O6d821ab}q?uy", "Stack next-to-top must be of type short[] but is '", "5W1");
      int int1 = constantPoolGen0.addDouble((-3.55956943498));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4327), (-4327));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1550.661675924);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addLong((-1L));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4327
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(175, 175);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger(175);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(3002.23731);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.CANON_EQ;
      int int1 = constantPoolGen0.lookupClass("Exception handler target is null instruction");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2961;
      ConstantClass constantClass0 = new ConstantClass(2961);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = ")";
      constantPoolGen0.addString(")");
      constantPoolGen0.addString(")");
      ConstantInteger constantInteger0 = new ConstantInteger((-1961));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger2 = new ConstantInteger(2961);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2961
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("&", "&");
      constantPoolGen0.addUtf8("");
      constantPoolGen0.addLong((-1));
      constantPoolGen0.addFloat(2);
      ConstantFloat constantFloat0 = new ConstantFloat((-130.0F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantFloat0.setBytes(0.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-706), (-706));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-706));
      constantPoolGen0.lookupInteger((-706));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[1], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 1);
      constantNameAndType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.lookupDouble(1);
      constantPoolGen0.addInteger(1);
      constantPoolGen0.setConstant(1, constantNameAndType0);
      String string0 = "+";
      ClassPath classPath0 = new ClassPath("+");
      ClassPath classPath1 = new ClassPath(classPath0, "CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      String string1 = null;
      // Undeclared exception!
      try { 
        classPathRepository0.loadClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("F");
      constantPoolGen0.lookupNameAndType("F", "iload_2");
      constantPoolGen0.addLong(1);
      int int0 = constantPoolGen0.lookupLong(4208L);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addClass("1\"@-`VTYx&;||Ejc");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen1.addInteger(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(244, 244);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(244, 244);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("6x", "%", "%");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Member.DECLARED;
      constantPoolGen0.toString();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5, 5);
      // Undeclared exception!
      try { 
        constantInterfaceMethodref0.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 5 and got CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".%'%");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref(",sg8ZHOJhl]LG>ZDOO@", ".%'%", "9OPxedje/iiy_");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(2837);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(2837);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2837, (-1));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(247, 171);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(171);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Double.SIZE;
      constantPoolGen0.addFieldref("%", "%", "%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2575, 249);
      constantMethodHandle0.toString();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(133, 64);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(133, 249);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPool constantPool2 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      constantMethodHandle0.setReferenceIndex(2362);
      constantMethodHandle0.toString();
      constantPoolGen0.lookupInteger(249);
      constantPoolGen1.setConstant(161, constantMethodHandle0);
      int int1 = constantPoolGen0.lookupFloat((-2559.0F));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 1);
      constantNameAndType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.lookupDouble(1);
      constantPoolGen0.addInteger((-2));
      constantPoolGen0.setConstant(1, constantNameAndType0);
      int int0 = constantPoolGen0.lookupDouble((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".0l5aP1q");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupUtf8((String) null);
      constantPoolGen0.lookupInterfaceMethodref("n", "n", ".0l5aP1q");
      constantPoolGen0.lookupUtf8((String) null);
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      constantPoolGen0.addFloat((-1));
      int int1 = constantPoolGen0.lookupFloat(65536);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("pEOK,", "pEOK,", "pEOK,");
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("' at index ", "f#+o=9LiKH/}SS%wR-");
      constantPoolGen0.addUtf8("YWe,GW^QZk{cKK~");
      constantPoolGen0.addLong((-4579712664540345420L));
      constantPoolGen1.addFloat((-1));
      int int0 = constantPoolGen0.lookupLong((-4579712664540345420L));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addNameAndType("e#", "e#");
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2123), (-2123));
      int int0 = Short.SIZE;
      constantPoolGen0.addMethodref("e#", "e#", "e#");
      int int1 = constantPoolGen0.addFloat((-1.0F));
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "The 'count' argument must not be 0.";
      constantPoolGen0.lookupNameAndType("The 'count' argument must not be 0.", "6x::<illegal opcode>");
      int int0 = Pattern.MULTILINE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addFloat((-1));
      constantPoolGen0.addFloat((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ClassPath classPath0 = new ClassPath("AnnotationDefault");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.adjustSize();
      int int0 = Float.BYTES;
      int int1 = Double.BYTES;
      GETFIELD gETFIELD0 = new GETFIELD();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPoolGen0.getFinalConstantPool();
      Method method0 = new Method();
      constantPoolGen0.addFieldref("AnnotationDefault", "o[}|=uKamQF", "AnnotationDefault");
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantPoolGen0.addConstant(constantLong0, constantPoolGen0);
      constantPoolGen0.adjustSize();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.size = (-1476);
      // Undeclared exception!
      try { 
        constantPoolGen0.addDouble(865.88008413305);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 250;
      int int1 = (-13);
      String string0 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(213);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<java.lang.reflect.Method> class0 = java.lang.reflect.Method.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setClassNameIndex(46);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" can't be both final and abstract");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      constantPoolGen0.lookupFloat(0.0F);
      ConstantPool constantPool1 = constantPoolGen1.getFinalConstantPool();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(256, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ClassLoader.getSystemClassLoader();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" can't be both final and abstract");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantString constantString0 = new ConstantString(46);
      constantPool0.accept(visitor0);
      constantPoolGen1.size = 2;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("", "", "eJG*&A2']J%oM@");
      constantPoolGen0.adjustSize();
      int int0 = Float.BYTES;
      int int1 = Double.BYTES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      GETFIELD gETFIELD0 = new GETFIELD();
      byte[] byteArray0 = new byte[4];
      GETFIELD gETFIELD1 = new GETFIELD();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      constantPoolGen1.getFinalConstantPool();
      Method method0 = new Method();
      GETFIELD gETFIELD2 = null;
      try {
        gETFIELD2 = new GETFIELD((-1606));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1606
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 250;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(250, (-13));
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInteger((-13));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPool0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addString("*EM.fj~-b.:N%Pwm-^L");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int int0 = constantPoolGen0.lookupLong(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("rBM]cO|z~bj:GOt1");
      constantPoolGen0.lookupLong((-4565234334962223677L));
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("[[[[[[[[[[L\b;");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "[eJG*&A2']o@");
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[6];
      constantPoolGen1.constants = constantArray0;
      constantPoolGen1.lookupNameAndType("", "");
      constantPoolGen1.addFieldref(":y|vtvN", ":y|vtvN", "");
      constantPoolGen0.adjustSize();
      constantPoolGen0.addConstant(constantArray0[5], constantPoolGen0);
      int int0 = Float.MIN_EXPONENT;
      constantPoolGen0.addDouble(5);
      constantPoolGen0.addString("^f[X,J<W,0mcfCc");
      int int1 = Character.SIZE;
      int int2 = constantPoolGen0.index;
      constantPoolGen0.addDouble(5);
      ConstantInteger constantInteger0 = new ConstantInteger((-2095105996));
      constantInteger0.clone();
      constantInteger0.toString();
      constantPoolGen0.toString();
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addMethodref("    InstructionHandle ih_%%eJG*&A2']J%oM@", "C-\"ab1jl{)\"{b", "C-\"ab1jl{)\"{b");
      constantPoolGen0.addMethodref("    InstructionHandle ih_%%eJG*&A2']J%oM@", "C-\"ab1jl{)\"{b", "C-\"ab1jl{)\"{b");
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((String) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[7];
      constantPoolGen2.constants = constantArray0;
      int int0 = constantPoolGen2.index;
      int int1 = Double.BYTES;
      constantPoolGen1.addMethodref("", "", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      constantPoolGen3.lookupInterfaceMethodref("", "", "");
      constantPoolGen3.size = 8;
      constantPoolGen2.getFinalConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Method method0 = new Method();
      constantPoolGen1.addLong(8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<5mO:&e{e");
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[5], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-13), (-13));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantPoolGen0.addLong(3117L);
      String string0 = Constants.ILLEGAL_TYPE;
      constantPoolGen0.addMethodref("<illegal type>", "^f[X,J<W,0mcCc#^f[X,J<W,0mcCc#", "^f[X,J<W,0mcCc#^f[X,J<W,0mcCc#");
      ConstantInteger constantInteger0 = new ConstantInteger(7);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Character.SIZE;
      constantPoolGen0.addFieldref("<illegal type>", "^f[X,J<W,0mcCc#^f[X,J<W,0mcCc#", ">.?D6N^v;68}b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat((-1.0F));
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int3 = constantPoolGen0.index;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen3.addLong(7);
      constantPoolGen0.addLong(3117L);
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantPool0);
      aALOAD0.getType(constantPoolGen5);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Unexpected constant type: ";
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.lookupMethodref("F!8}M'f.#,V+N)d\"", (String) null, "Jl3A[/yPCUoht8");
      Constant[] constantArray0 = new Constant[7];
      constantPoolGen2.constants = constantArray0;
      constantPoolGen1.addDouble(4);
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Method method0 = new Method();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$\";8");
      int int1 = Byte.SIZE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      constantPoolGen0.toString();
      constantPoolGen3.lookupFloat(4);
      constantPoolGen3.addInterfaceMethodref("", "", "");
      int int2 = Double.SIZE;
      constantPoolGen1.addLong((-1));
      // Undeclared exception!
      try { 
        constantPoolGen2.addInterfaceMethodref("nlPS/k:FY$rWl;VYB", "q@A(bI3g3-nHbCM+]", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "[eJG*&A2']o@%");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      int int0 = Character.MIN_CODE_POINT;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPoolGen2.constants);
      constantPoolGen2.lookupNameAndType("", "");
      int int1 = Pattern.UNICODE_CASE;
      Constant constant0 = constantPool0.getConstant(5);
      constantPoolGen1.addMethodref(">", ">", "s3`4AP[");
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      int int2 = Long.SIZE;
      constantPoolGen1.addLong((-920L));
      int int3 = Byte.SIZE;
      constantPoolGen2.addConstant(constant0, constantPoolGen0);
      int int4 = Byte.SIZE;
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen4);
      // Undeclared exception!
      try { 
        constantPoolGen3.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4), (-4));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantPoolGen0.addLong(3116L);
      constantPoolGen0.addFieldref("LKvQuQ[twxB*VMALU", "LKvQuQ[twxB*VMALU", "LKvQuQ[twxB*VMALU");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      constantPoolGen0.addMethodref("LKvQuQ[twxB*VMALU", "LKvQuQ[twxB*VMALU", "<clinit>");
      ConstantInteger constantInteger0 = new ConstantInteger((-4));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.FALSE;
      constantPoolGen1.addFieldref("<clinit>", "<clinit>", "<clinit>");
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      int int0 = Pattern.LITERAL;
      constantPoolGen0.lookupFieldref("LKvQuQ[twxB*VMALU", "LKvQuQ[twxB*VMALU", "LKvQuQ[twxB*VMALU");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.addInterfaceMethodref("<clinit>", "<clinit>", "<clinit>");
      int int1 = Byte.SIZE;
      int int2 = Long.SIZE;
      constantPoolGen1.addDouble(2188.6427891536414);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3, 155);
      int int3 = Double.SIZE;
      constantPoolGen2.adjustSize();
      constantPoolGen1.lookupLong(4611686018427387904L);
      assertEquals(7, constantPoolGen1.getSize());
  }
}
