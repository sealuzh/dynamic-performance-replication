/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:47:20 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.format(4261, 181, false, 'g');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-61);
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)59);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 224, (int) (byte) (-72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9637. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char char0 = 'U';
      Utility.format(2633, (-3756), false, 'U');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("2633");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2633
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("if_icmpge");
      constantArray0[0] = (Constant) constantUtf8_0;
      constantUtf8_0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-274), (-1970));
      Utility.classOrInterface((byte)102);
      try { 
        Utility.typeOfSignature("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: true
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)92);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)92, 118);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(234, 102);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantDouble constantDouble1 = new ConstantDouble(1.0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(118, (byte) (-128));
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[6] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 1495);
      assertEquals("0:    lcmp\n1:    dload\t\t%67\n3:    dload\t\t%74\n5:    <illegal opcode>\n6:    ifnonnull\t\t#-663\n", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = Utility.compactClassName("if_acmpeq");
      Utility.format((-1124), (-1124), false, '`');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("g(-tv\u0007@Bh:C=", (-1124), true, 'd');
      Utility.convertString("wnfUDhi>!AM.a.y");
      Utility.isJavaIdentifierPart('d');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-73);
      byteArray0[0] = (byte) (-107);
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte) (-94));
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)68;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123));
      assertEquals("0:    l2i\n1:    l2i\n2:    i2l\n3:    <illegal opcode>\n4:    bastore\n5:    l2i\n6:    fstore_1\n", string0);
      
      String string1 = Utility.convertString("0:    l2i\n1:    l2i\n2:    i2l\n3:    <illegal opcode>\n4:    bastore\n5:    l2i\n6:    fstore_1\n");
      assertEquals("0:    l2i\\n1:    l2i\\n2:    i2l\\n3:    <illegal opcode>\\n4:    bastore\\n5:    l2i\\n6:    fstore_1\\n", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmpne");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("if_icmpne");
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "if_icmpne";
      objectArray0[1] = (Object) "if_icmpne";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.accessToString(1049);
      assertEquals("public static final abstract", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-39), true);
      assertEquals("0:    d2i\n1:    lmul\n2:    dneg\n3:    <illegal opcode>\n4:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.isSet((-2904), 1737);
      Utility.classOrInterface(1737);
      Utility.convertString("interface");
      Utility.accessToString(15);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 390, (int) (byte) (-13), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Q:\"}D/ZY%,2lP";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("Q:\"}D/ZY%,2lP", "org.apache.bcel.classfile.Utility", (String) null);
      Utility.searchOpcode("org.apache.bcel.classfile.Utility");
      try { 
        Utility.typeOfSignature("Q:\"}D/ZY%,2lP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:\"}D/ZY%,2lP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-95));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.fillup("lload_1", 198, true, '}');
      Utility.compactClassName("lload_1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1114);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('~');
      Utility.compactClassName("private static final volatile abstract", false);
      byte[] byteArray0 = Utility.decode(" H62qO!9-U6wivr+j", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (-1148));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "if_icmpge";
      byte[] byteArray0 = Utility.decode("if_icmpge", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "if_icmpge";
      Utility.printArray(objectArray0);
      int int0 = 1479;
      int int1 = (-655);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1479, (-655), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.replace("checkcast", "checkcast", "checkcast");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-4);
      byte byte0 = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (-3013), 1004);
      try { 
        Utility.typeOfSignature("0:    ladd\n1:    <illegal opcode>\n2:    lastore\n3:    dreturn\n4:    <illegal opcode>\n5:    astore_0\n6:    <illegal opcode>\n7:    fneg\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ladd
         // 1:    <illegal opcode>
         // 2:    lastore
         // 3:    dreturn
         // 4:    <illegal opcode>
         // 5:    astore_0
         // 6:    <illegal opcode>
         // 7:    fneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "Lgd<w5";
      Utility.searchOpcode("Lgd<w5");
      try { 
        Utility.methodSignatureReturnType("Lgd<w5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lgd<w5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)5, (-1110912047), true);
      assertEquals("6:    <illegal opcode>\n7:    ixor\n8:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Utility.isSet(190, 155);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-84);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a7$c57$s$9a$5c$ac", string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)92);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType((byte)38);
      constantArray0[1] = (Constant) constantMethodType2;
      ConstantLong constantLong0 = new ConstantLong((-1766L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2747), 1384);
      assertEquals("0:    goto\t\t#-15049\n3:    dload_0\n4:    ifne\t\t#23728\n", string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.convertString("4TN,h'ap%o[xWf%d/6");
      try { 
        Utility.typeOfSignature("4TN,h'ap%o[xWf%d/6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4TN,h'ap%o[xWf%d/6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("+6 )mC>+oR1sU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "+6 )mC>+oR1sU";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dsub
         // 1:    <illegal opcode>
         // 2:    dup_x1
         // 3:    astore\t\t%196
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("LY[k6S$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1173), (int) (byte) (-90), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.replace("org.apache.bcel.generic.Type", "org.apache.bcel.generic.Type", "org.apache.bcel.generic.Type");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.generic.Type");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.bcel.generic.Type";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      mockFileOutputStream0.close();
      objectArray0[3] = (Object) "org.apache.bcel.generic.Type";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-55);
      byte byte0 = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3850, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%hJsX~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %hJsX~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.fillup(":|Isz", 241, true, '0');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 73);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), (int) (byte)1, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)5;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      String string1 = Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals("L$l$8b$I$A$A$A$A$A$A$A;", string1);
      
      String string2 = Utility.fillup("java.lang.\t", (byte)87, true, 'S');
      assertEquals("java.lang.\tSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string3 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = Utility.setBit(179, 179);
      assertEquals(524467, int0);
      
      byte byte0 = Utility.typeOfSignature("T%s2@,(y',>T`h");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Invalid method signature: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2459), (int) (byte)94, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.setBit(239, 239);
      String string0 = Utility.classOrInterface(221);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-60);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1254), (int) (byte)17, true);
      assertEquals("0:    dup2_x2\n1:    lconst_1\n2:    dload_2\n3:    sipush\t\t-17471\n6:    <illegal opcode>\n7:    wide\t(wide)\n", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{}", string2);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{}");
      int int0 = Utility.setBit(27, 20);
      assertEquals(1048603, int0);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$5e$K$u$R$bb$c1$f3$c4", string3);
      
      String string4 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "multianewarray");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-50);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 162, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)28;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)39, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = ":r{";
      try { 
        Utility.typeOfSignature(":r{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :r{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "goto_w";
      stringArray0[1] = "goto_w";
      stringArray0[2] = "goto_w";
      stringArray0[3] = "goto_w";
      stringArray0[4] = "goto_w";
      stringArray0[5] = "goto_w";
      String string0 = Utility.methodTypeToSignature("goto_w", stringArray0);
      assertEquals("(Lgoto_w;Lgoto_w;Lgoto_w;Lgoto_w;Lgoto_w;Lgoto_w;)Lgoto_w;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)43;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("03 2b", string1);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_1", string2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "5>=N>yN_Yk";
      try { 
        Utility.typeOfSignature("5>=N>yN_Yk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5>=N>yN_Yk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)8;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) (byte) (-65);
      objectArray0[2] = (Object) "c4 bf c1 06 8f 08";
      objectArray0[3] = (Object) (byte) (-113);
      objectArray0[4] = (Object) (byte) (-60);
      objectArray0[5] = (Object) "c4 bf c1 06 8f 08";
      objectArray0[6] = (Object) (byte) (-63);
      objectArray0[7] = (Object) (byte) (-65);
      objectArray0[8] = (Object) (byte) (-113);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D~{;!Jf/pd},%=I=bb*");
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("6, -65, c4 bf c1 06 8f 08, -113, -60, c4 bf c1 06 8f 08, -63, -65, -113");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6, -65, c4 bf c1 06 8f 08, -113, -60, c4 bf c1 06 8f 08, -63, -65, -113
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-12), (int) (byte) (-105), false);
      assertEquals("0:    lstore\t\t%20\n2:    freturn\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    dcmpl\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "double";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "double";
      stringArray0[1] = "double";
      stringArray0[2] = "double";
      stringArray0[3] = "double";
      stringArray0[4] = "double";
      Utility.methodTypeToSignature("double", stringArray0);
      Utility.format(67, 49, true, '-');
      Utility.methodSignatureArgumentTypes("(DDDDD)D");
      Utility.clearBit(49, 49);
      Utility.compactClassName("double", true);
      Utility.clearBit(49, (-2107));
      Utility.methodTypeToSignature("double", stringArray0);
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "I5e5+QN);V3Z";
      Utility.typeOfSignature("I5e5+QN);V3Z");
      Utility.classOrInterface((byte)10);
      Utility.searchOpcode(",JgjY9");
      Utility.isJavaIdentifierPart('6');
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("I5e5+QN);V3Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I5e5+QN);V3Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "monitorexit";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      Utility.setBit(93, 4139);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Lif_icmple;V";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lif_icmple;V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte) (-72), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.clearBit(165, (-404));
      Utility.clearBit(165, 165);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)127;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 201, 385, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.signatureToString("DsH'?^;wA9=Q<NK}p", true);
      Utility.searchOpcode("To0z,Y6jalbXu!Jpwq");
      Utility.fillup("To0z,Y6jalbXu!Jpwq", (short) (-1), true, '');
      Utility.accessToString(259);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), 36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    aload_3
         // 2:    lrem
         // 3:    f2d
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "77";
      Utility.compactClassName("77");
      String string1 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-65), 3037);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)66, (byte)66);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-65));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "G@=>i,V@`dO4gA>=3,@";
      try { 
        Utility.typeOfSignature("G@=>i,V@`dO4gA>=3,@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G@=>i,V@`dO4gA>=3,@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)31;
      byte byte0 = (byte)95;
      byteArray0[3] = (byte)95;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("30 99 1f 5f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 30 99 1f 5f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.isSet(1778, 1778);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 385, (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)68;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123));
      assertEquals("0:    l2i\n1:    return\n2:    i2l\n3:    <illegal opcode>\n4:    bastore\n5:    aastore\n6:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "!*.P01~7";
      String string1 = null;
      Utility.replace("!*.P01~7", "!*.P01~7", (String) null);
      try { 
        Utility.typeOfSignature("!*.P01~7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .P01~7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = ";n'o% _x- T;<";
      try { 
        Utility.typeOfSignature(";n'o% _x- T;<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;n'o% _x- T;<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 25;
      Utility.classOrInterface(25);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.classOrInterface(25);
      Utility.typeOfSignature("DbN[Wj'rD");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.convertString("|T");
      Utility.convertString("lshl");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-10);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("'o-Dvr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'o-Dvr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Te95U";
      stringArray0[1] = "Te95U";
      Utility.methodTypeToSignature("Te95U", stringArray0);
      Utility.getSignature("^G:[J)bL]q$ ne5?qh");
      char char0 = 'u';
      Utility.fillup("Te95U", 463, true, 'u');
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 90;
      Utility.setBit(90, 87);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("$N&(ZtR$5qc621kNt", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte) (-88);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)64;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)43;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte)26;
      byteArray1[8] = (byte)78;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 132, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), (int) (byte) (-98), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x2
         // 1:    dup_x1
         // 2:    <illegal opcode>
         // 3:    dload_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)117;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-54), (int) (byte) (-54));
      assertEquals("0:    lsub\n1:    breakpoint\n2:    fload_2\n3:    lneg\n", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte)101;
      Utility.equals(byteArray1, byteArray0);
      String string1 = Utility.format(101, 101, false, 'p');
      assertEquals("pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp101", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "KC\"s3ty_+0PC[j\\#T?";
      try { 
        Utility.typeOfSignature("KC\"s3ty_+0PC[j#T?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KC\"s3ty_+0PC[j#T?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)66;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart('I');
      String string0 = "=&*(J^<cA]%c";
      try { 
        Utility.typeOfSignature("=&*(J^<cA]%c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =&*(J^<cA]%c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=,Wm;W')F+jb");
      Utility.clearBit(990, 2703);
      String string0 = Utility.methodSignatureReturnType("SAME_EXTENDED", true);
      Utility.signatureToString("SAME_EXTENDED", false);
      Utility.accessToString(990);
      Utility.fillup("J/5;63+k)5I8RiT0,M", 990, true, ':');
      Utility.accessToString(990);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "short";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "short";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F6hCGQdu<;;T6i}Bg-");
      assertEquals("float", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "float";
      objectArray0[1] = (Object) "F6hCGQdu<;;T6i}Bg-";
      objectArray0[2] = (Object) "float";
      objectArray0[3] = (Object) "float";
      objectArray0[4] = (Object) "F6hCGQdu<;;T6i}Bg-";
      objectArray0[5] = (Object) "float";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{float, F6hCGQdu<;;T6i}Bg-, float, float, F6hCGQdu<;;T6i}Bg-, float}", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)78, 1865);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(660, 660);
      try { 
        Utility.typeOfSignature("!9/O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9/O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = 76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.typeOfSignature("[T\">wr(60?'k");
      Utility.getSignature("impdep1");
      Utility.isJavaIdentifierPart('A');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("[T\">wr(60?'k", "[T\">wr(60?'k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [T\">wr(60?'k
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 45;
      Utility.clearBit(45, 45);
      Utility.isSet(45, 45);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      String string0 = "+";
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "B";
      Utility.typeOfSignature("B");
      String string1 = "YfKXfYvW>8 ";
      try { 
        Utility.methodSignatureArgumentTypes("YfKXfYvW>8 ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YfKXfYvW>8 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "N8'>J X#(+bt";
      try { 
        Utility.typeOfSignature("N8'>J X#(+bt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N8'>J X#(+bt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-107));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      Utility.setBit(93, 4139);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.fillup("ifnull\t\t#-19708", 3623, false, 'w');
      Utility.isSet((byte) (-77), (-3148));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("i$i}/fQ", stringArray0);
      Utility.format(512, 77, true, 'P');
      try { 
        Utility.methodSignatureArgumentTypes("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "_~w:S>";
      Utility.decode("_~w:S>", false);
      String string1 = "SAME_LOCALS_1_STACK_EXTENDED";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("SAME_LOCALS_1_STACK_EXTENDED");
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SAME_LOCALS_1_STACK_EXTENDED", "_~w:S>", "SAME_LOCALS_1_STACK_EXTENDED", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_LOCALS_1_STACK_EXTENDED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-107));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "(class_index = ";
      try { 
        Utility.methodSignatureArgumentTypes("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.format(4323, 4323, false, '9');
      Utility.searchOpcode("filename\t\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)105, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(95, (-3228));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("X8Rnry(/");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-18));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("java.lang.java.lang.Object@1f93f4d2,", false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "java.lang.java.lang.Object@1f93f4d2,";
      objectArray0[2] = (Object) "java.lang.java.lang.Object@1f93f4d2,";
      objectArray0[3] = (Object) "java.lang.java.lang.Object@1f93f4d2,";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 584, (-1033), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.isSet(1, 79);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@124779b2, java.lang.Object@72f0c4f6, java.lang.Object@68867ccc, java.lang.Object@c3d9d3e, java.lang.Object@259effe2");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 172, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2904), 1737);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(1737);
      String string1 = Utility.convertString("interface");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(13);
      assertEquals("public protected static", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 390, (int) (byte) (-100), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.isSet(1607, (-1128104424));
      Utility.classOrInterface(1607);
      Utility.clearBit((-410), 13);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.fillup("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER", 3223, false, 'R');
      Utility.format((-8602), 1221, true, 'R');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, (-410));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{java.lang.Object@1f2d5b22}", "L2*>ay(gt@_I79OW6L2*>ay(gt@_I79OW6", true);
      Utility.format(1901, 1901, true, 'H');
      Utility.fillup("Cyg5sx~HH\"+ARP4--Q", 1901, true, '}');
      Utility.compactClassName("VH9x-<");
      try { 
        Utility.typeOfSignature("1\r9&pL=(o@>oZD|d_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1\r9&pL=(o@>oZD|d_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.getSignature("ret");
      Utility.compactClassName("ret", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 491, 2625, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)36;
      int int0 = 32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1237, 32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "Y";
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (int) (byte) (-88), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readShort();
      byteSequence0.available();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.accessToString((int) (byte)96);
      assertEquals("synchronized volatile", string0);
      
      String string1 = Utility.getSignature("synchronized volatile");
      assertEquals("Lsynchronized;", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "synchronized volatile";
      objectArray0[1] = (Object) "Lsynchronized;";
      objectArray0[2] = (Object) "Lsynchronized;";
      objectArray0[3] = (Object) (byte)65;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte)94;
      objectArray0[6] = (Object) (byte)65;
      objectArray0[7] = (Object) (byte)94;
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{synchronized volatile, Lsynchronized;, Lsynchronized;, 65, null, 94, 65, 94}", string2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gq^3De");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gq^3De'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.compactClassName("impdep1", true);
      Utility.accessToString((-874), false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)100;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-89), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)100, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("lrem", "lrem", "loNc[gDI%AmGh`>P\"mu");
      Utility.getSignature("org.apache.bcel.classfile.Utility");
      Utility.setBit(9, (-124857699));
      Utility.convertString("`");
      Utility.classOrInterface((byte) (-100));
      Utility.convertString("'");
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1955, (int) (byte)113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ldc_w";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ldc_w");
      String string1 = "O'Fw|Atlo46W4G";
      try { 
        Utility.typeOfSignature("O'Fw|Atlo46W4G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O'Fw|Atlo46W4G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("-");
      Utility.compactClassName("aload_1");
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t\t#");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((byte) (-42));
      constantArray0[2] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)126);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)90, (int) (byte)126, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "monitorexit";
      stringArray0[1] = "monitorexit";
      stringArray0[2] = "monitorexit";
      stringArray0[3] = "6Rx280fzS$il@q~m{Z";
      stringArray0[4] = "monitorexit";
      stringArray0[5] = "monitorexit";
      Utility.methodTypeToSignature("monitorexit", stringArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)84;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6Rx280fzS$il@q~m{Z");
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-1);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, 1737, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.accessToString((-5594));
      assertEquals("private protected synchronized interface strictfp annotation enum", string0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-97);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifge\t\t#-24828", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("({,DAhZLr", "({,DAhZLr", false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)119;
      byteArray0[1] = (byte)119;
      byte byte2 = (byte)48;
      byteArray0[2] = (byte)48;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3496, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.accessToString((-3778));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.compactClassName("private protected static final synchronized native synthetic annotation enum", "lshf3$kXKea~1J&T", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lastore", string2);
      
      String string3 = Utility.classOrInterface((-794));
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.setBit(1, 234);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-735), (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    lstore_2
         // 2:    aload_0
         // 3:    lstore_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray1, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "";
      Utility.convertString("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)63;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("45 a0 de 3f", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 590);
      assertEquals("0:    fstore_2\n1:    if_icmpne\t\t#-8640\n", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.accessToString((-592));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 172, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)77;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1691), 362, false);
      assertEquals("0:    astore_3\n1:    iconst_0\n2:    <illegal opcode>\n3:    bastore\n4:    <illegal opcode>\n5:    astore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)82;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)102, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantLong constantLong0 = new ConstantLong(630L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1448), 88);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)37, (-675));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("interface");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4588), 169);
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(5, 169);
      constantArray0[6] = (Constant) constantInvokeDynamic2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1460;
      Utility.setBit(40, 1460);
      String string0 = "(start_pc = ";
      try { 
        Utility.typeOfMethodSignature("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (start_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "X`G E{p|-uL9@vddVj";
      try { 
        Utility.typeOfSignature("X`G E{p|-uL9@vddVj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X`G E{p|-uL9@vddVj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "R$AJOvxIt(58F/";
      int int0 = 1018;
      Utility.fillup("R$AJOvxIt(58F/", 1018, false, '1');
      Utility.setBit(1018, 1018);
      try { 
        Utility.methodSignatureReturnType("R$AJOvxIt(58F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R$AJOvxIt(58F/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(75);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)71, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.getSignature("byte");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[g+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "U9";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)66;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$ea$7db3$afa$da$tB");
      boolean boolean1 = true;
      try { 
        Utility.decode("$ea$7db3$afa$da$tB", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("jsr_w");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)110;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, (int) (byte)110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.typeOfSignature("ZZc.2c8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("ZZc.2c8", "ZZc.2c8", true);
      Utility.compactClassName("D]baW,<\"kV<x5li", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZZc.2c8", "ZZc.2c8", "D]baW,<\"kV<x5li", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZZc.2c8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("areturn");
      Utility.accessToString(3934, true);
      Utility.compactClassName("areturn");
      String string0 = Utility.accessToString(109, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)56;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_3", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'8^o";
      stringArray0[1] = "lstore_3";
      stringArray0[2] = "lstore_3";
      stringArray0[3] = "'8^o";
      stringArray0[4] = "lstore_3";
      stringArray0[5] = "'8^o";
      stringArray0[6] = "lstore_3";
      stringArray0[7] = "'8^o";
      String string1 = Utility.methodTypeToSignature("'8^o", stringArray0);
      assertEquals("(L'8^o;Llstore_3;Llstore_3;L'8^o;Llstore_3;L'8^o;Llstore_3;L'8^o;)L'8^o;", string1);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "areturn");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-41);
      Utility.toHexString(byteArray0);
      Utility.replace("he~-j$3qP9,0C` ", "checkcast", "Ljava/lang/Object");
      Utility.accessToString(228, false);
      Utility.compactClassName("jsr_w");
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)39;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-9), (int) (byte)39);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore\t\t%247\n2:    dload_1\n", "2:+,C/}(nE9_+!{)", "BUEP6+W>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore\t\t%247
         // 2:    dload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      try { 
        dataOutputStream0.write(byteArray0, (int) (byte)13, 1240);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)55;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("Mgfywr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mgfywr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)96;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)122;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore\t\t%244", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1298, (int) (byte) (-46), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.compactClassName("HYT;2K/#qm[J3?L%{");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("HYT;2K.#qm[J3?L%{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HYT;2K.#qm[J3?L%{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "<illegal opcode>";
      String string1 = "\\2daa [FF/t4dc'nc";
      Utility.compactClassName("<illegal opcode>", "\u0002daa [FF/t4dc'nc", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byte byte0 = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.compactClassName("Ajad=De");
      Utility.searchOpcode("Ajad=De");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)2;
      Constant[] constantArray0 = new Constant[8];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(47, 60);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Ajad=De");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      constantArray0[2] = (Constant) constantString0;
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[3] = constant0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), 1260);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[4] = (Constant) constantNameAndType1;
      ConstantString constantString1 = new ConstantString(2);
      ConstantString constantString2 = new ConstantString(constantString1);
      constantArray0[5] = (Constant) constantString2;
      ConstantString constantString3 = new ConstantString(73);
      ConstantString constantString4 = new ConstantString(constantString3);
      constantArray0[6] = (Constant) constantString4;
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2366, 5743, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "static");
      try { 
        Utility.typeOfSignature("RI *Jq6S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RI *Jq6S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.searchOpcode("byte");
      // Undeclared exception!
      try { 
        Utility.signatureToString("WwU?zc}}:UJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WwU?zc}}:UJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("fstore");
      Utility.compactClassName("ZQolD", false);
      Utility.accessToString(891, false);
      Utility.compactClassName("\nAttribute(s) = ");
      Utility.compactClassName("J@Xktc&tMQ{N+Ve2", "ZQolD", false);
      Utility.compactClassName("3fQD(>+Q?AT");
      Utility.isJavaIdentifierPart('[');
      Utility.compactClassName("lload_1", false);
      Utility.replace("J@Xktc&tMQ{N+Ve2", "2v]%!X_ac}^9;IBF", "lload_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1479, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-1604), (-1604), false, 'd');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1951), (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    dload_2
         // 2:    lshr
         // 3:    <illegal opcode>
         // 4:    ishl
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-99);
      ConstantPool constantPool0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-1857);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (-1857), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "|?+!'9Pbow0";
      Utility.methodTypeToSignature("|?+!'9Pbow0", (String[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("lload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.accessToString((-254));
      Utility.compactClassName("private native interface abstract strictfp synthetic annotation enum", true);
      Utility.accessToString(2012, true);
      Utility.convertString("6DZ?(A7Bvt");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("6DZ?(\\A7Bvt");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("new", "private native interface abstract strictfp synthetic annotation enum", "3%QCu7W9+J:L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tcg%x[Q/%";
      stringArray0[1] = "tcg%x[Q/%";
      stringArray0[2] = "tcg%x[Q/%";
      stringArray0[3] = "tcg%x[Q/%";
      stringArray0[4] = "tcg%x[Q/%";
      stringArray0[5] = "tcg%x[Q/%";
      stringArray0[6] = "tcg%x[Q/%";
      stringArray0[7] = "java.lang.aload_2";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("tcg%x[Q/%", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Q/%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0)1yXv>0");
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray0.length);
      
      int int0 = Utility.setBit(65, 65);
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0_{icbX]V`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0_{icbX]V`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      byte byte1 = (byte)77;
      byteArray0[1] = (byte)77;
      byte byte2 = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byte byte3 = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)74;
      byte byte4 = (byte)102;
      byteArray0[5] = (byte)102;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte)102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-448), (-448));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)18;
      byte byte0 = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-62);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("7b 12 19 c2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7b 12 19 c2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Q", string0);
      
      try { 
        Utility.methodSignatureReturnType("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-54);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/Ss=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Ss=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.replace("if_icmple", "if_icmple", "D6ZK(|Nspm<2=Kjd");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byte byte0 = (byte)47;
      byteArray0[1] = (byte)47;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 869, (-1811), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "?zUbNOAo#X#>";
      try { 
        Utility.typeOfSignature("?zUbNOAo#X#>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?zUbNOAo#X#>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.compactClassName("", "", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 250, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "?@(ESzUZit5k[EFs,[9";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?@(ESzUZit5k[EFs,[9";
      stringArray0[1] = "?@(ESzUZit5k[EFs,[9";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("?@(ESzUZit5k[EFs,[9", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[EFs,[9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)25;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)25, (int) (byte) (-28), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "F!hLumGd.xkGU3";
      Utility.typeOfSignature("F!hLumGd.xkGU3");
      try { 
        Utility.typeOfMethodSignature("F!hLumGd.xkGU3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F!hLumGd.xkGU3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.searchOpcode("<");
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.close();
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.compactClassName("", "", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(0, 2949, false, '$');
      boolean boolean0 = true;
      try { 
        Utility.decode(string0, true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Couldn't find: ");
      Utility.decode("oY", false);
      Utility.signatureToString("Couldn't find: ");
      try { 
        Utility.typeOfSignature("*]@IbF/|BacN'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]@IbF/|BacN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char char0 = 'O';
      Utility.isJavaIdentifierPart('O');
      String string0 = "Y C=jAQb";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("Y C=jAQb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y C=jAQb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-994), (int) (byte)90);
      assertEquals("0:    iconst_0\n1:    nop\n2:    iadd\n3:    fstore_1\n4:    iconst_2\n5:    dup_x1\n6:    istore_2\n7:    <illegal opcode>\n8:    aaload\n", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "V5|Ozson\"";
      Utility.typeOfSignature("V5|Ozson\"");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V5|Ozson\"";
      stringArray0[1] = "<K(jv6n~K9%glC|v~f";
      stringArray0[2] = "V5|Ozson\"";
      stringArray0[3] = "V5|Ozson\"";
      stringArray0[4] = "V5|Ozson\"";
      Utility.methodTypeToSignature("V5|Ozson\"", stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";YL&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      mockPrintStream0.write(byteArray0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8L,n%`rO`*JD(o6C#K";
      stringArray0[1] = "8L,n%`rO`*JD(o6C#K";
      stringArray0[2] = "8L,n%`rO`*JD(o6C#K";
      Utility.methodTypeToSignature("8L,n%`rO`*JD(o6C#K", stringArray0);
      Utility.clearBit(12, 12);
      Utility.isJavaIdentifierPart('M');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("8L,n%`rO`*JD(o6C#K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8L,n%`rO`*JD(o6C#K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.convertString("Total of ");
      Utility.isJavaIdentifierPart('F');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("checkcast");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "Total of ";
      stringArray0[2] = "Total of ";
      Utility.methodTypeToSignature("Total of ", stringArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.replace("Total of ", "Total of ", "Total of ");
      Utility.accessToString(3, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-2415), 24);
      String string0 = "K.o{5u2N";
      try { 
        Utility.methodSignatureReturnType("K.o{5u2N", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K.o{5u2N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-2102);
      Utility.accessToString((-2102));
      Utility.convertString("private static volatile transient native interface abstract synthetic annotation enum");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("FV`U 7a;?+o]-rz_>y]", "private static volatile transient native interface abstract synthetic annotation enum", "private static volatile transient native interface abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FV`U 7a;?+o]-rz_>y]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.getSignature(" fields:\n");
      Utility.searchOpcode(" fields:\n");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(" fields:\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` fields:
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = Utility.clearBit(213, (-1476));
      assertEquals(213, int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "8w`Opqso";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8w`Opqso");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = (-1817);
      Utility.isSet((-1817), (-865));
      String string1 = "W<]}TC2@E~|m^E1[a";
      try { 
        Utility.typeOfSignature("W<]}TC2@E~|m^E1[a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W<]}TC2@E~|m^E1[a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "($3.=z)S9c@V ";
      try { 
        Utility.typeOfSignature("($3.=z)S9c@V ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ($3.=z)S9c@V 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HW.by");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HW.by
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.compactClassName("lZReeaLh|SF2}", false);
      Utility.getSignature("lZReeaLh|SF2}");
      Utility.typeOfSignature("LlZReeaLh|SF2};");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "lZReeaLh|SF2}";
      objectArray0[1] = (Object) "lZReeaLh|SF2}";
      objectArray0[2] = (Object) "lZReeaLh|SF2}";
      Utility.printArray(objectArray0, true, false);
      Utility.format(41, (byte)14, false, 'p');
      String string0 = "From\tTo\tHandler\tType\n";
      String string1 = "float";
      String string2 = "5&Ul?z%c?=n'`";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byte byte0 = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -68
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "OX968w;k,@";
      try { 
        Utility.methodSignatureReturnType("OX968w;k,@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OX968w;k,@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N^>NRhG`#9>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      try { 
        Utility.methodSignatureReturnType("N^>NRhG`#9>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N^>NRhG`#9>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\t(wide)";
      stringArray0[1] = "\t(wide)";
      stringArray0[2] = "\t(wide)";
      stringArray0[3] = "\t(wide)";
      stringArray0[4] = "\t(wide)";
      stringArray0[5] = "\t(wide)";
      stringArray0[6] = "\t(wide)";
      stringArray0[7] = "\t(wide)";
      String string0 = Utility.methodTypeToSignature("\t(wide)", stringArray0);
      assertEquals("(L(wide);L(wide);L(wide);L(wide);L(wide);L(wide);L(wide);L(wide);)L(wide);", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.DirectoryFileFilter";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.DirectoryFileFilter");
      char char0 = 'q';
      Utility.isJavaIdentifierPart('q');
      String string1 = "&:.z-($_\\&_!>E>VxV";
      try { 
        Utility.typeOfSignature("&:.z-($_&_!>E>VxV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &:.z-($_&_!>E>VxV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.signatureToString("BU(");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-50);
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong((byte) (-50));
      constantArray0[0] = (Constant) constantLong0;
      DataInput dataInput0 = null;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-11);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-83), (int) (byte) (-86), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "PMGClass(";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.getSignature(",)C4h]");
      assertEquals("L,)C4h];", string0);
      
      String string1 = Utility.methodSignatureReturnType("L,)C4h];", false);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.replace(")\t", "ZR.bM?o", ")\t");
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName(")\t", ")\t", false);
      assertEquals(")\t", string0);
      
      Utility.methodSignatureReturnType("ZR.bM?o");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string1 = Utility.replace("", "boolean", "ifnonnull");
      assertEquals("", string1);
      
      String string2 = Utility.fillup("getfield", 8, true, '\\');
      assertEquals("getfield", string2);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "getfield";
      objectArray0[2] = (Object) "boolean";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) "ZR.bM?o";
      objectArray0[6] = (Object) "ifnonnull";
      String string3 = Utility.printArray(objectArray0, false, true);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.replace("arraylength", "arraylength", "arraylength");
      Utility.isJavaIdentifierPart('-');
      Utility.getSignature("arraylength");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte) (-33);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-37));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 13, 460);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, true);
      Utility.fillup("{\"java.lang.Object@111ac8b0\", \"java.lang.Object@77e3270b\", \"java.lang.Object@644aeee9\", \"java.lang.Object@4f6286c\", \"java.lang.Object@436e3f0a\", \"java.lang.Object@2d5b8313\"}", 186, true, 'M');
      Utility.isSet(91, 186);
      String string1 = Utility.convertString("{\"java.lang.Object@111ac8b0\", \"java.lang.Object@77e3270b\", \"java.lang.Object@644aeee9\", \"java.lang.Object@4f6286c\", \"java.lang.Object@436e3f0a\", \"java.lang.Object@2d5b8313\"}");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = 'w';
      Utility.fillup("ca(]6|Wuqp~yBR9a0o", 2, true, 'w');
      Utility.convertString("ca(]6|Wuqp~yBR9a0o");
      Utility.methodTypeToSignature("java.lang.W!<L`+C", (String[]) null);
      Utility.methodTypeToSignature(" ", (String[]) null);
      Utility.accessToString(2);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("ca(]6|Wuqp~yBR9a0o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ca(]6|Wuqp~yBR9a0o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("Qwe7r46a ?e:3$", ", length = ", ", length = ");
      Utility.getSignature("Qwe7r46a ?e:3$");
      Utility.replace("\r", "Qwe7r46a ?e:3$", ">");
      Utility.isJavaIdentifierPart('');
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Qwe7r46a ?e:3$");
      constantUtf8_0.toString();
      ConstantUtf8.getCachedInstance("H:5F7wgROnZNe#");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), (int) (byte)41);
      Utility.isSet((byte) (-109), (byte) (-109));
      try { 
        Utility.typeOfSignature("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-2151), true);
      MockFile mockFile0 = new MockFile("public static final transient native abstract synthetic annotation enum");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("public static final transient native abstract synthetic annotation enum", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String string0 = "XHGD7";
      try { 
        Utility.methodSignatureReturnType("XHGD7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XHGD7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "Exceptions";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Exceptions");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exceptions");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.fillup("=class ", (-138), false, 'f');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$D1$k$h$C$d9$A", string0);
      
      Utility.setBit((byte)49, (-1021));
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("=class ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1723), (byte)27);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte)3);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1723), 2275, false);
      assertEquals("0:    iconst_0\n1:    daload\n2:    lload_0\n3:    iload_1\n4:    iconst_m1\n5:    <illegal opcode>\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("putfield");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "putfield");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "putfield";
      objectArray0[1] = (Object) "putfield";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-28);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("S$b4$A$E$5cz_$ef$e4", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9-mC_,Wju8Z");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(1351, 63, false, '5');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)81;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-821), (int) (byte) (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("V");
      Utility.setBit(10, 10);
      String string0 = Utility.format(10, 1034, false, 'k');
      Utility.setBit(1034, 40);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V";
      stringArray0[1] = string0;
      stringArray0[2] = "V";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "V";
      try { 
        Utility.methodTypeToSignature("3+eZ7LzgovO655,>z$E", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.getSignature("double");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "D";
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) "double";
      objectArray0[3] = (Object) "double";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "double";
      objectArray0[6] = (Object) "D";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(330, (-2904), false, 'n');
      assertEquals("330", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("daload", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, false);
      Utility.decode("getstatic", false);
      Utility.compactClassName("getstatic", true);
      Utility.compactClassName("getstatic", false);
      try { 
        Utility.methodSignatureArgumentTypes("org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080, org.evosuite.runtime.testdata.FileSystemHandling@2977c080
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^2J?F!!_.p?z");
      String string0 = Utility.accessToString((-962));
      assertEquals("private protected static final synchronized abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-63);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)63;
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte) (-31);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P~5P'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P~5P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.fillup("putstatic", (-830), true, 'I');
      assertEquals("putstatic", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "putstatic";
      objectArray0[1] = (Object) "putstatic";
      objectArray0[2] = (Object) "putstatic";
      objectArray0[3] = (Object) "putstatic";
      objectArray0[4] = (Object) "putstatic";
      objectArray0[5] = (Object) "putstatic";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"putstatic\", \"putstatic\", \"putstatic\", \"putstatic\", \"putstatic\", \"putstatic\"", string1);
      
      String string2 = Utility.accessToString(194, false);
      assertEquals("private volatile transient", string2);
      
      String string3 = Utility.compactClassName("putstatic", "putstatic", true);
      assertEquals("", string3);
      
      short short0 = Utility.searchOpcode("D.;~zR");
      assertEquals((short) (-1), short0);
      
      String string4 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string4);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 212, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 90;
      Utility.classOrInterface(90);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-94);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d5$7d0$dc$S$e4$b0$a2", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)39;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-9), (int) (byte)39);
      Utility.printArray((Object[]) null, true, true);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      short short0 = Utility.searchOpcode("2Y]8v/");
      assertEquals((short) (-1), short0);
      
      Utility.replace("7_D&0Y({'", "invokestatic", "2Y]8v/");
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("invokestatic", stringArray0);
      assertEquals("()Linvokestatic;", string0);
      
      String string1 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("DQk\"'b+G? gAl?21", false);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaReader'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "I7F`VEm&?";
      Utility.signatureToString("I7F`VEm&?");
      try { 
        Utility.typeOfMethodSignature("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("invokevirtual", stringArray0);
      String string0 = Utility.methodTypeToSignature("mbCN0@", stringArray0);
      assertEquals("()LmbCN0@;", string0);
      
      String string1 = Utility.methodSignatureToString("()Linvokevirtual;", "()LmbCN0@;", "()LmbCN0@;", true);
      assertEquals("()LmbCN0@; invokevirtual ()LmbCN0@;()", string1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.convertString("a0nx;kQ'");
      Utility.accessToString((-2097), true);
      try { 
        Utility.typeOfMethodSignature("public private protected static volatile transient native abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static volatile transient native abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.convertString("Total of ");
      Utility.isJavaIdentifierPart('F');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("checkcast");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "checkcast";
      stringArray0[1] = "Total of ";
      stringArray0[2] = "Total of ";
      Utility.methodTypeToSignature("Total of ", stringArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("\r");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)192, (int) (short)192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      short short0 = Utility.searchOpcode("monitorexit");
      assertEquals((short)195, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)79;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.format(18, 159, true, 'J');
      assertEquals("18JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
      
      String string1 = Utility.replace("lreturn", "dneg", "Invalid StackMap offset: ");
      assertEquals("lreturn", string1);
      
      short short0 = Utility.searchOpcode("Total of ");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(101, 76);
      assertEquals(4197, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Total of ";
      objectArray0[1] = (Object) "Invalid StackMap offset: ";
      objectArray0[2] = (Object) "lreturn";
      objectArray0[3] = (Object) "lreturn";
      objectArray0[4] = (Object) "lreturn";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string2);
      assertEquals("{\"Total of \", \"Invalid StackMap offset: \", \"lreturn\", \"lreturn\", \"lreturn\"}", string2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "{!&ScQMoRGh-/6'7s";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P~5P'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dvi");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{!&ScQMoRGh-/6'7s");
      String string1 = "FUyu&$GI^";
      Utility.replace("FUyu&$GI^", "FUyu&$GI^", "FUyu&$GI^");
      Utility.compactClassName("P~5P'");
      int int0 = 67;
      Utility.isSet(67, 16384);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("P~5P'", "FUyu&$GI^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // FUyu&$GI^
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "null";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      String string1 = "if_acmpeq";
      try { 
        Utility.decode("if_acmpeq", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.replace("anewarray", "iL6R", (String) null);
      assertNotNull(string0);
      assertEquals("anewarray", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("pAf4S0\"&FI'I&js[");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fcmpg", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("96 a3 af 32 8c 0e 92 54", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)8;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-124));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected transient native interface abstract strictfp synthetic annotation enum", "_", "Iw:-? J", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected transient native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.convertString("cu");
      assertEquals("cu", string0);
      
      Utility.isJavaIdentifierPart('#');
      Utility.searchOpcode("boolean");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2f", string1);
      
      Utility.compactClassName("boolean", true);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.compactClassName("l2f");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.compactClassName("0)1yXv>0", false);
      assertEquals("0)1yXv>0", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0)1yXv>0");
      String string1 = Utility.fillup("0)1yXv>0", 65, false, 'C');
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC0)1yXv>0", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.replace("~yASP#JL", "~yASP#JL", "^E,(nXt2ePT");
      Utility.isSet(54, 54);
      try { 
        Utility.typeOfMethodSignature("5.D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5.D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M#c|F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M#c|F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = 36;
      int int1 = 79;
      Utility.isSet(36, 79);
      Utility.clearBit((-2767), 36);
      String string0 = "";
      String string1 = " ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("R{t:+:w|cJ@D~", "", " ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R{t:+:w|cJ@D~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "double";
      try { 
        Utility.typeOfSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "sipush";
      try { 
        Utility.methodSignatureArgumentTypes("sipush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sipush
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.accessToString(384);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("transient native", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `transient native'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "]\"8Y=D#`3A1P&@w.!h3";
      try { 
        Utility.methodSignatureReturnType("]\"8Y=D#`3A1P&@w.!h3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]\"8Y=D#`3A1P&@w.!h3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]\"8Y=D#`3A1P&@w.!h3";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 50
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "_";
      Utility.compactClassName("_");
      // Undeclared exception!
      try { 
        Utility.signatureToString("j9b3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j9b3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      String string0 = Utility.accessToString((-169), true);
      assertEquals("public private protected final volatile native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.replace("", "^E|BS]!Vulgf<", "");
      Utility.isJavaIdentifierPart('s');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-60);
      byte byte0 = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      byte byte1 = (byte)33;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-60), 1602);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = true;
      char char0 = 'X';
      Utility.fillup("xg", 0, true, 'X');
      try { 
        Utility.typeOfMethodSignature("xg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, (-494));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("05 00 50 39 00", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "\")";
      // Undeclared exception!
      Utility.replace("\")", "", "\")");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaWriter", stringArray0);
      String string0 = Utility.methodSignatureToString("(Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lorg/apache/bcel/classfile/Utility$JavaWriter;", "org.apache.bcel.classfile.Utility$JavaWriter", "(Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lorg/apache/bcel/classfile/Utility$JavaWriter;");
      assertEquals("(Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lorg/apache/bcel/classfile/Utility$JavaWriter; org.apache.bcel.classfile.Utility$JavaWriter org.apache.bcel.classfile.Utility$JavaWriter(org.apache.bcel.classfile.Utility$JavaWriter arg1)", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-3), (int) (byte)65);
      assertEquals("0:    nop\n1:    l2d\n2:    <illegal opcode>\n3:    istore_3\n4:    lstore_2\n", string1);
      
      String string2 = Utility.methodTypeToSignature("(Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lorg/apache/bcel/classfile/Utility$JavaWriter; org.apache.bcel.classfile.Utility$JavaWriter org.apache.bcel.classfile.Utility$JavaWriter(org.apache.bcel.classfile.Utility$JavaWriter arg1)", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/Utility$JavaWriter;)L(Lorg/apache/bcel/classfile/Utility$JavaWriter;)Lorg/apache/bcel/classfile/Utility$JavaWriter;;", string2);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("CQ`Qbpv");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((byte)5, (byte)5);
      assertEquals(5, int0);
      
      String string0 = Utility.getSignature("bXS_{");
      assertEquals("LbXS_{;", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.compactClassName("DJ/kjdA'W#VW]FTn;");
      Utility.convertString("pmEK55om?[&V(c");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(84, false);
      Utility.isJavaIdentifierPart('\\');
      Utility.compactClassName("pmEK55om?[&V(c", false);
      Utility.setBit((-1214), 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "DJ.kjdA'W#VW]FTn;";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) "DJ.kjdA'W#VW]FTn;";
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) "pmEK55om?[&V(c";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(180, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(196, 196);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2266), 14, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.getSignature("jsr_w");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 867, (int) (byte)4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hR;eDCO}$[/$2-k");
      byteArray0[2] = (byte)97;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", (byte)93, true, '`');
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A````````````````````````````````````````````````````````````````````````");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A````````````````````````````````````````````````````````````````````````
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "XeKriYb";
      Utility.getSignature("XeKriYb");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byte byte0 = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.convertString("(NO{yC^m3MOv");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "(NO{yC^m3MOv";
      objectArray0[1] = (Object) "(NO{yC^m3MOv";
      objectArray0[2] = (Object) "(NO{yC^m3MOv";
      objectArray0[3] = (Object) "(NO{yC^m3MOv";
      objectArray0[4] = (Object) "(NO{yC^m3MOv";
      Utility.printArray(objectArray0, false, true);
      File file0 = MockFile.createTempFile("^ApMx_l5mUy:hi", "(NO{yC^m3MOv");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "\"(NO{yC^m3MOv\", \"(NO{yC^m3MOv\", \"(NO{yC^m3MOv\", \"(NO{yC^m3MOv\", \"(NO{yC^m3MOv\"";
      char[] charArray0 = new char[0];
      mockPrintWriter0.write(charArray0);
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) file0;
      Utility.printArray(printWriter0, objectArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("(NO{yC^m3MOv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(NO{yC^m3MOv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null");
      int int0 = (-78);
      Utility.setBit(32767, (-78));
      Utility.signatureToString("JAZ9QSVHmiGOKXCmN'");
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
