/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:10:59 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<String, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<String, String>>();
      DoubleKeyMap<HashMap<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "p}BnU?>D+");
      hashMap0.put(hashMap1, hashMap2);
      String string0 = doubleKeyMap0.remove(hashMap1, "");
      assertTrue(hashMap0.isEmpty());
      assertEquals("p}BnU?>D+", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.remove("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Object>();
      Object object0 = doubleKeyMap0.remove((HashMap<String, Object>) null, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap1.remove("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove((Object) null, "T-+Pl-^eL=]");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>((Map<Object, Map<Integer, Object>>) null);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap1.put("", "t|NSc}\"FH{tzR9R", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap1.put("Cu=}T&KK", (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Map<Integer, String>, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Map<Integer, String>, Map<Integer, String>>>();
      Object object0 = new Object();
      HashMap<Map<Integer, String>, Map<Integer, String>> hashMap0 = doubleKeyMap0.get((Object) null, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
      DoubleKeyMap<Object, Object, HashMap<Map<Integer, String>, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Map<Integer, String>, Map<Integer, String>>>();
      Object object0 = new Object();
      HashMap<Map<Integer, String>, Map<Integer, String>> hashMap0 = doubleKeyMap1.get(object0, (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, HashMap<Map<Integer, String>, Map<Integer, String>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Map<Integer, String>, Map<Integer, String>>>((Map<String, Map<Integer, HashMap<Map<Integer, String>, Map<Integer, String>>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Integer, String>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<String, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<String, String>>();
      DoubleKeyMap<HashMap<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("us.codecraft.webmagic.utils.MultiKeyMapBase", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove(hashMap1, "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, String>();
      doubleKeyMap0.put((HashMap<String, Integer>) null, "F (I\"d9p-", "[nA-XO[(0[~\"XP*");
      String string0 = doubleKeyMap0.put((HashMap<String, Integer>) null, "D)y", "1Ir|[ZPf/'8");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<String, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<String, String>>();
      DoubleKeyMap<HashMap<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      String string0 = doubleKeyMap0.get(hashMap1, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<String, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<String, String>>();
      DoubleKeyMap<HashMap<Integer, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put(hashMap1, hashMap2);
      String string0 = doubleKeyMap0.get(hashMap1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      doubleKeyMap0.put("8h2ddqL", "8h2ddqL", "8h2ddqL");
      Map<String, String> map0 = doubleKeyMap0.remove("8h2ddqL");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>();
      DoubleKeyMap<Object, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, Object>();
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }
}
