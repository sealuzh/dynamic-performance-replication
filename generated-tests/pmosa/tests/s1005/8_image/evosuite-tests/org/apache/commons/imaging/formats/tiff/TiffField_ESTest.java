/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:01:47 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(767, 767, fieldTypeFloat0, 767, 767, byteArray0, byteOrder0, 767);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(767, 767);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(767, tiffField0.getOffset());
      assertNull(string1);
      assertEquals(767, tiffField0.getDirectoryType());
      assertEquals(767, tiffField0.getTag());
      assertEquals(767L, tiffField0.getCount());
      assertEquals(767, tiffField0.getSortHint());
      assertEquals(3068, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeFloat0, 65535, 65535, byteArray0, byteOrder0, 65535);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "0.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 4L, 1724L, byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1724, tiffField0.getOffset());
      assertEquals(4L, tiffField0.getCount());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(32, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 0, 1752L, byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1752, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)36;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2473, 2473, fieldTypeShort0, 2473, (-1551L), byteArray0, byteOrder0, 2473);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(44850, int0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(4946, tiffField0.getBytesLength());
      assertEquals(2473L, tiffField0.getCount());
      assertNotNull(tiffElement0);
      assertEquals(2473, tiffField0.getSortHint());
      assertEquals(2473, tiffField0.getDirectoryType());
      assertEquals(2473, tiffField0.getTag());
      assertEquals((-1551L), tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[15];
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(1347, "!\u0000");
      TiffField tiffField0 = new TiffField(1347, 1347, fieldTypeRational0, 4358L, 1347, byteArray0, byteOrder0, 1347);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong((byte) (-18), "U@]*pz:0N@Q");
      TiffField tiffField0 = new TiffField((-2242), (-1), fieldTypeLong0, 255L, (-2147483648L), byteArray0, byteOrder0, (-1));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(1020, tiffField0.getBytesLength());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-2242), tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(255L, tiffField0.getCount());
      assertEquals(238, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)4;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(33450, 33450, fieldTypeShort0, 33450, 2172L, byteArray0, byteOrder0, 0);
      ByteOrder.nativeOrder();
      tiffField0.toString();
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(777, 777, fieldTypeFloat0, 777, 777, byteArray0, byteOrder0, 777);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      TiffField tiffField0 = new TiffField((-2846), (-90), fieldTypeShort0, (byte)0, (byte)0, byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-90), tiffField0.getDirectoryType());
      assertNull(tiffElement0);
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-2846), tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[5];
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField(670, 670, fieldTypeShort0, 4L, 65575, byteArray0, byteOrder0, 670);
      String string0 = tiffField0.getValueDescription();
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(670, tiffField0.getTag());
      assertEquals(4L, tiffField0.getCount());
      assertEquals(670, tiffField0.getSortHint());
      assertEquals(670, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(65575, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeDouble0, (byte)0, (byte)0, byteArray0, byteOrder0, (byte)0);
      tiffField0.getFieldTypeName();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(0, tiffField0.getSortHint());
      assertNull(tiffElement0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(2951, "j4qr[");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-83);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50972, 50972, fieldTypeRational0, (-2966L), 50972, byteArray0, byteOrder0, (byte) (-83));
      int int0 = tiffField0.getDirectoryType();
      assertEquals(50972, tiffField0.getTag());
      assertEquals((-83), tiffField0.getSortHint());
      assertEquals(50972, tiffField0.getOffset());
      assertEquals(50972, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(96, (-2123), fieldTypeLong0, (-2123), 1368L, (byte[]) null, byteOrder0, (-2123));
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals((-2123), tiffField0.getDirectoryType());
      assertEquals((-2123), tiffField0.getSortHint());
      assertEquals(1368, tiffField0.getOffset());
      assertEquals("96 (0x60: Unknown Tag): ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-31);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (-1373), fieldTypeRational0, (-2159L), (-1460L), byteArray0, byteOrder0, (byte) (-31));
      int int0 = tiffField0.getSortHint();
      assertEquals(0, tiffField0.getTag());
      assertEquals((-1460), tiffField0.getOffset());
      assertEquals((-1373), tiffField0.getDirectoryType());
      assertEquals((-31), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(790, 790, fieldTypeFloat0, 790, 790, byteArray0, byteOrder0, 790);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(777, 777, fieldTypeLong0, 422L, 1336L, byteArray0, byteOrder0, 777);
      tiffField0.getIntArrayValue();
      assertEquals(777, tiffField0.getDirectoryType());
      assertEquals(777, tiffField0.getTag());
      assertEquals(1336, tiffField0.getOffset());
      assertEquals(1688, tiffField0.getBytesLength());
      assertEquals(777, tiffField0.getSortHint());
      assertEquals(422L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeShort0, 65535, 400L, byteArray0, byteOrder0, (byte) (-42));
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {56790}, intArray0);
      assertEquals((-42), tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(65535L, tiffField0.getCount());
      assertEquals(131070, tiffField0.getBytesLength());
      assertEquals(400, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(767, 767, fieldTypeFloat0.DOUBLE, 767, 767, byteArray0, byteOrder0, 767);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(6136, tiffField0.getBytesLength());
      assertEquals(767L, tiffField0.getCount());
      assertEquals(767L, tiffElement0.offset);
      assertEquals(767, tiffField0.getSortHint());
      assertEquals(767, tiffField0.getDirectoryType());
      assertNotNull(tiffElement0);
      assertEquals(767, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (byte)76, fieldTypeByte0, (byte)0, (byte)0, byteArray0, byteOrder0, 149);
      fieldTypeByte0.getValue(tiffField0);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-122);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField1 = new TiffField(1, 149, fieldTypeByte0, 0L, 1207L, byteArray0, byteOrder1, (byte)76);
      tiffField1.getTagName();
      try { 
        tiffField1.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [B@7e8791fe
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(1229, 1851, fieldTypeDouble0, 1229, (-2147483648L), byteArray0, byteOrder0, 50);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(50, 1610612736);
      tiffField0.getDoubleArrayValue();
      assertEquals(9832, tiffField0.getBytesLength());
      assertEquals(1229L, tiffField0.getCount());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1851, tiffField0.getDirectoryType());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertEquals(1229, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-58);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(77, (-123), fieldTypeByte0, 77, 77, byteArray0, byteOrder0, (byte)0);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@63208e68 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)108;
      TiffField tiffField0 = new TiffField(1721, 1721, fieldTypeByte0, 0, (byte)44, byteArray0, byteOrder0, 77);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@dfe87c0 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (-1840700268), fieldTypeByte0, 8L, (-1864L), byteArray0, (ByteOrder) null, (byte) (-84));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-211), 0);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals((-1864), tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals("OversizeValueElement, tag: GPSVersionID, fieldType: Byte", string0);
      assertEquals((-84), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-1840700268), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)32;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(41492, 41492, fieldTypeRational0, 41492, 41492, byteArray0, byteOrder0, (byte)32);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte) (-80), (byte) (-1));
      TiffField tiffField1 = new TiffField(50, 2, fieldTypeRational0, 255L, 3754L, byteArray0, byteOrder0, 50);
      assertEquals(2, tiffField1.getDirectoryType());
      assertEquals(3754, tiffField1.getOffset());
      assertEquals(50, tiffField1.getTag());
      
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(331936, tiffField0.getBytesLength());
      assertEquals(41492, tiffField0.getTag());
      assertEquals(0, int0);
      assertEquals(32, tiffField0.getSortHint());
      assertEquals(41492L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-120);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField((-1627), 700, fieldTypeLong0, 259L, (byte)0, byteArray0, byteOrder0, (-3529));
      String string0 = tiffField0.toString();
      assertEquals("-1627 (0xfffff9a5: Unknown Tag): 365756466 (259 Long)", string0);
      assertEquals(700, tiffField0.getDirectoryType());
      assertEquals(1036, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-3529), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(9, 9, fieldTypeRational0, 262192L, (-1389L), byteArray0, byteOrder0, 9);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      tiffField0.getIntArrayValue();
      assertEquals((-1389), tiffField0.getOffset());
      assertEquals(9, tiffField0.getSortHint());
      assertEquals(9, tiffField0.getTag());
      assertEquals(262192L, tiffField0.getCount());
      assertEquals(9, tiffField0.getDirectoryType());
      assertEquals(2097536, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-58);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(77, (-123), fieldTypeByte0, 77, 77, byteArray0, byteOrder0, (byte)0);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      int int0 = tiffField0.getOffset();
      assertEquals((-123), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(77, int0);
      assertEquals(77, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 271, fieldTypeByte0, 507L, 255L, byteArray0, byteOrder0, 50);
      String string0 = tiffField0.toString();
      assertEquals(271, tiffField0.getDirectoryType());
      assertEquals(255, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals("50 (0x32: Unknown Tag): -1, 0, 0, 0, 0, 0, 0 (507 Byte)", string0);
      assertEquals(507, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((byte) (-58), 1056, fieldTypeFloat0, 4L, 1529L, byteArray0, byteOrder0, (-1));
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@3f3cb426 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational((byte)0, (String) null);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (byte) (-51), fieldTypeDouble0, (-2449L), (-1199L), byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getTagName();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("GPSVersionID", string0);
      assertEquals((-51), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-1199), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((byte) (-18), (byte)0, fieldTypeFloat0, 0L, (byte) (-18), byteArray0, byteOrder0, (byte)0);
      tiffField0.dump();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals((-18), tiffField0.getTag());
      assertEquals((-18), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(41492, 0, fieldTypeFloat0, 4L, 1567L, byteArray0, byteOrder1, 0);
      try { 
        fieldTypeFloat0.writeData(tiffField0, byteOrder2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: 41492 (0xa214: Unknown Tag): 0.0 (4 Float) (org.apache.commons.imaging.formats.tiff.TiffField)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(41486, "U@]*pz:0N@Q");
      TiffField tiffField0 = new TiffField((-2242), (-1), fieldTypeLong0, 255L, (-2147483648L), byteArray0, byteOrder0, (-1));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(255L, tiffField0.getCount());
      assertEquals((-2242), tiffField0.getTag());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertEquals(1020, tiffField0.getBytesLength());
      assertEquals(238, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2136582715, (byte) (-18), fieldTypeFloat0, (byte)0, (-3875L), byteArray0, byteOrder0, (byte) (-18));
      String string0 = tiffField0.toString();
      assertEquals("2136582715 (0x7f59aa3b: Unknown Tag):  (0 Float)", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals((-3875), tiffField0.getOffset());
      assertEquals((-18), tiffField0.getSortHint());
      assertEquals((-18), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-118);
      TiffField tiffField0 = new TiffField((byte) (-118), (-1840700268), fieldTypeDouble0, 411L, (-1431L), byteArray0, byteOrder0, (-2235));
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-112);
      TiffField tiffField1 = new TiffField((byte) (-112), 41995, fieldTypeDouble0, 77L, 4L, byteArray1, (ByteOrder) null, (-1417));
      String string0 = tiffField0.toString();
      assertEquals("-118 (0xffffff8a: Unknown Tag): -2.3698475554223908E306 (411 Double)", string0);
      assertEquals((-1431), tiffField0.getOffset());
      assertEquals((-1840700268), tiffField0.getDirectoryType());
      assertEquals(3288, tiffField0.getBytesLength());
      assertEquals((-2235), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField((byte) (-18), 2136582715, fieldTypeLong0, (-2147483648L), 6320L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getDoubleArrayValue();
      TiffField tiffField1 = new TiffField(1019, (-1814), fieldTypeLong0, 1019, 2037L, byteArray0, byteOrder0, (byte)0);
      try { 
        tiffField1.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@490aff05
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte)47;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeLong0, 4L, 4L, byteArray0, byteOrder0, (-263));
      tiffField0.getDoubleArrayValue();
      assertEquals((-263), tiffField0.getSortHint());
      assertEquals(4, tiffField0.getOffset());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(16, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(36864, "ExposureMode");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-87);
      TiffField tiffField0 = new TiffField(1356, (-1850), fieldTypeAscii0, 2136582715, 2136582715, byteArray0, byteOrder2, (byte) (-87));
      tiffField0.toString();
      tiffField0.getValue();
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x54c)", string0);
      
      tiffField0.getStringValue();
      String string1 = tiffField0.getStringValue();
      assertNotNull(string1);
      
      tiffField0.getByteOrder();
      assertEquals(2136582715, tiffField0.getOffset());
      assertEquals((-87), tiffField0.getSortHint());
      assertEquals((-1850), tiffField0.getDirectoryType());
      assertEquals(2136582715, tiffField0.getBytesLength());
      assertEquals(2136582715L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-31);
      TiffField tiffField0 = new TiffField((byte) (-31), (byte) (-31), fieldTypeRational0, 400L, (byte) (-18), byteArray0, (ByteOrder) null, 1);
      tiffField0.toString();
      assertEquals((-18), tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals((-31), tiffField0.getTag());
      assertEquals(3200, tiffField0.getBytesLength());
      assertEquals(400L, tiffField0.getCount());
      assertEquals((-31), tiffField0.getDirectoryType());
  }
}
