/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:09:46 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.thread.CountableThreadPool;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Running");
      String string0 = "}YTu0%Yhz/[).vcnJ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}YTu0%Yhz/[).vcnJ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1228);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      String string1 = "`*m7t}t[xaoNgE)Llv";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("`*m7t}t[xaoNgE)Llv");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider3.pipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("YM2<4");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, int0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Links can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("H&nK*=~RCRu_aT]z");
      Spider spider3 = spider2.pipeline(jsonFilePipeline0);
      spider3.getCollectorPipeline();
      spider1.start();
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("y\"5h'u)25)A$?SuC#");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider3.setScheduler(duplicateRemovedScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}~ci$71z");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      Spider spider4 = spider3.clearPipeline();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list1 = andSelector0.selectList("us.codecraft.webmagic.Spider");
      Spider spider5 = spider4.startUrls(list1);
      Spider.Status spider_Status0 = spider5.getStatus();
      spider2.isSpawnUrl();
      spider3.getScheduler();
      spider2.getScheduler();
      spider_Status0.getValue();
      spider3.setSpawnUrl(false);
      spider3.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()", "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      spider1.downloader(phantomJSDownloader0);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      Spider spider3 = spider2.thread(2);
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.startRequest((List<Request>) null);
      spider5.getStartTime();
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider3.startRequest(linkedList0);
      Spider spider5 = spider4.clearPipeline();
      boolean boolean0 = spider5.isExitWhenComplete();
      assertFalse(spider2.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.selector.JsonPathSelector");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      FilePersistentBase.PATH_SEPERATOR = "";
      Spider spider3 = spider2.setUUID("waitNewUrl - interrupted, error {}");
      ForkJoinTask.getPool();
      Spider spider4 = spider3.thread((ExecutorService) null, 3);
      Spider spider5 = spider4.setExitWhenComplete(true);
      spider5.getUUID();
      assertEquals("us.codecraft.webmagic.selector.JsonPathSelector/", filePipeline0.getPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Raf70&f");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      String string0 = "3E";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("3E");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">.I``");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setUUID((String) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "-";
      stringArray0[3] = null;
      stringArray0[4] = ">.I``";
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "3!zYzbX-4SDxD#";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3!zYzbX-4SDxD#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.clearPipeline();
      ExecutorService executorService0 = null;
      spider3.setSpawnUrl(false);
      spider3.scheduler = (Scheduler) queueScheduler0;
      spider3.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider0.get("3!zYzbX-4SDxD#");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider0.exitWhenComplete = false;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(86, 86, 1680L, timeUnit0, linkedBlockingQueue0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 4159);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider4 = spider3.setExecutorService(threadPoolExecutor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider5 = spider4.pipeline(jsonFilePipeline0);
      spider5.setEmptySleepTime(86);
      spider2.getSite();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ")]AP-";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")]AP-");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.thread((ExecutorService) null, 3);
      Spider spider4 = spider3.setSpawnUrl(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider4.setScheduler(queueScheduler0);
      spider5.stop();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider4 = spider3.startUrls(list0);
      spider4.getUUID();
      Spider spider5 = spider4.addPipeline(jsonFilePipeline0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider5.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "rlZK?>;l]|";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rlZK?>;l]|");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Json json0 = new Json((List<String>) null);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "PRp0J1KM^1&Uj";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PRp0J1KM^1&Uj");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) forkJoinPool0, (-1177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("S#hdFg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "S#hdFg");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler0);
      spider0.getUUID();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "S#hdFg";
      stringArray0[3] = "S#hdFg";
      stringArray0[4] = "S#hdFg";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ZT\"H]j:pIWiT");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ZT\"H]j:pIWiT";
      stringArray0[1] = "ZT\"H]j:pIWiT";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1189;
      Spider.Status.fromValue(1189);
      String string0 = "mph;%Lp244D5%Ak";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("mph;%Lp244D5%Ak");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1189);
      spider1.extractAndAddRequests((Page) null, false);
      String string1 = "X>%0_;M+F";
      Json json0 = new Json("X>%0_;M+F");
      // Undeclared exception!
      try { 
        json0.removePadding("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")jt");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertEquals(0L, spider0.getPageCount());
      assertNull(list0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "L'|+RV|NjSM~#nTS/9";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("L'|+RV|NjSM~#nTS/9");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      boolean boolean0 = true;
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(1);
      spider0.threadPool = countableThreadPool0;
      spider1.setExitWhenComplete(true);
      Json json0 = new Json("");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        spider1.sleep((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request("us.codecraft.webmagic.Spider");
      Request request1 = request0.addHeader("us.codecraft.webmagic.Spider", (String) null);
      Request request2 = request1.setMethod("");
      Request request3 = request2.addCookie("", (String) null);
      Request request4 = request3.setCharset("us.codecraft.webmagic.Spider");
      Request request5 = request4.setPriority(0L);
      requestArray0[0] = request5;
      Request request6 = request1.setPriority(0L);
      requestArray0[1] = request6;
      Request request7 = request3.setBinaryContent(true);
      requestArray0[2] = request7;
      Request request8 = new Request();
      requestArray0[3] = request8;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[4] = null;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      requestArray0[5] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "Hk_4O7s\"K]S S";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Hk_4O7s\"K]S S");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      Selector[] selectorArray0 = new Selector[8];
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" ");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" ", "*(sI~");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("1,ZXHii");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.addPipeline((Pipeline) null);
      Spider spider5 = spider4.clearPipeline();
      // Undeclared exception!
      try { 
        spider5.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("h^Er");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", retryTimes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setPipelines((List<Pipeline>) null);
      int int0 = (-975);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-975), forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Y_@SY{$r9C<";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y_@SY{$r9C<");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = (-498);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2417);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(2417, (-498), 0L, timeUnit0, blockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rd2T%OKbN8Tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.thread(3680);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1117, threadFactory0);
      int int0 = 30000;
      Spider spider3 = spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, 30000);
      String string0 = "";
      scheduledThreadPoolExecutor0.getExecuteExistingDelayedTasksAfterShutdownPolicy();
      Spider spider4 = spider3.setUUID("");
      spider4.thread(3680);
      Selector[] selectorArray0 = new Selector[6];
      ReplaceSelector replaceSelector0 = new ReplaceSelector("rd2T%OKbN8Tv", "k{8");
      selectorArray0[0] = (Selector) replaceSelector0;
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList1);
      selectorArray0[1] = (Selector) andSelector0;
      OrSelector orSelector0 = new OrSelector(linkedList1);
      selectorArray0[2] = (Selector) orSelector0;
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("`Sv>TY\"C,qT::QV");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@v &\"WQ@%");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(591);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%LVR>mOopZ79", "%LVR>mOopZ79");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(40);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1463);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<SpiderListener> list0 = spider2.getAll((Collection<String>) set0);
      Spider spider4 = spider3.setSpiderListeners(list0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider4.startRequests = (List<Request>) linkedList0;
      spider1.getUUID();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider5 = spider0.pipeline(resultItemsCollectorPipeline0);
      spider1.addPipeline(resultItemsCollectorPipeline0);
      spider2.getPageCount();
      spider4.start();
      spider5.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Spider {} closed! {} pages downloaded.";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Spider {} closed! {} pages downloaded.";
      stringArray0[1] = "Spider {} closed! {} pages downloaded.";
      stringArray0[2] = "Spider {} closed! {} pages downloaded.";
      stringArray0[3] = "Spider {} closed! {} pages downloaded.";
      String string1 = "(W':Yr{";
      stringArray0[4] = "(W':Yr{";
      stringArray0[5] = "Spider {} closed! {} pages downloaded.";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[6] = "Spider {} closed! {} pages downloaded.";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Spider.Status.values();
      String string0 = "UC.i| #}.uK<](";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UC.i| #}.uK<](");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("UC.i| #}.uK<](");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = " error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request(" error");
      String string1 = "--Oo/NJ.";
      Request request1 = request0.setMethod("--Oo/NJ.");
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "M+\"n0YM}r";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M+\"n0YM}r");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.getScheduler();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Kr_wLp@tQ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Spider {} started!";
      stringArray0[7] = "";
      String string0 = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }
}
