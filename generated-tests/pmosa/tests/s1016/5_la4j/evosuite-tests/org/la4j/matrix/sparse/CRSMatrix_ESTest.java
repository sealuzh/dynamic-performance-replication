/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:25:05 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.add(4.9E-324);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1472, (-1507), (double) 1472, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 0, (-2366.415513), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RowMajorSparseMatrix.zero(37, 37);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(6, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-4597), (-4597), (-181.9459));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-4597' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(989);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 989
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13;
      doubleArray0[0] = (double) 6;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(13, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.doubles(0L);
      mockRandom0.ints((long) 0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2044.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      SparseMatrix.from2DArray(doubleArray0);
      cRSMatrix0.each((MatrixProcedure) null);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      double double0 = cRSMatrix0.min();
      cRSMatrix0.iteratorOfNonZeroRows();
      double double1 = cRSMatrix0.max();
      assertEquals(double1, double0, 0.01);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(5, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(2404, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2404
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1458);
      cRSMatrix0.maxInRow(1412);
      cRSMatrix0.nonZeroAt(1412, 1458);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1513;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      cRSMatrix0.minInRow(int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)14;
      byteArray0[2] = byte2;
      byte byte3 = (byte)98;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1472);
      Integer integer0 = new Integer(1472);
      cRSMatrix0.maxInRow(3);
      cRSMatrix0.nonZeroAt(3, 3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 1.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction1);
      mockRandom0.nextBoolean();
      SparseMatrix.randomSymmetric(0, 428.771, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        mockRandom0.longs(0L, (-144L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CRSMatrix.from1DArray(8, 2869, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 0);
      assertTrue(matrix0.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.setAll((-1272.26627735214));
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2, (double) 13, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1458;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1458);
      cRSMatrix0.foldNonZeroInRow(524, (VectorAccumulator) null);
      cRSMatrix0.maxInRow(int0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 143;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 143;
      intArray0[1] = 143;
      intArray0[2] = 143;
      intArray0[3] = 143;
      intArray0[4] = 143;
      intArray0[5] = 143;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 982, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3973);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0, 2852, 143, 1, 143);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2852, 143
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(395);
      cRSMatrix0.max();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1513;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(3477, vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(3477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3477
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 13);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 2245);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.set(1, 0, (-635.801));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-1272.26627735214));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("i$P^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.getColumn(1472);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("tv(^W!D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 2);
      cRSMatrix0.setAll(2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 676;
      doubleArray0[1] = (double) 2844;
      doubleArray0[2] = (double) 2844;
      doubleArray0[3] = (double) 2844;
      int[] intArray0 = new int[7];
      intArray0[0] = 676;
      intArray0[1] = 2844;
      intArray0[2] = 676;
      intArray0[3] = 2844;
      intArray0[4] = 676;
      intArray0[5] = 676;
      intArray0[6] = 2844;
      CRSMatrix cRSMatrix0 = new CRSMatrix(676, 676, 2844, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll(1.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(18, 18);
      double double0 = cRSMatrix0.minInRow(7);
      assertEquals(0.0, double0, 0.01);
      assertEquals(18, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1472);
      cRSMatrix1.minInRow(32);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(201, 201, 201);
      int[] intArray0 = new int[1];
      intArray0[0] = 201;
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.minInRow(intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(0, 1993.068976966393, (Random) mockRandom0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1444;
      intArray0[1] = 461;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1444' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      cRSMatrix0.getColumn(Integer.MAX_VALUE);
      Vector vector0 = ((CRSMatrix) rowMajorSparseMatrix0).getColumn(1);
      assertEquals(1, vector0.length());
      assertEquals(1, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.removeLastColumn();
      double double0 = (-863.7);
      double double1 = (-644.235);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, double1).when(vectorAccumulator0).accumulate();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)6;
      byteArray0[2] = byte2;
      byte byte3 = (byte)106;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-41);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-11);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-11);
      byteArray0[7] = byte7;
      CRSMatrix.fromBinary(byteArray0);
      int int0 = 1443;
      CRSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)32);
      cRSMatrix0.getColumn((-1565));
      cRSMatrix0.iteratorOfRow((byte)32);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 9);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2527
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(32, 32, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 13);
      double double0 = cRSMatrix0.maxInRow(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(111, 111);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1182);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      double double0 = new Integer(1182);
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(105, 105);
      cRSMatrix0.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 8;
      String string0 = "x4^{}>V27z\"U(ac";
      double[] doubleArray0 = new double[8];
      CRSMatrix.identity(8);
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(8, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 13);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1457);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix1.toColumnMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, columnMajorSparseMatrix0);
      cRSMatrix1.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 32;
      int int1 = 2627;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 2627);
      cRSMatrix0.toBinary();
      int int2 = (-779);
      double double0 = cRSMatrix0.getOrElse((-779), 32, 32);
      int int3 = 1;
      CRSMatrix.zero(int3, int3);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int3;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int2;
      doubleArray1[8] = (double) int0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int2;
      doubleArray2[4] = (double) int1;
      doubleArray2[5] = (double) int3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) int1;
      doubleArray3[1] = double0;
      doubleArray3[2] = double0;
      doubleArray0[2] = doubleArray3;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      cRSMatrix0.copy();
      cRSMatrix0.iterator();
      cRSMatrix0.rank();
      int int1 = 4;
      RowMajorSparseMatrix.zero(1465, 4, (-1));
      VectorAccumulator vectorAccumulator0 = null;
      cRSMatrix0.foldRow(int1, vectorAccumulator0);
      int int2 = (-2297);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int2, int0);
      double double0 = Double.POSITIVE_INFINITY;
      int int3 = 600;
      cRSMatrix0.get(int3, int3);
      cRSMatrix0.divide(double0);
      cRSMatrix0.maxInRow(int0);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int4 = 1073741824;
      int int5 = 25;
      cRSMatrix2.swapRows(int4, int5);
      cRSMatrix0.nonZeroColumnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachInRow(int2, vectorProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.to(matrixFactory0);
      double double1 = 1278.0;
      CRSMatrix cRSMatrix3 = CRSMatrix.diagonal(int0, double1);
      cRSMatrix3.rowMajorIterator();
      cRSMatrix1.getRow(int1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(82);
      cRSMatrix0.minInRow(17);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(46, 17, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      cRSMatrix0.rank();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 13, 13);
      Matrix matrix0 = cRSMatrix0.copyOfShape(4, 8);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(8, matrix0.columns());
      assertEquals(4, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1450, 1450);
      int int0 = 1;
      int int1 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3158, 1, 3);
      Matrix matrix0 = cRSMatrix0.add((double) 201);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1472, 1);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 3;
      intArray1[1] = 1472;
      intArray1[2] = 1472;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(848);
      Matrix.diagonal(848, 848);
      cRSMatrix0.minInRow(0);
      cRSMatrix0.copyOfShape(848, 0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1536);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.copyOfRows(1430);
      cRSMatrix0.minInRow(32);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1445, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1445
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1423, 1423, 1423);
      int[] intArray0 = new int[2];
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.minInRow(1423);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1472, 1472, 1472);
      MockRandom mockRandom0 = new MockRandom(1472);
      CRSMatrix.random(833, 833, 1.0, (Random) mockRandom0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte byte0 = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(161);
      cRSMatrix0.power((byte)32);
      cRSMatrix0.minInRow(byte0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      int int0 = 3457;
      cRSMatrix1.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(248);
      cRSMatrix0.removeLastRow();
      cRSMatrix0.shuffle();
      int int0 = 13;
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(44);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      SparseMatrix.zero(44, 1618);
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cRSMatrix0.maxInRow(8);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 226;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(226, 226);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.set(int0, int0, int0);
      int int1 = (-2210);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      double double0 = 713.528901;
      doubleArray0[3] = double0;
      cRSMatrix0.iterator();
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      int int2 = 217;
      SparseMatrix.identity(int2);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) int1;
      SparseMatrix.from1DArray(int0, int1, doubleArray0);
      int int3 = 225;
      cRSMatrix0.blankOfShape(int0, int3);
      cRSMatrix0.minInRow(int1);
      int int4 = 2629;
      long long0 = 1000L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int3, int4, doubleArray0[0], (Random) mockRandom0);
      mockRandom0.longs((long) int0, (long) int1);
      int int5 = (-384);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.rowMajorIterator();
      cRSMatrix1.updateRow(int5, vectorFunction0);
      cRSMatrix1.max();
      int int6 = (-1688);
      double double2 = (-1534.73243);
      cRSMatrix0.set(int6, int4, double2);
      int int7 = 32;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int7, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(848);
      Matrix.diagonal(596, (-999.74));
      cRSMatrix0.minInRow(596);
      cRSMatrix0.copyOfShape(596, 848);
      CRSMatrix.zero(73, 596);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(4, 1530);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1458);
      cRSMatrix0.setRow(1446, 475.7);
      int int0 = 1412;
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2996, 2996);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(125, vectorFunction0);
      cRSMatrix0.multiply((double) 397);
      int int0 = 831;
      cRSMatrix0.minInRow(int0);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(390);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (double)390, (double)390, (double)390, (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(6, vectorFunction0);
      cRSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix.identity(1472);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 1016;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1472, 1016);
      Matrix matrix0 = Matrix.diagonal(1016, 429.899902210529);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.max();
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.rotate();
      cRSMatrix0.product();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.rotate();
      int int0 = 671;
      cRSMatrix0.product();
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(671, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '671' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2151, (byte)32);
      cRSMatrix0.rotate();
      Integer integer0 = new Integer((-115));
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(4914);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4914
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(390);
      int int0 = 45;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2572.51845), (double)6, (-1624.11493454), Double.POSITIVE_INFINITY, (double)45).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(6, vectorFunction0);
      int int1 = (-1009);
      Integer integer0 = new Integer(int1);
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.nonZeroRowMajorIterator();
      double double0 = cRSMatrix1.maxInRow(1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      MockRandom mockRandom0 = new MockRandom(4155L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)57, 1.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int0 = 1;
      cRSMatrix0.getRow(int0);
      int int1 = 104;
      cRSMatrix1.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 925;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1;
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 925;
      intArray1[2] = 925;
      intArray1[3] = 1;
      intArray1[4] = 925;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray1[7] = 2;
      intArray1[8] = 1;
      CRSMatrix cRSMatrix1 = new CRSMatrix(925, 1, 925, doubleArray0, intArray0, intArray1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(41);
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.subtract((double) 40);
      SparseMatrix.zero(2, 40, 40);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(41);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)40, (double)41, (double)41, (-365.9301547847), (double)41).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldRows(vectorAccumulator0);
      Matrix matrix1 = matrix0.removeLastRow();
      matrix1.multiplyByItsTranspose();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)37;
      cRSMatrix1.minInRow(25);
      double[][] doubleArray0 = new double[0][7];
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }
}
