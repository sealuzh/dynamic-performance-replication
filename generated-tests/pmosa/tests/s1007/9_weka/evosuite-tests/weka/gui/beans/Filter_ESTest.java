/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:07:09 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyListener;
import java.awt.image.ImageObserver;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JDialog;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.Element;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Vector vector0 = predictionAppender0.m_testSetListeners;
      crossValidationFoldMaker0.m_trainingListeners = vector0;
      filter0.removeTrainingSetListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusCycleRoot(true);
      boolean boolean0 = filter0.connectionAllowed("at9AJ6!K+");
      assertTrue(boolean0);
      
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLocation((-1514), 0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.enumerateRequests();
      Classifier classifier0 = new Classifier();
      classifier0.getBorder();
      filter0.removeInstanceListener(classifier0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCursor();
      filter0.connectionAllowed("q\">C");
      filter0.getVisual();
      // Undeclared exception!
      try { 
        filter0.performRequest("Filtering test data (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filtering test data ( not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getBaselineResizeBehavior();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(keyListener0, keyListener0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      filter0.addKeyListener((KeyListener) null);
      filter0.eventGeneratable("!ATLV");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.getFilter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptInstance((InstanceEvent) null);
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      // Undeclared exception!
      try { 
        filter0.performRequest("!ATLV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !ATLV not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("HQ.");
      boolean boolean1 = filter0.connectionAllowed("weka/gui/beans/icons/");
      assertFalse(boolean1 == boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusTraversalPolicy();
      filter0.getUIClassID();
      filter0.setLog((Logger) null);
      filter0.getFilter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.addDataSourceListener(testSetMaker0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter0.removeDataSourceListener(filter1);
      filter0.firePropertyChange("Class (", 'o', 'o');
      filter1.setFocusable(true);
      filter1.addDataSourceListener(filter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter1.addConfigurationListener(configurationListener0);
      filter0.getHierarchyListeners();
      InstanceEvent instanceEvent0 = null;
      filter1.notifyInstanceListeners((InstanceEvent) null);
      Instances instances0 = null;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter1.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter1.setFilter((weka.filters.Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent("h~Ub@L21W]0", (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Object object0 = classifierPerformanceEvaluator0.m_listenee;
      filter0.disconnectionNotification(" is currently batch processing!", (Object) null);
      classifierPerformanceEvaluator0.validate();
      Filter filter1 = new Filter();
      filter0.repaint();
      filter0.removeInstanceListener(filter1);
      filter0.validate();
      classifierPerformanceEvaluator0.resetKeyboardActions();
      // Undeclared exception!
      try { 
        filter1.setWrappedAlgorithm(" is currently batch processing!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ogen");
      Filter filter0 = new Filter();
      filter0.connectionNotification("{D6SFHzSeoPazR5vE", "{D6SFHzSeoPazR5vE");
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("{D6SFHzSeoPazR5vE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange(" : incorrect ", (byte)0, (byte)0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.getFilter();
      filter0.useDefaultVisual();
      Appender appender0 = new Appender();
      appender0.getDebugGraphicsOptions();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      filter0.globalInfo();
      filter0.stop();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 478);
      asyncBoxView0.getContainer();
      filter0.checkImage((Image) null, (ImageObserver) null);
      filter0.repaint((-1231), (-1231), Integer.MIN_VALUE, 478);
      filter0.isBusy();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      instanceEvent0.setStructure((Instances) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setFilter(spreadSubsample0);
      filter0.removeTestSetListener(appender0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeDataSourceListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("can't process stemed instances; cant con=inUe");
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "H0Q.";
      filter0.eventGeneratable("H0Q.");
      String string1 = "J(xwaPBK?XQh2";
      Clusterer clusterer0 = new Clusterer();
      clusterer0.getInputMethodListeners();
      filter0.disconnectionNotification("J(xwaPBK?XQh2", clusterer0);
      MetaBean metaBean0 = new MetaBean();
      BeanVisual beanVisual0 = metaBean0.getVisual();
      metaBean0.getLocation((Point) null);
      beanVisual0.isPaintingTile();
      filter0.setVisual(beanVisual0);
      filter0.stop();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(instanceStreamToBatchMaker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.InstanceStreamToBatchMaker : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.setBounds(1825, (-1304), (-1304), 1825);
      filter0.addDataSourceListener(sorter0);
      filter0.removeInstanceListener(sorter0);
      filter0.setCustomName("_>ztk0Z,?");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      BeanVisual beanVisual0 = trainingSetMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.addDataSourceListener(substringLabeler0);
      assertEquals("TrainingSetMaker", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("h~Tb@L21W]0", "h~Tb@L21W]0");
      filter0.addTestSetListener((TestSetListener) null);
      boolean boolean0 = filter0.eventGeneratable("h~Tb@L21W]0");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.resetKeyboardActions();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.eventGeneratable("8;.");
      filter0.connectionAllowed("WARNING: Not an incremental filter.");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.setPreferredSize((Dimension) null);
      MultiFilter multiFilter0 = new MultiFilter();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, false, false, true);
      logPanel0.getHeight();
      filter0.setLog(logPanel0);
      Saver saver0 = new Saver();
      filter0.addTrainingSetListener(saver0);
      String string0 = null;
      // Undeclared exception!
      try { 
        filter0.performRequest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusCycleRoot(true);
      filter0.getFilter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus((-1840));
      filter0.notifyInstanceListeners(instanceEvent0);
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      instanceEvent0.setStructure((Instances) null);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 1614, 46, (-282), 1);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("h~Tb@L21W]0", "h~Tb@L21W]0");
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("\"oSfNv6_v1QLHY$", "\"oSfNv6_v1QLHY$");
      boolean boolean0 = filter0.eventGeneratable("\"oSfNv6_v1QLHY$");
      assertTrue(boolean0);
      
      filter0.getWrappedAlgorithm();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.getUIClassID();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(59);
      filter0.acceptInstance(instanceEvent0);
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.connectionNotification(".gif", mockMinguoDate0);
      filter0.enumerateRequests();
      filter0.getAlignmentX();
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification(".gif", discretize0);
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.connectionNotification("#Y+v*U", crossValidationFoldMaker0);
      boolean boolean0 = filter0.eventGeneratable("#Y+v*U");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent("can't process stemed instaces; cant con=inUe", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getWrappedAlgorithm();
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Logger logger0 = testSetMaker0.m_logger;
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Logger logger1 = classValuePicker0.m_logger;
      filter0.setLog((Logger) null);
      filter0.stop();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0, 1, 15);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.connectionNotification("yQf~Lqz", associator0);
      filter0.addTestSetListener((TestSetListener) null);
      boolean boolean0 = filter0.eventGeneratable("yQf~Lqz");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.acceptInstance(instanceEvent0);
      filter0.globalInfo();
      filter0.setCustomName("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("configuration", "configuration");
      filter0.addTestSetListener((TestSetListener) null);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      boolean boolean0 = filter0.connectionAllowed("HL&{aIX0S*");
      assertTrue(boolean0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockJapaneseDate0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      filter0.connectionNotification("instance", minkowskiDistance0);
      boolean boolean0 = filter0.eventGeneratable("(sV0`OkTsm*L`/=v");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptInstance((InstanceEvent) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      filter0.removeTestSetListener(substringLabeler0);
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      boolean boolean0 = filter0.eventGeneratable("jx");
      assertFalse(boolean0);
      
      filter0.getKeyListeners();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance((Instances) null);
      filter0.disconnectionNotification("jx", chebyshevDistance0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addTrainingSetListener(dataVisualizer0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(dataSetEvent0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }
}
