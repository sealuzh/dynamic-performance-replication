/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:42:22 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-695.0));
      int int0 = rationalNumber0.intValue();
      assertEquals((-695), int0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-695.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-695.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.8867924609367037E-5);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1.8867924E-5F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((-1.8867924528301888E-5), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.5849255987632205E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(12619, rationalNumber0.divisor);
      assertEquals(1.5849116411760045E-4, rationalNumber0.doubleValue(), 0.01);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1289.2);
      String string0 = rationalNumber0.toString();
      assertEquals("6446/5 (1,289.2)", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1,289.2", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3216.005055905413);
      assertEquals(3216.009900990099, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      long long0 = rationalNumber0.longValue();
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(100, 0L);
      RationalNumber.factoryMethod(0, 2147483670L);
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483646565052E9));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, (-532L));
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1, rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483652L), (-2147483652L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(0L, (-2147483652L));
      rationalNumber2.toDisplayString();
      rationalNumber1.toString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(0L, 1);
      RationalNumber.factoryMethod((-2147483652L), 1);
      rationalNumber3.toString();
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-838.03341));
      rationalNumber1.toString();
      rationalNumber4.toString();
      RationalNumber.valueOf(1878.712705782266);
      RationalNumber.factoryMethod(1, 1);
      RationalNumber.valueOf(1);
      RationalNumber.factoryMethod(0L, (-216L));
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483652L), 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483652, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
