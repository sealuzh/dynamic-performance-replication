/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:44:34 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.constraint.Constraint;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("", stringBuilder1);
      SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder2);
      assertEquals("BlockedByteArray cannot be null or  and BlockedByteArray cannot be null", stringBuilder2.toString());
      assertEquals("BlockedByteArray cannot be null or  and BlockedByteArray cannot be null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("5'eH S-2}kC@z2Z)d", "z!+%FtG{]V$+=gl", "z!+%FtG{]V$+=gl");
      assertEquals("5'eH S-2}kC@z2Z)d", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("Illegfl column type format: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("inner");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table inner", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("]c&l&");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectc( ^40e=/");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "};XXq3ki$";
      String string0 = SQLUtil.leftJoin("};XXq3ki$", stringArray0, "};XXq3ki$", "selectc( ^40e=/", stringArray0);
      assertEquals("left join };XXq3ki$ as selectc( ^40e=/ on };XXq3ki$.};XXq3ki$ = selectc( ^40e=/.};XXq3ki$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6%wj(59Yl";
      stringArray0[1] = "6%wj(59Yl";
      String string0 = SQLUtil.renderColumnListWithTableName("6%wj(59Yl", stringArray0);
      assertEquals("6%wj(59Yl.6%wj(59Yl, 6%wj(59Yl.6%wj(59Yl", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-3225.86188);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 3225.86188", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zCHf{(9939;");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM zCHf{(9939; WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.join("", " /* WHERE ", stringArray0, "", "", stringArray0);
      assertEquals(" as  on  /* WHERE . = .", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "catalog null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("BlockedByteArray cannot be null", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("", stringBuilder2);
      SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder3);
      assertEquals("BlockedByteArray cannot be null0.0 or  and BlockedByteArray cannot be null", stringBuilder3.toString());
      assertEquals("BlockedByteArray cannot be null0.0 or  and BlockedByteArray cannot be null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      SQLUtil.isQuery("table null");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("table null", false, defaultDBTable0, "0");
      StringBuilder stringBuilder0 = new StringBuilder("table null");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("table nullCONSTRAINT table nullCHECK 0CONSTRAINT \"table null\" CONSTRAINT \"table null\" ", stringBuilder2.toString());
      assertEquals("table nullCONSTRAINT table nullCHECK 0CONSTRAINT \"table null\" CONSTRAINT \"table null\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("XBCX1.S");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XBCX1.S", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder("create materialized view");
      StringBuilder stringBuilder1 = stringBuilder0.append((-3365.5));
      stringBuilder1.chars();
      stringBuilder0.reverse();
      SQLUtil.parseColumnTypeAndSize("br1pW~OJYx\".|v");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null.XBCX1.S", string0);
      
      boolean boolean1 = SQLUtil.isDDL("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.normalize("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string2);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null\" PRIMARY KEY (, , , , , , , , , , )", string3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.isQuery("XBCX1.S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XBCX1.S");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      MockFile mockFile0 = new MockFile("y8[", "create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "create materialized view", (Object[]) stringArray0);
      mockFile0.setWritable(false, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      boolean boolean0 = SQLUtil.isQuery("end");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("-&R~gqj%rceq5x", dBCatalog0);
      MockFile mockFile0 = new MockFile("-&R~gqj%rceq5x");
      MockFile mockFile1 = new MockFile("-&R~gqj%rceq5x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("-&R~gqj%rceq5x");
      assertEquals("-&R~gqj%rceq5x", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = TypeId.STRUCT_NAME;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop indexforeign key", false, "STRUCT", "STRUCT");
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = LogToFile.TEST_RECORD_TO_FILL_LOG;
      String string2 = TypeId.BLOB_NAME;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBPrimaryKeyConstraint0.setOwner(compositeDBObject0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , )", string3);
      
      String string4 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , , , , )", string4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("truncate", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" ADD ");
      String[] stringArray0 = new String[4];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" ADD ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" ADD ", dBSchema0);
      dBCatalog0.getSequences();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBTrigger dBTrigger0 = new DBTrigger(" ADD ", dBSchema0);
      String string0 = SQLUtil.substituteMarkers("call", ", ", dBTrigger0);
      assertEquals("call", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, (-828), "drop index");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-210585989), "Y2O^?KF7+>kgL=z!I{");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("call, null", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isQuery("XBCX1.S");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XBCX1.S", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder("create materialized view");
      StringBuilder stringBuilder1 = stringBuilder0.append((-3365.5));
      stringBuilder1.chars();
      stringBuilder0.reverse();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XBCX1.S", false, stringArray0);
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("-&R~gqj%r|eq5x", false);
      stringBuilder1.append((Object) untypedPropertyMutator0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = MockFile.createTempFile("XBCX1.S", "-&R~gqj%r|eq5x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "execute", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "catalog null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"catalog null\" PRIMARY KEY (, , , , , , , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TypeId.STRUCT_NAME;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("STRUCT", false, "STRUCT", "STRUCT");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT STRUCT ", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK STRUCT", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "STRUCT";
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(STRUCT)", string3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\u0005{U3%i#'");
      stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("/*", false);
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("i&D%P$`jG", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}f8#1rR9");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      SQLUtil.leftJoin("update6boll%bu9opvysnhp", stringArray0, "()", "insert}{,+_mgfb[m22hz/a,", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("i&D%P$`jG", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(44, "OZd");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OZd", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("OZD(3)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("V1\"e69jQ-1)u/3", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("{Yu_O\" }Q", dBSchema0);
      String string0 = SQLUtil.normalize("V1\"e69jQ-1)u/3", true);
      assertEquals("V1 \"e69jQ-1)u/3\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<mvt{,URu]=cM!'.";
      stringArray0[1] = "<mvt{,URu]=cM!'.";
      stringArray0[2] = "<mvt{,URu]=cM!'.";
      stringArray0[3] = "<mvt{,URu]=cM!'.";
      stringArray0[4] = "<mvt{,URu]=cM!'.";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("<mvt{,URu]=cM!'. = '<mvt{,URu]=cM!'.' AND <mvt{,URu]=cM!'. = '<mvt{,URu]=cM!'.' AND <mvt{,URu]=cM!'. = '<mvt{,URu]=cM!'.' AND <mvt{,URu]=cM!'. = '<mvt{,URu]=cM!'.' AND <mvt{,URu]=cM!'. = '<mvt{,URu]=cM!'.'", string0);
      
      String string1 = SQLUtil.normalize("<mvt{,URu]=cM!'.", true);
      assertEquals("< mvt {, URu ] = cM ! '.'", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0005{U3%i#'");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      stringBuilder1.append(0.0);
      stringBuilder0.chars();
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      UntypedPropertyMutator untypedPropertyMutator0 = new UntypedPropertyMutator("/*", false);
      stringBuilder3.append((Object) stringBuilder2);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      assertEquals("0.0llun ro '#i%3U{\u0005null0.0llun ro '#i%3U{\u0005null", stringBuilder2.toString());
      
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("b(.J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: b(.J
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("m;@Wc1zDD!8");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("1@{8FyD,T0/ThbZ", false);
      assertEquals("1 @ { 8FyD, T0 / ThbZ", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("sP^B].Ha9uS^!kzs");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("sP^B].Ha9uS^!kzs", true);
      assertEquals("sP ^ B ].Ha9uS ^ ! kzs", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unknown constraint type: ");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- 0", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" NULL", defaultDBTable0, (-3243), "bGcbRA',Ikakr'iA_");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, (Integer) (-4), integer0);
      defaultDBColumn2.setDoc("--");
      String string1 = SQLUtil.renderColumn(defaultDBColumn2);
      assertEquals("null TRUNCATE(-4,3) NULL", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("-&R~gqj%rceq5x");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("-&R~gqj%rceq5x", true);
      assertEquals("- & R ~ gqj % rceq5x", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.removeComments("Illegal column type format: ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("callxbcx1.s");
      assertFalse(boolean0);
      
      ArrayInputStream arrayInputStream0 = new ArrayInputStream();
      arrayInputStream0.readLine();
      InputStreamReader inputStreamReader0 = new InputStreamReader(arrayInputStream0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      streamTokenizer0.nval = 977.3733;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("977.3733", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "deletev1\"e69jq-1)u/3";
      SQLUtil.isDML("deletev1\"e69jq-1)u/3");
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletev1\"e69jq-1)u/3");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deletev1\"e69jq-1)u/3";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'deletev1\"e69jq-1)u/3' has no foreign key with the columns (deletev1\"e69jq-1)u/3)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isQuery("XBCX1.S");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XBCX1.S", dBSchema0);
      String string0 = "-\\&R~gqj%r|eq5x";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBSchema dBSchema1 = new DBSchema((String) null);
      DBCatalog dBCatalog1 = new DBCatalog();
      TableContainer tableContainer0 = new TableContainer("-&R~gqj%r|eq5x", dBCatalog0);
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("create materialized view", defaultDBTable1, 244, "select null as TABLE_CAT, null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, cast('SYSTEM TABLE' as varchar(31)) as TABLE_TYPE, RDB$DESCRIPTION as REMARKS, RDB$OWNER_NAME as OWNER_NAME from RDB$RELATIONS where ? = 'T' and RDB$SYSTEM_FLAG = 1 and RDB$VIEW_SOURCE is null union select null as TABLE_CAT, null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, cast('TABLE' as varchar(31)) as TABLE_TYPE, RDB$DESCRIPTION as REMARKS, RDB$OWNER_NAME as OWNER_NAME from RDB$RELATIONS where ? = 'T' and RDB$SYSTEM_FLAG = 0 and RDB$VIEW_SOURCE is null union select null as TABLE_CAT, null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, cast('VIEW' as varchar(31)) as TABLE_TYPE, RDB$DESCRIPTION as REMARKS, RDB$OWNER_NAME as OWNER_NAME from RDB$RELATIONS where ? = 'T' and RDB$VIEW_SOURCE is not null  order by 3 ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'SYSTEM TABLE' as varchar(31\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectc( ^40e=/");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.normalize("selectc( ^40e=/", true);
      assertEquals("selectc (^ 40e =  /", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = TypeId.STRUCT_NAME;
      DBCatalog dBCatalog0 = new DBCatalog("*/");
      ArrayList<DBTable> arrayList0 = new ArrayList<DBTable>();
      DBSchema dBSchema0 = new DBSchema("selectc( ^40e=/", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d\"e 0=wlW[Cu$ELD", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "d\"e 0=wlW[Cu$ELD";
      stringArray0[1] = "selectc( ^40e=/";
      stringArray0[2] = "Syntax erro} after ";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "execute";
      stringArray1[1] = "selectc( ^40e=/";
      stringArray1[2] = "*/";
      stringArray1[3] = "Syntax erro} after ";
      stringArray1[4] = "STRUCT";
      stringArray1[5] = "Syntax erro} after ";
      String string1 = SQLUtil.renderWhereClause(stringArray1, stringArray1);
      assertEquals("execute = 'execute' AND selectc( ^40e=/ = 'selectc( ^40e=/' AND */ = '*/' AND Syntax erro} after  = 'Syntax erro} after ' AND STRUCT = 'STRUCT' AND Syntax erro} after  = 'Syntax erro} after '", string1);
      
      String string2 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex(")A~75", true, defaultDBTable0, (String[]) null);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "'LESS'";
      stringArray1[1] = "'LESS'";
      stringArray1[2] = "'LESS'";
      stringArray1[3] = "'LESS'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'LESS'", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY ('LESS', 'LESS', 'LESS', 'LESS')");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'LESS'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " or ";
      stringArray0[1] = "_)11!;Piw.";
      stringArray0[2] = "alter ";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "_)11!;Piw.";
      objectArray0[1] = (Object) " or ";
      objectArray0[2] = (Object) "_)11!;Piw.";
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) "_)11!;Piw.";
      objectArray0[5] = (Object) "alter ";
      objectArray0[6] = (Object) "alter ";
      objectArray0[7] = (Object) defaultDBTable0;
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals(" or  = '_)11!;Piw.' AND _)11!;Piw. = ' or ' AND alter  = '_)11!;Piw.'", string0);
      
      String string1 = SQLUtil.normalize("_)11!;Piw.", true);
      assertEquals("_) 11 ! ; Piw.", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = TypeId.STRUCT_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("STRUCT");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "STRUCT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("STRUCT", defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("alter materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sequen");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance(185, "drop table<mvt{,uru]=cm!'.");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<mvt{,URu]=cM!'.", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(")", defaultDBTable0, (-674), "drop table<mvt{,uru]=cm!'.");
      defaultDBTable0.addColumn(defaultDBColumn1);
      MockFile mockFile0 = new MockFile("<mvt{,URu]=cM!'.");
      MockFile mockFile1 = new MockFile("exec");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" smwNCtT'y;D3|t]U|", defaultDBTable0, 171, "DATE");
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.setDoc("DATE");
      SQLUtil.renderColumn(defaultDBColumn1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DATE DATE NULL";
      DBDataType.getInstance(171, " smwNCtT'y;D3|t]U|");
      stringArray0[1] = "alter table";
      stringArray0[2] = " smwNCtT'y;D3|t]U|";
      stringArray0[3] = " smwNCtT'y;D3|t]U|";
      stringArray0[4] = " smwNCtT'y;D3|t]U|";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (DATE DATE NULL, alter table,  smwNCtT'y;D3|t]U|,  smwNCtT'y;D3|t]U|,  smwNCtT'y;D3|t]U|)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "selectc( ^40e=/";
      stringArray0[1] = "selectc( ^40e=/";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":c>AW@Xw(8|Q>SVLg?*");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m;@wc1zdd!8", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT m;@wc1zdd!8 UNIQUE (selectc( ^40e=/, selectc( ^40e=/, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unknown constraint type: ");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- 0", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("TRUNCATE", string1);
      
      String string2 = Constraint.CHECK;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("-&R~gqj%rceq5x", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("/*", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unknown constraint type: ");
      DBDataType.getInstance((-4), "truncate");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "truncate";
      stringArray0[1] = null;
      stringArray0[2] = "- 0";
      stringArray0[3] = "truncate";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("truncate = 'truncate' AND null = null AND - 0 = '- 0' AND truncate = 'truncate'", string1);
      
      String string2 = SQLUtil.normalize("- 0", true);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = SQLUtil.innerJoin("rename]c&l&", stringArray0, stringArray0[1], "truncate", stringArray0);
      assertEquals("null as truncate on rename]c&l&.truncate = truncate.truncate and rename]c&l&.null = truncate.null and rename]c&l&.- 0 = truncate.- 0 and rename]c&l&.truncate = truncate.truncate", string3);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      
      String string4 = SQLUtil.normalize("rename]c&l&", true);
      assertEquals("rename ] c & l &", string4);
      
      Character character0 = new Character(',');
      SQLUtil.renderValue(character0);
      boolean boolean1 = SQLUtil.isDDL("truncate");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "/*", "execdate");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
      
      MinguoDate minguoDate0 = MockMinguoDate.now();
      String string1 = SQLUtil.renderValue(minguoDate0);
      assertEquals("Minguo ROC 103-02-14", string1);
  }
}
