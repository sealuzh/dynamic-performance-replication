/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:13:19 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      // Undeclared exception!
      try { 
        matrix0.set(0, (-2573), 1230.8865);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 34;
      CRSMatrix cRSMatrix0 = new CRSMatrix(34, 34);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn((-376), (double) 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-376' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2046, 2046);
      matrix0.eachInColumn(2046, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldRow(8, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.removeColumn(7);
      matrix0.columnMajorIterator();
      matrix0.transpose();
      rowMajorSparseMatrix0.setColumn(10, (double) 0);
      Matrix matrix1 = rowMajorSparseMatrix0.blank();
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(7, 0, mockRandom0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.constant(1220, 10);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        matrix1.insertRow(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2, 2);
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(2, matrix1.rows());
      assertEquals(1, matrix1.columns());
      
      int int0 = matrix0.rows();
      assertEquals(2, matrix0.columns());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn((-1176));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(290, 10, 10);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow((-2078209980), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..289
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(10, 33);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(1908874346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(32, 32);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 17;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 17, 17);
      sparseMatrix0.toDenseMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int1 = (-492);
      // Undeclared exception!
      try { 
        sparseMatrix0.isZeroAt((-489), 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -489
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 870, (-1), 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x127
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null, (-382), (-382), (-382), 1, 10, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -382, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(225, 0.0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.norm();
      matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 225, 0, 225, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 225, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 1426, (-1), 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1426, -1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      assertEquals(0, cCSMatrix0.columns());
      assertTrue(matrix0.equals((Object)cCSMatrix0));
      assertNotSame(matrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 3264.26429652);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transform(matrixFunction0);
      int int1 = 1239;
      int int2 = (-1640);
      double[] doubleArray0 = new double[2];
      Matrix matrix1 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix1.removeColumn(1292);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 6;
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 0, 0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-2202);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (-2202), 1L);
      // Undeclared exception!
      try { 
        Matrix.random((-2202), (-986), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 633;
      int int1 = 3565;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3565;
      doubleArray0[1] = (double) 3565;
      doubleArray0[2] = (double) 633;
      doubleArray0[3] = (double) 633;
      doubleArray0[4] = (double) 3565;
      doubleArray0[5] = (double) 633;
      doubleArray0[6] = (double) 3565;
      doubleArray0[7] = (double) 633;
      doubleArray0[8] = (double) 633;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(633, 3565, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.infinityNorm();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.updateAt(5, 5, matrixFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      int int0 = 2;
      double[] doubleArray0 = new double[3];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      doubleArray0[0] = (double) 2;
      double double0 = (-3522.4);
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(2, 980.9558012212328, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(47, 47);
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, (-1714), 17, 0, 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1714, 17
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2046);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(225, 0.0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.iterator();
      rowMajorSparseMatrix0.setColumn(8, (double) 8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("$&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      matrix0.sum();
      matrix0.infinityNorm();
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2573), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1420, 6);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.iterator();
      cRSMatrix0.setColumn((-1), Double.POSITIVE_INFINITY);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      String string0 = "nogg.sunDfj44Jc~P7-";
      RowMajorSparseMatrix.fromMatrixMarket(string0);
      int int0 = 1024;
      denseMatrix0.blankOfRows(int0);
      denseMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.sum();
      rowMajorSparseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toCSV();
      MockRandom mockRandom0 = new MockRandom((-5829L));
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1495), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = Matrix.identity(17);
      // Undeclared exception!
      try { 
        matrix0.set((-409), (-2573), (-2619.792425));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-409' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 11;
      MockRandom mockRandom0 = new MockRandom((-1L));
      ChoiceFormat choiceFormat0 = new ChoiceFormat("nGJW");
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.power(1859);
      int int1 = (-5285);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-5285);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-5285), 1424, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -5285x1424
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(8, 8);
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 1109);
      // Undeclared exception!
      try { 
        cRSMatrix0.power(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 8 does not equal to 1109.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-2026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2026.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.identity(0);
      matrix0.iterator();
      matrix0.setColumn((-2573), (double) 8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      int int1 = (-1973);
      // Undeclared exception!
      try { 
        Matrix.unit(8, (-1973));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.norm();
      matrix0.manhattanNorm();
      assertEquals(11, columnMajorSparseMatrix0.rows());
      
      Matrix matrix1 = Matrix.unit(0, 0);
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.toCSV();
      MockRandom mockRandom1 = new MockRandom(11);
      // Undeclared exception!
      Matrix.randomSymmetric(1014, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(8, 8);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Index '");
      // Undeclared exception!
      try { 
        basic2DMatrix0.toCSV((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(3, 3);
      // Undeclared exception!
      try { 
        matrix0.slice(3, 1352, 3, (-2073432486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3..3][1352..-2073432486].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.sum();
      rowMajorSparseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toCSV();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice(0, 0, (-1495), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1495][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("Ez%F6d!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.add(362.162758116);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("d]#W\"$|]\"f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1604;
      Matrix matrix0 = Matrix.from1DArray(11, 1604, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 0, mockRandom0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      mockRandom0.nextGaussian();
      DenseVector.constant(1220, 10);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRow(10, vectorAccumulator0);
      Matrix.unit(7, 0);
      // Undeclared exception!
      Matrix.identity(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      Matrix matrix1 = Matrix.zero(8, 9);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 9 cols at 0, 0 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      cRSMatrix0.infinityNorm();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1604);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseVector0);
      Matrix matrix0 = cRSMatrix0.insertRow(7, vector0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 10, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.foldRow(1604, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1604
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(11);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows(11, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      cRSMatrix0.infinityNorm();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1604;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1604);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseVector0);
      Matrix matrix0 = cRSMatrix0.insertRow(7, vector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 31, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 31 rows and 3 cols at 0, 0 in a 11x11 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(4, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 3903;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(4266);
      // Undeclared exception!
      try { 
        basic1DMatrix0.setRow(9, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4266. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 127, 127, 0, 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 127, 127
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(32, (-215.1));
      // Undeclared exception!
      try { 
        matrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 1969.1672);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(758);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("1N");
      SparseVector sparseVector0 = SparseVector.zero(10);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      String string0 = denseMatrix0.toMatrixMarket((NumberFormat) choiceFormat0);
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
      
      rowMajorSparseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toCSV();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachInColumn(0, vectorProcedure0);
      Matrix matrix1 = matrix0.sliceBottomRight(0, (-3475));
      matrix1.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(3475, matrix1.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = matrix0.transformColumn((-1), vectorFunction0);
      assertNotSame(matrix2, matrix0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.sliceBottomRight(0, (-813));
      assertEquals(813, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(8, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(0, vectorProcedure0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(columnMajorSparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      denseMatrix0.swapRows(Integer.MAX_VALUE, 0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = denseMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix1.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("$&");
      MockRandom mockRandom0 = new MockRandom(1000L);
      DenseVector denseVector0 = DenseVector.random(1636, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      matrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Matrix.constant((-2632), (-1277), 870);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        NumberFormat.getPercentInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.ints();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      cRSMatrix0.infinityNorm();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1604;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1604);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseVector0);
      Matrix matrix0 = cRSMatrix0.insertRow(7, vector0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 10, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.divide(448.21353213);
      Matrix.diagonal(1604, 3);
      columnMajorSparseMatrix0.blankOfRows((-1582));
      matrix1.foldRow(int0, vectorAccumulator0);
      cRSMatrix0.manhattanNorm();
      int int1 = (-4454);
      int int2 = 6;
      Matrix.unit(int1, int2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0.000");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("0.000");
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn((-1251474447));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.unit(8, 8);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-198));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2661;
      doubleArray0[2] = (double) 2661;
      doubleArray0[4] = (double) 2661;
      doubleArray0[5] = (double) 2661;
      doubleArray0[7] = (double) 2661;
      int[] intArray0 = new int[4];
      intArray0[0] = 2661;
      intArray0[1] = 2661;
      intArray0[2] = 2661;
      intArray0[3] = 2661;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2661, 2661, 2661, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 2661;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2661;
      doubleArray0[1] = (double) 2661;
      doubleArray0[2] = (double) 2661;
      doubleArray0[3] = (double) 2661;
      doubleArray0[4] = (double) 2661;
      doubleArray0[5] = (double) 2661;
      doubleArray0[6] = (double) 2661;
      doubleArray0[7] = (double) 2661;
      doubleArray0[8] = (double) 2661;
      int[] intArray0 = new int[4];
      intArray0[0] = 2661;
      intArray0[1] = 2661;
      intArray0[2] = 2661;
      intArray0[3] = 2661;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2661, 2661, 2661, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0000");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.eachInRow(7, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DenseMatrix.fromCSV("0.000");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("0.000");
      DenseMatrix.fromCSV("0.000");
      ChoiceFormat choiceFormat1 = new ChoiceFormat("0.000");
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0.000");
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.multiply(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        denseMatrix0.toMatrixMarket((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.multiply((-319.8659259));
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateRow((-1970418272), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "0.000";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("0.000");
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(1970);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(167, 167);
      int int0 = 10;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 167;
      doubleArray0[2] = (double) 167;
      doubleArray0[3] = 1729.041768894683;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) 167;
      doubleArray0[8] = (double) 167;
      Matrix.from1DArray(10, 167, doubleArray0);
      basic1DMatrix0.diagonalProduct();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      // Undeclared exception!
      basic1DMatrix0.mkString(numberFormat0, "", "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 5);
      Matrix matrix0 = cRSMatrix0.subtract((double) 5);
      String string0 = matrix0.toString();
      assertEquals(" 0.000 -5.000 -5.000 -5.000 -5.000\n-5.000  0.000 -5.000 -5.000 -5.000\n-5.000 -5.000  0.000 -5.000 -5.000\n-5.000 -5.000 -5.000  0.000 -5.000\n-5.000 -5.000 -5.000 -5.000  0.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(17, 17);
      basic1DMatrix0.mkString("vector", "vector");
      MatrixVectorOperation<SparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<SparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("=3%2N~`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-601.87163470055);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 401;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("  ");
      denseMatrix0.min();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray2[8] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(3, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      cRSMatrix0.infinityNorm();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1604;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1604);
      ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseVector0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(7, (-1L));
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 10, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 10 rows and 3 cols at 0, 0 from a 7x7 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("W+PQ)FHO]da-Nhq");
      choiceFormat0.setMinimumIntegerDigits((-1396));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[0][9];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.block(matrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      basic2DMatrix1.updateRow((-3535), (VectorFunction) null);
      basic2DMatrix1.toMatrixMarket((NumberFormat) choiceFormat0);
      String string0 = "=3%2N~`";
      String string1 = "The";
      basic2DMatrix1.mkString("E],.'P68", "The");
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal((-3535), (-1594.127321575683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3535x-3535
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(1184, 3091);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(5);
      assertEquals(5, basic2DMatrix0.columns());
      
      basic2DMatrix0.determinant();
      int int0 = basic2DMatrix0.rank();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(8, 8);
      matrix0.rank();
      matrix0.kroneckerProduct(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      
      double double0 = basic2DMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.determinant();
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 8;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (double) 8;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 8;
      doubleArray2[4] = (double) 8;
      doubleArray2[5] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = (double) 8;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 8;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 8;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 8;
      doubleArray4[3] = (double) 8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 8;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 8;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 8;
      doubleArray7[3] = (double) 8;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (double) 8;
      doubleArray0[7] = doubleArray8;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(8, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(2, 1907.0762543);
      assertEquals(2, basic2DMatrix0.rows());
      
      double double0 = basic2DMatrix0.determinant();
      assertEquals(3636939.8397149188, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(415, 2046);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      // Undeclared exception!
      try { 
        matrix0.transformRow(8, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 11;
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(11, 11);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 11;
      Matrix.from1DArray(11, 11, doubleArray0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        cRSMatrix1.ensureIndexesAreInBounds(3, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 906;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(16, 2047, 906);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      Matrix matrix1 = matrix0.subtract((-956.08817));
      matrix1.iterator();
      int int1 = 1876;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.unit(7);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      vector0.sliceLeft(1876);
      matrix0.setRow(int1, vector0);
      matrix1.swapRows(int0, int1);
      cRSMatrix0.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.setColumn(1, (double) 1);
      assertEquals(8, matrix0.columns());
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, Double.NEGATIVE_INFINITY);
      SparseVector sparseVector0 = SparseVector.zero(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(2, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      matrix0.determinant();
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 8;
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(605, 494);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(494, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(3, vectorFunction0);
      int int1 = (-154);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 1268, (-154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1268x-154
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, (double[]) null);
      Matrix matrix0 = basic1DMatrix0.rotate();
      int int0 = (-2058005161);
      int int1 = (-631);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic1DMatrix0, 2675, 646, (-2058005161), 646, (-1654), (-631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1654x-631
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      Matrix matrix1 = Matrix.unit(8, 8);
      double double0 = matrix0.minInColumn(7);
      assertEquals(1.0, double0, 0.01);
      
      Matrix matrix2 = matrix0.rotate();
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix2.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3930, 2251);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      ooPlaceMatrixHadamardProduct0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      cRSMatrix0.maxInColumn(2093);
      byteArray0[1] = (byte) (-118);
      byte byte0 = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)1;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.swapRows(1073741824, 1073741824);
      assertFalse(cCSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      Matrix.unit(8, 8);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      String string0 = matrix1.toString();
      assertEquals("8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(32, 32);
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(31, matrix1.columns());
      
      double double0 = matrix0.max();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.transpose();
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 9;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(8, 9, doubleArray0);
      int int1 = 3;
      basic1DMatrix0.blankOfColumns(6);
      Basic1DMatrix.from1DArray(6, 8, doubleArray0);
      basic1DMatrix0.ensureIndexesAreInBounds(3, 8);
      // Undeclared exception!
      try { 
        basic1DMatrix0.add((double) 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1876, 6);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(32, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateColumn(1389, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int[] intArray0 = new int[9];
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic1DMatrix0.apply(matrixOperation0);
      intArray0[0] = 2765;
      basic1DMatrix0.toBinary();
      intArray0[1] = 2765;
      intArray0[2] = 6;
      intArray0[3] = 2765;
      intArray0[4] = 2765;
      intArray0[5] = 2765;
      intArray0[6] = 2765;
      intArray0[7] = 2112;
      intArray0[8] = (-1176);
      // Undeclared exception!
      try { 
        basic1DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2765' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformRow(3147, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11, 11);
      cRSMatrix0.infinityNorm();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1604);
      ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseVector0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(7, (-1L));
      cRSMatrix0.insert((Matrix) cRSMatrix1, 7, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cCSMatrix0.is(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.toRowVector();
      matrix0.determinant();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("{T`czo[l$K}7FU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix.zero(8, 8);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(8, 8);
      denseMatrix0.add((double) 8);
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(21, 21);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      matrix0.equals((Matrix) basic1DMatrix0, (double) 21);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1389);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateColumn(20, vectorFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      matrix0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.infinityNorm();
      matrix0.sliceTopLeft(8, 8);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      basic1DMatrix0.equals(matrix0, (double) 8);
      Matrix matrix1 = matrix0.insert((Matrix) basic1DMatrix0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      matrix1.mkString(numberFormat0, "from", "from");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      Double double0 = new Double(1893.9324503);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1060;
      doubleArray0[2] = (double) 1060;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-46.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(1060, 1060, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1060, 1905.537189);
      basic1DMatrix0.equals((Object) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.insert((Matrix) basic1DMatrix0);
      matrix0.equals((Matrix) basic1DMatrix0, (-665.469330185));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      Matrix matrix0 = Matrix.randomSymmetric(9, mockRandom0);
      matrix0.equals((Object) "Zp=,[fKG?3");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2046, 2046);
      matrix0.equals((Object) null);
      // Undeclared exception!
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(21);
      basic1DMatrix0.transpose();
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeColumn(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..20
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1527, 1527);
      matrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MockRandom mockRandom0 = new MockRandom(11);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(11, 0.0, (Random) mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      columnMajorSparseMatrix0.swapRows(11, 11);
      CCSMatrix cCSMatrix0 = new CCSMatrix(11, 11);
      cCSMatrix0.copyOfRows(11);
      // Undeclared exception!
      try { 
        cCSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow((-13));
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cCSMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.hashCode();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      basic1DMatrix0.equals(matrix0, (double) 8);
      matrix0.insert((Matrix) basic1DMatrix0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat.getCurrencyInstance(locale0);
      matrix0.determinant();
      Double double0 = new Double(0.0);
      basic1DMatrix0.equals((Object) double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(15, 1523);
      matrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      MockRandom mockRandom0 = new MockRandom();
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(8, 8);
      basic1DMatrix0.equals(matrix0, (double) 8);
      Basic2DMatrix.zero(8, 8);
      // Undeclared exception!
      try { 
        Matrix.diagonal((-4033), 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 2840;
      SparseVector sparseVector0 = SparseVector.zero(4506, 2840);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.hashCode();
      int int1 = 3675;
      sparseVector0.sum();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      ParsePosition parsePosition0 = new ParsePosition(2743);
      Locale locale0 = Locale.ITALY;
      NumberFormat.getInstance(locale0);
      // Undeclared exception!
      try { 
        decimalFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(21, 21);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow((-1982292597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(15, 1523);
      Matrix matrix1 = matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix0.add(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 15x15 does not equal to 14x15.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(31, 31);
      Matrix matrix0 = cRSMatrix0.shuffle();
      Matrix.unit(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1);
      matrix0.subtract(0.9);
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.shuffle();
      matrix0.setRow((-884), (double) (-884));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2046, 2046);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      String string0 = "NO_PIVOT_GAUSS";
      Matrix matrix1 = Matrix.fromMatrixMarket(string0);
      matrix0.hadamardProduct(matrix1);
      matrix0.toMatrixMarket();
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.swapColumns(77, 77);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 2);
      Vector vector0 = sparseVector0.multiply(0.19999999999999996);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insertColumn((-2229), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.unit(8, 8);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 8);
      int int1 = (-208);
      rowMajorSparseMatrix0.swapColumns(8, 8);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get(8, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2046);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(6);
      basic2DMatrix0.determinant();
      matrix0.insertColumn(6, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, Double.NEGATIVE_INFINITY);
      SparseVector sparseVector0 = SparseVector.zero(2);
      cRSMatrix0.insertColumn(0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(11);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11, 11);
      cRSMatrix0.infinityNorm();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.equals((Matrix) cRSMatrix0, (double) 11);
      cRSMatrix0.insert((Matrix) basic1DMatrix0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat.getCurrencyInstance(locale0);
      Locale locale1 = Locale.ITALIAN;
      NumberFormat.getCurrencyInstance(locale0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(37, 11);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(11);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11, 11);
      cRSMatrix0.infinityNorm();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.equals((Matrix) cRSMatrix0, (double) 11);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(11);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(6, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.1;
      doubleArray1[1] = 8.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 4681.14;
      doubleArray1[4] = (-3799.803509893882);
      doubleArray1[5] = 0.5;
      doubleArray1[6] = (-311.52);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 4.9E-324;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.9995112414467253;
      doubleArray3[3] = (-311.52);
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 8.0;
      doubleArray3[6] = 0.5;
      doubleArray3[7] = 0.1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.5;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.5;
      doubleArray4[3] = 0.9995112414467253;
      doubleArray4[4] = (-3799.803509893882);
      doubleArray4[5] = 0.5;
      doubleArray4[6] = (-3799.803509893882);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 4681.14;
      doubleArray5[1] = (-3799.803509893882);
      doubleArray5[2] = (-311.52);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.5;
      doubleArray7[1] = 4681.14;
      doubleArray7[2] = 0.5;
      doubleArray7[3] = 0.1;
      doubleArray7[4] = 0.1;
      doubleArray7[5] = 0.9995112414467253;
      doubleArray7[6] = 0.1;
      doubleArray7[7] = 4.9E-324;
      doubleArray7[8] = 0.9995112414467253;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateRow(2, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Matrix.identity(11);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(11, 11);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      basic2DMatrix0.select(intArray0, intArray0);
      basic2DMatrix0.toString();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.determinant();
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale1);
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(8, 8);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix1 = matrix0.insert((Matrix) basic1DMatrix0);
      // Undeclared exception!
      try { 
        matrix1.subtract((Matrix) basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 8x8 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Basic2DMatrix.zero(5, 5);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
