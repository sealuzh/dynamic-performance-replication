/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:12:46 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.logging.Logger;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Buffer buffer0 = new Buffer();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("M]}^.&kp");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      openOptionArray0[1] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("okio.AsyncTimeout", "okio.AsyncTimeout");
      Sink sink0 = Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer.writeAll(source0);
      Buffer buffer0 = realBufferedSink0.buffer();
      mockFile0.toPath();
      GzipSource gzipSource0 = new GzipSource(buffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      MockFile mockFile0 = new MockFile("global");
      Okio.sink((File) mockFile0);
      MockSocket mockSocket0 = new MockSocket();
      Buffer buffer0 = new Buffer();
      Source source0 = Okio.source((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = objectArray0[1];
      PrintStream printStream0 = mockPrintStream0.format(".CBgx<zShG", objectArray0);
      buffer0.copyTo((OutputStream) printStream0);
      buffer0.writeAll(source0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[6];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("okio.AsyncTimeout", "okio.AsyncTimeout");
      Sink sink0 = Okio.sink((File) mockFile0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      GzipSource gzipSource0 = new GzipSource(buffer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      assertionError0.printStackTrace();
      String string1 = Logger.GLOBAL_LOGGER_NAME;
      MockFile mockFile0 = new MockFile("global");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      AssertionError assertionError1 = new AssertionError(2799L);
      assertionError1.getStackTrace();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(4506L);
      assertionError0.fillInStackTrace();
      AssertionError assertionError1 = new AssertionError();
      AssertionError assertionError2 = (AssertionError)assertionError1.initCause(assertionError0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Okio.blackhole();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      openOptionArray0[2] = (OpenOption) linkOption0;
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("okio.AsyncTimeout", "okio.AsyncTimeout");
      mockFile0.setReadable(true);
      Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      AssertionError assertionError0 = new AssertionError(realBufferedSource0);
      Okio.isAndroidGetsocknameError(assertionError0);
      MockFile.createTempFile("source(", "ID1ID2");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      // Undeclared exception!
      try { 
        Okio.sink(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("okio.AsyncTimeout", "okio.AsyncTimeout");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer();
      Okio.source((File) mockFile0);
      MockSocket mockSocket0 = new MockSocket();
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.flush();
      MockThrowable mockThrowable0 = new MockThrowable();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      Okio.isAndroidGetsocknameError(assertionError0);
      MockFile mockFile0 = new MockFile("global");
      Sink sink0 = Okio.sink((File) mockFile0);
      Buffer buffer0 = new Buffer();
      Source source0 = Okio.source((File) mockFile0);
      mockFile0.toPath();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      HashingSource hashingSource0 = HashingSource.md5(source0);
      hashingSource0.timeout();
      GzipSource gzipSource0 = new GzipSource(buffer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      hashingSink0.flush();
      Okio.buffer((Sink) hashingSink0);
      MockFile mockFile0 = new MockFile("okio.Util");
      Okio.sink((File) mockFile0);
      BufferedSource bufferedSource0 = Okio.buffer((Source) realBufferedSink0.buffer);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.timeout();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      AssertionError assertionError0 = new AssertionError(2799L);
      assertionError0.getStackTrace();
      Okio.isAndroidGetsocknameError(assertionError0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AssertionError assertionError1 = new AssertionError((-880.39686112));
      assertEquals("java.lang.AssertionError: -880.39686112", assertionError1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError((-414L));
      AssertionError assertionError1 = new AssertionError();
      assertionError1.initCause(assertionError0);
      assertionError1.getLocalizedMessage();
      assertionError1.addSuppressed(assertionError0);
      assertionError1.addSuppressed(assertionError0);
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      assertionError0.initCause(assertionError1);
      Okio.isAndroidGetsocknameError(assertionError0);
      MockFile mockFile0 = new MockFile("global");
      Sink sink0 = Okio.sink((File) mockFile0);
      MockSocket mockSocket0 = new MockSocket();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Source source0 = Okio.source((File) mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      mockFile0.toPath();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      inflaterSource0.close();
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      hashingSource0.delegate();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeUtf8("%");
      // Undeclared exception!
      try { 
        realBufferedSink0.write((Source) realBufferedSink0.buffer, 1248L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0/e'83", "0/e'83");
      mockFile0.getAbsoluteFile();
      Sink sink0 = Okio.sink((File) mockFile0);
      Okio.source((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(40);
      realBufferedSink0.close();
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeDecimalLong(675L);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "TN_%Fpv0K{m5ex,nk");
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      hashingSink0.flush();
      Okio.buffer((Sink) hashingSink0);
      URI uRI0 = MockURI.URI("timeout", "w.8~|&!\")=~6,p>byu", (String) null);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6a[{+E^#Ou!57B}");
      MockFile mockFile0 = new MockFile("global");
      Sink sink0 = Okio.sink((File) mockFile0);
      Buffer buffer0 = new Buffer();
      Source source0 = Okio.source((File) mockFile0);
      Okio.source((File) mockFile0);
      Source source1 = Okio.source((File) mockFile0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      mockFile0.toPath();
      StandardOpenOption standardOpenOption1 = StandardOpenOption.READ;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      HashingSource hashingSource0 = HashingSource.md5(source1);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("global", charset0);
      realBufferedSink0.emit();
      FileSystemHandling.createFolder(evoSuiteFile0);
      realBufferedSink0.write(source0, (-414L));
      mockFile0.setExecutable(false);
      Okio.buffer(source0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      // Undeclared exception!
      try { 
        hashingSource0.read(((RealBufferedSink) bufferedSink0).buffer, (-414L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -414
         //
         verifyException("okio.Okio$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      assertionError0.getLocalizedMessage();
      String string0 = Logger.GLOBAL_LOGGER_NAME;
      assertionError0.getLocalizedMessage();
      String string1 = Logger.GLOBAL_LOGGER_NAME;
      MockFile mockFile0 = new MockFile("global");
      Sink sink0 = Okio.sink((File) mockFile0);
      Buffer buffer0 = new Buffer();
      Source source0 = Okio.source((File) mockFile0);
      Okio.source((File) mockFile0);
      Source source1 = Okio.source((File) mockFile0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SPARSE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeAll(source1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      HashingSource hashingSource0 = HashingSource.md5(source0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("global", charset0);
      realBufferedSink0.emit();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6a[{+E^#Ou!57B}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      hashingSource0.read(((RealBufferedSink) bufferedSink0).buffer, 0L);
      Okio.appendingSink(mockFile0);
      assertEquals(6L, mockFile0.length());
  }
}
