/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:06:02 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer("'S,T6");
      xPathLexer3.leftBracket();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8$ZyhjWn");
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token0.toString();
      xPathLexer0.consume();
      token1.toString();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<>!W6!!3`ukK],^_}");
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ih@5*0.E$Oxd\"0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Ih", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>,>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("as:l:m;ZP\"D");
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      xPathLexer0.setXPath("as:l:m;ZP\"D");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals("R", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("sW", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("H", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("'", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("\"", token7.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('>');
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.slashes();
      assertEquals("j/", token10.getTokenText());
      assertEquals(12, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals("G", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(") ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("(", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K7G%S;|eM[rXZi_B/J");
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("-s.m<XF8J@GN{GAN~");
      Token token0 = xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.doubleColon();
      xPathLexer3.slashes();
      xPathLexer1.endPosition();
      Token token1 = xPathLexer2.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("``aJw<wiH");
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("``aJw<wiH");
      xPathLexer3.literal();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o@SCy &/b<tLbam[|");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("o", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("SCy", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dOD^T`@8hs]YZ\"q;");
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(">?}]");
      Token token1 = xPathLexer2.nextToken();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.plus();
      assertEquals(5, token2.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v!<w;LVI`");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("v", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(23, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setXPath("hRdg");
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i%d}!9");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.equals();
      assertEquals("%", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("d}", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token0 = xPathLexer0.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">9!hWn36uaAZ]v^_+S");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals(">9", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer1.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.div();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("{W");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Wn36uaAZ]v^_+S", token6.getTokenText());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer3.equals();
      assertEquals("{", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("r", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("rv6!SL<wLMeVW`");
      xPathLexer1.setXPath("*U#:kFl{pC");
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("v6", token1.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.mod();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("*U#:kFl{pC");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer0.comma();
      assertEquals("!", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer4.div();
      Token token4 = xPathLexer4.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer3.leftBracket();
      assertEquals(3, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("r", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("rv6!SL<wLMeVW`");
      xPathLexer1.and();
      xPathLexer1.setXPath("*U#:kFl{pC");
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("v6", token1.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.mod();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*U#:kFl{pC");
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("U", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer4.div();
      xPathLexer4.operatorName();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("hRdg");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uNMJs");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("uNMJs", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@B[_!");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer2.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      xPathLexer2.consume();
      String string0 = token0.toString();
      assertEquals("[ (16) (@)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dOD^T`@8hs]YZ\"q;");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2'l I!lx_XR1?x,$8");
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.setXPath("2'l I!lx_XR1?x,$8");
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.isIdentifierStartChar('9');
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("BEO.(gN");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":A@B[L_!");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.notEquals();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o@SCy &/b<tLbam[|");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(16, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("C", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("9`.Qng[h9u(&viFlR!");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o|$du`zpl m<f");
      xPathLexer0.nextToken();
      String string0 = ") (";
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("mH");
      xPathLexer0.plus();
      xPathLexer1.slashes();
      xPathLexer1.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer1.whitespace();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sU++zQaWE4");
      xPathLexer0.getPreviousToken();
      xPathLexer0.div();
      Token token0 = xPathLexer0.star();
      assertEquals("s", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I.JxrJ");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "8$ZyhjWn";
      String string1 = "YRD_/Ro";
      XPathLexer xPathLexer0 = new XPathLexer("YRD_/Ro");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K7G%S;|eM[rXZi_B/J");
      Token token0 = xPathLexer0.dollar();
      assertEquals("K", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("-s.m<XF8J@GN{GAN~");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer1.notEquals();
      assertEquals("s.", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.at();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("mH");
      XPathLexer xPathLexer2 = new XPathLexer("!$^gZ;??c1N3B1M.");
      xPathLexer2.plus();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer("2qKz7");
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token0);
      Token token1 = xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("=-%_|\"?!sW0YF=QV");
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.mod();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer6.operatorName();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.rightParen();
      token1.toString();
      XPathLexer xPathLexer10 = new XPathLexer("mH");
      String string0 = xPathLexer5.getXPath();
      assertEquals("=-%_|\"?!sW0YF=QV", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("cq ~.54");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer2.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("cq", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("\"G$r'9@lfO/GdEC&");
      Token token2 = xPathLexer3.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#TC<Z(/s{XJt");
      xPathLexer0.nextToken();
      String string0 = ") (";
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("#TC<Z(/s{XJt");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.not();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("pKFDGs\"uC~>mD%:p@w|");
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("hRdg");
      xPathLexer0.consume();
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.and();
      token1.toString();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token2 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("3{");
      Token token3 = xPathLexer1.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.consume();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer2.nextToken();
      xPathLexer0.or();
      xPathLexer1.setPreviousToken((Token) null);
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("{", token6.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer4.relationalOperator();
      Token token7 = xPathLexer1.star();
      assertEquals("{", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token2 = xPathLexer5.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer3.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("o$d/2zxu m<f");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("fY+kuc'w{");
      xPathLexer3.mod();
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer("o$d/2zxu m<f");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.whitespace();
      xPathLexer4.or();
      xPathLexer4.mod();
      xPathLexer5.minus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.and();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.whitespace();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer7.whitespace();
      xPathLexer2.slashes();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer7.slashes();
      String string0 = xPathLexer3.getXPath();
      assertEquals("fY+kuc'w{", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i%d}!9");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("i%d}!9");
      XPathLexer xPathLexer3 = new XPathLexer("#vx^>V6}[x\"P)0");
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("e8Mwu.4vy@8z");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.leftBracket();
      xPathLexer1.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.slashes();
      xPathLexer6.number();
      xPathLexer4.rightBracket();
      XPathLexer xPathLexer9 = new XPathLexer();
      assertFalse(xPathLexer9.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c6TkAh@/^@%");
      Token token0 = xPathLexer0.leftParen();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("c6", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("kAh", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('3');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z&l>PMc(q0");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("WX#");
      xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.getPreviousToken();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.setXPath("9`.Qng[hkuV&ziFlR!");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.rightBracket();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer4.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer0.div();
      XPathLexer xPathLexer6 = new XPathLexer("");
      assertFalse(xPathLexer6.equals((Object)xPathLexer4));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "=V.$p@.;Q";
      XPathLexer xPathLexer0 = new XPathLexer("=V.$p@.;Q");
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L-/&v*");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (4) (/)", string0);
      
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("&", token2.getTokenText());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("v", token3.getTokenText());
      
      char char0 = xPathLexer0.LA(2);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals("v*", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer1.and();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("K");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
      
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("~CSRQm61C h65");
      Token token4 = xPathLexer3.nextToken();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.and();
      xPathLexer1.and();
      xPathLexer1.consume();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.and();
      Token token5 = xPathLexer4.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("~", token5.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer5.operatorName();
      Token token7 = xPathLexer2.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      int int0 = xPathLexer3.currentPosition();
      assertEquals(2, int0);
      
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.mod();
      boolean boolean1 = xPathLexer2.hasMoreChars();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o|$du`zpl m<f");
      XPathLexer xPathLexer1 = new XPathLexer("o|$du`zpl m<f");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("o|$du`zpl m<f");
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer2.rightParen();
      assertEquals("o", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer2.nextToken();
      assertEquals(17, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      xPathLexer2.getXPath();
      String string0 = token2.toString();
      assertEquals("[ (5) (o)", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("da,Zbq:)f8g1/yG9 ");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("+q0]cEi");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(5, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume();
      Token token4 = xPathLexer3.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer4 = new XPathLexer("mH");
      xPathLexer4.or();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer("XOV}Z(c`");
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer5.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("X", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.div();
      xPathLexer1.or();
      xPathLexer1.or();
      xPathLexer0.number();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.getPreviousToken();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer("kL=dl^#Pe");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5HXOIW;qc");
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = new XPathLexer("8$Zyhjn");
      xPathLexer2.setXPath("5HXOIW;qc");
      xPathLexer2.div();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      xPathLexer2.rightBracket();
      xPathLexer3.hasMoreChars();
      Token token0 = xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0J=2ER[K<$");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("b*1Wm3teZwL");
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer2.currentPosition();
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token4 = xPathLexer1.rightParen();
      assertEquals("b", token4.getTokenText());
      
      Token token5 = xPathLexer4.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer4.leftParen();
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer3.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("b*1Wm3teZwL");
      Token token8 = xPathLexer6.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("b", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(">?}]");
      Token token1 = xPathLexer2.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("?}]", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer1.endPosition();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Sl");
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("xy3sR} O?hG");
      XPathLexer xPathLexer3 = new XPathLexer("xy3sR} O?hG");
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I.6JxrJ9");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("XIy");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer0.doubleColon();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-s.m<XF8J@GN{GAN~");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer1.equals();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      xPathLexer2.and();
      xPathLexer3.operatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v!<w;LVI`");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setXPath("hRdg");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8Cg$7GWxSZv");
      xPathLexer0.div();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8Cg$7GWxSZv");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Cg", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(0, int0);
      
      Token token2 = xPathLexer2.colon();
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("grE,Z>qOP S");
      XPathLexer xPathLexer1 = new XPathLexer("\"Sy>_?|[");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("\"Sy>_?|[");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer6.plus();
      assertEquals(5, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.and();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("oOK");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("<Mb{Tz2D(q!*\"-");
      Token token2 = xPathLexer3.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer3.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Mb", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.notEquals();
      assertEquals(22, token4.getTokenType());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("EY, 7");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      xPathLexer3.pipe();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "BV']W%27@gH[s6+;";
      XPathLexer xPathLexer0 = new XPathLexer("BV']W%27@gH[s6+;");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(",i!{q");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d|D^{`@8hs]YZ\"F;");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("d|D^{`@8hs]YZ\"F;");
      assertEquals("d|D^{`@8hs]YZ\"F;", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qYic&qe`dw-fyK$*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("qYic", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("as:l:m;ZHP\"D");
      xPathLexer0.nextToken();
      String string0 = ") (";
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token0 = xPathLexer1.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("a]j>w9\"`H;");
      xPathLexer4.operatorName();
      xPathLexer0.setXPath("a]j>w9\"`H;");
      xPathLexer3.setXPath("a]j>w9\"`H;");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer3.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      int int0 = xPathLexer4.endPosition();
      assertEquals(10, int0);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
      
      xPathLexer5.mod();
      Token token3 = xPathLexer2.at();
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (16) ( )", string0);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(25);
      String string1 = token0.toString();
      assertEquals("[ (2) ())", string1);
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      xPathLexer1.rightParen();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":A@B[L_!");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      String string0 = token1.toString();
      assertEquals("[ (19) (A@)", string0);
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.consume();
      String string1 = token0.toString();
      assertEquals("[ (18) (:)", string1);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      String string2 = token4.toString();
      assertEquals(23, token4.getTokenType());
      assertEquals("[ (23) (!)", string2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y/OU;t");
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.at();
      XPathLexer xPathLexer5 = new XPathLexer("v!L<w;L-VI`");
      xPathLexer1.leftParen();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.mod();
      XPathLexer xPathLexer8 = null;
      try {
        xPathLexer8 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dOD^T`@8hs]YZ\"q;");
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("9");
      Token token4 = xPathLexer1.plus();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("9");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken(token4);
      assertEquals("9", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.mod();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer5.operatorName();
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (30) (9)", string0);
      
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer10.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer10.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      assertEquals("9", token10.getTokenText());
      
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.consume((-1650));
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@]1B5^OA");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.at();
      assertEquals("]", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (@)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("B5", token3.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.slashes();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.isIdentifierChar('X');
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("A", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "-s.m<F8J@N{GAN";
      XPathLexer xPathLexer0 = new XPathLexer("-s.m<F8J@N{GAN");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("I.6JxrJ9");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.rightParen();
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("I.6JxrJ9");
      xPathLexer3.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer1.dots();
      assertEquals("I.", token3.getTokenText());
      assertEquals(14, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer6.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer6.identifierOrOperatorName();
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer6.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8$ZyhjWn");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("$Z", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      token0.toString();
      Token token2 = xPathLexer0.dollar();
      assertEquals("y", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("P2bIV*");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("P2bIV", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("h", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.consume(45);
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer3.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.mod();
      Token token8 = xPathLexer3.minus();
      assertEquals(6, token8.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (23) (8)", string0);
      
      xPathLexer2.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("[ (23) (8)");
      Token token9 = xPathLexer0.pipe();
      assertEquals("j", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer7.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals("n", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-s.m<XF8J@GN{GAN~");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.getPreviousToken();
      token2.toString();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tRNSw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("tRNSw", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer2.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.setXPath("9`.Qng[hkuV&ziFlR!");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.rightBracket();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer4.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer1.div();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c6TkAh@/^@%");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("c", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("Ah", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("@", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('3');
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
  }
}
