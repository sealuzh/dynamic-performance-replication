/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:25:09 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.Month;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.DoubleBinaryOperator;
import java.util.function.Function;
import java.util.function.LongBinaryOperator;
import java.util.function.ToDoubleBiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockYearMonth;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Integer> class1 = Integer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      boolean boolean0 = TypeUtils.isNumber("8;Ce%r]1qB,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = new Locale("SIDv@3tYYs{EI_uk15", "SIDv@3tYYs{EI_uk15");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Class<MockDate> class1 = MockDate.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dateFormatSymbols0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getSerializeFeatures(class1);
      JSONObject jSONObject0 = new JSONObject();
      Class<Date> class2 = Date.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.decapitalize((String) null);
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "L,Ba{uxuu`E64gU");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      weakHashMap0.put((String) null, "$n6hthw(|Nsl=/");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.castToShort((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("eq/Kl\"!;.!/~uN:%W");
      TypeUtils.castToTimestamp((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("illegal json creator", hashMap0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".1");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLNonTransientException: .1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize((String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      boolean boolean0 = TypeUtils.isNumber("80G[k(>>SPRCi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.decapitalize("p0c;r0%-Q");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("java.awt.Font", biFunction0);
      linkedHashMap0.put("p0c;r0%-Q", "java.time.");
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.castToSqlTime((Object) null);
      InstantiationException instantiationException0 = new InstantiationException();
      Class<?> class1 = TypeUtils.getClassFromMapping("byte");
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("getClas!");
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^<GQ@");
      Class<InternalError> class2 = InternalError.class;
      TypeUtils.getParserFeatures(class2);
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class3 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class3, concurrentHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, true);
      TypeUtils.castToInt((Object) null);
      Class class4 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class4.isEnum());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "Lorg.springframework.util.LinkedMultiValueMap";
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      MockThread.getAllStackTraces();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader1);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<NumberFormat> class0 = NumberFormat.class;
      parserConfig0.checkAutoType("java/io/IOException", class0, (-57));
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("get", true);
      Locale locale0 = new Locale("4kaP+Y'BD1I?#H", ":YxCdE9GB");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Object> class1 = Object.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "", 0L);
      MockThread mockThread1 = new MockThread(thread0, "com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus(", minimumCapacity=", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@16a1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.cast((Object) identityHashMap0, class0, (ParserConfig) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.decapitalize("wV{{[ zc=.");
      TypeUtils.toLocale("wV{{[ zc=.");
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("KIkISv+zW31");
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("(").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.fnv1a_64("");
      String string0 = "getClass";
      HttpCookie httpCookie0 = new HttpCookie("k3-::S^+Y9u^GQ@", "getClass");
      TypeUtils.cast((Object) "", (Type) parameterizedTypeImpl0, (ParserConfig) null);
      System.setCurrentTimeMillis(3147L);
      TypeUtils.castToBytes("(");
      Class<Dimension> class0 = Dimension.class;
      String string1 = "o<[jj";
      Method method0 = null;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("o<[jj", identityHashMap0);
      Class<Currency> class1 = Currency.class;
      int int0 = (-627);
      int int1 = (-2762);
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Point point0 = new Point();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[6]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "deserialzeArrayMapping", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("(5]6oI{+4zD/", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap", "(5]6oI{+4zD/");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Locale locale0 = Locale.JAPANESE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      TypeUtils.castToChar((Object) null);
      TypeUtils.fnv1a_64_lower("(5]6oI{+4zD/");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.text.DateFormatSymbols@c0bd9968
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Byte> class0 = Byte.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("sho");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stringIndexOutOfBoundsException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      boolean boolean0 = TypeUtils.isNumber("(5]6oI{+4zD/");
      TypeUtils.getClass(type0);
      String string0 = TypeUtils.decapitalize("^.");
      assertEquals("^.", string0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("[float");
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      boolean boolean0 = false;
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader1, false);
      Instant instant0 = MockInstant.ofEpochSecond((-1148L), 0L);
      Instant instant1 = MockInstant.minusMillis(instant0, (-1148L));
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      Instant instant2 = MockInstant.minus(instant1, 0L, (TemporalUnit) chronoUnit0);
      Duration duration0 = Duration.ofMillis(0L);
      MockInstant.plus(instant2, (TemporalAmount) duration0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      YearMonth yearMonth0 = MockYearMonth.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        chronoUnit0.between(instant1, yearMonth0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain Instant from TemporalAccessor: 2014-02 of type java.time.YearMonth
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("8;Ce%r]1qB,", hashMap0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("8;Ce%r]1qB,");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("8;Ce%r]1qB,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 8;Ce%r]1qB,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class1 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (-1091.0F), 2297.6F, 2297.6F, 0.0F, 0.0F);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.getPathIterator(affineTransform0, 3.0);
      rectangle0.add(8, 8);
      TypeUtils.isKotlin(class1);
      TypeUtils.loadClass("(5]6oI{+4zD/");
      Class<Calendar> class2 = Calendar.class;
      EnumDeserializer enumDeserializer0 = new EnumDeserializer(class1);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("W'Sb");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: W'Sb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("[C");
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) locale0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize((String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      TypeUtils.loadClass("&L/T'>", (ClassLoader) null, true);
      TypeUtils.unwrapOptional(class1);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = new Locale("SIDv@3tYYs{EI_uk15", "SIDv@3tYYs{EI_uk15");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<VerifyError> class1 = VerifyError.class;
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "SIDv@3tYYs{EI_uk15");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = new Locale("SIDv@3tYYs{EI_uk15", "SIDv@3tYYs{EI_uk15");
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Field field0 = TypeUtils.cast((Object) typeArray0[0], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform(1860.426F, 1722.7463F, 0.0F, 737.672F, (-2358.022F), 4491.0F);
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = false;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("}", "uy\"zSU}Zgn>-dK", 0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("}", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable: }
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      mockThread0.getContextClassLoader();
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Class<Double> class1 = Double.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.isNumber("Lorg.springframework.util.LinkedMultiValueMap");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, map1, propertyNamingStrategy1);
      Boolean boolean0 = new Boolean(false);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      Field field0 = TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<ClassLoader> class1 = ClassLoader.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.isNumber("getNumberInstance");
      TypeUtils.getGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<JobAttributes> class0 = JobAttributes.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(9, list0.size());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      illegalThreadStateException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(illegalThreadStateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "8;Ce%r]1qB,";
      TypeUtils.isNumber("8;Ce%r]1qB,");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("8;Ce%r]1qB,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8;Ce%r]1qB,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent((String) null, biFunction0);
      linkedHashMap0.put("locale", (String) null);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy1);
      TypeUtils.getCollectionItemType(class0);
      Byte byte0 = new Byte((byte)73);
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertEquals("00:00:00", time0.toString());
      
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Byte> class1 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      FieldInfo.getFieldType(class0, class0, (Type) null);
      TypeUtils.isGenericParamType((Type) null);
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("eY1v", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.fnv1a_64("+J<");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      treeMap0.keySet();
      treeMap0.compute("IgnoreErrorGetter", biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      Class<Object> class1 = Object.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("wV{{[rzc=.");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class1 = String.class;
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Rectangle> class3 = Rectangle.class;
      TypeUtils.computeGettersWithFieldBase(class3, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters(class2, map0, false);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("KEi;kI", "wV{{[rzc=.", 51068, intArray0);
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, batchUpdateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader1.getParent();
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0);
      TypeUtils.decapitalize("RjzqRVQ1");
      TypeUtils.castToLong((Object) null);
      ClassLoader.getSystemClassLoader();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class1 = SQLTransientException.class;
      Class<Byte> class2 = Byte.TYPE;
      parserConfig0.createJavaBeanDeserializer(class1, class2);
      Class<NoSuchFieldError> class3 = NoSuchFieldError.class;
      ArrayList<BufferCapabilities> arrayList0 = new ArrayList<BufferCapabilities>();
      arrayList0.listIterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) arrayList0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("actualTypeArguments", "actualTypeArguments");
      linkedHashMap0.put("I", "I");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("Lorg.springframework.util.LinkedMultiValueMap");
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, "Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent((String) null, biFunction0);
      linkedHashMap1.put("com.alibaba.fastjson.serializer.JavaBeanSerializer", (String) null);
      Character.valueOf('>');
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.decapitalize("");
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "o");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "f/-<<rjCg^:~*\"p9", 0L);
      String string0 = "5/G-oEAIX*qr%iSX\\fo";
      MockThread mockThread4 = new MockThread(threadGroup0, mockThread3, "5/G-oEAIX*qr%iSX\fo");
      ClassLoader classLoader0 = mockThread4.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.castToDouble((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(genericArrayType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("F\"m").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent((String) null, biFunction0);
      linkedHashMap1.put("com.alibaba.fastjson.serializer.JavaBeanSerializer", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "[C";
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("[C");
      ParserConfig parserConfig0 = new ParserConfig();
      Type[] typeArray0 = new Type[8];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[3]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[C", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@94e4b2c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isGenericParamType(class0);
      Class<ClassLoader> class2 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) concurrentHashMap0);
      System.setCurrentTimeMillis(3147L);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale("eY1v", "L");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class0 = MockDate.class;
      MockDate mockDate0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(mockDate0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.cast((Object) identityHashMap0, class0, (ParserConfig) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      boolean boolean0 = TypeUtils.isNumber("dzGctQYE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      int[] intArray0 = new int[6];
      intArray0[0] = 51068;
      intArray0[1] = (-1483259463);
      intArray0[2] = 51068;
      intArray0[3] = 5;
      intArray0[4] = (-2242);
      intArray0[5] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("KEi;kI", "KEi;kI", 5, intArray0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("KEi;kI", "toString", "KEi;kI", (-1483259463));
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, stackTraceElement0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Short> class0 = Short.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      TypeUtils.decapitalize("p0c;r0%-Q");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("o", "p0c;r0%-Q");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent("I", biFunction0);
      LinkedHashMap<String, String> linkedHashMap2 = new LinkedHashMap<String, String>();
      linkedHashMap2.put("isnextProbablePrime", "9kdpksU?-&^_3iG3-%");
      boolean boolean0 = false;
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Date date0 = new Date(0L);
      TypeUtils.castToSqlTime(date0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = null;
      try {
        identityHashMap0 = new java.util.IdentityHashMap<String, Field>((-528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedMaxSize is negative: -528
         //
         verifyException("java.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Currency> class0 = Currency.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("S");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.decapitalize("S");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException(">!CQF]2Q-90A");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NegativeArraySizeException: >!CQF]2Q-90A
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("getClass");
      AffineTransform affineTransform0 = new AffineTransform(737.672F, 737.672F, 0.0F, 2297.6F, 1722.7463F, 4491.0F);
      Rectangle rectangle0 = new Rectangle();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = new Double((-1.0));
      TypeUtils.castToShort(double0);
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayVariant();
      locale0.toLanguageTag();
      TypeUtils.castToString(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.util.Locale@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      mockThread0.getContextClassLoader();
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicLong> class0 = AtomicLong.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, list0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale(",Y1v", "L");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class0 = MockDate.class;
      MockDate mockDate0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("p0c;r0%-Q");
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "p0c;r0%-Q", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InternalError> class1 = InternalError.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Double> class2 = Double.TYPE;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.isNumber("SELF_SUPPRESSION_MESSAGE");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy1);
      Boolean boolean0 = new Boolean(false);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.toLocale("has");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NullPointerException> class0 = NullPointerException.class;
      Field[] fieldArray0 = new Field[1];
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("has", concurrentHashMap0);
      BiFunction<Field, Object, Field> biFunction0 = (BiFunction<Field, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(8838294710098435315L, biFunction0);
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "has", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a");
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("a", sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("a", sQLRecoverableException0);
      TypeUtils.castToString("int");
      Class<?> class0 = TypeUtils.loadClass("int");
      Class<Timestamp> class1 = Timestamp.class;
      TypeUtils.isProxy(class1);
      TypeUtils.getParserFeatures(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(".ReC[)g,=o9", (String) null);
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLInvalidAuthorizationSpecException: .ReC[)g,=o9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      TypeUtils.isGenericParamType((Type) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Time> class2 = Time.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, map0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, list0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(393216, "", (-1), 1, 1, 43, 850, 1, 58, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      Class<Boolean> class3 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NextException", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@1Oi(0s)F?;g", class1, class2, class3, (Field) null, (-1247), (-1247), (-1247));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Currency> class0 = Currency.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("S");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      java.util.IdentityHashMap<UUID, Float> identityHashMap0 = new java.util.IdentityHashMap<UUID, Float>();
      TypeUtils.castToString(identityHashMap0);
      TypeUtils.castToBigDecimal(identityHashMap0);
      Class<?> class2 = TypeUtils.getClassFromMapping("javassist.util.proxy.ProxyObject");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeUtils0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("[float");
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.isPath(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.decapitalize("SIDv@3tYYs{EI_uk15");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("]~ve(?-YzL[m\u0006.yw0.");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("SIDv@3tYYs{EI_uk15");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SIDv@3tYYs{EI_uk15\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.loadClass("", classLoader0, false);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("boolean", "[ihRs-Wx?u\"K,6bq", "fastjson.parser.autoTypeSupport", 29);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put(" OAHDH5c\"wjULISH)", "fi");
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.cast((Object) identityHashMap0, class0, (ParserConfig) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("dd.MM.yyyy", "UDYq)<W#-N.ysNSI.F");
      linkedHashMap0.put("fastjson.compatibleWithJavaBean", "getNaN");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      linkedHashMap0.put("\t", "kotlin.reflect.KParameter");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      TypeUtils.decapitalize("p0c;r0%-Q");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<BigInteger> class1 = BigInteger.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0, false);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Qz9", "Qz9", (-38489319), sQLNonTransientException0);
      sQLNonTransientException0.fillInStackTrace();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      TypeUtils.castToDouble((Object) null);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("Qz9");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : Qz9
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashtable0.computeIfAbsent("up", function0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashtable1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("[C");
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.awt.Rectangle[x=0,y=0,width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(10, 1.0F, false);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      TypeUtils.decapitalize("p0c;r0%-Q");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("java.awt.Font", biFunction0);
      linkedHashMap0.put("p0c;r0%-Q", "java.time.");
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getCollectionItemType(class0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("java.beans.Transient");
      AffineTransform affineTransform0 = new AffineTransform(4491.0F, 0.0F, 4654.27F, 0.0F, 591.92F, 0.0F);
      Rectangle rectangle0 = new Rectangle();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      AtomicInteger atomicInteger0 = new AtomicInteger((-3360));
      TypeUtils.castToLong(atomicInteger0);
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("getClas!");
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, list0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@3a7695b7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1B+;4?N]V}rQ", "Ljava.util.concurrent.ConcurrentSkipListMap");
      Locale locale0 = Locale.JAPANESE;
      DateFormatSymbols.getInstance(locale0);
      TypeUtils.castToChar((Object) null);
      TypeUtils.fnv1a_64_lower("1B+;4?N]V}rQ");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Point point0 = new Point();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("java.awt.Font", biFunction0);
      linkedHashMap0.put("byte", "byte");
      TypeUtils.getCollectionItemType(type0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-661), "byte");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(simpleTimeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.SimpleTimeZone[id=byte,offset=-661,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("Psy");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("I}uu|KU", sQLNonTransientException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeNotPresentException typeNotPresentException1 = (TypeNotPresentException)TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      assertEquals("I}uu|KU", typeNotPresentException1.typeName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("ttb");
      long long0 = TypeUtils.fnv1a_64_lower("parseObject");
      assertEquals(2027205319072443195L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("eY1v", (ClassLoader) aSMClassLoader0, true);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale(",Y1v", "L");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("#mUfKrAn#8d!B6", "3^j^qlGm/Z+!74");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Type[] typeArray0 = new Type[1];
      TypeUtils.unwrapOptional(typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<IllegalArgumentException> arrayList0 = new ArrayList<IllegalArgumentException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      mockThread0.getContextClassLoader();
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Lorg.springframework.util.LinkedMultiValueMap", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      TypeUtils.getParserFeatures(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s<U");
      SQLWarning sQLWarning0 = new SQLWarning("s<U", sQLNonTransientConnectionException0);
      TypeUtils.castToString(sQLWarning0);
      TypeUtils.loadClass("java.sql.SQLWarning@0000000001");
      String string0 = "5?b2Af&\\U:O)B'S";
      TypeUtils.loadClass("5?b2Af&U:O)B'S", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("KIkISv+zW31");
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("KIkISv+zW31");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : KIkISv+zW31
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      TypeUtils.fnv1a_64_lower("2ZI]rCi<B(~");
      AffineTransform affineTransform0 = new AffineTransform((-3190.0F), 2297.6F, (-3190.0F), 2631.83F, 4491.0F, 1722.7463F);
      Rectangle rectangle0 = new Rectangle();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Properties> class0 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("color", "fastjson.parser.deny");
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("getClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.toLocale("[C");
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("[C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "[C";
      TypeUtils.toLocale("[C");
      Class<MockDate> class0 = MockDate.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(857, 2087.995F);
      Class<ClassLoader> class1 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.fnv1a_64(".000000000");
      ParserConfig parserConfig0 = null;
      Class<Double> class2 = Double.TYPE;
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.decapitalize("(5]6oI{+4zD/");
      MinguoDate minguoDate0 = MockMinguoDate.now();
      MockHijrahDate.from(minguoDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("(5]6oI{+4zD/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<BitSet> class1 = BitSet.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.getGenericParamType(class2);
      InternalError internalError0 = new InternalError("xP)r0u&P!'$z6N");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.InternalError: xP)r0u&P!'$z6N
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<NoClassDefFoundError>[] classArray0 = (Class<NoClassDefFoundError>[]) Array.newInstance(Class.class, 4);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      classArray0[0] = class1;
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      classArray0[1] = class2;
      Class<NoClassDefFoundError> class3 = NoClassDefFoundError.class;
      classArray0[2] = class3;
      String string0 = "methodName";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("methodName", parserConfig0);
      SecurityException securityException0 = new SecurityException("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 42;
      intArray0[2] = 0;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        throwableDeserializer0.deserialze(defaultJSONParser0, (Type) class1, (Object) properties0, (-1831));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      Class<Boolean> class2 = Boolean.TYPE;
      TypeUtils.decapitalize("@1Oi(0s)F?;g");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NumberFormatException> class3 = NumberFormatException.class;
      TypeUtils.computeGetters(class3, map0, false);
      TypeUtils.castToInt((Object) null);
      TypeUtils.getClassFromMapping("@1Oi(0s)F?;g");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("8;Ce%r]1qB,");
      TypeUtils.toLocale("8;Ce%r]1qB,");
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.isNumber("+v++meZ;b&s");
      Class<Insets> class2 = Insets.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      String string0 = TypeUtils.castToString(hashtable0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Point point0 = new Point();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 202);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "S";
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("getClass");
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Boolean boolean0 = new Boolean("@q");
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      TypeUtils.isHibernateInitialized(locale0);
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      Class<InternalError> class1 = InternalError.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "fastjson.parser.deny", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class0, class1, parameterizedTypeImpl0, (Field) null, 1023, 5, (-2154));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class char
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      TreeSet<TimeUnit> treeSet0 = new TreeSet<TimeUnit>();
      TreeSet<TimeUnit> treeSet1 = new TreeSet<TimeUnit>((SortedSet<TimeUnit>) treeSet0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(treeSet1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent((String) null, biFunction0);
      linkedHashMap0.put("locale", (String) null);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy1);
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      mockThread1.run();
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("deserialzeArrayMapping");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : deserialzeArrayMapping
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      String string0 = null;
      long long0 = (-1455L);
      Long long1 = Long.getLong((String) null, (-1455L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1455
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      linkedHashMap0.put("3^j^qlGm/Z+!74", "3^j^qlGm/Z+!74");
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : SECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1h_6");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      MockThread.reset();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Class<MockCalendar> class0 = MockCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(aSMDeserializerFactory0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToFloat((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = null;
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^GQ@");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.isPath(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, false);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      java.util.IdentityHashMap<UUID, Float> identityHashMap0 = new java.util.IdentityHashMap<UUID, Float>();
      TypeUtils.castToString(class2);
      TypeUtils.castToBigDecimal(identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("(5]6oI{+4zD/", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("", biFunction0);
      linkedHashMap0.put("(5]6oI{+4zD/", "Ljava.util.concurrent.ConcurrentSkipListMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(type0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.fnv1a_64("L");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(class0);
      Class<StringIndexOutOfBoundsException> class2 = StringIndexOutOfBoundsException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("L", "l");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      Long long0 = new Long(1L);
      Long long1 = TypeUtils.castToLong(long0);
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockDate> class1 = MockDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(857, 1);
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.fnv1a_64("qj}pAbo209tHJb");
      Class<Double> class2 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.serializer.FieldSerializer", (Type) class2, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.isGenericParamType((Type) null);
      Class<ClassLoader> class1 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(map0);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      Class<Insets> class3 = Insets.class;
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>(56, 56);
      ParserConfig.getFieldFromCache("}fnT([hGuH ", concurrentHashMap1);
      int int0 = (-1542);
      FieldInfo fieldInfo0 = new FieldInfo("}fnT([hGuH ", class2, class3, class3, (Field) null, 56, (-1542), 56);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      String string0 = null;
      int int1 = 5;
      int int2 = 53;
      Class<FieldInfo> class4 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = null;
      TypeUtils.decapitalize((String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.text.MockDateFormat@2c319716
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0, (Type) null).when(genericArrayType0).getGenericComponentType();
      doReturn((String) null).when(genericArrayType0).getTypeName();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, type0, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[],\"ownerType\":{\"mockitoInterceptor\":{\"mockHandler\":{\"invocationContainer\":{\"invocationForStubbing\":{\"invocation\":{\"arguments\":[],\"ignoredForVerification\":false,\"location\":{},\"method\":{\"accessible\":{},\"annotatedExceptionTypes\":[],\"annotatedParameterTypes\":[],\"annotatedReceiverType\":{\"annotations\":[],\"declaredAnnotations\":[],\"type\":{}},\"annotatedReturnType\":{},\"annotations\":[],\"bridge\":{},\"declaringClass\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method.annotatedReceiverType.type\"},\"default\":{},\"exceptionTypes\":[],\"genericExceptionTypes\":[],\"genericParameterTypes\":[],\"genericReturnType\":{},\"modifiers\":{},\"name\":\"getGenericComponentType\",\"parameterAnnotations\":[],\"parameterCount\":{},\"parameterTypes\":[],\"returnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method.genericReturnType\"},\"synthetic\":{},\"typeParameters\":[],\"varArgs\":{}},\"mock\":{\"$ref\":\"$.ownerType\"},\"rawArguments\":[],\"rawReturnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method.genericReturnType\"},\"sequenceNumber\":12201,\"verified\":false},\"location\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.location\"},\"matchers\":[],\"method\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method\"}},\"invocations\":[{\"arguments\":[],\"ignoredForVerification\":false,\"location\":{},\"method\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method\"},\"mock\":{\"$ref\":\"$.ownerType\"},\"rawArguments\":[],\"rawReturnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method.genericReturnType\"},\"sequenceNumber\":12199,\"verified\":false},{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation\"}],\"stubbedInvocations\":[{\"invocation\":{\"arguments\":[],\"ignoredForVerification\":false,\"location\":{},\"method\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method\"},\"mock\":{\"$ref\":\"$.ownerType\"},\"rawArguments\":[],\"rawReturnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method.genericReturnType\"},\"sequenceNumber\":12198,\"verified\":false},\"location\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[0].invocation.location\"},\"matchers\":[],\"method\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.invocationForStubbing.invocation.method\"}},{\"invocation\":{\"arguments\":[],\"ignoredForVerification\":false,\"location\":{},\"method\":{\"accessible\":{},\"annotatedExceptionTypes\":[],\"annotatedParameterTypes\":[],\"annotatedReceiverType\":{\"annotations\":[],\"declaredAnnotations\":[],\"type\":{}},\"annotatedReturnType\":{},\"annotations\":[],\"bridge\":{},\"declaringClass\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[1].invocation.method.annotatedReceiverType.type\"},\"default\":{},\"exceptionTypes\":[],\"genericExceptionTypes\":[],\"genericParameterTypes\":[],\"genericReturnType\":{},\"modifiers\":{},\"name\":\"toString\",\"parameterAnnotations\":[],\"parameterCount\":{},\"parameterTypes\":[],\"returnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[1].invocation.method.genericReturnType\"},\"synthetic\":{},\"typeParameters\":[],\"varArgs\":{}},\"mock\":{\"$ref\":\"$.ownerType\"},\"rawArguments\":[],\"rawReturnType\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[1].invocation.method.genericReturnType\"},\"sequenceNumber\":12197,\"verified\":false},\"location\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[1].invocation.location\"},\"matchers\":[],\"method\":{\"$ref\":\"$.ownerType.mockitoInterceptor.mockHandler.invocationContainer.stubbedInvocations[1].invocation.method\"}}]},\"mockSettings\":{}},\"serializationSupport\":{}}},\"rawType\":{},\"typeName\":\"com.alibaba.fastjson.util.ParameterizedTypeImpl@ee2\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("getClass");
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^GQ@");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getClass", (Type) class1, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      parserConfig0.setAutoTypeSupport(true);
      parserConfig0.checkAutoType("getInstance", class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      treeMap1.put("fastjson.parser.deny", "getInstance");
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap1);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<Field> class2 = Field.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("EO|`1j<&Y@)Gz=q0Ba", "[J");
      hashtable0.put("\u0007u\"NN?`8+8L`21", "getParameters");
      hashtable0.put("]BxH|n", "\u0007u\"NN?`8+8L`21");
      hashtable0.put("]BxH|n", "getParameters");
      hashtable0.put("getParameters", "java.util.concurrent.ConcurrentSkipListMap");
      LinkedHashSet<Jdk8DateCodec> linkedHashSet0 = new LinkedHashSet<Jdk8DateCodec>();
      hashtable0.remove((Object) linkedHashSet0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashtable0, true, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "ar05WAnY1W`#", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      String string0 = null;
      Long long0 = Long.getLong((String) null, (-1455L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1455
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TreeMap<JSONPDeserializer, NoSuchFieldException> treeMap0 = new TreeMap<JSONPDeserializer, NoSuchFieldException>();
      TypeUtils.isHibernateInitialized(treeMap0);
      Dimension dimension0 = new Dimension(5, 3678080);
      dimension0.width = 3651;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Dimension[width=3651,height=3678080]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.loadClass("'a`B|+n.g4PAWc4moR", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) null, propertyNamingStrategy0, true, true);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TreeSet<NoSuchMethodError> treeSet0 = new TreeSet<NoSuchMethodError>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      TypeUtils.cast((Object) treeSet0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale.getISOLanguages();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<?> class0 = TypeUtils.getClassFromMapping("8;Ce%r]1qB,");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TypeUtils.decapitalize("p0c;r0%-Q");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InstantiationException instantiationException0 = new InstantiationException();
      SQLWarning sQLWarning0 = new SQLWarning("null", "p0c;r0%-Q", 0);
      instantiationException0.initCause(sQLWarning0);
      Insets insets0 = new Insets(0, 0, 0, 1002);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.Insets[top=0,left=0,bottom=0,right=1002]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      boolean boolean0 = TypeUtils.isNumber("+v++meZ;b&s");
      assertFalse(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getInstance();
      TypeUtils.castToString(mockDateFormat0);
      Class<MockDate> class3 = MockDate.class;
      int int1 = TypeUtils.getSerializeFeatures(class3);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = "2>hLu)+d3";
      MockThread mockThread0 = new MockThread(threadGroup0, "2>hLu)+d3");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("2>hLu)+d3", class0, 2188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. 2>hLu)+d3
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("getClass");
      AffineTransform affineTransform0 = new AffineTransform(737.672F, 737.672F, 0.0F, 2297.6F, 1722.7463F, 4491.0F);
      Rectangle rectangle0 = new Rectangle();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ljava.util.concurrent.ConcurrentSkipListMap", "hds", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("getClass", "hds", 0);
      SQLWarning sQLWarning0 = new SQLWarning("hds", "hds", 0, sQLInvalidAuthorizationSpecException0);
      Class<Time> class1 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLWarning0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLWarning: hds
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.isNumber(".Qk+K");
      TypeUtils.getClass((Type) class0);
      Insets insets0 = new Insets(3652, 3652, 46, 3652);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=3652,left=3652,bottom=46,right=3652]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "Ljava.awt.Point";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Point", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      AffineTransform affineTransform0 = new AffineTransform(2297.6F, 0.0F, 0.0F, (-1.0F), 0.0F, Float.NaN);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.getPathIterator(affineTransform0, (double) 0.0F);
      int int0 = 8;
      rectangle0.add(8, 22);
      TypeUtils.isKotlin(class0);
      TypeUtils.loadClass("(5]6oI{+4zD/");
      Class<Calendar> class1 = Calendar.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AtomicLong> class0 = AtomicLong.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Double> class1 = Double.TYPE;
      Class<InstantiationError> class2 = InstantiationError.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.isNumber("UU$Sn<BSdu.gLzP(E");
      Class<AtomicLong> class3 = AtomicLong.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class3, map0, propertyNamingStrategy1);
      Boolean boolean0 = new Boolean(true);
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class4, (Map<String, String>) null, propertyNamingStrategy2, true);
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class3, map0, propertyNamingStrategy2, true);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64_lower("2iMFRIqV]ZGPS}");
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("[C");
      assertEquals("[c", locale0.getLanguage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      boolean boolean0 = TypeUtils.isNumber("[C");
      assertFalse(boolean0);
      
      TypeUtils.getClass((Type) class0);
      String string0 = TypeUtils.decapitalize("L");
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      Class<Boolean> class3 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NextException", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@1Oi(0s)F?;g", class1, class2, class3, (Field) null, (-1247), (-1247), (-1247));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.castToByte((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      String string0 = "getClass";
      TypeUtils.fnv1a_64_lower("getClass");
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^GQ@");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getClass", (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      illegalThreadStateException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.awt.Point", (String) null, 1722);
      Class<String> class1 = String.class;
      TypeUtils.castToJavaBean((Object) sQLFeatureNotSupportedException0, class1);
      Class<JavaObjectDeserializer> class2 = JavaObjectDeserializer.class;
      TypeUtils.isKotlin(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class1, weakHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.isNumber("get");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy1);
      Boolean boolean0 = new Boolean(true);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("has");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("getSuperclass", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.lang.MockThrowable: getSuperclass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("+5bV");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      mockThread1.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      mockThread1.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "@%!-jXl9ZTJ?s)40ih", (-1L));
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.getParent();
      TypeUtils.loadClass("@%!-jXl9ZTJ?s)40ih", classLoader1, false);
      TypeUtils.getCollectionItemType((Type) null);
      MockThread.interrupted();
      TypeUtils.isGenericParamType((Type) null);
      ClassLoader.getSystemClassLoader();
      Insets insets0 = new Insets(1564, 11, (-963), 27);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-1726704164), 5, 5, 42, (-1L), (-1L), 1564, 42, insets0, (-9), 27);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.GridBagConstraints@38703753
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.decapitalize((String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Short> class1 = Short.TYPE;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      boolean boolean0 = TypeUtils.isNumber(".Qk+K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, list0);
      TypeUtils.castToInt("");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64_lower("getClass");
      AffineTransform affineTransform0 = new AffineTransform(737.672F, 737.672F, 0.0F, 2297.6F, 1722.7463F, 4491.0F);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.getPathIterator(affineTransform0, 1.0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("getClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      LinkedHashMap<Thread, StackTraceElement[]> linkedHashMap0 = new LinkedHashMap<Thread, StackTraceElement[]>();
      TypeUtils.loadClass("kotlin.ranges.ClosedFloatRange", classLoader0);
      TypeUtils.getCollectionItemClass((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap1, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("8;Ce%r]1qB,");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("8;Ce%r]1qB,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 8;Ce%r]1qB,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = new Vector<FieldInfo>();
      TypeUtils.getCollectionItemType(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      boolean boolean0 = TypeUtils.isNumber("(I)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      String string0 = "o";
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("o", "o", (-4782), intArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Month month0 = Month.MAY;
      // Undeclared exception!
      try { 
        ZoneOffset.from(month0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ZoneOffset from TemporalAccessor: MAY of type java.time.Month
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = JSON.defaultLocale;
      locale0.getDisplayVariant();
      TypeUtils.isHibernateInitialized((Object) null);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(genericArrayType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      String string0 = "k3-::S^+SY9-u^<GQ@";
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^<GQ@");
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "k3-::S^+SY9-u^<GQ@", class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : k3-::S^+SY9-u^<GQ@
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize((String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {null=PascalCase}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.isPath(class0);
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.decapitalize("ORqG50eN5niRJU");
      long long0 = 5764610843043954687L;
      ToDoubleBiFunction<Object, Object> toDoubleBiFunction0 = (ToDoubleBiFunction<Object, Object>) mock(ToDoubleBiFunction.class, new ViolatedAssumptionAnswer());
      DoubleBinaryOperator doubleBinaryOperator0 = null;
      // Undeclared exception!
      try { 
        concurrentHashMap0.reduceToDouble(5764610843043954687L, toDoubleBiFunction0, 5764610843043954687L, (DoubleBinaryOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DataTruncation dataTruncation0 = new DataTruncation(14, false, false, 45, (-416));
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Map<String, String> map0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.TypeReference$1");
      assertEquals(6544196946841690098L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      String string0 = "\\uQEUm^=<Xm-9{Ok";
      TypeUtils.fnv1a_64(string0);
      Class<Double> class1 = Double.TYPE;
      System.setCurrentTimeMillis((-3251L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLWarning> class1 = SQLWarning.class;
      ClassLoader.getSystemClassLoader();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MinguoDate minguoDate0 = MockMinguoDate.now();
      HijrahDate hijrahDate0 = MockHijrahDate.from(minguoDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(hijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : Hijrah-umalqura AH 1435-04-14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      MockThread.getAllStackTraces();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader1);
      String string0 = "illegal json creator";
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException("getMessage");
      instantiationException0.getSuppressed();
      String string0 = "0001-01-01T00:00:00+08:00";
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("0001-01-01T00:00:00+08:00");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 0001-01-01T00:00:00+08:00
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      hashMap0.clear();
      BiFunction<String, Field, Field> biFunction0 = (BiFunction<String, Field, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("getClass");
      AffineTransform affineTransform0 = new AffineTransform(2297.6F, 2297.6F, 0.0F, 2297.6F, 1722.7463F, 4491.0F);
      Rectangle rectangle0 = new Rectangle();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Integer> class0 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) stringIndexOutOfBoundsException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("wV{{[rzc=.");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      HttpCookie httpCookie0 = new HttpCookie("wV{{[rzc=.", "wV{{[rzc=.");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "wV{{[rzc=.", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus("(5]6oI{+4zD/", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[0];
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      ParserConfig.global = parserConfig0;
      TypeUtils.loadClass("S", classLoader0, true);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("(5]6oI{+4zD/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(5]6oI{+4zD/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      String string0 = "k3-::S^+SY9-u^<GQ@";
      TypeUtils.fnv1a_64("S");
      Insets insets0 = new Insets((-1212), 27, 99999, 27);
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Insets[top=-1212,left=27,bottom=99999,right=27]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [S", class1.toString());
      
      Class<TimeUnit> class2 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(2, list0.size());
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertNotNull(class3);
      assertEquals("class java.lang.Object", class3.toString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("8;Ce%r]1qB,", hashMap0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) illegalThreadStateException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "\\(5]6oI{+4zD/";
      TypeUtils.decapitalize("(5]6oI{+4zD/");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap", "(5]6oI{+4zD/");
      Locale locale0 = Locale.JAPANESE;
      DateFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("(5]6oI{+4zD/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : (5]6oI{+4zD/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "\\(5]6oI{+4zD/";
      TypeUtils.decapitalize("(5]6oI{+4zD/");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap", "(5]6oI{+4zD/");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("(5]6oI{+4zD/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : (5]6oI{+4zD/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "javax.persistence.OneToMany";
      InstantiationException instantiationException0 = new InstantiationException("javax.persistence.OneToMany");
      instantiationException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.InstantiationException: javax.persistence.OneToMany
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize("(5]6oI{+4zD/");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap", "(5]6oI{+4zD/");
      Locale locale0 = Locale.JAPANESE;
      DateFormatSymbols.getInstance(locale0);
      JSONObject jSONObject0 = new JSONObject(11);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Class<Boolean> class2 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NextException", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("EE+g;'6xF,iIn>4R& ", class0, class1, class2, (Field) null, (-1247), (-1247), (-1247));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.isNumber("(5]6oI{+4zD/");
      TypeUtils.getClass((Type) class0);
      TypeUtils.decapitalize("(5]6oI{+4zD/");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("(5]6oI{+4zD/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (5]6oI{+4zD/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<Insets> class2 = Insets.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      String string0 = TypeUtils.castToString(hashtable0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Point point0 = new Point();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Currency> class1 = Currency.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      TypeUtils.castToInt((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, class0);
      parameterizedTypeImpl2.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dimension0, (ParameterizedType) parameterizedTypeImpl2, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^<GQ@");
      Class<Timestamp> class1 = Timestamp.class;
      TypeUtils.castToTimestamp((Object) null);
      String string0 = null;
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "deserialzeArrayMapping";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      MockThread.dumpStack();
      MockThread.reset();
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[6]);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeArray0[4]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, false, propertyNamingStrategy0);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Float float0 = new Float(0.0);
      Long long0 = new Long((-1455L));
      Integer integer0 = TypeUtils.castToInt(long0);
      assertNotNull(integer0);
      
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TypeUtils.decapitalize("p0c;r0%-Q");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("p0c;r0%-Q", biFunction0);
      linkedHashMap0.put("p0c;r0%-Q", "p0c;r0%-Q");
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.castToSqlTime((Object) null);
      InstantiationException instantiationException0 = new InstantiationException();
      InstantiationException instantiationException1 = new InstantiationException();
      Class<TimeZone> class1 = TimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      String[] stringArray0 = ParserConfig.DENYS;
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+v++meZ;b&s", class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.decapitalize("javax.persistence.OneToMany");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("i", classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Point point0 = new Point();
      TypeUtils.fnv1a_64("gcal");
      Rectangle rectangle0 = new Rectangle(point0);
      LinkedHashMap<NegativeArraySizeException, Date> linkedHashMap0 = new LinkedHashMap<NegativeArraySizeException, Date>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockDate> class1 = MockDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(857, 1);
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6=_'*Q`suX");
      String string0 = "L";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TypeUtils.isNumber("L");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Type type0 = null;
      TypeUtils.getCollectionItemClass((Type) null);
      DecimalFormat decimalFormat0 = new DecimalFormat("k4M");
      ParsePosition parsePosition0 = new ParsePosition(1668);
      // Undeclared exception!
      try { 
        decimalFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("");
      TypeUtils.castToLong((Object) null);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(treeMap0);
      ParserConfig.getFieldFromCache("org.springframework.security.web.csrf.DefaultCsrfToken", identityHashMap0);
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, (-1247), (-1247), 148);
      Class<RuntimeException> class1 = RuntimeException.class;
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 148;
      doubleArray0[1] = (double) (-1247);
      doubleArray0[2] = (double) (-1247);
      doubleArray0[3] = (double) (-1247);
      doubleArray0[4] = (double) (-1247);
      doubleArray0[5] = (double) (-1247);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (-1247);
      doubleArray0[8] = (double) 148;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, fieldInfo0.alternateNames);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("get", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale("get", ":YxCdE9GB");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.loadClass("toS", (ClassLoader) null);
      TypeUtils.getCollectionItemClass((Type) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getCollectionItemType((Type) null);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalStateException illegalStateException0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(illegalStateException0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4500, 4500, 4500, 30, 2014, 33);
      TypeUtils.isHibernateInitialized(mockGregorianCalendar0);
      TypeUtils.fnv1a_64("Sf+H!tU)X-u}Wx");
      Class<Integer> class0 = Integer.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      Field[] fieldArray0 = new Field[2];
      String string1 = "";
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", hashtable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.fnv1a_64("qj}pAbo209tHJb");
      ParserConfig parserConfig0 = null;
      Class<Double> class0 = Double.TYPE;
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Collator collator0 = Collator.getInstance(locale0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) collator0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.RuleBasedCollator@12f3e883
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PageAttributes pageAttributes0 = new PageAttributes();
      byte[] byteArray0 = TypeUtils.castToBytes("S");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)9);
      Byte.compare((byte) (-80), (byte)9);
      TypeUtils.castToDate(byte0);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = "@](I{wn)S4B&gs4";
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Method method0 = null;
      Field[] fieldArray0 = new Field[3];
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"Zw+%dOW", weakHashMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("|(G%z\"?\")Ac5", weakHashMap0);
      fieldArray0[1] = null;
      ParserConfig.getFieldFromCache("NWe", weakHashMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus("(5]6oI{+4zD/", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[0];
      TypeUtils.loadClass("S", classLoader0, true);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "taO{C3E8CP&-", "fastjson.parser.autoTypeAccept", 1856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<String> class0 = String.class;
      Class<Long> class1 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      Class<Boolean> class2 = Boolean.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) double0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-2416));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("j", stringIndexOutOfBoundsException0);
      sQLNonTransientException0.fillInStackTrace();
      instantiationError0.addSuppressed(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "QaW{[IZ/");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("p8V34u[_Cwd\"", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("get", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale("4kaP+Y'BD1I?#H", ":YxCdE9GB");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.loadClass("M<Mae`f", (ClassLoader) null);
      TypeUtils.getCollectionItemClass((Type) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getCollectionItemType((Type) null);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("]C(%S.0");
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = "parse error";
      Class<SQLDataException> class2 = SQLDataException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.headMap("]C(%S.0", false);
      ParserConfig.getFieldFromCache("parse error", treeMap0);
      int int0 = 735;
      FieldInfo fieldInfo0 = new FieldInfo("parse error", class0, class2, class1, (Field) null, (-950), (-950), 735);
      treeMap0.clone();
      // Undeclared exception!
      try { 
        fieldInfo0.setAccessible();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TypeUtils.isNumber("+v++meZ;b&s");
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("+v++meZ;b&s");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : +v++meZ;b&
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("isshortValue", biFunction0);
      linkedHashMap0.put("Unknown", "dalvik");
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, (PropertyNamingStrategy) null);
      TypeUtils.getCollectionItemType(class0);
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils.toLocale("t]+-!a=~9");
      ParserConfig parserConfig0 = new ParserConfig();
      InternalError internalError0 = new InternalError((String) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(internalError0);
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockIllegalStateException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.fnv1a_64("L");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("l").when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(class0);
      Class<StringIndexOutOfBoundsException> class2 = StringIndexOutOfBoundsException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("L", "l");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      Long long0 = new Long(1L);
      Long long1 = TypeUtils.castToLong(long0);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("getTypeName");
      ParserConfig parserConfig0 = new ParserConfig();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      // Undeclared exception!
      TypeUtils.cast((Object) typeArray0[5], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus("(5]6oI{+4zD/", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.loadClass("S", classLoader0, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      SecurityException securityException0 = new SecurityException("(5]6oI{+4zD/", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(securityException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isGenericParamType(class0);
      Class<ClassLoader> class2 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(map0);
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) concurrentHashMap0);
      Class<NoSuchFieldException> class3 = NoSuchFieldException.class;
      Class<Insets> class4 = Insets.class;
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>(56, 56);
      ParserConfig.getFieldFromCache("value", concurrentHashMap1);
      FieldInfo fieldInfo0 = new FieldInfo("}fnT([hGuH ", class3, class4, class4, (Field) null, 56, (-1542), 56);
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.isPath(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.decapitalize("V");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap2 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap1, false, propertyNamingStrategy0);
      Character.valueOf(',');
      Locale locale0 = Locale.CANADA_FRENCH;
      MessageFormat messageFormat0 = new MessageFormat("V", locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : v
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1178), (-1224), (-1868));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1178,MONTH=-1224,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1868,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class1 = MockDate.class;
      MockDate mockDate0 = TypeUtils.cast((Object) "", class1, parserConfig0);
      assertNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'mP$J");
      Locale locale0 = Locale.ITALY;
      TypeUtils.getClassFromMapping("'mP$J");
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "Mw.-";
      TypeUtils.fnv1a_64_lower("Mw.-");
      AtomicLong atomicLong0 = new AtomicLong(571292055906600169L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      atomicLong0.accumulateAndGet(571292055906600169L, longBinaryOperator0);
      atomicLong0.decrementAndGet();
      atomicLong0.getAndSet(571292055906600169L);
      TypeUtils.castToFloat(atomicLong0);
      Class<BigInteger> class0 = BigInteger.class;
      TypeUtils.isProxy(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Point point0 = new Point();
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      mockThread0.getContextClassLoader();
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getRawClass(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Class<Boolean> class2 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NextException", treeMap0);
      TypeUtils.getRawClass(class2);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@17676a7c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<?> class0 = TypeUtils.getClassFromMapping("[Z");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("Y8c.Rg8Q").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class1 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent((String) null, biFunction0);
      linkedHashMap1.put("com.alibaba.fastjson.serializer.JavaBeanSerializer", (String) null);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertEquals(1, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[1]);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      illegalThreadStateException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "t>Q8a%m");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError(":l");
      stackOverflowError0.getLocalizedMessage();
      Class<Byte> class0 = Byte.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("superclass", "E}9\";r^R7S;Pk", stackOverflowError0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.getSuppressed();
      stackOverflowError0.initCause(sQLFeatureNotSupportedException0);
      stackOverflowError0.fillInStackTrace();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.StackOverflowError: :l
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      String string0 = "getClass";
      TypeUtils.fnv1a_64_lower("getClass");
      String string1 = "k3-::S^+SY9-u^<GQ@";
      TypeUtils.fnv1a_64("k3-::S^+SY9-u^<GQ@");
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getClass", (Type) class1, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLNonTransientException sQLNonTransientException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
      assertNull(sQLNonTransientException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("k3-::S^+SY9-u^GQ@", "k3-::S^+SY9-u^GQ@");
      HttpCookie httpCookie0 = new HttpCookie("k3-::S^+SY9-u^GQ@", "Ljava.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isGenericParamType(class0);
      Class<ClassLoader> class2 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) concurrentHashMap0);
      concurrentHashMap0.contains(class1);
      Locale locale0 = new Locale("g9IBxf", "g9IBxf");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      byte[] byteArray0 = TypeUtils.castToBytes("g9IBxf");
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-46), (byte)1, (byte) (-59)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = null;
      TypeUtils.decapitalize((String) null);
      MockThread.reset();
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "i";
      TypeUtils.fnv1a_64_lower("i");
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "i", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.fnv1a_64("(5]6oI{+4zD/");
      Class<Timestamp> class0 = Timestamp.class;
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize("getMockedClassName");
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<Integer> class1 = Integer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class0;
      Type type1 = TypeUtils.getCollectionItemType(type0);
      typeArray0[2] = type1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      Insets insets0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(insets0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      boolean boolean0 = TypeUtils.isNumber("+v++meZ;b&s");
      Class<Insets> class2 = Insets.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, true);
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      Class<Rectangle> class4 = Rectangle.class;
      Class<JSONPDeserializer> class5 = JSONPDeserializer.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.java.sql.BatchUpdateException", class4, class5, class4, (Field) null, 0, 184, (-30733247));
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isTransient((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "\\(5]6oI{+4zD/";
      MockThread mockThread0 = new MockThread("S");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setClassAssertionStatus("(5]6oI{+4zD/", true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("to");
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, stringIndexOutOfBoundsException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.instrumentation.InstrumentingClassLoader@33ad47e8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      linkedHashMap0.put("3^j^qlGm/Z+!74", "3^j^qlGm/Z+!74");
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Timestamp> class1 = Timestamp.class;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.loadClass("time", (ClassLoader) null);
      TypeUtils.getCollectionItemClass((Type) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<String> class0 = String.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Long> class1 = Long.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      LinkedHashSet<Time> linkedHashSet0 = new LinkedHashSet<Time>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("illegal json creator", hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("8;Ce%r]1qB,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8;Ce%r]1qB,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      classLoader0.getParent();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      TypeUtils.decapitalize("p0c;r0%-Q");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<HttpCookie> class1 = HttpCookie.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Float float0 = new Float(0.0);
      Integer integer0 = TypeUtils.castToInt(float0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Class<DataTruncation> class2 = DataTruncation.class;
      Class<SQLDataException> class3 = SQLDataException.class;
      Class<OptionalCodec> class4 = OptionalCodec.class;
      FieldInfo fieldInfo0 = new FieldInfo("fileName", class3, class4, class1, (Field) null, 4, 185, 185);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<MapDeserializer> class2 = MapDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.isNumber("+v++meZ;b&s");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("Ljava.lang.AutoCloseable");
      assertEquals("ljava.lang.autocloseable", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.isPath(class0);
      Class<Calendar> class1 = Calendar.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, false, propertyNamingStrategy0);
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class3);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1h_6");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("getSuperclass", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLNonTransientConnectionException: 1h_6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "deserialzeArrayMapping");
      MockThread mockThread1 = new MockThread(mockThread0, "deserialzeArrayMapping");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("deserialzeArrayMapping", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig1, class1);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], parameterizedTypeImpl0);
      parameterizedTypeImpl0.getTypeName();
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "fastjson.parser.autoTypeSupport", 2608, weakHashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "N&BOsbRf2Ouq5F;'", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLInvalidAuthorizationSpecException -> java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.isPath(class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.decapitalize("SIDv@3tYYs{EI_uk15");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("]~ve((-YzL[m\u0006.yw0.");
      BigInteger bigInteger0 = BigInteger.ZERO;
      TypeUtils.castToShort(bigInteger0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(false);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("fastjson.parser.deny");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : fastjson.p
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "t>Q8a%m");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus("t>Q8a%m", true);
      Class<Long> class0 = Long.class;
      String string0 = "00k6a7z";
      Field[] fieldArray0 = new Field[3];
      Class<Double> class1 = Double.class;
      String string1 = "mG>U&rsM}a:enlHjq{";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "mG>U&rsM}a:enlHjq{", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("bHwLN");
      int[] intArray0 = new int[4];
      intArray0[0] = 9999999;
      intArray0[1] = (-928);
      intArray0[2] = 9999999;
      intArray0[3] = 9999999;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("bHwLN", "bHwLN", 9999999, intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(batchUpdateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLNonTransientConnectionException: bHwLN
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s<U");
      SQLWarning sQLWarning0 = new SQLWarning("s<U", sQLNonTransientConnectionException0);
      TypeUtils.castToString(sQLWarning0);
      TypeUtils.castToBytes("5?b2Af&U:O)B'S");
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap1, false, propertyNamingStrategy0);
      TypeUtils.fnv1a_64("(}b(M8*/m%.>E");
      Class<Double> class1 = Double.TYPE;
      System.setCurrentTimeMillis(520L);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(map1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("i");
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isNumber("2HFK");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, true);
      Hashtable<ChronoLocalDate, GridBagConstraints> hashtable0 = new Hashtable<ChronoLocalDate, GridBagConstraints>();
      TypeUtils.castToString((Object) null);
      Class<LinkageError> class2 = LinkageError.class;
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class3);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      TypeUtils.isHibernateInitialized(locale0);
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      TypeUtils.isHibernateInitialized(locale0);
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("");
      Class<OptionalCodec> class1 = OptionalCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters(class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("SUPPRESSED_CAPTION");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(locale0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("[S", "[S");
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.beans.Transient", weakHashMap0);
      treeMap1.put("Eh91", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, false, propertyNamingStrategy0);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("wV{{[rzc=.");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.decapitalize("Ux6+6f");
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "L,Ba{uxuu`E64gU";
      identityHashMap0.put("_R-j!qlTq;';W", ")K=`MUS8l(bJ,Y%");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(concurrentHashMap0);
      weakHashMap0.put("J+:wo'3", "J+:wo'3");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class1, map0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TypeUtils.isNumber("");
      TypeUtils.castToSqlDate((Object) null);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Double> class1 = Double.class;
      TypeUtils.computeGettersWithFieldBase(class1, map0, true, propertyNamingStrategy0);
      Class<Time> class2 = Time.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, class2, parserConfig0);
      TypeUtils.castToSqlDate((Object) null);
      Class<NumberFormat> class3 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) propertyNamingStrategy0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("eY1v", (ClassLoader) aSMClassLoader0, true);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("[C");
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      ParserConfig parserConfig0 = new ParserConfig();
      locale0.getDisplayVariant();
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) locale0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getGenericParamType(class0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      Class<Boolean> class1 = Boolean.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) double0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("get", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = new Locale("get", ":YxCdE9GB");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      Class<Long> class1 = Long.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetModifiers", treeMap0);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("E.KQ;7", (Method) null, (Field) null, class2, class0, (-1863), 28, 9, (JSONField) null, (JSONField) null, "fQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.fnv1a_64("S");
      HttpCookie httpCookie0 = new HttpCookie("k3-::S^+SY9-u^GQ@", "Ljava.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"discard\":false,\"httpOnly\":false,\"maxAge\":-1,\"name\":\"k3-::S^+SY9-u^GQ@\",\"secure\":false,\"value\":\"Ljava.awt.Color\",\"version\":1}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isProxy(class0);
      Class<Object> class1 = Object.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      Class<Boolean> class3 = Boolean.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NextException", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@1Oi(0s)F?;g", class1, class2, class3, (Field) null, (-1247), (-1247), (-1247));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<MockDate> class1 = MockDate.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Long> class0 = Long.TYPE;
      Type[] typeArray0 = new Type[8];
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils");
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[6]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = ParserConfig.global;
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("com.alibaba.fastjson.util.ParameterizedTypeImpl@f72c1223");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"com.alibaba.fastjson.util.ParameterizedTypeImpl@f72c1223\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SIDv@3tYYs{EI_uk15");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("getInternationalCurrencySymbol", (Throwable) null);
      AtomicLong atomicLong0 = new AtomicLong();
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      atomicLong0.getAndAccumulate(0, longBinaryOperator0);
      TypeUtils.castToDouble(atomicLong0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isGenericParamType(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      String string0 = "eq/Kl\"!;.!/~uN:%W";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("eq/Kl\"!;.!/~uN:%W");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.text.MockDateFormat@4cd4083f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      TypeUtils.fnv1a_64("[C");
      Class<Timestamp> class0 = Timestamp.class;
      Short short0 = new Short((short)36);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) short0, class0, parserConfig0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("8umM=[;yf", "fastjson.parser.deny");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[C", "[C", noSuchMethodException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize("B");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.decapitalize("B");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>(concurrentHashMap0);
      LinkedHashMap<String, String> linkedHashMap2 = new LinkedHashMap<String, String>();
      linkedHashMap2.put("b", "/VR>kT");
      Class<Character> class1 = Character.class;
      ConcurrentHashMap<String, String> concurrentHashMap2 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      Character.valueOf('');
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Float> class0 = Float.TYPE;
      TypeUtils.fnv1a_64_lower("getClass");
      TypeUtils.isNumber("DisableSpecialKeyDetect");
      TypeUtils.getClass((Type) class0);
      TypeUtils.decapitalize("OG{vtaGCb5K`^c#r");
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "OG{vtaGCb5K`^c#r", fieldArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      MockThread.interrupted();
      mockThread0.getContextClassLoader();
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Double> class1 = Double.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.isNumber("Lorg.springframework.util.LinkedMultiValueMap");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, map1, propertyNamingStrategy1);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy2);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Lorg.springframework.util.LinkedMultiValueMap", hashtable0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Field[] fieldArray0 = new Field[1];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent((String) null, biFunction0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      illegalThreadStateException0.getLocalizedMessage();
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      TypeUtils.castToJavaBean((Object) "I", class1);
      Class<TimeUnit> class2 = TimeUnit.class;
      TypeUtils.isKotlin(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Class<StackTraceElement> class0 = StackTraceElement.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jdk8DateCodec0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.isPath(class0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.decapitalize("NKv7wGIC@Y.'O");
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("NKv7wGIC@Y.'O");
      TypeUtils.castToShort((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Rectangle rectangle0 = new Rectangle(65, (-954), 65, (-954));
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) rectangle0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put(":YxCdE9GB", ":YxCdE9GB");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException(":YxCdE9GB");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1), 10);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("I", "I");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.computeIfPresent((String) null, biFunction0);
      linkedHashMap1.put("com.alibaba.fastjson.serializer.JavaBeanSerializer", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      mockThread0.getContextClassLoader();
      MockThread.getAllStackTraces();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class1);
      Boolean boolean0 = new Boolean("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.aliba\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<JobAttributes> class1 = JobAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      boolean boolean0 = TypeUtils.isNumber(".Qk+K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.decapitalize("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, list0);
      TypeUtils.castToInt("");
      TypeUtils.unwrapOptional((Type) null);
      Class<Properties> class1 = Properties.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      TypeUtils.toLocale("");
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("[float");
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = TypeUtils.cast((Object) identityHashMap0, class0, (ParserConfig) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("fastjson.compatibleWithJavaBean", "getNaN");
      Class<Character> class1 = Character.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      Character.valueOf('r');
      TypeUtils.castToSqlTime(timestamp0);
  }
}
