/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:22:59 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ResourceBundle;
import okio.Buffer;
import okio.BufferedSink;
import okio.HashingSink;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      BufferedSink bufferedSink0 = Okio.buffer((Sink) hashingSink0);
      assertNotNull(bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Okio.blackhole();
      MockFile mockFile0 = new MockFile("iyd%W6}Lp)");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("o;S{}l:,3", "o;S{}l:,3");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sink sink0 = Okio.blackhole();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      realBufferedSink0.timeout();
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      AssertionError assertionError0 = new AssertionError(proxy_Type0);
      Okio.isAndroidGetsocknameError(assertionError0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE_NEW;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.APPEND;
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.flush();
      MockFile mockFile0 = new MockFile("XHvx:c2g", "XHvx:c2g");
      Okio.sink((File) mockFile0);
      AssertionError assertionError0 = new AssertionError(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AssertionError assertionError1 = new AssertionError("XHvx:c2g", assertionError0);
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("byteString == null", "byteString == null");
      Sink sink0 = Okio.appendingSink(mockFile0);
      AssertionError assertionError0 = new AssertionError();
      AssertionError assertionError1 = new AssertionError("byteString == null", assertionError0);
      Okio.isAndroidGetsocknameError(assertionError1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      MockFile mockFile1 = new MockFile("z5:;iO-=DGG", "z5:;iO-=DGG");
      assertFalse(mockFile1.equals((Object)mockFile0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      MockFile mockFile0 = new MockFile("z5:;iO-=DGG", "z5:;iO-=DGG");
      Buffer buffer0 = new Buffer();
      AssertionError assertionError1 = new AssertionError((String) null, assertionError0);
      assertionError1.fillInStackTrace();
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("byteString == null");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeDecimalLong((byte)38);
      MockFile mockFile1 = new MockFile("|]LG3", "byteString == null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(2759L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.flush();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        Okio.source((File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~K>x37cdy[D3^", "~K>x37cdy[D3^");
      Sink sink0 = Okio.sink((File) mockFile0);
      mockFile0.setReadOnly();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.toString();
      Okio.source((File) mockFile0);
      realBufferedSink0.flush();
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf("buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@13b4737d))");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardOpenOption.buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@13b4737d))
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~K>x37cdy[D3^", "\u2026]");
      Sink sink0 = Okio.sink((File) mockFile0);
      mockFile0.setReadOnly();
      Source source0 = Okio.source((File) mockFile0);
      long long0 = 2741L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      try { 
        realBufferedSink0.write(source0, 2741L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      byte byte0 = (byte)110;
      byte byte1 = (byte)110;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      MockFile mockFile0 = new MockFile(">cPD<vuXHw,7Fv7,5*", "OUsqe8Q3K.Bd\"");
      realBufferedSink0.writeLongLe((-601L));
      realBufferedSink0.flush();
      try { 
        Okio.source((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*(BGFWK<J-Aw");
      Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      File file0 = mockFile0.getAbsoluteFile();
      file0.getCanonicalFile();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.toString();
      Okio.blackhole();
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*(BGFWK<J-Aw");
      Sink sink0 = Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      MockFile mockFile1 = new MockFile("*(BGFWK<J-Aw");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/*(BGFWK<J-Aw");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5^*xU(T");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      MockFile mockFile2 = new MockFile("*(BGFWK<J-Aw");
      realBufferedSink0.flush();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeLongLe(1L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(sink0);
      realBufferedSource0.toString();
      realBufferedSource0.timeout();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      MockFile mockFile3 = new MockFile("5^*xU(T");
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(realBufferedSource0.buffer);
      AssertionError assertionError0 = new AssertionError((-1964));
      AssertionError assertionError1 = new AssertionError("*(BGFWK<J-Aw", assertionError0);
      Okio.isAndroidGetsocknameError(assertionError1);
      bufferedSink0.writeShort((-1964));
      mockFile0.toPath();
      realBufferedSink2.write((Source) ((RealBufferedSink) bufferedSink0).buffer, 1L);
      Okio.buffer((Source) ((RealBufferedSink) bufferedSink0).buffer);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, 0, 0, 1, 106]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-2179));
      Source source0 = Okio.source((InputStream) pipedInputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.close();
      MockFile mockFile0 = new MockFile("out == null");
      AssertionError assertionError0 = new AssertionError(1);
      AssertionError assertionError1 = new AssertionError("in == null", assertionError0);
      mockFile0.toPath();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeShort((-2179));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.buffer();
      Okio.sink((File) mockFile0);
      System.setCurrentTimeMillis((-2179));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*(BGFWK<J-Aw");
      Sink sink0 = Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      mockFile0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/*(BGFWK<J-Aw");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5V*xcET");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      MockFile mockFile1 = new MockFile("5V*xcET", "*(BGFWK<J-Aw");
      realBufferedSink0.write(source0, 1L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.toString();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(source0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource2.buffer);
      realBufferedSink0.flush();
      MockFile mockFile2 = new MockFile("IG");
      Sink sink1 = Okio.sink((File) mockFile1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(sink1);
      realBufferedSink3.flush();
      FileSystemHandling.createFolder(evoSuiteFile0);
      long long0 = ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL;
      MockFile mockFile3 = new MockFile("sD6lt&gaS{TqJ+");
      Okio.sink((File) mockFile2);
      AssertionError assertionError0 = new AssertionError((-1941));
      AssertionError assertionError1 = new AssertionError("getsockname failed", assertionError0);
      Okio.isAndroidGetsocknameError(assertionError1);
      try { 
        realBufferedSink3.write((Source) realBufferedSink2.buffer, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }
}
