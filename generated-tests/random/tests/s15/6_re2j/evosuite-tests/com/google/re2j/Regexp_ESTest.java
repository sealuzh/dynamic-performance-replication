/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:08:16 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      regexp0.op = regexp_Op1;
      regexp0.cap = 45;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      Regexp regexp3 = new Regexp(regexp0.op);
      regexpArray0[2] = regexp3;
      regexp1.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      regexp1.op = regexp_Op2;
      regexp0.cap = (-1098);
      regexp1.flags = 45;
      regexp1.toString();
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(LEFT_PAREN)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(LEFT_PAREN)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 15;
      regexp0.equals((Object) null);
      regexp0.name = "";
      regexp0.cap = 156;
      regexp0.equals(regexp_Op0);
      int int0 = 622;
      regexp0.flags = 622;
      Regexp.Op.valueOf("PLUS");
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      intArray0[1] = (-769);
      intArray0[2] = 888;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = (-769);
      intArray0[6] = 3;
      intArray0[7] = 3;
      regexp0.runes = intArray0;
      regexp0.flags = 3080;
      regexp0.max = (-769);
      regexp0.flags = 9633;
      regexp0.max = (-769);
      regexp0.toString();
      Regexp.Op.values();
      regexp0.equals("(?i:x0fxfffffcffx{378}x03x03xfffffcffx03x03)");
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      regexp1.toString();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-924);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.max = 2671;
      int[] intArray0 = new int[2];
      intArray0[0] = 2671;
      intArray0[1] = 2671;
      regexp0.runes = intArray0;
      regexp0.subs = regexpArray0;
      regexp0.maxCap();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[\u0A6F]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[\u0A6F]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp1.cap = 94;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.name = "NKp@RUeY%";
      regexp1.max = (-15);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp2.subs = regexpArray0;
      regexp0.reinit();
      regexp2.cap = (-15);
      regexp1.equals(regexp2);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp1.reinit();
      regexp3.cap = (-3492);
      regexp1.toString();
      regexp1.equals(regexp3);
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-3135);
      regexp1.maxCap();
      regexp1.name = "R";
      regexp0.flags = (-277);
      regexp1.maxCap();
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1377;
      intArray0[1] = (-1360);
      intArray0[2] = (-5116);
      intArray0[3] = 94;
      intArray0[4] = 8614;
      intArray0[5] = (-1651);
      intArray0[6] = (-4075);
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp1.equals(object0);
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = 94;
      regexp2.cap = (-5116);
      boolean boolean1 = regexp1.equals(regexp2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[1];
      regexp0.min = (-1227);
      regexp0.max = 4120;
      intArray0[0] = 65093;
      String string0 = ")";
      regexp0.equals(")");
      regexp0.runes = intArray0;
      regexp0.flags = 65093;
      regexp0.min = 432;
      regexp0.min = (-1218);
      regexp0.toString();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "Muf=F,5yyF";
      regexpArray0[3] = regexp1;
      Regexp[] regexpArray1 = new Regexp[9];
      regexpArray1[0] = regexp1;
      regexpArray1[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray1[2] = regexp2;
      regexpArray1[3] = regexp1;
      regexpArray1[4] = regexp0;
      regexpArray1[5] = regexp0;
      regexpArray1[6] = regexp0;
      regexpArray1[7] = regexp0;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray1[8] = regexp3;
      regexpArray0[1].subs = regexpArray1;
      regexp0.subs = regexpArray0;
      regexp1.name = "Soft_Dotted";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2045;
      regexp0.reinit();
      regexp0.min = 3;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
      
      boolean boolean1 = regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean2 = regexp0.equals(regexp2);
      assertFalse(boolean2 == boolean1);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2558);
      intArray0[1] = 7;
      regexp0.cap = (-2558);
      regexp1.runes = intArray0;
      int int0 = 1185;
      regexp1.cap = 99;
      regexp1.toString();
      regexp1.flags = 1185;
      regexp1.name = "";
      regexp0.equals(regexp1);
      Regexp.Op.values();
      regexp1.toString();
      regexp0.toString();
      regexp1.maxCap();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("T<e@\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.T<e@\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "STAR";
      regexp0.max = 13;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op1;
      regexp1.toString();
      regexp1.equals(regexp_Op0);
      regexp0.equals("A");
      regexp1.maxCap();
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      regexp0.runes = intArray0;
      regexp1.min = 13;
      regexp0.max = 305;
      regexp0.toString();
      regexp_Op1.isPseudo();
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.min = 0;
      regexp2.toString();
      regexp2.equals(regexp1);
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.min = (-1268);
      regexp0.equals(regexp1);
      regexp0.reinit();
      String string0 = null;
      regexp0.name = null;
      regexp0.name = null;
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2541;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.flags = 6516;
      regexp0.max = 2;
      regexp0.cap = (-2990);
      regexp0.toString();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-m:$)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-m:$)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      regexp1.toString();
      regexp1.reinit();
      regexp0.toString();
      regexp0.max = (-4369);
      regexp1.equals(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      regexp2.runes = intArray0;
      regexp1.flags = 0;
      regexp1.equals(regexp2);
      regexp_Op0.isPseudo();
      regexp2.equals(regexp_Op0);
      String string0 = " jnn{x <B5Qif;FVbg";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(" jnn{x <B5Qif;FVbg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op. jnn{x <B5Qif;FVbg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 12;
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexp0.subs = regexpArray0;
      regexp2.maxCap();
      int int0 = regexp2.maxCap();
      assertEquals(0, int0);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp1.equals(regexp3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.min = 12;
      Regexp regexp2 = new Regexp(regexp1);
      regexp_Op0.isPseudo();
      Regexp regexp3 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 3160;
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean0 = regexp1.equals(regexp2);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      Regexp.Op.values();
      regexp2.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp2.cap = 1;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.op = regexp_Op0;
      regexp1.min = 20;
      regexp1.flags = 16;
      regexp1.cap = 20;
      regexp1.reinit();
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      regexp2.max = 20;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1553);
      intArray0[1] = 2617;
      intArray0[2] = 20;
      intArray0[3] = 0;
      intArray0[4] = 20;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 8189;
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[2];
      intArray0[0] = 8189;
      intArray0[1] = (-1);
      regexp2.runes = intArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp2.equals(regexp3);
      Regexp.Op.values();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      Regexp regexp4 = new Regexp(regexp0);
      regexp1.equals(regexp4);
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\"X`%NE3!1 3n2bz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\"X`%NE3!1 3n2bz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp1.op = regexp_Op1;
      regexp0.toString();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      regexp3.equals(regexp2);
      regexp1.equals(regexp3);
      regexp0.op = regexp_Op0;
      Regexp regexp4 = new Regexp(regexp1);
      regexp3.equals(regexp4);
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp2.equals(regexp0);
      regexp2.maxCap();
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.max = 2424;
      regexp2.reinit();
      regexp2.toString();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.reinit();
      regexp0.cap = 41;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp1.max = 4214;
      regexp1.op = regexp_Op1;
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp1;
      regexpArray0[2].subs = regexpArray1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      regexp0.min = 3392;
      regexp0.name = "e']zmj>0Zh";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp0.equals(regexp_Op0);
      regexp0.max = 2;
      regexp0.max = 1458;
      regexp0.cap = 6;
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.equals("Gothic");
      regexp0.maxCap();
      regexp0.subs = regexpArray0;
      Regexp.Op.values();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[6];
      intArray0[0] = 8257;
      intArray0[1] = 10;
      intArray0[2] = (-4250);
      intArray0[3] = (-158);
      intArray0[4] = (-1980);
      intArray0[5] = 1;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = new Regexp(regexp3);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.equals(regexp1);
      regexp0.toString();
      regexp1.maxCap();
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp1.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[3];
      regexp0.subs = null;
      intArray0[0] = (-156);
      intArray0[1] = 5;
      regexp1.reinit();
      String string0 = "u)gsE!@blf5!";
      regexp0.name = "u)gsE!@blf5!";
      intArray0[2] = 519;
      regexp0.runes = intArray0;
      regexp0.subs = null;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.runes = null;
      Regexp.Op.values();
      regexp0.toString();
      regexp1.toString();
      Regexp.Op.values();
      regexp1.runes = null;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3271;
      intArray0[1] = (-836);
      intArray0[2] = 2;
      intArray0[3] = 7;
      intArray0[4] = 1875;
      intArray0[5] = 6979;
      intArray0[6] = 8080;
      intArray0[7] = 993;
      regexp0.runes = intArray0;
      regexp1.maxCap();
      String string0 = regexp0.toString();
      assertEquals("(?-s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp0.op = regexp_Op0;
      regexp0.flags = 43;
      regexp0.min = 43;
      regexp0.op = regexp_Op0;
      regexp1.max = 2451;
      regexp1.maxCap();
      regexp1.equals(regexp_Op0);
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.name = "b";
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("0&q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.0&q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.flags = 381;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[4].min = 12;
      regexp1.subs = regexpArray0;
      regexp1.equals(regexp_Op0);
      regexpArray0[5].name = "(?s:.)";
      regexp1.toString();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      Regexp.Op.values();
      regexp0.equals("Ogham");
      Object object0 = new Object();
      regexp1.equals(object0);
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 12;
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexp0.subs = regexpArray0;
      regexp2.maxCap();
      int int0 = regexp2.maxCap();
      assertEquals(0, int0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 4;
      regexp0.cap = (-2121);
      intArray0[2] = (-444);
      intArray0[3] = 66717;
      intArray0[4] = 6068;
      intArray0[5] = 13;
      regexp0.equals(regexp_Op0);
      intArray0[6] = 1250;
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 4;
      regexp0.op = regexp_Op0;
      regexp0.flags = (-1061);
      regexp0.toString();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1061);
      intArray0[1] = (-1061);
      intArray0[2] = (-1061);
      intArray0[3] = (-1061);
      intArray0[4] = 4;
      regexp0.toString();
      intArray0[5] = 4;
      regexp0.name = "B";
      intArray0[6] = 4;
      intArray0[7] = (-1061);
      regexp0.runes = intArray0;
      regexp0.maxCap();
      regexp0.reinit();
      regexp0.toString();
      regexp0.op.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int[] intArray0 = new int[9];
      regexp0.flags = 91;
      intArray0[0] = (-287);
      intArray0[1] = 0;
      intArray0[2] = 1515;
      intArray0[3] = (-86);
      intArray0[4] = 0;
      intArray0[5] = (-2638);
      intArray0[6] = 753;
      intArray0[7] = 0;
      intArray0[8] = 0;
      regexp0.runes = intArray0;
      regexp0.name = "^Kd}3s\"$LZ%";
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 0;
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.flags = 0;
      regexp0.equals("`kh");
      regexp0.reinit();
      regexp0.flags = (-2901);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2631;
      intArray0[1] = 1900;
      intArray0[2] = (-1097);
      intArray0[3] = 73;
      intArray0[4] = (-2013);
      intArray0[5] = 7517;
      intArray0[6] = 8412;
      regexp0.runes = intArray0;
      regexp0.toString();
      int[] intArray1 = new int[5];
      intArray1[0] = 128256;
      regexp0.name = "EL'vk";
      intArray1[1] = 128256;
      intArray1[2] = 128256;
      intArray1[3] = 128256;
      intArray1[4] = 128256;
      regexp0.toString();
      regexp0.runes = intArray1;
      regexp0.min = 128256;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.runes = intArray1;
      regexp1.reinit();
      regexp0.toString();
      regexp1.equals(regexp0);
      regexp1.equals(regexp0);
      regexp1.maxCap();
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp_Op0.isPseudo();
      regexp0.equals("EL'vk");
      Regexp.Op.values();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2727);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.equals(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2727);
      intArray0[1] = (-2727);
      intArray0[2] = 0;
      intArray0[3] = (-2727);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2727);
      intArray0[7] = (-2727);
      intArray0[8] = 0;
      regexp1.runes = intArray0;
      int int0 = 5;
      regexp1.cap = 5;
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-15);
      regexp0.op = regexp_Op0;
      regexp0.flags = (-1061);
      regexp0.toString();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1061);
      intArray0[1] = (-1061);
      intArray0[2] = (-1061);
      intArray0[3] = (-1061);
      intArray0[4] = (-15);
      regexp0.toString();
      intArray0[5] = (-15);
      regexp0.name = "B";
      intArray0[6] = (-15);
      intArray0[7] = (-1061);
      regexp0.runes = intArray0;
      regexp0.maxCap();
      regexp0.reinit();
      regexp0.toString();
      regexp0.op.isPseudo();
      regexp0.op.isPseudo();
      regexp0.maxCap();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = null;
      try {
        regexp0 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.cap = 1955;
      regexp2.runes = null;
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp2;
      regexp2.subs = regexpArray0;
      regexp1.op = regexp_Op1;
      Regexp.Op.values();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      regexp0.name = "|?L=>Yn";
      regexp1.op = regexp_Op1;
      regexp1.min = 733;
      regexp1.maxCap();
      regexp0.reinit();
      regexp0.toString();
      regexp1.equals("^");
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.toString();
      regexp0.equals(regexp0);
      regexp1.max = 15;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Rejang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Rejang
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 12;
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("OH8r,Z_F88_)m.<LM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.OH8r,Z_F88_)m.<LM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 800;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }
}
