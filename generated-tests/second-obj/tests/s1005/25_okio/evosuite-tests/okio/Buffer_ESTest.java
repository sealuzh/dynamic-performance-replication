/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:58:56 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("^(", charset0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      byte byte0 = (byte)86;
      try { 
        buffer0.readUtf8Line((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-3639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3639
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.buffer();
      buffer1.writeInt(4646);
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1818L));
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.getByte((-1818L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1818 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeByte(4835);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffe3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1751L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeUtf8("");
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(5969L, long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null, 3153, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      try { 
        buffer0.require(1769L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1818L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1818L), long0);
      assertSame(buffer0, buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      String string0 = "HmacSHA1";
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(9L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      pipe0.sourceClosed = false;
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      long long0 = buffer0.read(buffer1, 9L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, (-1089L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("HmacSHA1");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x48
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      int int0 = (-1431655764);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)103, (-2131L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-2131 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1089L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1089 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.writeAll(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      buffer0.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      long long1 = buffer0.indexOfElement(byteString0, 0L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "acSHA1");
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("", string0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer0.sha512();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer1 = buffer0.writeIntLe(7);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000000L);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(19L, buffer2.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer0.readByteArray(100000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=100000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeInt((-169));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString1 = buffer1.sha1();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      String string0 = buffer1.toString();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("[hex=ffffff57]", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      
      Buffer buffer2 = (Buffer)buffer1.emit();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer2 = buffer0.writeUtf8(" hex=");
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer1.size();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(17L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer_UnsafeCursor0.buffer, (-669L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -669
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.writeAll(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      buffer0.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)30, (long) (byte)30, (-1660L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=30 toIndex=-1660
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)92);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      try { 
        buffer0.skip(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Segment segment0 = buffer0.head;
      assertNull(segment0);
      
      SegmentPool.next = null;
      Buffer buffer1 = buffer0.writeUtf8("HmacSHA1");
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(72, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Buffer buffer1 = buffer0.writeLong(1508L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer0.readLongLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-2016205258178428928L), long0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tKread interMrupted");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Segment segment0 = buffer0.writableSegment(6);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(segment0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(644L);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeUtf8("|<dAF tl$gp8>");
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = buffer1.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(14L, buffer1.size());
      assertEquals((short)13366, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      long long0 = buffer0.readLongLe();
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8367765354322885684L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(list0);
      
      long long1 = buffer0.indexOf((byte)79);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x78
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      try { 
        buffer1.readFully(buffer0, 262L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927936L));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      buffer1.flush();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeInt(413);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(413);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer3 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(12, byteArrayOutputStream0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(12L, buffer3.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean0 = buffer1.rangeEquals((long) (byte)0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater(true);
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflater0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)48;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      
      int int0 = byteString1.indexOf(byteString0, (int) (byte)48);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals((-1), int0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      
      boolean boolean0 = buffer0.rangeEquals(0L, byteString1, (int) (byte)48, (-1431655764));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(boolean0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48}, byteArray0);
      
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1431655764
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'T[+3@_S`LKMQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte byte0 = (byte)38;
      long long1 = buffer0.indexOf((byte)38);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      
      try { 
        buffer1.skip(4278190080L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pipe pipe0 = new Pipe(3274L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0, 65280L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)106, (byte) (-53));
      assertEquals((-101), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)104, (byte) (-1), (byte)106, (byte)58}, byteArray0);
      
      long long1 = byteArrayInputStream0.skip((byte)58);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-101L), long1);
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)104, (byte) (-1), (byte)106, (byte)58}, byteArray0);
      
      buffer0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = buffer1.writeUtf8CodePoint(9);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      buffer1.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)66, 16L, 5110L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "acSHA1");
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(644L);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(3, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      Buffer buffer2 = buffer1.writeUtf8("acSHA1");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(172L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      List<Integer> list0 = new LinkedList<Integer>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Buffer buffer1 = buffer0.writeString("^(", charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(2, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      boolean boolean0 = buffer1.request(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      String string0 = realBufferedSource0.buffer.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals("[size=0]", string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte) (-14), (byte)57, (byte) (-101), (byte)72, (byte) (-5)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte) (-14), (byte)57, (byte) (-101), (byte)72, (byte) (-5)}, byteArray0);
      
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)72);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected leading [0-9a-fA-F] character but was 0x");
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expected leading [0-9a-fA-F] character but was 0x");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Expected leading [0-9a-fA-F] character but was 0x", objectArray0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Buffer buffer2 = buffer0.readFrom((InputStream) sequenceInputStream0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(19L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 3274L;
      Pipe pipe0 = new Pipe(3274L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ByteString byteString0 = realBufferedSource0.buffer.sha1();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-66), (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0}, byteArray0);
      
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, 512L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      assertNotNull(pipe0);
      
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 4278190080L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1618L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer1.indexOf((byte) (-50), 9223372036854775807L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(4L);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeUtf8("HmacSHA1");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("HmacSHA1", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      byte[] byteArray1 = new byte[19];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteString byteString0 = ByteString.of(byteArray1);
      assertEquals(19, byteString0.size());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer2.writeIntLe((-1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      hashingSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      
      ByteString byteString0 = buffer2.sha1();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer3.selectPrefix(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(3, options0.size());
      assertEquals((-1), int0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(644L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeUtf8("HmacSHA1");
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1604L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      List<Integer> list0 = buffer2.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      int int0 = 65536;
      Buffer buffer1 = buffer0.writeShortLe(65536);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha256();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      Segment segment0 = buffer1.writableSegment(713);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(segment0);
      
      String string0 = buffer0.readUtf8(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals("", string0);
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      MockFile mockFile0 = new MockFile("6eQ(b1D,=s8~!R'i", "6eQ(b1D,=s8~!R'i");
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/6eQ(b1D,=s8~!R'i/6eQ(b1D,=s8~!R'i", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/6eQ(b1D,=s8~!R'i", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("6eQ(b1D,=s8~!R'i", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      byteArray0[0] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), (-412));
      assertEquals((-412), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (-412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -412
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[15];
      String string0 = "|*H]K[xkso";
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      int int0 = buffer0.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("|*H]K[xkso", 0, (-1040), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1040 < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      realBufferedSink0.flush();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(999999999999999988L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.snapshot((-2191));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=-2191
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeShortLe((-750));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)69;
      OutputStream outputStream0 = realBufferedSource0.buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      String string0 = buffer2.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNull(string0);
      
      boolean boolean0 = buffer0.request(849L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      SegmentPool.byteCount = 60L;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)86;
      buffer0.require((byte) (-78));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.snapshot();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(3274L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)4;
      int int0 = buffer0.read(byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)7, (byte)4}, byteArray0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      hashingSource0.close();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      InputStream inputStream0 = buffer1.inputStream();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(inputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer2.readFrom(inputStream0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotNull(realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.buffer.toString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean1 = buffer1.rangeEquals((long) (byte)10, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(boolean1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer1, buffer0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.md5();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(58L);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      boolean boolean1 = buffer0.request(60L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.clone();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte)70);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeInt((byte)8);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(9223372036854436555L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertEquals(21L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(21L, buffer3.size());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      byte byte0 = (byte)54;
      long long0 = buffer2.indexOf((byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(21L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, long0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertEquals(21L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      int int0 = buffer3.readInt();
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(17L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1174405120, int0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(timeout0);
      
      buffer_UnsafeCursor0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer1);
      
      try { 
        buffer0.require(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeByte(657);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, (-374L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(3L);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)69;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotNull(outputStream0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      ByteString byteString0 = buffer0.snapshot();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertTrue(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer1));
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      
      String string0 = buffer1.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer3));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer4);
      assertNull(string0);
      
      Buffer buffer6 = new Buffer();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer0));
      assertNotNull(buffer6);
      
      String string1 = buffer6.readUtf8();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals("", string1);
      assertTrue(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer0));
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer1);
      assertNotNull(string1);
      
      Buffer buffer7 = buffer5.writeDecimalLong((-72057594037927936L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(18L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(18L, buffer7.size());
      assertFalse(buffer7.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer6));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer4));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer7);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer7, buffer3);
      assertSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer4);
      assertSame(buffer7, buffer2);
      assertNotNull(buffer7);
      
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer0.select(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(19, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertEquals(19, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19, byteString0.size());
      assertEquals(0L, long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      
      long long1 = buffer0.indexOfElement(byteString0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19, byteString0.size());
      assertEquals(0L, long1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Buffer buffer1 = buffer0.writeLong(1508L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      String string1 = buffer1.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0005\uFFFD", string1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.write(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(32L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(32L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927936L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = buffer1.readLongLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(255L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer1.flush();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffe");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotNull(outputStream0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(byteString0);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNull(string0);
      
      String string1 = realBufferedSource0.buffer.readUtf8();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", string1);
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotNull(string1);
      
      Buffer buffer5 = realBufferedSink0.buffer.writeDecimalLong(999999999L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(9L, buffer5.size());
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffe");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteString0.hex();
      assertEquals(4, byteString0.size());
      assertEquals("00000000", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(16L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Pipe pipe0 = new Pipe(16L);
      assertNotNull(pipe0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeDecimalLong(4278190080L);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(12L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8192, byteString0.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(byteString0);
      
      Segment segment0 = buffer0.head;
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Buffer buffer1 = (Buffer)buffer_UnsafeCursor0.buffer.write((Source) buffer0, (-1L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[15];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      long long0 = buffer0.indexOf((byte) (-25));
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = hashingSource0.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " hex=");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Deflater deflater1 = new Deflater();
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0, deflater1.getTotalOut());
      assertEquals(0L, deflater1.getBytesWritten());
      assertTrue(deflater1.needsInput());
      assertEquals(1, deflater1.getAdler());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      long long1 = buffer0.indexOf(byteString0, 100L);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-78);
      byteArray0[7] = (byte)86;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)8;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(4853L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      ByteString byteString0 = buffer2.snapshot();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Pipe pipe0 = new Pipe(2L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      try { 
        buffer0.readUtf8LineStrict(22L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)9;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer0.indexOfElement(byteString0, 1248L);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      ByteString byteString1 = byteString0.sha1();
      assertEquals(4, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = buffer0.select(options0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, options0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        options0.remove((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      realBufferedSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(8L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertNotNull(buffer_UnsafeCursor1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      try { 
        buffer_UnsafeCursor0.buffer.skip(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.writeAll(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-22);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)76, (byte)110, (byte) (-22)}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (long) (byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((short) (-21267));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 2636L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      Pipe pipe0 = new Pipe(248L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2695L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((short)14433, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8(1000000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=1000000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-2081L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'T[+3@_S`LKMQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      long long0 = buffer0.indexOf((byte)38);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer1.writeString("'T[+3@_S`LKMQ", 23, (-4492), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -4492 < 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      Buffer buffer2 = buffer0.writeShort((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      short short1 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short1);
      assertTrue(short1 == short0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSink0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(65533, int0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(9, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        options0.add(byteStringArray0[1]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)20, (byte)108, (byte)0, (byte)97}, byteArray0);
      
      Buffer buffer2 = buffer0.writeLong((-2239L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer0.select(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      String string0 = buffer_UnsafeCursor0.buffer.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("[size=0]", string0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(string0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((-1L), byteString0, (-1), (-2345));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      buffer_UnsafeCursor0.readWrite = false;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-78);
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = byteString0.hex();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", string0);
      assertNotNull(string0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)3;
      byteArray0[8] = (byte)3;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0, (byte)86, (byte)3, (byte)0, (byte)3}, byteArray0);
      
      String string1 = buffer0.readUtf8Line((long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(buffer0, buffer1);
      assertNotNull(string1);
      
      byte byte0 = buffer1.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals((byte) (-78), byte0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0, (byte)86, (byte)3, (byte)0, (byte)3}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Pipe pipe0 = new Pipe(999L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)34, (long) (byte)34);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer2, (-1506L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1506
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      OutputStream outputStream0 = realBufferedSource0.buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotNull(outputStream0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      ByteString byteString0 = buffer1.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(byteString0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotNull(buffer5);
      
      String string0 = buffer5.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNull(string0);
      
      String string1 = realBufferedSink0.buffer.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", string1);
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotNull(string1);
      
      Buffer buffer6 = buffer1.writeDecimalLong(99999999988L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(11L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer1);
      assertNotNull(buffer6);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2676L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString2 = new ByteString((byte[]) null);
      assertNotNull(byteString2);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)24;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)24);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      int int0 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=24 > size=3
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
      
      OutputStream outputStream0 = buffer_UnsafeCursor0.buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(outputStream0);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Segment segment0 = buffer0.writableSegment(8);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertNotNull(realBufferedSource0);
      
      short short0 = buffer0.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((short)0, short0);
      assertSame(buffer0, buffer1);
      
      int int0 = 1073741842;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(1073741842);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 40000012
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(797);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jy%`0P-z.");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Buffer buffer1 = buffer0.writeInt((-2099761788));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff82
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      byte byte0 = (byte)49;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(58L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(88L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      buffer1.skip((-968L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSink0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(outputStream0);
      
      Buffer buffer2 = buffer1.copyTo(outputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer1);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      Buffer buffer2 = buffer0.writeShort((-1));
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSource0);
      
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals((short) (-1), short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint((-1));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer3);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(hashingSink0);
      
      Timeout timeout0 = hashingSink0.timeout();
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(timeout0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      try { 
        realBufferedSink0.buffer.write((Source) buffer2, 1142L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("Lbt\"K8A7u");
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(9L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotNull(byteString0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x4c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteString0.hex();
      assertEquals(7, byteString0.size());
      assertEquals("00000000000000", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      String string1 = byteString0.string(charset0);
      assertEquals(7, byteString0.size());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      String string2 = buffer1.toString();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals("[size=0]", string2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(string2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = buffer1.writeDecimalLong(16711680L);
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((short) (-21267));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(bufferedSink0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeInt(125);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(1707L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      // Undeclared exception!
      try { 
        buffer2.read(buffer0, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShortLe(65536);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Segment segment0 = buffer1.writableSegment(713);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(segment0);
      
      String string0 = buffer0.readUtf8(0L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", string0);
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      
      Buffer buffer2 = buffer1.emitCompleteSegments();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readByteString(736L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size > Integer.MAX_VALUE: ");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater(true);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      buffer2.hashCode();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&&)AxCxM:$^z$#");
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(3282L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer1 = buffer0.writeIntLe(85);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = realBufferedSource0.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(1426063360, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer2 = realBufferedSource1.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint(55296);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      MockFile mockFile0 = new MockFile("6eQ(b1D,=s8~!R'i", "6eQ(b1D,=s8~!R'i");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("6eQ(b1D,=s8~!R'i", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/6eQ(b1D,=s8~!R'i/6eQ(b1D,=s8~!R'i", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/6eQ(b1D,=s8~!R'i", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("6eQ(b1D,=s8~!R'i", (-256), (-412), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -256
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iz{aSsY@d-IX");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer1 = buffer0.writeIntLe(2734);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iz{aSsY@d-IX");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint(55301);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotNull(buffer4);
      
      int int0 = buffer3.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(65533, int0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1506L));
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeUtf8CodePoint(2604);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(19L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Pipe pipe0 = new Pipe(46L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.snapshot();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      Segment segment0 = buffer1.writableSegment(814);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(segment0);
      
      realBufferedSource0.buffer.clear();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.writableSegment(65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeByte(99);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      buffer2.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("O(&", 99, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 99 > 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean0 = buffer0.equals(pipe0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(11L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Pipe pipe0 = new Pipe(18L);
      assertNotNull(pipe0);
      
      Buffer buffer2 = pipe0.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      boolean boolean0 = buffer2.equals(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(boolean0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(11L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Pipe pipe0 = new Pipe(814L);
      assertNotNull(pipe0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      boolean boolean0 = buffer2.equals(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(boolean0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'T[+3@_S`LKgMQ");
      assertFalse(boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      buffer0.hashCode();
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readByteString(1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer buffer2 = buffer0.writeInt(1509);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(hashingSink0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1509);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer3 = buffer0.copyTo((OutputStream) byteArrayOutputStream0);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals("\u0000\u0000\u0000\u0005\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater(102, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'T[+3@_S`LKMQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long1 = buffer0.indexOf((byte)38);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = realBufferedSource2.buffer.writeInt(55);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        realBufferedSource2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=0000003700\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Segment segment0 = buffer0.head;
      assertNull(segment0);
      
      Buffer buffer1 = buffer0.writeInt((-1022));
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      String string0 = buffer0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\u0002", string0);
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(byteString0);
      
      String string1 = byteString0.base64Url();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertEquals("", string1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(string1);
      
      ByteString byteString1 = byteString0.sha1();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertEquals(20, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(byteString1);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeUtf8("\uFFFD\uFFFD\uFFFD\u0002");
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(10L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer3);
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer4);
      
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0.buffer, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflaterSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = realBufferedSink0.buffer.readString(charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("x\uFFFD\u0000\u0000\u0000\uFFFD\uFFFD", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string1 = realBufferedSink0.buffer.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("", string1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string2 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("\u0000", string2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(string2);
      
      long long0 = buffer2.read(buffer1, 65536L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(list0);
      
      Buffer buffer4 = buffer2.writeUtf8("x\uFFFD\u0000\u0000\u0000\uFFFD\uFFFD");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(13L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(13L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long1 = 1508L;
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(buffer1, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.HashingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertNotNull(buffer_UnsafeCursor1);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = buffer0.exhausted();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertNotNull(buffer_UnsafeCursor1);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Buffer buffer1 = buffer0.writeUtf8("Lbt\"K8A7u");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertNotNull(buffer_UnsafeCursor1);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-10);
      byteArray0[4] = (byte)95;
      long long1 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      HashingSource hashingSource2 = HashingSource.md5(realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotNull(hashingSource2);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      String string0 = buffer2.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals("", string0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(string0);
      
      Buffer buffer3 = buffer1.writeDecimalLong(9999999L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(7L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer3);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(7, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeIntLe(10);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = buffer0.readString(charset0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("", string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(string0);
      
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotNull(buffer3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = buffer1.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("", string1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(string1);
      
      Buffer buffer4 = buffer0.writeUtf8("M9;~eQ@+}38ON!%^h");
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(17L, buffer4.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe();
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertNotNull(buffer_UnsafeCursor1);
      
      Buffer buffer5 = new Buffer();
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertNotNull(buffer5);
      
      buffer5.flush();
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.writeAll(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer2 = buffer1.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeUtf8("vU.@HA5.8Pj&{EC");
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(15L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      buffer2.skip((-197L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(15L, buffer1.size());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        buffer1.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=76552e404841352e38506a267b4543\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(19, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer2 = buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      byte byte0 = (byte)117;
      long long1 = buffer_UnsafeCursor0.buffer.indexOf((byte)117, 2803L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer3 = buffer1.writeShort((-1));
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("fxwT,d`Z", (int) (byte)117, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 117
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeIntLe((byte)0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      Buffer buffer4 = realBufferedSink0.buffer.clone();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(4L, buffer4.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer2));
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      Segment segment0 = buffer4.head;
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        buffer0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[5];
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(5, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOf((byte)13, 2803L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer0.writeShort((-1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      short short1 = buffer1.readShort();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer4 = buffer1.write(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertNotNull(buffer4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, int0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      
      Buffer buffer5 = buffer4.writeShortLe(0);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5, byteString0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(6L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(6L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer0);
      assertNotNull(buffer5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(8, options0.size());
      assertNotNull(options0);
      
      int int1 = buffer3.select(options0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(8, options0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = buffer2.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(1, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer5);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(5, byteString2.size());
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer6 = realBufferedSink0.buffer;
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer2));
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotNull(buffer6);
      
      try { 
        buffer5.skip((byte)13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      GzipSink gzipSink0 = new GzipSink(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(gzipSink0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Deflater deflater1 = gzipSink0.deflater();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalOut());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(deflater1, deflater0);
      assertNotNull(deflater1);
      
      deflater1.finish();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalOut());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(deflater1, deflater0);
      
      boolean boolean0 = deflater1.finished();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, deflater1.getTotalIn());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalOut());
      assertFalse(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(deflater1, deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSink0, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertTrue(deflater0.needsInput());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(deflater0, deflater1);
      
      deflaterSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertTrue(deflater0.needsInput());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(deflater0, deflater1);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(1, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOf((byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(1, byteString2.size());
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(7, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(4, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(3L);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(3, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      long long2 = buffer_UnsafeCursor0.resizeBuffer((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long3 = realBufferedSource0.buffer.indexOf(byteString0, 3L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(4, byteString0.size());
      assertEquals((-1L), long3);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertNotSame(byteString0, byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.hmacSha512(byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(4, byteString1.size());
      assertEquals(64, byteString2.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Segment segment0 = buffer0.writableSegment(10);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(6, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      ByteString byteString1 = hashingSource1.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      boolean boolean2 = buffer0.exhausted();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ByteString byteString2 = hashingSink0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertEquals(6, byteString0.size());
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      boolean boolean3 = buffer0.rangeEquals(9223372036854775807L, byteString1, (int) (byte) (-86), 0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6, byteString0.size());
      assertEquals(16, byteString1.size());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-86), (byte) (-1), (byte) (-86), (byte)32, (byte)101}, byteArray0);
      
      buffer0.flush();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      
      long long1 = buffer0.indexOfElement(byteString0);
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aZHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aZHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Segment segment0 = buffer0.writableSegment(6);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927902L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      buffer1.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeInt(413);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(413);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)16;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(20L);
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertEquals(20, buffer_UnsafeCursor0.end);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer((byte)16);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, long1);
      assertFalse(long1 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      Buffer buffer2 = buffer0.writeShort((-1));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      short short0 = buffer2.readShortLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals((short) (-1), short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      boolean boolean0 = buffer1.equals(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      
      Buffer buffer4 = buffer1.writeUtf8CodePoint((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(1L, buffer4.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha256();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        HashingSource.sha256((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 1000000000000L;
      Pipe pipe0 = new Pipe(1000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("$g");
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("$g", (-3648), (-3648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -3648
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      buffer0.head = null;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(3, byteString2.size());
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(3L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(3, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer0.writeUtf8("");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(999999L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      short short0 = buffer0.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((short)14649, short0);
      assertSame(buffer0, buffer1);
      
      String string0 = buffer1.readUtf8();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals("9999", string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(string0);
      
      Buffer buffer2 = buffer0.writeShort((short)14649);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thread interrupted");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Segment segment0 = buffer0.writableSegment(6);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(segment0);
      
      segment0.limit = 4815;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927902L));
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-4815L), buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-4815L), buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = 2L;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-4815L), buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-4815L), buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-4815L), buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-4815L), buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-4815L), buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-4815L), buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-4815L), buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-4815L), buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(2L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-26);
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)108, (byte) (-4), (byte) (-68), (byte)45, (byte)1, (byte) (-26)}, byteArray0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'T[+3@_S`LKgMQ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'T[+3@_S`LKgMQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater1 = new Deflater();
      assertEquals(1, deflater1.getAdler());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0, deflater1.getTotalOut());
      assertEquals(0L, deflater1.getBytesWritten());
      assertTrue(deflater1.needsInput());
      assertEquals(0, deflater1.getTotalIn());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotNull(deflater1);
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream((byte)1);
      assertEquals(0, byteArrayOutputStream1.size());
      assertEquals("", byteArrayOutputStream1.toString());
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotNull(byteArrayOutputStream1);
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) byteArrayOutputStream1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals("\uFFFDl\uFFFD\uFFFD-\u0001\uFFFD", byteArrayOutputStream1.toString());
      assertEquals(7, byteArrayOutputStream1.size());
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
      
      long long0 = buffer2.indexOf((byte) (-68));
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals("\uFFFDl\uFFFD\uFFFD-\u0001\uFFFD", byteArrayOutputStream1.toString());
      assertEquals(7, byteArrayOutputStream1.size());
      assertEquals(3L, long0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertNotNull(buffer4);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals("\uFFFDl\uFFFD\uFFFD-\u0001\uFFFD", byteArrayOutputStream1.toString());
      assertEquals(7, byteArrayOutputStream1.size());
      assertEquals(65533, int0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      
      Integer integer0 = new Integer(2011);
      assertEquals(2011, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      long long1 = buffer4.readAll(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(long1 == long0);
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)108, (byte) (-4), (byte) (-68), (byte)45, (byte)1, (byte) (-26)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertNotNull(buffer_UnsafeCursor1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertNotNull(buffer_UnsafeCursor2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      OutputStream outputStream0 = buffer_UnsafeCursor1.buffer.outputStream();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertNotNull(outputStream0);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals((-1), int0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(3689);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer_UnsafeCursor2.buffer.writeDecimalLong((-1L));
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals(0L, buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertNotNull(buffer2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(list0);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      assertFalse(fileSystemHandling3.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling3.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling3.equals((Object)fileSystemHandling2));
      assertNotNull(fileSystemHandling3);
      
      Buffer buffer3 = buffer_UnsafeCursor2.buffer.writeInt(101);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(9L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals(0L, buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertNotNull(buffer3);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotNull(buffer4);
      
      int int1 = buffer_UnsafeCursor1.buffer.readUtf8CodePoint();
      assertEquals(3689, int1);
      assertFalse(int1 == int0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      OutputStream outputStream1 = buffer4.outputStream();
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(outputStream1.equals((Object)outputStream0));
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(outputStream1, outputStream0);
      assertNotNull(outputStream1);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.buffer.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      ByteString byteString1 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer1));
      assertNotNull(buffer3);
      
      SegmentPool.byteCount = 999999999999999988L;
      ByteString byteString2 = buffer1.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0, byteString2.size());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(realBufferedSink0, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotNull(hashingSink1);
      
      String string0 = byteString0.utf8();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotNull(string0);
      
      String string1 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNull(string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertNotNull(buffer_UnsafeCursor1);
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotNull(buffer4);
      
      String string2 = byteString0.base64Url();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals("1B2M2Y8AsgTpgAmY7PhCfg==", string2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotNull(string2);
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.writeUtf8("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(29L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer5);
      
      int int0 = buffer5.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(26L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(65533, int0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte byte0 = buffer1.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((byte)0, byte0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'T[+3@_S`LKMQ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'T[+3@_S`LKMQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long1 = buffer0.indexOf((byte)38);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotNull(realBufferedSource2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        realBufferedSource2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource0);
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer_UnsafeCursor0.buffer, inflater0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(inflaterSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer2 = buffer0.writeIntLe(1715);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSource1.buffer.writeDecimalLong(1715);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotNull(buffer3);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertNotNull(realBufferedSink0);
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000000000000000L);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      long long0 = buffer1.readAll(bufferedSink0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, long0);
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, 45, (-3590), charset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean0 = buffer1.rangeEquals((long) (byte)0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong(645L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      long long0 = buffer2.indexOfElement(byteString0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1586);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotNull(byteArrayOutputStream1);
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
      
      long long1 = buffer2.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(645L, long1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0, 1000000000000000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      
      ByteString byteString1 = hashingSink1.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink0.buffer, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotNull(hashingSource0);
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSink0.buffer, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer1 = buffer0.writeIntLe(1715);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource1.buffer.writeDecimalLong(1000000000000000L);
      assertFalse(buffer2.exhausted());
      assertEquals(16L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotNull(buffer2);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1715);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(bufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertNotNull(realBufferedSink1);
      
      Buffer buffer3 = realBufferedSink1.buffer;
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      BufferedSink bufferedSink1 = realBufferedSink1.writeDecimalLong((-4813L));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(bufferedSink1.equals((Object)bufferedSink0));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(bufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink1);
      assertNotSame(bufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotNull(bufferedSink1);
      
      long long1 = realBufferedSource1.buffer.readAll(buffer3);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(21L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(16L, long1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(bufferedSink0.equals((Object)bufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertFalse(realBufferedSink0.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(bufferedSink0, bufferedSink1);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotNull(list0);
      
      try { 
        realBufferedSink1.buffer.skip(117L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((short) (-21267));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(bufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeInt(125);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer2);
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals((-21267L), long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer0.snapshot((int) (short) (-21267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-21267
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer0.writeUtf8("Lbt\"K8A7u");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, buffer1.size());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.flush();
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(22L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(22L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(22L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource1);
      
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString1.size());
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(byteString1);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, 17L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1586);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream1.size());
      assertEquals("", byteArrayOutputStream1.toString());
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotNull(byteArrayOutputStream1);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      Buffer buffer4 = buffer3.writeTo((OutputStream) byteArrayOutputStream1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, byteArrayOutputStream1.size());
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer4);
      
      Buffer buffer5 = buffer3.writeUtf8CodePoint((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(22L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertEquals(1L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer4);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer5);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Buffer buffer6 = new Buffer();
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer5));
      assertNotNull(buffer6);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x4c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(51L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(8, int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(8192, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(byteString0);
      
      buffer2.skip((-181L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(byteString1);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer1, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString1.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(hashingSource1);
      
      ByteString byteString2 = new ByteString(buffer_UnsafeCursor0.data);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(8192, byteString2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(byteString2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(buffer_UnsafeCursor0.data);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(bufferedSink0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha1(buffer2, byteString0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertEquals(8192, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(hashingSource2);
      
      ByteString byteString3 = hashingSource2.hash();
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertEquals(8192, byteString0.size());
      assertEquals(20, byteString3.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertNotNull(byteString3);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " > ");
      assertFalse(boolean0);
      
      Buffer buffer3 = (Buffer)buffer0.write((Source) realBufferedSink0.buffer, (-181L));
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(buffer3);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = hashingSink0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      Buffer buffer4 = buffer0.writeHexadecimalUnsignedLong(1412L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(3L, buffer4.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer5 = realBufferedSource0.buffer.clone();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer3));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer5);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Buffer buffer6 = buffer3.writeByte((-2821));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer6.exhausted());
      assertEquals(1L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotNull(buffer6);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("HashingSink(okio.Buffer@0000000001)");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      Buffer buffer7 = buffer5.writeByte((-2821));
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(1L, buffer7.size());
      assertFalse(buffer7.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(36L, buffer1.size());
      assertEquals(1L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer7);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(36L, buffer1.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertNotNull(list0);
      
      ByteString byteString1 = buffer3.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(36, byteString1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer7));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer2);
      assertNotNull(byteString1);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer7));
      assertNotNull(realBufferedSink1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string1 = byteString0.utf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~", string1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotNull(string1);
      
      String string2 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("584", string2);
      assertTrue(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotNull(string2);
      
      long long0 = buffer1.read(realBufferedSink1.buffer, 10000000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer5));
      assertTrue(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer7));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer2);
      
      List<Integer> list1 = buffer5.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertTrue(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(list1.equals((Object)list0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer6));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertNotSame(list1, list0);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotNull(list1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertNotNull(buffer_UnsafeCursor1);
      
      Buffer buffer8 = buffer_UnsafeCursor1.buffer;
      assertNull(buffer8);
      
      Buffer buffer9 = buffer_UnsafeCursor0.buffer.writeUtf8("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(29L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer9.exhausted());
      assertEquals(29L, buffer9.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer7));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer9);
      assertSame(buffer9, buffer3);
      assertNotSame(buffer9, buffer2);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer7);
      assertSame(buffer9, buffer6);
      assertSame(buffer9, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer9);
      
      int int0 = buffer9.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(26L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer9.exhausted());
      assertEquals(26L, buffer9.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(65533, int0);
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer0));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer7));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer9);
      assertSame(buffer9, buffer3);
      assertNotSame(buffer9, buffer2);
      assertNotSame(buffer9, buffer0);
      assertNotSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer4);
      assertNotSame(buffer9, buffer7);
      assertSame(buffer9, buffer6);
      assertSame(buffer9, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString2 = realBufferedSource0.buffer.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(26L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0, byteString2.size());
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer7));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer9);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotNull(byteString2);
      
      int int1 = buffer3.readIntLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(22L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals((-1111494883), int1);
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer5));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(int1 == int0);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer5);
      assertSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer9);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer2);
      
      // Undeclared exception!
      try { 
        buffer3.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-968L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Pipe pipe0 = new Pipe(1678L);
      assertNotNull(pipe0);
      
      Pipe pipe1 = new Pipe(1678L);
      assertFalse(pipe1.equals((Object)pipe0));
      assertNotNull(pipe1);
      
      long long0 = buffer1.indexOf((byte)4, 1678L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeShort(6);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("-968\u0000\u0006", string0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(string0);
      
      ByteString byteString0 = buffer2.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0, byteString0.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(byteString0);
      
      Pipe pipe2 = new Pipe(6);
      assertFalse(pipe2.equals((Object)pipe1));
      assertFalse(pipe2.equals((Object)pipe0));
      assertNotNull(pipe2);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertNotNull(buffer_UnsafeCursor1);
      
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotNull(buffer3);
      
      Buffer buffer4 = buffer3.writeDecimalLong((-1L));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1), int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer5 = new Buffer();
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertNotNull(buffer5);
      
      // Undeclared exception!
      try { 
        buffer4.write(buffer1, (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(19, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19, byteString0.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      
      long long1 = buffer0.indexOfElement(byteString0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19, byteString0.size());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      List<Integer> list0 = buffer3.segmentSizes();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSink0);
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotNull(buffer4);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotNull(buffer5);
      
      Buffer buffer6 = buffer5.writeDecimalLong(1095216660480L);
      assertEquals(13L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(13L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer6);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertSame(buffer6, buffer5);
      assertNotSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertNotNull(buffer6);
      
      byte[] byteArray1 = buffer0.readByteArray(0L);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Buffer buffer7 = buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer7.exhausted());
      assertEquals(0L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(19, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD", byteArrayOutputStream0.toString());
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer3));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer4);
      assertSame(buffer7, buffer1);
      assertSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer6);
      assertSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer3);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer7);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Pipe pipe0 = new Pipe(3274L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeIntLe((byte)5);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      Segment segment0 = realBufferedSink0.buffer.head;
      assertNotNull(segment0);
      
      buffer0.head = segment0;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      realBufferedSink0.buffer.readFully(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[2] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer2, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5}, byteArray0);
      
      Segment segment1 = segment0.pop();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNull(segment1);
      
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(3, byteString0.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5}, byteArray0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha256(buffer2, byteString1);
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(3, byteString0.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(hashingSource2);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      String string1 = realBufferedSource0.buffer.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertNull(string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Buffer buffer2 = realBufferedSource0.buffer;
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      String string2 = hashingSource0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(string2);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Buffer buffer3 = realBufferedSource0.buffer.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[19];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = buffer1.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertEquals((short)0, short0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      
      String string0 = realBufferedSource0.buffer.readUtf8();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertEquals("", string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(string0);
      
      Buffer buffer3 = buffer2.writeShort((-330));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      Buffer buffer4 = buffer0.clone();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(17L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(17L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      short short1 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short1);
      assertFalse(short1 == short0);
      
      Buffer buffer5 = buffer4.writeByte(1073741824);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(18L, buffer4.size());
      assertEquals(17L, buffer4.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(18L, buffer5.size());
      assertEquals(17L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotNull(buffer5);
      
      Buffer buffer6 = buffer5.writeByte(3241);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(19L, buffer4.size());
      assertEquals(17L, buffer4.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(17L, buffer5.completeSegmentByteCount());
      assertEquals(19L, buffer5.size());
      assertEquals(17L, buffer6.completeSegmentByteCount());
      assertEquals(19L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertNotNull(buffer6);
      
      ByteString byteString0 = buffer6.readByteString();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(19, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer6));
      assertNotNull(realBufferedSink0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      String string1 = byteString0.utf8();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(19, byteString0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertNotNull(string1);
      
      String string2 = buffer0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotNull(string2);
      
      long long0 = realBufferedSource0.buffer.read(buffer4, 10000000000L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(2L, long0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer6));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      
      List<Integer> list0 = buffer6.segmentSizes();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(2L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(2L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer1);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer5);
      assertNotNull(list0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer7 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer7);
      
      Buffer buffer8 = buffer4.writeUtf8("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer8.exhausted());
      assertEquals(19L, buffer8.size());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(19L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer6));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertNotSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer8, buffer0);
      assertSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer3);
      assertSame(buffer8, buffer4);
      assertSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer2);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer8);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer6);
      assertNotNull(buffer8);
      
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      long long0 = 100000000000000L;
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000000L);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString(2L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(2, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(2, byteString0.size());
      assertEquals(0L, long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = byteString0.toString();
      assertEquals(2, byteString0.size());
      assertEquals("[hex=0000]", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(58L);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer0.indexOfElement(byteString0, 1248L);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hex=0000]");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)23);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      
      long long1 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(88L, long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.snapshot(5484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=5484
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000000L);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer3 = realBufferedSource0.buffer.writeIntLe((-2014));
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      long long0 = 2L;
      ByteString byteString0 = realBufferedSource0.readByteString(2L);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotNull(byteString0);
      
      long long1 = buffer3.indexOfElement(byteString0);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(15L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      
      short short0 = buffer2.readShortLe();
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((short)12337, short0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      
      String string0 = buffer1.readUtf8();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals("", string0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotNull(string0);
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      // Undeclared exception!
      try { 
        buffer3.readUtf8Line(1624L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1623 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aHJ`k5JgVH~Een");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Buffer buffer1 = buffer0.writeLong(100000000020L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString byteString0 = buffer1.sha512();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong(100000000020L);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer2);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer3);
      
      // Undeclared exception!
      try { 
        buffer3.readUtf8((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(outputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1, int0);
      assertSame(buffer0, buffer1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(8192, byteString0.size());
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(byteString0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(buffer2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer3 = buffer1.writeInt(55);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(4, int1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertEquals(1, buffer_UnsafeCursor0.start);
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(5, buffer_UnsafeCursor0.end);
      
      List<Integer> list1 = buffer3.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(5L, buffer3.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(list1.equals((Object)list0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int2 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, int2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      
      int int3 = buffer3.hashCode();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.size());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string0 = buffer3.readUtf8(1L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals("\u0000", string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean2 = buffer_UnsafeCursor0.buffer.rangeEquals((-1510L), byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192, byteString0.size());
      assertFalse(boolean2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertEquals(1, buffer_UnsafeCursor0.start);
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(5, buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000000L);
      assertEquals(15L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(15L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeDecimalLong((-1611L));
      assertFalse(buffer0.exhausted());
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(20L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      String string0 = buffer1.readUtf8();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals("", string0);
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = buffer2.readDecimalLong();
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(100000000000000L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotNull(buffer4);
      
      String string1 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("-1611", string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(string1.equals((Object)string0));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotNull(string1);
      
      Buffer buffer5 = buffer2.writeHexadecimalUnsignedLong((-2014));
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(16L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer5);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeLong(51L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals((-1), int0);
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals(51L, byteString0, (-1), (-1));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertFalse(boolean0);
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotNull(realBufferedSource0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotNull(realBufferedSource1);
      
      Buffer buffer4 = realBufferedSource1.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      Buffer buffer5 = realBufferedSource0.buffer.writeUtf8CodePoint(57347);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotNull(buffer5);
      
      Buffer buffer6 = new Buffer();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer4));
      assertNotNull(buffer6);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Buffer buffer7 = realBufferedSource1.buffer;
      assertEquals(0L, buffer7.size());
      assertTrue(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertTrue(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer3));
      assertTrue(buffer7.equals((Object)buffer6));
      assertTrue(buffer7.equals((Object)buffer1));
      assertNotSame(buffer7, buffer5);
      assertSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer0);
      assertNotNull(buffer7);
      
      Buffer buffer8 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer8.size());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertTrue(buffer8.exhausted());
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer6));
      assertTrue(buffer1.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer3));
      assertTrue(buffer8.equals((Object)buffer4));
      assertTrue(buffer8.equals((Object)buffer7));
      assertTrue(buffer8.equals((Object)buffer6));
      assertTrue(buffer8.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer6);
      assertSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer0);
      assertNotNull(buffer8);
      
      OutputStream outputStream0 = buffer6.outputStream();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer7));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer8));
      assertNotSame(buffer6, buffer8);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer7);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer0);
      assertNotNull(outputStream0);
      
      Buffer buffer9 = new Buffer();
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(0L, buffer9.size());
      assertTrue(buffer9.exhausted());
      assertTrue(buffer9.equals((Object)buffer0));
      assertTrue(buffer9.equals((Object)buffer8));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer5));
      assertTrue(buffer9.equals((Object)buffer1));
      assertTrue(buffer9.equals((Object)buffer6));
      assertTrue(buffer9.equals((Object)buffer7));
      assertTrue(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer3));
      assertNotNull(buffer9);
      
      Buffer buffer10 = realBufferedSource1.buffer;
      assertEquals(0L, buffer10.size());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertTrue(buffer10.equals((Object)buffer6));
      assertTrue(buffer10.equals((Object)buffer0));
      assertTrue(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer3));
      assertTrue(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer2));
      assertTrue(buffer10.equals((Object)buffer9));
      assertFalse(buffer10.equals((Object)buffer5));
      assertNotSame(buffer10, buffer9);
      assertSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer3);
      assertSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer5);
      assertNotNull(buffer10);
      
      long long0 = buffer10.read(buffer8, 197L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer8.size());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertTrue(buffer8.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer10.size());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer9));
      assertTrue(buffer0.equals((Object)buffer8));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer7));
      assertTrue(buffer0.equals((Object)buffer10));
      assertTrue(buffer0.equals((Object)buffer6));
      assertTrue(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer6));
      assertTrue(buffer1.equals((Object)buffer7));
      assertTrue(buffer8.equals((Object)buffer10));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer3));
      assertTrue(buffer8.equals((Object)buffer4));
      assertTrue(buffer8.equals((Object)buffer9));
      assertTrue(buffer8.equals((Object)buffer7));
      assertTrue(buffer8.equals((Object)buffer6));
      assertTrue(buffer8.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer7));
      assertFalse(buffer3.equals((Object)buffer6));
      assertFalse(buffer3.equals((Object)buffer10));
      assertFalse(buffer3.equals((Object)buffer9));
      assertFalse(buffer3.equals((Object)buffer8));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer5));
      assertTrue(buffer10.equals((Object)buffer6));
      assertTrue(buffer10.equals((Object)buffer0));
      assertTrue(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer3));
      assertTrue(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer2));
      assertTrue(buffer10.equals((Object)buffer9));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer10);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertNotSame(buffer8, buffer9);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer6);
      assertSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer7);
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer10);
      assertNotSame(buffer3, buffer7);
      assertNotSame(buffer3, buffer6);
      assertNotSame(buffer3, buffer10);
      assertNotSame(buffer3, buffer9);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer8);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer10, buffer9);
      assertSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer3);
      assertSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer5);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      
      buffer_UnsafeCursor0.close();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.equals((Object)buffer9));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer10));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer6));
      assertTrue(buffer1.equals((Object)buffer7));
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer8);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer9);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer6);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer10);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      OutputStream outputStream1 = buffer6.outputStream();
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.equals((Object)buffer10));
      assertFalse(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer7));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer2));
      assertTrue(buffer6.equals((Object)buffer9));
      assertTrue(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer8));
      assertFalse(outputStream1.equals((Object)outputStream0));
      assertNotSame(buffer6, buffer8);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer9);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer10);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer7);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer0);
      assertNotSame(outputStream1, outputStream0);
      assertNotNull(outputStream1);
      
      Buffer buffer11 = new Buffer();
      assertEquals(0L, buffer11.size());
      assertEquals(0L, buffer11.completeSegmentByteCount());
      assertTrue(buffer11.exhausted());
      assertTrue(buffer11.equals((Object)buffer10));
      assertFalse(buffer11.equals((Object)buffer5));
      assertTrue(buffer11.equals((Object)buffer7));
      assertTrue(buffer11.equals((Object)buffer6));
      assertTrue(buffer11.equals((Object)buffer4));
      assertFalse(buffer11.equals((Object)buffer3));
      assertTrue(buffer11.equals((Object)buffer0));
      assertTrue(buffer11.equals((Object)buffer8));
      assertFalse(buffer11.equals((Object)buffer2));
      assertTrue(buffer11.equals((Object)buffer9));
      assertTrue(buffer11.equals((Object)buffer1));
      assertNotNull(buffer11);
      
      // Undeclared exception!
      try { 
        buffer1.readByteString(197L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=197
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      long long1 = 3L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aZHJ`k5JgVH~Een");
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu4:aZHJ`k5JgVH~Een");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Segment segment0 = buffer0.writableSegment(6);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927902L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      buffer1.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeInt(413);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSink0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(413);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer1, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflaterSink0);
      
      String string0 = deflaterSink0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals("DeflaterSink(buffer([hex=ff000000000000220000019d]))", string0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(string0);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(20L, buffer1.size());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      byte[] byteArray1 = buffer0.readByteArray();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(3, byteString0.size());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Deflater deflater1 = gzipSink0.deflater();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, deflater1.getTotalOut());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0L, deflater1.getBytesWritten());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0, deflater1.getTotalIn());
      assertTrue(deflater1.needsInput());
      assertFalse(deflater1.equals((Object)deflater0));
      assertNotSame(deflater1, deflater0);
      assertNotNull(deflater1);
      
      DeflaterSink deflaterSink0 = new DeflaterSink(gzipSink0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotNull(deflaterSink0);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(26L, buffer0.size());
      assertTrue(deflater0.needsInput());
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotSame(deflater0, deflater1);
      
      deflaterSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(26L, buffer0.size());
      assertTrue(deflater0.needsInput());
      assertFalse(deflater0.equals((Object)deflater1));
      assertNotSame(deflater0, deflater1);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer0.head = segment0;
      assertFalse(buffer0.exhausted());
      assertEquals(26L, buffer0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      int int0 = (-1073741823);
      Buffer buffer2 = buffer1.writeInt((-1073741823));
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        buffer0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertNotNull(buffer_UnsafeCursor1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readUnsafe(buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertNotNull(buffer_UnsafeCursor2);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeUtf8CodePoint((-1));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertNotNull(buffer1);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(outputStream0);
      
      int int0 = buffer_UnsafeCursor2.next();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1, int0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals(1, buffer_UnsafeCursor2.end);
      assertEquals(0L, buffer_UnsafeCursor2.offset);
      assertEquals(0, buffer_UnsafeCursor2.start);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor2.data);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(8192, byteString1.size());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals(1, buffer_UnsafeCursor2.end);
      assertEquals(0L, buffer_UnsafeCursor2.offset);
      assertEquals(0, buffer_UnsafeCursor2.start);
      assertNotNull(byteString1);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOf(byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(8192, byteString1.size());
      assertEquals((-1L), long0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals(1, buffer_UnsafeCursor2.end);
      assertEquals(0L, buffer_UnsafeCursor2.offset);
      assertEquals(0, buffer_UnsafeCursor2.start);
      
      Buffer buffer2 = buffer1.writeUtf8CodePoint(3);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.writeDecimalLong(3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(3L, buffer3.size());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertNotNull(buffer3);
      
      List<Integer> list0 = buffer2.segmentSizes();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Buffer buffer4 = buffer_UnsafeCursor2.buffer;
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(3L, buffer4.size());
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotNull(buffer4);
      
      Buffer buffer5 = buffer1.writeInt((-1));
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(7L, buffer5.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer4);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer5);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertNotNull(buffer5);
      
      Segment segment0 = new Segment(buffer_UnsafeCursor1.data, 0, 0, false, true);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertNotNull(segment0);
      
      buffer5.head = segment0;
      assertFalse(buffer5.exhausted());
      assertEquals(7L, buffer5.size());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotNull(buffer1);
      
      long long0 = 99999999999999L;
      Buffer buffer2 = buffer0.writeDecimalLong(99999999999999L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(14, byteString0.size());
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(14, byteString0.size());
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertNotNull(buffer_UnsafeCursor0);
      
      buffer_UnsafeCursor0.offset = (long) (byte)16;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(20L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      
      long long1 = new Integer(20);
      assertEquals(20, long1);
      assertFalse(long1 == long0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(byteString0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte)16);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(21L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected leading [0-9a-fA-F] character but was 0x");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(buffer3);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Expected leading [0-9a-fA-F] character but was 0x");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertNotNull(printStream0);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeTo((OutputStream) printStream0, 20);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(1L, buffer4.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(16, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(20, buffer_UnsafeCursor0.end);
      assertEquals(16L, buffer_UnsafeCursor0.offset);
      assertNotNull(buffer4);
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertNotNull(buffer5);
      
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[15];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|*H]K[xkso");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      long long0 = buffer0.indexOf((byte) (-25));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(15, byteString0.size());
      assertNotNull(byteString0);
      
      int int0 = byteString0.indexOf(byteArray0, (-1));
      assertEquals(15, byteString0.size());
      assertEquals(0, int0);
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(hashingSource1);
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertNotNull(gzipSink0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      int int1 = buffer1.selectPrefix(options0);
      assertEquals(2, options0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Deflater deflater0 = gzipSink0.deflater();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertSame(buffer0, buffer1);
      assertNotNull(deflater0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-25);
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte) (-25);
      byteArray1[0] = (byte) (-25);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byteArray1[6] = (byte) (-25);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(buffer1, buffer0);
      assertNotNull(hashingSink0);
      
      gzipSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(30L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertEquals(15, byteString1.size());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      // Undeclared exception!
      try { 
        buffer1.readAll(hashingSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      Buffer buffer1 = buffer0.writeString("", charset0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("", 52, 4172, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 4172 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Segment segment0 = buffer0.writableSegment(30);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(segment0);
      
      segment0.pos = 30;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Segment segment1 = segment0.sharedCopy();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(segment1.equals((Object)segment0));
      assertNotSame(segment0, segment1);
      assertNotSame(segment1, segment0);
      assertNotNull(segment1);
      
      Buffer buffer1 = buffer0.writeLong((-72057594037927936L));
      assertFalse(buffer0.exhausted());
      assertEquals(30L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(30L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = buffer1.readLongLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer1.flush();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeInt(440);
      assertFalse(buffer0.exhausted());
      assertEquals(30L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(30L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(30L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(30L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(30L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotNull(hashingSink0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)6;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)79;
      Pipe pipe0 = new Pipe((byte)6);
      assertNotNull(pipe0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(30L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(30L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(realBufferedSink0);
      
      // Undeclared exception!
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.buffer.writeDecimalLong(99999999999999999L);
      boolean boolean0 = realBufferedSource0.closed;
      realBufferedSource0.buffer.writeUtf8("@");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(99999999999970L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = realBufferedSource0.readByteString(2L);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      buffer0.segmentSizes();
      HashingSink.sha1(buffer2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(101);
      Deflater deflater0 = new Deflater();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      deflater0.reset();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSource0.buffer, deflater0);
      deflaterSink0.close();
      buffer1.readAndWriteUnsafe();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      gzipSink0.flush();
      buffer0.buffer();
      Buffer buffer3 = new Buffer();
      buffer3.readByteString();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      buffer0.write(byteArray0);
      OutputStream outputStream0 = buffer0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      Buffer buffer1 = buffer0.copyTo(outputStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = new Buffer();
      buffer1.snapshot();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      hashingSource0.delegate();
      GzipSource gzipSource0 = new GzipSource(realBufferedSource1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "thread interrupted");
      Segment segment0 = buffer0.writableSegment(6);
      segment0.limit = 6;
      SegmentPool.next = segment0;
      buffer0.flush();
      Buffer buffer1 = buffer0.writeLongLe(6);
      Buffer buffer2 = buffer1.writeShortLe(16);
      Buffer buffer3 = buffer0.writeInt(413);
      buffer0.segmentSizes();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GzipSink gzipSink1 = new GzipSink(buffer3);
      Deflater deflater0 = new Deflater();
      Buffer buffer4 = buffer0.writeInt(6);
      buffer0.segmentSizes();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      Deflater deflater1 = new Deflater();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thread interrupted");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer();
      Buffer buffer5 = new Buffer();
      buffer3.writeUtf8CodePoint(54);
      buffer4.readUtf8Line(8L);
      buffer2.writeLong(54);
  }
}
