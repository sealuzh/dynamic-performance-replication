/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:18:13 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2988, (-969), fieldTypeLong0, 1672L, 1672L, byteArray0, byteOrder0, 2988);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2988, tiffField0.getTag());
      assertEquals((-969), tiffField0.getDirectoryType());
      assertEquals(2988, tiffField0.getSortHint());
      assertEquals(1672L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(6688, tiffField0.getBytesLength());
      assertEquals(1672, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)1;
      byteArray0[0] = (byte) (-4);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2318, 2318, fieldTypeShort0, 2318, (-1L), byteArray0, byteOrder0, 1114);
      tiffField0.getValueDescription();
      FieldTypeShort fieldTypeShort1 = FieldType.SSHORT;
      assertSame(fieldTypeShort1, fieldTypeShort0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(33, 33, fieldTypeByte0, 1111L, 1111L, byteArray0, byteOrder0, 33);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("33 (0x21: Unknown Tag): ", string0);
      assertEquals(33, tiffField0.getSortHint());
      assertEquals(33, tiffField0.getDirectoryType());
      assertEquals(1111, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 1, fieldTypeByte0, 1, (-146L), byteArray0, byteOrder1, 4179);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntValue();
      int int0 = Double.BYTES;
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals((-146), tiffField0.getOffset());
      assertNull(tiffElement0);
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(4179, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField((byte)114, (byte)114, fieldTypeRational0, (byte)114, 1L, byteArray0, byteOrder0, (-1540));
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-1540), tiffField0.getSortHint());
      assertEquals(114, tiffField0.getTag());
      assertEquals(114, tiffField0.getDirectoryType());
      assertNotNull(tiffElement0);
      assertEquals(1L, tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-118), (-486), fieldTypeByte0, 256L, (-3779L), byteArray0, byteOrder0, (-118));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-486), (-486));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertNotNull(string0);
      assertEquals((-3779), tiffField0.getOffset());
      assertEquals((-486), tiffField0.getDirectoryType());
      assertEquals((-118), tiffField0.getSortHint());
      assertEquals((-118), tiffField0.getTag());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: SByte", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(520, 520, fieldTypeAscii0, 520, 3351L, byteArray0, byteOrder0, 914);
      String string0 = tiffField0.getStringValue();
      assertNotNull(string0);
      assertEquals(520, tiffField0.getBytesLength());
      assertEquals(914, tiffField0.getSortHint());
      assertEquals(520, tiffField0.getTag());
      assertEquals(3351, tiffField0.getOffset());
      assertEquals(520, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-649), (-649), fieldTypeAscii0, 0L, (-649), byteArray0, byteOrder0, (byte)22);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[3] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(50, (byte)72, fieldTypeByte0, (byte)72, (byte)0, byteArray0, byteOrder0, 2042);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2042, tiffField0.getSortHint());
      assertEquals(72, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(72, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((byte)2, 2692, fieldTypeByte0, 0L, 2066L, byteArray0, (ByteOrder) null, (byte)2);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@3ab5b25 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[297];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(798, 798, fieldTypeDouble0, 798, (-649), byteArray0, byteOrder2, 798);
      tiffField0.getDoubleArrayValue();
      assertEquals(798, tiffField0.getTag());
      assertEquals(798, tiffField0.getSortHint());
      assertEquals(6384, tiffField0.getBytesLength());
      assertEquals(798, tiffField0.getDirectoryType());
      assertEquals((-649), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2, 2, fieldTypeDouble0, 2, 2, byteArray0, byteOrder0, 2);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@4096d1f9 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (-427), fieldTypeByte0, 1, 0, byteArray0, byteOrder0, (-427));
      String string0 = tiffField0.getValueDescription();
      assertEquals((-427), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(0, tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals((-427), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1393, 2280, (FieldType) null, 0, 2280, byteArray0, byteOrder0, 1393);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(1039, 798);
      tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(2280, tiffField0.getOffset());
      assertEquals(1393, tiffField0.getTag());
      assertEquals(1393, tiffField0.getSortHint());
      assertEquals(2280, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[157];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder4 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField((byte) (-8), (-639), fieldTypeShort0, (-2147483648L), 124L, byteArray0, byteOrder2, 788);
      assertEquals(0, tiffField0.getBytesLength());
      
      tiffField0.getDoubleArrayValue();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-639), tiffField0.getDirectoryType());
      assertEquals(124, tiffField0.getOffset());
      assertEquals((-8), tiffField0.getTag());
      assertEquals(788, tiffField0.getSortHint());
      assertNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(37388, 265, fieldTypeShort0, 95, 95, byteArray0, byteOrder0, (-664));
      ByteOrder.nativeOrder();
      int int0 = Pattern.MULTILINE;
      Byte byte0 = new Byte((byte) (-37));
      System.setCurrentTimeMillis(1L);
      tiffField0.getDoubleArrayValue();
      assertEquals(37388, tiffField0.getTag());
      assertEquals(95, tiffField0.getOffset());
      assertEquals((-664), tiffField0.getSortHint());
      assertEquals(265, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[22];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte) (-35), (byte) (-35), fieldTypeShort0, 1976L, (byte) (-35), byteArray0, byteOrder0, 41487);
      long long0 = new Integer(41487);
      int int0 = new Integer(41487);
      tiffField0.getCount();
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int1);
      assertEquals(41487, tiffField0.getSortHint());
      assertEquals((-35), tiffField0.getTag());
      assertEquals((-35), tiffField0.getOffset());
      assertEquals((-35), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField((byte) (-35), (byte) (-35), fieldTypeByte0, 2744L, 2744L, byteArray0, byteOrder0, (byte) (-35));
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@4f993b6 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(36, (-1717986917), fieldTypeRational0, 255L, 1279L, byteArray0, byteOrder0, 32823);
      tiffField0.getIntArrayValue();
      assertEquals(1279, tiffField0.getOffset());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(32823, tiffField0.getSortHint());
      assertEquals(36, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField(50, 32998, fieldTypeRational0, 50, 50, byteArray0, byteOrder0, (-1));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(0, int0);
      assertEquals(50, tiffField0.getTag());
      assertEquals(32998, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeByte0, 0, 0, byteArray0, byteOrder0, 0);
      tiffField0.getFieldTypeName();
      String string0 = tiffField0.getTagName();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x0)", string0);
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(32809, 32998, fieldTypeLong0, 32809, 32809, byteArray0, byteOrder0, 32809);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)0, (byte)0);
      tiffField0.getIntValueOrArraySum();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[355];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      int int0 = Pattern.UNICODE_CASE;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(64, 64, fieldTypeLong0, 64, 1L, byteArray0, byteOrder1, 13);
      tiffField0.getByteArrayValue();
      tiffField0.getIntValueOrArraySum();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@33801215
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)32;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(901, 41488, fieldTypeLong0, 901, (-3944L), byteArray0, byteOrder0, 50);
      tiffField0.getIntArrayValue();
      assertEquals((-3944), tiffField0.getOffset());
      assertEquals(41488, tiffField0.getDirectoryType());
      assertEquals(901, tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TiffField tiffField0 = new TiffField(0, 1, fieldTypeByte0, 1, 1, byteArray0, byteOrder0, 0);
      int int0 = Pattern.CANON_EQ;
      ByteOrder.nativeOrder();
      int int1 = Double.BYTES;
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNull(tiffElement0);
      
      tiffField0.getByteArrayValue();
      tiffField0.getDoubleArrayValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (-427), fieldTypeByte0, 129, 0, byteArray0, byteOrder0, (-427));
      String string0 = tiffField0.getTagName();
      assertEquals(0, tiffField0.getTag());
      assertEquals("GPSVersionID", string0);
      assertEquals((-427), tiffField0.getDirectoryType());
      assertEquals((-427), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[20];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 32781, fieldTypeByte0.RATIONAL, 2961L, 1L, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1886), (-1886), fieldTypeShort0, 1L, (-2421L), byteArray0, byteOrder0, (-1886));
      tiffField0.getIntArrayValue();
      assertEquals((-1886), tiffField0.getTag());
      assertEquals((-1886), tiffField0.getSortHint());
      assertEquals((-1886), tiffField0.getDirectoryType());
      assertEquals((-2421), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)97;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-15);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeLong0, 50, 4L, byteArray0, byteOrder0, 318);
      tiffField0.getDoubleArrayValue();
      assertEquals(318, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(50, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-3477), (-3477), (FieldType) null, 1395L, 1395L, (byte[]) null, byteOrder0, 2205);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-18);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(64, (-1473), fieldTypeShort0.FLOAT, 11968L, 64, byteArray0, byteOrder0, 50);
      tiffField0.dump();
      int int0 = tiffField0.getOffset();
      assertEquals(64, int0);
      assertEquals(64, tiffField0.getTag());
      assertEquals((-1473), tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-18);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)0, 808, fieldTypeShort0, 728L, 808, byteArray0, byteOrder0, 1);
      tiffField0.getIntArrayValue();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      tiffField0.getFieldType();
      double double0 = new Integer((byte) (-61));
      assertEquals((-61), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      int int0 = Float.BYTES;
      TiffField tiffField0 = new TiffField((-62), (byte)0, fieldTypeLong0.FLOAT, 4, (byte)0, byteArray0, byteOrder0, (-586));
      tiffField0.getDoubleArrayValue();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[383];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField((byte) (-14), 1353, fieldTypeRational0, (byte)29, 826, byteArray0, byteOrder1, 1353);
      String string0 = tiffField0.getValueDescription();
      assertEquals((-14), tiffField0.getTag());
      assertEquals(826, tiffField0.getOffset());
      assertEquals(1353, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(1353, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[259];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField((-1223), 42, fieldTypeRational0, 968L, 1223L, byteArray0, byteOrder0, 33920);
      tiffField0.getDoubleArrayValue();
      tiffField0.getOversizeValueElement();
      try { 
        FieldType.getFieldType((-1223));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type -1223 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[385];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffField tiffField0 = new TiffField((byte) (-14), 50741, fieldTypeDouble0, 1866, 50741, byteArray0, byteOrder1, 917);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getDirectoryType();
      assertEquals((-14), tiffField0.getTag());
      assertEquals(50741, tiffField0.getOffset());
      assertEquals(917, tiffField0.getSortHint());
      assertEquals(50741, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[355];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DefaultImageColor");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(680, "DefaultImageColor");
      TiffField tiffField0 = new TiffField((-1), 798, fieldTypeByte0, 680, 798, byteArray0, byteOrder0, (-643));
      String string0 = tiffField0.getValueDescription();
      assertEquals(798, tiffField0.getOffset());
      assertEquals(798, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-643), tiffField0.getSortHint());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[189];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField((byte)53, (byte)53, fieldTypeRational0, (byte)16, (byte)53, byteArray0, byteOrder1, (byte)53);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[341];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DefaultImageColor");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder4 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(798, "DefaultImageColor");
      TiffField tiffField0 = new TiffField((-643), 50, fieldTypeAscii0, 65L, 65L, byteArray0, byteOrder1, 25);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getByteOrder();
      assertEquals(65, tiffField0.getOffset());
      assertEquals((-643), tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(25, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[125];
      Object object0 = new Object();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int int0 = 42021;
      TiffField tiffField0 = new TiffField(42021, 42021, fieldTypeLong0.SSHORT, 42021, 4L, byteArray0, byteOrder0, 42021);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      tiffField0.dump();
      int int1 = (-1821);
      try { 
        fieldTypeLong0.writeData((Object) null, byteOrder4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: null (null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[215];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(34, (-1479), fieldTypeDouble0.LONG, 2300L, 3050, byteArray0, byteOrder3, 43);
      String string0 = tiffField0.toString();
      assertEquals("34 (0x22: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (53) (2300 Long)", string0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      tiffField0.getFieldTypeName();
      assertEquals(3050, tiffField0.getOffset());
      assertEquals(43, tiffField0.getSortHint());
      assertEquals((-1479), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[313];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder4 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-649), 804, fieldTypeDouble0.FLOAT, 804, 804, byteArray0, byteOrder0, (-649));
      tiffField0.toString();
      ByteOrder byteOrder5 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder6 = ByteOrder.nativeOrder();
      assertSame(byteOrder6, byteOrder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[420];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1866, 1866, fieldTypeDouble0, 1L, 1L, byteArray0, byteOrder0, 1866);
      fieldTypeDouble0.getValue(tiffField0);
      ByteOrder.nativeOrder();
      fieldTypeDouble0.getValue(tiffField0);
      tiffField0.getIntValueOrArraySum();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField1 = new TiffField(51, 1866, fieldTypeDouble0, 65533, 51, byteArray0, byteOrder0, 51);
      tiffField1.dump();
      byteOrder1.toString();
      Long long0 = new Long(65533);
      tiffField1.getSortHint();
      try { 
        tiffField1.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [D@480fb198
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }
}
