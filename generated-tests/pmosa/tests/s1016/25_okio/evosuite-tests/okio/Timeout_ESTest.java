/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:03:32 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Timeout_ESTest extends Timeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      long long0 = (-1307L);
      Timeout timeout1 = timeout0.deadlineNanoTime((-1307L));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      timeout0.NONE.timeout((-1307L), timeUnit1);
      // Undeclared exception!
      try { 
        timeout1.deadline((-1307L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: -1307
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      Timeout timeout1 = timeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      timeout1.NONE.deadline(2952L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        timeout1.deadline(0L, timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Timeout timeout1 = timeout0.NONE.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      timeout1.NONE.timeout((-1L), timeUnit0);
      timeout1.clearTimeout();
      Timeout timeout2 = timeout0.deadlineNanoTime(1L);
      timeout0.NONE.clearDeadline();
      long long0 = (-3692L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        timeout2.timeout((-3692L), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout < 0: -3692
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        timeout0.NONE.waitUntilNotified(object0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.NONE.throwIfReached();
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      timeout0.NONE.timeout(1L, timeUnit0);
      // Undeclared exception!
      try { 
        timeout0.deadlineNanoTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No deadline
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Timeout timeout1 = timeout0.clearDeadline();
      Timeout timeout2 = timeout1.deadlineNanoTime((-383L));
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Timeout timeout3 = timeout2.timeout(854L, timeUnit0);
      timeout1.deadlineNanoTime((-1906L));
      Timeout timeout4 = timeout3.deadline(114L, timeUnit0);
      Timeout timeout5 = timeout4.clearTimeout();
      timeout5.deadlineNanoTime();
      Timeout timeout6 = timeout0.clearDeadline();
      timeout6.NONE.deadline(114L, timeUnit0);
      // Undeclared exception!
      try { 
        timeout6.NONE.waitUntilNotified((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Timeout timeout1 = timeout0.deadlineNanoTime((-2469L));
      try { 
        timeout1.throwIfReached();
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // deadline reached
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.throwIfReached();
      long long0 = 0L;
      Timeout timeout1 = timeout0.deadlineNanoTime(0L);
      Timeout timeout2 = timeout1.clearTimeout();
      long long1 = 678L;
      Object object0 = new Object();
      try { 
        timeout2.waitUntilNotified(object0);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      Timeout timeout1 = timeout0.deadlineNanoTime((-2469L));
      timeout1.hasDeadline();
      timeout0.clearDeadline();
      System.setCurrentTimeMillis((-2469L));
      timeout0.throwIfReached();
      Timeout timeout2 = timeout1.deadlineNanoTime((-2469L));
      timeout1.throwIfReached();
      assertTrue(timeout0.hasDeadline());
      
      timeout2.clearDeadline();
      timeout0.throwIfReached();
      assertFalse(timeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      long long0 = 1000000L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      timeout0.NONE.throwIfReached();
      Timeout timeout1 = timeout0.timeout(1000000L, timeUnit0);
      timeout1.NONE.throwIfReached();
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Timeout timeout2 = timeout0.clearTimeout();
      timeout2.timeout(1000000L, timeUnit1);
      timeout1.NONE.timeout((-1424L), timeUnit1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        timeout1.waitUntilNotified(object0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
