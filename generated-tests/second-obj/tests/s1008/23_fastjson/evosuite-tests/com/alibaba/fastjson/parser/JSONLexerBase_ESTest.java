/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:44:32 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.UUID;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PJ8V'cO$$95sOHS)f(");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1619), (-1619));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[2] = '<';
      charArray0[6] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 660);
      jSONReaderScanner0.scanNumber();
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("encodeUTF8 error");
      Locale locale0 = Locale.US;
      locale0.getDisplayName();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1381);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = 1293;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 2, json : +6fB-wUgw ')fclzJ'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-ww ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Object[] objectArray0 = new Object[2];
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken(1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(6, number0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('s');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xs");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) 's');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('s');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xs");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b=E~u|KB'Lz&uB([|");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowUnQuotedFieldNames", 48);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.scanType("AllowUnQuotedFieldNames");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int1 = jSONReaderScanner0.matchStat();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(48, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.hasSpecial = true;
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      jSONScanner0.scanStringArray(set0, '+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('^', '^', 'x', 'm', '^');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanDouble('|');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.putChar('x');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3210);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'D';
      charArray0[2] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.matchStat = 0;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(26);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertNull(calendar0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONReaderScanner0.scanLong('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3220);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.scanLong(' ');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("IDyCa6gl>oYZ}.(");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('j');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.close();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'b';
      charArray0[3] = 'b';
      charArray0[3] = 'T';
      UUID uUID0 = jSONReaderScanner0.scanUUID('T');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      charArray0[4] = '.';
      charArray0[5] = 'e';
      charArray0[6] = 'J';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'Y', 'b', '\u0000', 'T', '.', 'e', 'J'}, charArray0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'b';
      jSONReaderScanner0.sbuf = charArray0;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HashSet<MockJapaneseDate> hashSet1 = new HashSet<MockJapaneseDate>();
      assertNotNull(hashSet1);
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      boolean boolean0 = hashSet0.removeAll(hashSet1);
      assertFalse(boolean0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1369, 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals('\u0000', char0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('=');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3611, 2230);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2230, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean1);
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2230, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertFalse(boolean1 == boolean0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2230, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertArrayEquals(new char[] {'V', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charArray0[1] = 'b';
      jSONReaderScanner0.sbuf = charArray0;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[1];
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable('T');
      assertNotNull(symbolTable0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("syntax error");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}Dgv0G`9,A");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken((-1368));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" string : \u0000\u0000\u0000\u0000\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(120);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('.');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 117);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("55y/_'|/dM@#99", 14);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(14, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      double double0 = jSONReaderScanner1.scanDouble('B');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(55.0, double0, 0.01);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(14, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.scanString('-');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-3685), (-3685), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("hF", 78);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3526);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(timeZone0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("hF");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('h', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b=E~u|KB'Lz&uB([|");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("b=E~u|KB'Lz&uB([|");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.nextToken(51);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = 20;
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("error", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(20, charArray0, 20, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("llegal", (-445));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-445), jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-445), jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-445), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = 's';
      boolean boolean0 = JSONLexerBase.isWhitespace('s');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xs");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 18;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      SymbolTable symbolTable0 = new SymbolTable(84);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '{';
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanDouble('\\');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", info : ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('{');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', '\u0000'}, charArray0);
      assertNull(date0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(boolean1 == boolean0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"E\", pos 1, json : EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xLc", 40);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(393);
      assertNotNull(symbolTable0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 393);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'T');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = "false";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(7, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(17);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.nextToken(101);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanDouble('X');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("syntax", string0);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string1 = "AY`'w]6y";
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      SymbolTable symbolTable0 = new SymbolTable(18);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 18, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123, 504);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(504, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanDouble('n');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(504, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^}&LeD", 15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("^}&LeD");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('^', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int0 = jSONReaderScanner0.scanInt('\'');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^}&LeD", 15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("^}&LeD");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('^', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONReaderScanner0.indexOf('f', 2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner0.nextToken(2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int1 = jSONReaderScanner0.scanInt('\'');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      char char0 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', char0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(192);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '.';
      charArray0[3] = 'M';
      charArray0[4] = '.';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'A', '.', '\u0000', 'M', '.'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4zbT}Dgv0G`9,A`@", 125);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", '*');
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = jSONScanner0.scanInt('I');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      int int1 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(11936, int1);
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(int1 == int0);
      
      String string0 = jSONScanner0.stringVal();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      double double0 = jSONScanner0.scanDouble('');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(11936, (-719));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -719
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4zbT}Dgv0G`9,A`@", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 120, 120);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(120, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qt");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalDateTime", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(floatArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("qt");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '4');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.scanNumber();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      double double0 = jSONScanner0.scanDouble(',');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OAh'mNvNx,\"DJ,/&R9", '\u0000');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('O', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanDate('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('O', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3210);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.subString(1958, 1958);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-2), int0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+U6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.scanBoolean('t');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONScanner0.numberString();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(108);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("U6fB", string1);
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = "false";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(7, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONScanner0.bp = 0;
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONReaderScanner0.features = 1242;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1242, jSONReaderScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(32);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '{');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      char char0 = '>';
      Date date0 = jSONScanner0.scanDate('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[0];
      Locale locale0 = new Locale("imlegal", "\"\"^8$3<$J-iM", "kj");
      assertNotNull(locale0);
      assertEquals("imlegal_\"\"^8$3<$J-IM_kj", locale0.toString());
      assertEquals("kj", locale0.getVariant());
      assertEquals("imlegal", locale0.getLanguage());
      assertEquals("\"\"^8$3<$J-IM", locale0.getCountry());
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      long long0 = jSONScanner0.scanLong('\'');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      JSONScanner jSONScanner0 = new JSONScanner("4[");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '{', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.info();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("pos 0, json : 4[", string0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '{', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '{', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', '{', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("teh)5=/");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c_]o", 393);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(393, jSONScanner0.getFeatures());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken((-1259));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(23, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(23, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[3] = '+';
      charArray0[5] = '+';
      charArray0[6] = '2';
      charArray0[7] = '+';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, '\u0000');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '+', '\u0000', '+', '2', '+', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner1.scanDate('>');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '+', '\u0000', '+', '2', '+', '\u0000'}, charArray0);
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = jSONReaderScanner1.getLocale();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '+', '\u0000', '+', '2', '+', '\u0000'}, charArray0);
      assertNotNull(locale0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('\u0000');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("UseSiIngleQuotes", 2141);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2141, jSONScanner0.getFeatures());
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("pos 0, json : UseSiIngleQuotes", string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2141, jSONScanner0.getFeatures());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 3834);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.nextToken((-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals(17, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(393);
      assertNotNull(symbolTable0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sntax 0error", 393);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'T');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      float float0 = jSONScanner0.scanFloat('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float1 = jSONScanner0.scanFloat('%');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(float1, float0, 0.01F);
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable1 = new SymbolTable(2473);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      String string1 = jSONScanner0.scanSymbol(symbolTable1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string1);
      assertNotSame(symbolTable1, symbolTable0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('s', char0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(393, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4zbT}Dgv0G`9,A`@", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '?';
      charArray0[2] = 'a';
      jSONReaderScanner0.eofPos = (-2370);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '';
      charArray0[6] = 'a';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'W', '?', 'a', '0', '0', '', 'a'}, charArray0);
      assertEquals(0, int0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'D';
      charArray0[2] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.matchStat = 0;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertNull(intArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(26);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'{', 'D', 'i'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_1i(h Kd");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_1i(h Kd", 11);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(11, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.setToken(61);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(11, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(61, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong('');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(11, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(61, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 32);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(32, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      float float0 = jSONScanner0.scanFloat('6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(32, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = 'e';
      char char1 = jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(' ', char1);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(32, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertFalse(char1 == char0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanDate('=');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("not", string1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'e';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[16];
      charArray0[0] = '\\';
      charArray0[1] = 'j';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = '`';
      charArray0[4] = 'd';
      JSONScanner jSONScanner0 = new JSONScanner("-]MG<T*2r)");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('`');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\\';
      int int0 = 93;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 93, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4zbT}Dgv0G`9,A`@", (-2370));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '@';
      charArray0[2] = 'W';
      jSONReaderScanner0.eofPos = (-2370);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '';
      charArray0[6] = '@';
      JSONScanner jSONScanner0 = new JSONScanner("4zbT}Dgv0G`9,A`@", 'W');
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(87, jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(11936, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2370), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. }
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DXS=");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("DXS=");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('D', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('D', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('X', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PpO9e");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("w#Kmg5TfM");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, pos 1, json : DXS=
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^}&LeD", 15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'F', 'F', 'g'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('F');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(15, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('O', jSONScanner0.getCurrent());
      
      boolean boolean1 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('O', jSONScanner0.getCurrent());
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('O', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(52);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("OF", string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[16];
      charArray0[0] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '`';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[2] = 'd';
      charArray0[3] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 255);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.scanType("2]Nw)(Y~");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanDouble('c');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.putChar('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      float float0 = jSONReaderScanner0.floatValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      float float0 = jSONScanner0.scanFloat('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(timeZone0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float1 = jSONScanner0.scanFloat('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(float1, float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONScanner0.scanDouble('y');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(52);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(16, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '{';
      charArray0[2] = 'T';
      charArray0[3] = 'i';
      charArray0[4] = '$';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'9', '{', 'T', 'i', '$', '^'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.token = (-1458);
      assertEquals((-1458), jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Date date0 = jSONReaderScanner0.scanDate('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'9', '{', 'T', 'i', '$', '^'}, charArray0);
      assertNull(date0);
      assertEquals((-1458), jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'9', '{', 'T', 'i', '$', '^'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1458), jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanLong('0');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 47);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '0', '0'}, charArray0);
      assertNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      jSONReaderScanner0.scanStringArray(list0, 'E');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("@");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.scanNumber();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string1 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("KUS,p@d+/OUjT_]Btz");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('K', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 47);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {'0', '0', '0'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('0', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner3.scanDate('p');
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {'0', '0', '0'}, charArray0);
      assertNull(date0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertEquals('0', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 117);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = Calendar.AUGUST;
      assertEquals(7, int0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(7);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      float[][] floatArray1 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      BigDecimal bigDecimal2 = jSONReaderScanner0.scanDecimal('T');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal2);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = JSONScanner.checkDate('K', 'K', 'K', 'K', 'K', '?', 998, 998);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Bp_w0?.}b%P`5($)6", 998);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(998, jSONScanner0.getFeatures());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean2 = arrayList0.add((Locale.LanguageRange) null);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float float0 = jSONScanner0.scanFloat('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(998, jSONScanner0.getFeatures());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(998, jSONScanner0.getFeatures());
      
      int int0 = jSONScanner0.pos();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(998, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(240);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("Bp_w0", string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(998, jSONScanner0.getFeatures());
      
      MockFile mockFile0 = new MockFile("Bp_w0?.}b%P`5($)6", "Bp_w0?.}b%P`5($)6");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/Bp_w0?.}b%P`5($)6", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Bp_w0?.}b%P`5($)6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/Bp_w0?.}b%P`5($)6/Bp_w0?.}b%P`5($)6", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("?WWgc", (-530));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('b');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      float float1 = jSONScanner0.scanFloat('l');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(float1, float0, 0.01F);
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(intArray0);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(421);
      assertNotNull(symbolTable0);
      
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, true);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-530), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('^');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xs");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.charAt(123);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.subString(2, 2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("\u0000\u0000", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " - ");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 660);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("KJIU");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('=');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not match ", '=');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(61, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("]7gf");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(']', jSONScanner0.getCurrent());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean2 = linkedHashSet0.add("it");
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("it", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 3742, 3742);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2902), 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(')', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(11, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[9];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(11, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(204);
      assertNotNull(symbolTable0);
      
      String string1 = File.separator;
      assertNotNull(string1);
      assertEquals("/", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = "h";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("h");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('h', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 13;
      jSONReaderScanner0.nextToken(13);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string1 = jSONReaderScanner1.info();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('h', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {'P', 'P', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      char char0 = '#';
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextTokenWithChar('#');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match # - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Zc");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hFu:~940jgfC");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("hFu:~940jgfC", 10);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('h', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char0 = jSONReaderScanner1.next();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('F', char0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONReaderScanner1.scanInt('<');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(320);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.close();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = jSONReaderScanner1.isEnabled(10, 373);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = jSONReaderScanner1.getLocale();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotNull(locale0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(10, jSONReaderScanner1.getFeatures());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(491);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : Zc
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[3];
      charArray0[2] = '8';
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '8'}, charArray0);
      assertNull(floatArray0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float1 = jSONScanner0.scanFloat('\'');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(float1, float0, 0.01F);
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(52);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(16, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.isEnabled(52, (-2));
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(16, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(boolean1 == boolean0);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = 93;
      int int1 = jSONReaderScanner0.scanType("2]Nw)(Y~");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), int1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(int1 == int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", (-2136));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-2136), jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect {, actual ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[8];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Twn`X@2");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken((-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('`', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONScanner0.putChar('Q');
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match M - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)102;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)27, (byte)38, (byte)110, (byte)123, (byte)102}, byteArray0);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(",B/BJAK$K>'}*");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      String string0 = jSONScanner0.scanString('\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(16, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(16, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      
      char char0 = jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('/', char0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(16, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('/', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("]=\"U", 1654);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1654, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[4];
      charArray0[1] = '+';
      jSONScanner0.matchStat = (int) '+';
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(43, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(1654, jSONScanner0.getFeatures());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONScanner0.nextIdent();
      assertEquals(43, jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(43, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(15, jSONScanner0.token());
      assertEquals(1654, jSONScanner0.getFeatures());
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 43, 43);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(charArray1.equals((Object)charArray0));
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(0L, long0);
      assertNotSame(charArray1, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('.');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 117);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(244);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isBlankInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[2] = '\\';
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      JSONScanner jSONScanner0 = new JSONScanner("null", 2390);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2390, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(45);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2390, jSONScanner0.getFeatures());
      assertEquals(8, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2390, jSONScanner0.getFeatures());
      assertEquals(8, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("not match ", 45);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '\\';
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(' ', char0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.ch = '\u000E';
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\u000E', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter1);
      assertFalse(pipedWriter1.equals((Object)pipedWriter0));
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean2 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[5];
      float float0 = jSONScanner0.scanFloat('x');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      charArray0[2] = '\\';
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      jSONScanner0.nextToken(16);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      
      boolean boolean4 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean4);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\\', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 117);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.AUGUST;
      assertEquals(7, int0);
      
      jSONReaderScanner0.sbuf = charArray0;
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(18);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-2370);
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '`';
      charArray0[2] = 'd';
      charArray0[3] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 255);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.sp = (-2370);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int1 = jSONReaderScanner0.scanType("2]Nw)(Y~");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'0', '`', 'd', '\\'}, charArray0);
      assertEquals((-2), int1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(int1 == int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("wBw0<AjCA#>v[1\"", 93);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('w', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONReaderScanner1.scanSymbol((SymbolTable) null);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertEquals("wBw0", string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int2 = jSONReaderScanner1.intValue();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(71, int2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      jSONReaderScanner1.setToken((-2783));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2783), jSONReaderScanner1.token());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2370));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "-0LmnW^.-";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object[] objectArray0 = new Object[7];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("$Fd%PSAI9w /Yv", 1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(1369, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(1369, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('-', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFloat('$');
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(-0.0F, float0, 0.01F);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('-', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(1, jSONScanner0.token());
      assertEquals('P', jSONScanner0.getCurrent());
      assertEquals(1369, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      Date date0 = jSONScanner0.scanDate('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.ch = '>';
      assertEquals('>', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[7];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = jSONScanner0.scanBoolean('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      float float0 = jSONScanner0.scanFloat(':');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.setToken(101);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(101, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0*LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("-0*LmnW^.-");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0*LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[7];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.lexError("-0*LmnW^.-", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = jSONReaderScanner0.scanDouble('*');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double1, 0.01);
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(double1, double0, 0.01);
      
      boolean boolean2 = jSONReaderScanner0.isEOF();
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(76);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : *pos 2, json : -0*LmnW^.-
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = '%';
      charArray0[2] = 'N';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'N', '%', 'N'}, charArray0);
      assertNull(string0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'N', '%', 'N'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.JSONException");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.nextToken(45);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'N', '%', 'N'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '5';
      charArray0[2] = ':';
      charArray0[3] = ')';
      charArray0[4] = '|';
      charArray0[5] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'<', '5', ':', ')', '|', '/'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(12, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'<', '5', ':', ')', '|', '/'}, charArray0);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(12, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable('T');
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("(", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(10, jSONScanner0.token());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertNull(string0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(10, jSONScanner0.token());
      assertTrue(boolean1 == boolean0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertEquals(35, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'T'}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = 'E';
      Class<InputStream> class0 = InputStream.class;
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'E', '?', '?', '?'}, charArray0);
      assertNull(collection0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      Date date0 = jSONScanner0.scanDate('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.ch = '>';
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('>', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner1 = new JSONScanner("xZHv@&4+-}*,~h\"", 1199);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(1199, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('x', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("jz^@J", 11);
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(11, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('j', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = new BigDecimal((-1941));
      assertNotNull(bigDecimal0);
      assertEquals((byte)107, bigDecimal0.byteValue());
      assertEquals((short) (-1941), bigDecimal0.shortValue());
      
      int int0 = jSONScanner2.token();
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(11, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('j', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      SymbolTable symbolTable0 = new SymbolTable(1199);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner3 = new JSONScanner("/", 0);
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.getFeatures());
      assertEquals('/', jSONScanner3.getCurrent());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 6pos 0, json : +6fB-wUgw ')fclzJ'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('.');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("aglf6f", 1211);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(1211, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aglf6f", '.');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(103);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      jSONReaderScanner1.eofPos = 67;
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(floatArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string1 = jSONScanner0.scanString('~');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string1);
      assertEquals(1211, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(timeZone0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      jSONScanner0.scanStringArray(linkedHashSet0, 'X');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1211, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      charArray2[0] = '.';
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(67, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray2);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'.'}, charArray2);
      assertNull(bigInteger0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int0 = jSONReaderScanner1.scanType("aglf6f");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-2), int0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(67, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('G');
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken(2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      JSONScanner jSONScanner0 = new JSONScanner("F/]!gRJ0> j|k$|L", 2198);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2198, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F/]!gRJ0> j|k$|L", '+');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(intArray0);
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner(" `", (-316));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(125);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONScanner1.scanEnum(class0, symbolTable0, '+');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(enum0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner1.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      float[] floatArray0 = jSONScanner1.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      String string0 = jSONScanner1.info();
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotNull(string0);
      assertEquals("pos 0, json :  `", string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      String string1 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      assertFalse(boolean0);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('/', char0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('/', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2198, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-316), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-ww ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[2];
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.ch = ' ';
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>('?');
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('+', char0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = jSONScanner0.scanBoolean('G');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("+6fB-wUgw ')fclzJ'", (-1729));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-1729), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('+', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'A';
      JSONScanner jSONScanner0 = new JSONScanner("com.google.common.collect.");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'O', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(10, jSONScanner0.pos());
      assertEquals(25, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("l0L[y\n8t*L", 31);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(31, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('l', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 78);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, int0);
      assertNotSame(charArray1, charArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(charArray1.equals((Object)charArray0));
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("G\u0002f0", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('G', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = jSONReaderScanner1.matchField(charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0002', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6B-wUgw ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "oGG0";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("oGG0", 1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1369, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(1369);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+6B-wUgw ')fclzJ'", 24);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(24, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("c");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('d');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal1 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-ww ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("ljpug", 1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(1369, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      double double0 = jSONScanner0.scanDouble('6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1369, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1369, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      Feature feature0 = Feature.NonStringKeyAsString;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(1369, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      String string0 = jSONReaderScanner0.numberString();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("6", string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new", 20);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("error", string1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      
      int int1 = jSONScanner0.scanInt('#');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.getFeatures());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = "syntax error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('R');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      String string1 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(string1.equals((Object)string0));
      
      char char0 = '+';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(7);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'R');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("not match ", 45);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      UUID uUID1 = jSONReaderScanner0.scanUUID('K');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', ':', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("false", 93);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(93, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = 'x';
      int int0 = jSONReaderScanner0.scanInt(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char1 = 'p';
      float float0 = jSONScanner0.scanFloat('x');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      char char2 = 'Y';
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(93, "O]^W,MrlR._S", 77, 45, 408, 111, 45, (-990), 54, 0, 113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 77
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DXS=");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ej(XR4>U%@/.7BqK", 2535);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2535, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      UUID uUID0 = jSONReaderScanner1.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(2535, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("9mYJ6|~c>G#%ct@7");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('9', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      long long0 = jSONReaderScanner2.longValue();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0L, long0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('9', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArrayReader0, 76);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(76, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertTrue(jSONReaderScanner3.isEOF());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = jSONReaderScanner3.isRef();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(76, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertTrue(jSONReaderScanner3.isEOF());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner2.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('9', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      
      int int1 = jSONReaderScanner2.scanInt('{');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(9, int1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('9', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('+', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4zbT}Dgv0G`9,A`@", 125);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(125, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("scan null error");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(4, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(125, jSONReaderScanner0.getFeatures());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertFalse(charArray0.equals((Object)charArray1));
      
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(125, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("c");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('d');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.scanIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      char char0 = jSONScanner0.next();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(123);
      assertNotNull(symbolTable0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = jSONScanner0.scanBoolean('\u001A');
      assertEquals(3, jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      float[][] floatArray1 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray1);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("not", (-1136406858));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1136406858), jSONScanner0.getFeatures());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner1 = new JSONScanner("", (-900));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-900), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1136406858), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner1.isBlankInput();
      assertEquals(0, jSONScanner1.matchStat);
      assertTrue(boolean1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-900), jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1136406858));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-74), bigDecimal0.byteValue());
      assertEquals((short) (-12618), bigDecimal0.shortValue());
      
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1136406858), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-900), jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFloat('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1136406858), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int1 = (-1417);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-900), 8064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ8'");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ8'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "oGG0";
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("oGG0", 1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(1369, jSONScanner0.getFeatures());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oGG0");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean1 = linkedHashSet0.removeIf(predicate0);
      assertFalse(boolean1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long1 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(6L, long1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(long1 == long0);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(1369, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("c");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      
      char char0 = 'd';
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('d');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[14];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", (-2));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(4, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = "teh)5=/";
      boolean boolean0 = JSONLexerBase.isWhitespace('6');
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x%yjBa");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"u");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1432));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.containsAll(linkedHashSet0);
      assertTrue(boolean0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add("sO-j0^tn[1CTt");
      assertTrue(boolean1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = hashSet0.add("+6fB-wUgw ')fclzJ8'");
      assertTrue(boolean2);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = hashSet0.add("+6fB-wUgw ')fclzJ8'");
      assertFalse(boolean3);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[2];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oGG0");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean4 = linkedHashSet1.removeIf(predicate0);
      assertFalse(boolean4);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      
      SymbolTable symbolTable0 = new SymbolTable(2108);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("9aEt<b!", 95);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(95, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('9', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(95, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('9', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string0 = "\":\"";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error", 3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-58), (byte) (-89)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan new error", 125);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(125, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner1.scanDate('w');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(125, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(5, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = ", info : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      
      float float0 = jSONScanner0.scanFloat('6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      
      char char0 = '\'';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertNull(collection0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'X');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("true", 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('t', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      jSONReaderScanner2.scanTrue();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(6, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      char char0 = jSONReaderScanner2.charAt(0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('\u001A', char0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(6, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      long long0 = jSONReaderScanner1.longValue();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      
      jSONReaderScanner3.nextIdent();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(20, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      UUID uUID0 = jSONReaderScanner1.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      
      long long1 = jSONReaderScanner2.longValue();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0L, long1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(6, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kj/9*\f[wH>MI");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("kj/9*\f[wH>MI", '.');
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(46, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long1);
      assertTrue(long1 == long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      
      double double0 = jSONReaderScanner0.scanDouble('z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.setToken((-4145));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-4145), jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.JSONArray", (-1060));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1060), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner0.scanDate('z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-4145), jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      long long2 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(648L, long2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-4145), jSONReaderScanner0.token());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      char char0 = ' ';
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.scanString('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-3685), (-3685), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vJc)E`]9rdf*T", (-1117));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '%';
      charArray1[1] = '9';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0, (-2266));
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'%', '9'}, charArray1);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2266), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONScanner jSONScanner1 = new JSONScanner("vJc)E`]9rdf*T", (-1));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      Date date0 = jSONScanner1.scanFieldDate(charArray1);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'%', '9'}, charArray1);
      assertNull(date0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('%');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long1);
      assertFalse(long1 == long0);
      
      jSONScanner0.resetStringPosition();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'%', '9'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2266), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("o(L#fn");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int1 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'%', '9'}, charArray1);
      assertEquals(0, int1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2266), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(int1 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      Date date1 = jSONReaderScanner0.scanDate('X');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONReaderScanner1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "o(L#fn";
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "o(L#fn";
      objectArray0[5] = (Object) jSONScanner0;
      jSONReaderScanner1.lexError("o(L#fn", objectArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.nextToken(168);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1117), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(11, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(',', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      jSONReaderScanner0.nextToken(4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = 12;
      int int1 = (-1254);
      JSONScanner jSONScanner0 = new JSONScanner("5kv", (-1254));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals((-1254), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals((-1254), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('!');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals((-1254), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int2 = 74;
      // Undeclared exception!
      try { 
        jSONScanner0.subString(74, (-1254));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!lU^,NG|f9vz4yOTk");
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!lU^,NG|f9vz4yOTk");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(9);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ak(SZq");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BrowserSecure");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int1 = 102;
      jSONReaderScanner0.nextToken(102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'e', 'e', 'e'}, charArray0);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(19);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      Date date0 = jSONScanner0.scanDate('?');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('+', jSONScanner0.getCurrent());
      
      jSONScanner0.ch = ' ';
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Object[] objectArray0 = new Object[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 1369);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.lexError("+6fB-wUgw ')fclzJ'", objectArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("Unknown", string1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = jSONScanner0.scanBoolean('G');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(string2.equals((Object)string1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      SymbolTable symbolTable0 = new SymbolTable((byte)31);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = " wnf^ ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = '#';
      char[] charArray0 = new char[0];
      Date date0 = jSONReaderScanner0.scanDate('e');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(71);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string1 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(string1.equals((Object)string0));
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(" wnf^ ", (-1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 83);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.token = 2390;
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2390, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2390, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanLong('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(2390, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      assertNotNull(arrayList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      jSONReaderScanner0.locale = null;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string0 = "\":\"";
      jSONReaderScanner0.nextToken(10);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      Date date0 = jSONScanner0.scanDate('?');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.ch = '?';
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('?', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('6', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.numberString();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("+6f", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("+6f");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('+', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = ']';
      long long0 = jSONReaderScanner0.scanLong(']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner2 = new JSONScanner("+6f", (-1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.pos());
      assertEquals('+', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 115);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(115, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONReaderScanner1.intValue();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(115, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner3 = null;
      try {
        jSONScanner3 = new JSONScanner(charArray0, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" wnf^ ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      Date date0 = jSONReaderScanner0.scanDate('e');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)29;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)29, (byte)29, (byte)29, (byte)0, (byte)0, (byte)42, (byte)29}, byteArray0);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(71);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner(" wnf^ ", (-1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      
      String string1 = jSONScanner0.scanString('h');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner2 = new JSONScanner("n1-f:YN_dmasBM(gDY", (-2));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals((-2), jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner2.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals((-2), jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      boolean boolean1 = jSONScanner1.scanISO8601DateIfMatch(false);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(boolean1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertTrue(boolean1 == boolean0);
      
      char char0 = 'N';
      int int0 = jSONScanner0.scanInt('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 401);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      assertTrue(string1.equals((Object)string0));
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "syntax error");
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(401);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      
      String string2 = jSONReaderScanner0.info();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      JSONScanner jSONScanner0 = new JSONScanner(",B[7YX");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(boolean1 == boolean0);
      
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(timeZone0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(401, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("GMT", timeZone0.getID());
      
      JSONScanner jSONScanner1 = new JSONScanner("g", (-2));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('g', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(16, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("_", 401);
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals('_', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(401, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner2.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals('_', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(401, jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner1.config(feature0, false);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('g', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-66), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner2.nextIdent();
      assertEquals((-2), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(401, jSONScanner2.getFeatures());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals((-2), jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(18, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal1 = jSONScanner2.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal1);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(401, jSONScanner2.getFeatures());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals((-2), jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(18, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-2), charArray0, 0, (-4176));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("c");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('j');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONScanner0.resetStringPosition();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONScanner0.token();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      Date date0 = jSONReaderScanner0.scanDate('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(8, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(pipedReader0, 1112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(1376);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 745);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(collection0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3202);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("d\u0001K&/-8~6*&09?", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      UUID uUID0 = jSONReaderScanner1.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("not match ", (-40));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-40), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      TimeZone timeZone0 = jSONReaderScanner2.getTimeZone();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(timeZone0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-40), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner1.setTimeZone(timeZone0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-40), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      long long0 = jSONReaderScanner1.longValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0L, long0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = jSONReaderScanner2.isRef();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(boolean0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-40), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner2;
      objectArray0[1] = (Object) "not match ";
      objectArray0[2] = (Object) jSONReaderScanner1;
      jSONReaderScanner0.nextToken(3202);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(collection0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONReaderScanner1.intValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      
      Date date0 = jSONScanner0.scanDate('?');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('+', jSONScanner0.getCurrent());
      
      jSONScanner0.ch = '?';
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 1369);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONScanner jSONScanner1 = new JSONScanner("+6fB-wUgw ')fclzJ'", 3392903);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(3392903, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('+', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('f', char0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("06e-*(~");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('0', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      Date date1 = jSONScanner2.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date1);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('0', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('?');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONScanner2.resetStringPosition();
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('0', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("'&$\"hN0L'");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = jSONScanner1.token();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(3392903, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('+', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      Date date2 = jSONReaderScanner1.scanDate('f');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextIdent();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(4, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      UUID uUID0 = jSONReaderScanner1.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(4, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      try { 
        jSONReaderScanner1.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $\"hN0L'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5al)fRb/\"6e");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("5al)fRb/\"6e");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'n';
      charArray0[2] = 'q';
      charArray0[3] = 'Z';
      charArray0[4] = 'A';
      charArray0[5] = '=';
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'S', 'n', 'q', 'Z', 'A', '='}, charArray0);
      assertEquals(0L, long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = jSONScanner0.getFeatures();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(989, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('&');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      long long1 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(long1 == long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("5:P#sD-$ /odhI0Q8", (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('u');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+U6fB-wUgw ')fclzJ'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("+U6fB-wUgw ')fclzJ'", 'D');
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(68, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean2 = jSONScanner0.scanBoolean('2');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(68, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(68, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Class<Integer> class0 = Integer.class;
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'D';
      charArray0[2] = '#';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = '2';
      charArray0[8] = '2';
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'2', 'D', '#', 'D', 'D', 'D', 'D', '2', '2'}, charArray0);
      assertNull(collection0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      jSONReaderScanner0.nextToken((-1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(22, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[2] = '\\';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n{ll", 83);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.token = (int) '\\';
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(92, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.scanLong('\\');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(92, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("n{ll", 2390);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2390, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      
      boolean boolean2 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[5];
      float float0 = jSONScanner0.scanFloat('x');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      
      charArray0[2] = '\\';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\\', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      double double0 = jSONReaderScanner1.scanDouble('z');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 117);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong('n');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = 59;
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(8);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(117, jSONReaderScanner0.getFeatures());
      
      char char0 = '2';
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("h1");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken(192);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '.';
      charArray0[3] = 'M';
      charArray0[4] = '.';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'A', '.', '\u0000', 'M', '.'}, charArray0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      String string0 = "not match ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('\u0000');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '=', '\u0000'}, charArray0);
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("UseSiIngleQuotes", 2141);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2141, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Class<Feature> class0 = Feature.class;
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '=');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '=', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("UseSiIngleQuotes", 70);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('U', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(70, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner1.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '=', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('U', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(70, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '=', '\u0000'}, charArray0);
      assertNull(intArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2141, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-2095));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('.');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("kj/9*\f[wH>MI", 43);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(43, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kj/9*\f[wH>MI");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("kj/9*\f[wH>MI", 43);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(43, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int0 = jSONScanner1.token();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(43, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("ident", string0);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean2 = jSONScanner1.scanBoolean('P');
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(boolean2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(43, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(648, number0);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(number0.equals((Object)int0));
      
      System.setCurrentTimeMillis((-1729));
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("j/", string1);
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1337, 0);
      assertNotNull(mockDate0);
      assertEquals("Sat Feb 24 17:00:00 GMT 1962", mockDate0.toString());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanDouble('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-0LmnW^.-", 31);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(31, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      
      Date date0 = jSONScanner0.scanDate('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      
      jSONScanner0.ch = '>';
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('>', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = jSONScanner0.scanBoolean('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      jSONScanner0.stringDefaultValue = "undefined";
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("undefined", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('>');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match > - 0, info : pos 1, json : -0LmnW^.-
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1369, 0);
      assertNotNull(mockDate0);
      assertEquals("Mon Feb 26 01:00:00 GMT 1962", mockDate0.toString());
      
      jSONScanner0.ch = '>';
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Object[] objectArray0 = new Object[7];
      Locale locale0 = new Locale("imlegal", "\"\"^8$3<$J-iM", "kj");
      assertNotNull(locale0);
      assertEquals("imlegal", locale0.getLanguage());
      assertEquals("kj", locale0.getVariant());
      assertEquals("\"\"^8$3<$J-IM", locale0.getCountry());
      assertEquals("imlegal_\"\"^8$3<$J-IM_kj", locale0.toString());
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONReaderScanner0.lexError("-0LmnW^.-", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(32, (-2007));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2007
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = 32;
      char char0 = '6';
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int1 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(int1 == int0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(timeZone0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char char1 = '\\';
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(16);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(16, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int2 = 1166;
      // Undeclared exception!
      try { 
        jSONScanner1.subString(0, 2381);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[7];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONReaderScanner0.lexError("-0LmnW^.-", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = jSONReaderScanner0.scanDouble('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double1, 0.01);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(double1, double0, 0.01);
      
      boolean boolean2 = jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[7];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.lexError("-0LmnW^.-", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = jSONReaderScanner0.scanDouble('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double1, 0.01);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(double1, double0, 0.01);
      
      boolean boolean2 = jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(66);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 3202;
      String string0 = "scan new error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error", 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-58), (byte) (-89)}, byteArray0);
      assertNotNull(byteArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('$');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan new error", 1150);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(1150, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner1.scanDate('w');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1150, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(18);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      SymbolTable symbolTable1 = new SymbolTable(1150);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      char[] charArray0 = new char[0];
      Date date1 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1, 'w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", (-1114));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1114), jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals((-1114), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("ident", string0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals((-1114), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1114), jSONReaderScanner0.getFeatures());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = 91;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("oG", 91);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(91, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int1 = (-888);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-ww ')fclzJ'", 1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      Object[] objectArray0 = new Object[2];
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(1369);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = JSONScanner.charArrayCompare("oGG0", (-3362), charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = jSONReaderScanner0.indexOf('q', 2366);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(boolean1 == boolean0);
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(0, number0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(1369, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertFalse(number0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "]7gf";
      JSONScanner jSONScanner0 = new JSONScanner("]7gf");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(']', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(5);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(15, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      HashSet<String> hashSet0 = new HashSet<String>(0);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add("]7gf");
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]7gf");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 101, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Date date0 = jSONScanner0.scanDate('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(1369);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Object[] objectArray0 = new Object[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 1369);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.lexError("oG", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("error", string1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = jSONScanner0.scanBoolean('>');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      String string2 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(string2.equals((Object)string1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONScanner1);
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      UUID uUID0 = jSONScanner1.scanUUID('m');
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFloat(':');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      jSONScanner1.skipWhitespace();
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SymbolTable symbolTable0 = new SymbolTable(2932);
      assertNotNull(symbolTable0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 91);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(91, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner(";[@8[", 739);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(739, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(';', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextIdent();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(24, jSONScanner1.token());
      assertEquals(739, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('[', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      String string0 = jSONScanner1.info();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(string0);
      assertEquals("pos 1, json : ;[@8[", string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(24, jSONScanner1.token());
      assertEquals(739, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('[', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "-0LmnW^.-";
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1337, 0);
      assertNotNull(mockDate0);
      assertEquals("Sat Feb 24 17:00:00 GMT 1962", mockDate0.toString());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanDouble('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double0, 0.01);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.setToken((-419));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-419), jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-0LmnW^.-", (-419));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals((-419), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner0.scanDate('y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-419), jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.ch = ' ';
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      HashSet<String> hashSet0 = new HashSet<String>('?');
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("+6fB-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6fB-wUgw ')fclzJ'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Object[] objectArray0 = new Object[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 1369);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.lexError("+6fB-wUgw ')fclzJ'", objectArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONScanner0.stringDefaultValue = "not match ";
      assertEquals("not match ", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("Unknown", string1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean2 = jSONScanner0.scanBoolean('G');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals("not match ", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      jSONScanner0.scanStringArray(hashSet0, 'G');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("not match ", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner2);
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner2.nextToken();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(20, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      
      jSONReaderScanner1.scanIdent();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("not match ", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      BigInteger bigInteger1 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger1);
      assertEquals("not match ", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ":8=\"I";
      int int0 = 1654;
      JSONScanner jSONScanner0 = new JSONScanner(":8=\"I", 1654);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(1654, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1654, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      Date date0 = jSONReaderScanner0.scanDate('H');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\"', '\"', '\u0000'}, charArray0);
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":8=\"I", 1654);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(1654, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "fastjson.compatibleWithJavaBean";
      Date date0 = jSONReaderScanner0.scanDate('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      JSONScanner jSONScanner0 = new JSONScanner(" 64?OX{1[bflR", (byte)125);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      byte[] byteArray1 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      UUID uUID0 = jSONScanner0.scanUUID('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFloat('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(64.0F, float0, 0.01F);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("error parse null");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('e', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      String string0 = jSONScanner1.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('e', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fB");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      char[] charArray0 = new char[14];
      charArray0[0] = 'P';
      charArray0[4] = 'P';
      JSONScanner jSONScanner1 = new JSONScanner("zf{>#U?wc@$e'", 'P');
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(80, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('z', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('O', char0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('E', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BigDecimal bigDecimal1 = jSONScanner0.scanDecimal('.');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONScanner1.resetStringPosition();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, jSONScanner1.token());
      assertEquals(80, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('z', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fB", '.');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int0 = jSONScanner2.token();
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('E', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      Date date1 = jSONReaderScanner0.scanDate('.');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date1);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      long long1 = jSONReaderScanner0.longValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(54L, long1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertFalse(long1 == long0);
      
      float float0 = jSONScanner0.scanFloat('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      JSONScanner jSONScanner3 = new JSONScanner(" - ");
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertEquals(989, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(' ', jSONScanner3.getCurrent());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.token());
      assertFalse(jSONScanner3.isEOF());
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      
      String string0 = jSONScanner3.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner3.matchStat);
      assertNull(string0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertEquals((-2), jSONScanner3.matchStat());
      assertEquals(989, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.token());
      assertFalse(jSONScanner3.isEOF());
      assertEquals('-', jSONScanner3.getCurrent());
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      
      String string1 = jSONScanner1.info();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(string1);
      assertEquals("pos 0, json : zf{>#U?wc@$e'", string1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, jSONScanner1.token());
      assertEquals(80, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('z', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1369, 0);
      assertNotNull(mockDate0);
      assertEquals("Mon Feb 26 01:00:00 GMT 1962", mockDate0.toString());
      
      jSONScanner0.ch = '>';
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('>', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(1164);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("-0LmnW^.-", 1164);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      int int0 = jSONScanner1.token();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("0Lm", string0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-0LmnW^.-", 106);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner0.scanFloat('%');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("mnw^.-");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('m', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner3 = new JSONScanner("", 1369);
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertTrue(jSONScanner3.isEOF());
      assertEquals(1369, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      int int1 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(int1 == int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean3 = jSONReaderScanner1.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals('m', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(0L, number0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = jSONReaderScanner1.charAt(1369);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals('\u001A', char0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals('m', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-71)}, byteArray0);
      assertNotNull(byteArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      MockDate mockDate0 = new MockDate('*', 0, 0, 1369, 0);
      assertNotNull(mockDate0);
      assertEquals("Thu Feb 26 01:00:00 GMT 1942", mockDate0.toString());
      
      jSONScanner0.ch = '*';
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(1164);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("-0LmnW^.-", 1164);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals('-', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('-', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      int int0 = jSONScanner2.token();
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('-', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("0Lm", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-0LmnW^.-", 106);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = new Locale("-0LmnW^.-", "-0LmnW^.-", "0Lm");
      assertNotNull(locale0);
      assertEquals("0Lm", locale0.getVariant());
      assertEquals("-0LMNW^.-", locale0.getCountry());
      assertEquals("-0lmnw^.-", locale0.getLanguage());
      assertEquals("-0lmnw^.-_-0LMNW^.-_0Lm", locale0.toString());
      
      jSONScanner2.skipWhitespace();
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('-', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner0.scanFloat('%');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      float float1 = jSONScanner0.scanFloat('n');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(float1, float0, 0.01F);
      
      BigInteger bigInteger0 = jSONScanner2.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('-', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      String string1 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      String string2 = jSONScanner0.info();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string2);
      assertEquals("pos 1, json : -0LmnW^.-", string2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("]7gf");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JSONScanner jSONScanner1 = new JSONScanner("]7gf");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(']', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = jSONScanner1.next();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('7', char0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('7', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[19];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[0] = object1;
      objectArray0[2] = (Object) charArray0;
      objectArray0[3] = (Object) charArray0;
      jSONScanner0.lexError("dxs", objectArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      int int0 = (-1707);
      jSONScanner0.np = (-1707);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('7', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-884));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("+6B-wUgw ')fclzJ'");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+6B-wUgw ')fclzJ'", 1377);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "oGG0";
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("oGG0", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(1377);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("+6B-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('+', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("oGG0", 0);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('6', char0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("B-", string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", (-1159));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1159), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFloat('N');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(6.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('6', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("+6B-wUgw ')fclzJ'");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('+', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      int int1 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1159), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int1 == int0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      charArray1[1] = '6';
      boolean boolean3 = jSONReaderScanner0.matchField(charArray1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'6', '6'}, charArray1);
      assertFalse(boolean3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(number0);
      assertEquals((byte)6, number0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("_%?&#?F", 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      char char1 = jSONReaderScanner2.charAt(9999);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('\u0000', char1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(char1 == char0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1377, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "-0LmnW^.-";
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("-0LmnW^.-");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.scanInt('S');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" wnf", 57);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.scanBoolean('#');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jSONScanner0.scanISO8601DateIfMatch();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      boolean boolean3 = jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      BigDecimal bigDecimal0 = new BigDecimal(57);
      assertNotNull(bigDecimal0);
      assertEquals((byte)57, bigDecimal0.byteValue());
      assertEquals((short)57, bigDecimal0.shortValue());
      
      int int0 = jSONScanner0.token();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(57, jSONScanner0.getFeatures());
      
      float float0 = new Integer(0);
      assertEquals(0, float0, 0.01F);
      
      JSONScanner jSONScanner1 = new JSONScanner("b9,kP5t7");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('b', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 3968);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1337, 0);
      assertNotNull(mockDate0);
      assertEquals("Sat Feb 24 17:00:00 GMT 1962", mockDate0.toString());
      
      jSONScanner0.ch = '>';
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1337);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken(1164);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("-0LmnW^.-", 1164);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('^', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Object[] objectArray0 = new Object[7];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('^', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONReaderScanner0.lexError("-0LmnW^.-", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('^', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double1 = jSONReaderScanner0.scanDouble('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(-0.0, double1, 0.01);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // LmnW^.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean2 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[5];
      float float0 = jSONScanner0.scanFloat('x');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('O', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      charArray0[2] = '\\';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\\', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("sortfield");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('s', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float1 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\\', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('s', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(float1, float0, 0.01F);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\\', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'P';
      charArray0[2] = ';';
      charArray0[3] = 'v';
      charArray0[4] = 'E';
      charArray0[5] = 'M';
      charArray0[6] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'r', 'P', ';', 'v', 'E', 'M', '?'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken(4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'r', 'P', ';', 'v', 'E', 'M', '?'}, charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('P', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'r', 'P', ';', 'v', 'E', 'M', '?'}, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'r', 'P', ';', 'v', 'E', 'M', '?'}, charArray0);
      assertNull(floatArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(91);
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("d", 0);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('d', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.isEOF();
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(boolean0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('d', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFloat('x');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '\\';
      charArray0[2] = 'x';
      charArray0[3] = 'U';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 13, 895);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'x', '\\', 'x', 'U', 'x', 'x'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      assertEquals('x', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(895, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("d");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.token());
      assertEquals('d', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float1 = jSONScanner2.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'x', '\\', 'x', 'U', 'x', 'x'}, charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0, jSONScanner2.token());
      assertEquals('d', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(float1, float0, 0.01F);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol((SymbolTable) null, '\"');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":8=\"I", 1785);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(':', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(1785, jSONScanner0.getFeatures());
      
      jSONScanner0.nextTokenWithColon(1785);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(1785, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1785, jSONScanner0.getFeatures());
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "fastjson.compatibleWithJavaBean";
      char char0 = '\"';
      Date date0 = jSONReaderScanner0.scanDate('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("pos 3, json : :8=\"I", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1785, jSONScanner0.getFeatures());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONReaderScanner0.hasSpecial = false;
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      char char1 = '<';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-0LmnW^.-");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      MockDate mockDate0 = new MockDate('>', 0, 0, 1369, 0);
      assertNotNull(mockDate0);
      assertEquals("Mon Feb 26 01:00:00 GMT 1962", mockDate0.toString());
      
      jSONScanner0.ch = '>';
      assertEquals('>', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(1369);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-0LmnW^.-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken(1164);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("-0LmnW^.-", 1164);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      int int0 = jSONScanner1.token();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("0Lm", string0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-0LmnW^.-", 106);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("0Lm", 1751);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertEquals(1751, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('0', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      Locale locale1 = new Locale("0Lm", "-0LmnW^.-", "(<h3a6+vKp^K [6");
      assertNotNull(locale1);
      assertEquals("(<h3a6+vKp^K [6", locale1.getVariant());
      assertEquals("0lm", locale1.getISO3Language());
      assertEquals("0lm_-0LMNW^.-_(<h3a6+vKp^K [6", locale1.toString());
      assertEquals("0lm", locale1.getLanguage());
      assertEquals("-0LMNW^.-", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1164, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("0Lm");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('0', jSONReaderScanner3.getCurrent());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner3.scanIdent();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(18, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('\u001A', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner3.scanIdent();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(18, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('\u001A', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner0.scanDate('$');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string1 = jSONReaderScanner0.numberString();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("-0", string1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('m', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string1.equals((Object)string0));
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 43, 1369);
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(1369, jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      
      int int1 = jSONReaderScanner4.scanInt('0');
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(1369, jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertTrue(int1 == int0);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(106, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner4));
      
      int int2 = jSONReaderScanner4.token();
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(1369, jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner4.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
