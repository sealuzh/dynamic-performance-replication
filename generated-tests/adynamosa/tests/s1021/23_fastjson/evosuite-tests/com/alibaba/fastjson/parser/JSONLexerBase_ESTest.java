/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 09:01:33 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanLong('[');
      jSONReaderScanner0.calendar = null;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.np = 45;
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.isRef();
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.indexOf('z', (-241));
      jSONScanner0.stringDefaultValue();
      jSONScanner0.matchField2(charArray0);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8");
      JSONScanner jSONScanner0 = new JSONScanner("3x!dLP7y;e75^oP,d&i");
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 't';
      charArray0[2] = '-';
      charArray0[3] = 'C';
      charArray0[4] = '\\';
      charArray0[5] = 'Z';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner1 = new JSONScanner("8", 119);
      jSONScanner1.isRef();
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(19);
      jSONScanner0.scanEnum(class0, symbolTable0, '\\');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'n';
      charArray0[2] = 'N';
      charArray0[3] = 'J';
      charArray0[4] = '&';
      charArray0[5] = 'W';
      charArray0[6] = 'o';
      charArray0[7] = 'E';
      charArray0[8] = '1';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray1 = new char[7];
      charArray1[0] = '#';
      charArray1[1] = '?';
      charArray1[2] = 'm';
      charArray1[3] = 'u';
      charArray1[4] = '\\';
      charArray1[5] = '7';
      charArray1[6] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 97, (-1573));
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n}7");
      jSONScanner0.scanType("n}7");
      jSONScanner0.scanString('?');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-~</8<}+KH8<Kh");
      TimeZone.getDefault();
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal(']');
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7y'S[l0mO2U2");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      jSONScanner0.scanLong('k');
      TimeZone.getDefault();
      JSONScanner jSONScanner1 = new JSONScanner("$[pxUhTpuR", (-1));
      jSONScanner1.nextIdent();
      jSONScanner1.scanISO8601DateIfMatch();
      SymbolTable symbolTable0 = new SymbolTable(1877);
      jSONScanner0.scanLong('k');
      jSONScanner1.scanInt('k');
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(9);
      assertEquals(9, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("m0");
      jSONScanner1.isEOF();
      boolean boolean0 = jSONScanner1.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~ Mv.q0|-4t");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('6');
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      jSONScanner0.sp = 13;
      jSONScanner0.scanString('-');
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      jSONScanner0.pos();
      char char0 = jSONScanner0.getCurrent();
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "gcz";
      JSONScanner jSONScanner0 = new JSONScanner("gcz");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103, 65279);
      jSONReaderScanner0.nextToken(19);
      jSONReaderScanner0.scanDouble('p');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("z", 59);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nuXll");
      char char0 = '<';
      jSONScanner0.scanNumber();
      jSONScanner0.scanString('<');
      jSONScanner0.scanDecimal('<');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      jSONScanner0.nextToken();
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.integerValue();
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(8192, 8192, 1095, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{");
      TimeZone.getDefault();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      int int0 = jSONScanner0.intValue();
      assertEquals(7, jSONScanner0.pos());
      assertEquals((-51), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 46);
      jSONReaderScanner0.putChar('&');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanLong('r');
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'R');
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      int int0 = (-1617521625);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2525, (-1617521625), (-1617521625), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('<');
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4388);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.setToken(0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-1084572891));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4388);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-3384), 643);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("9ue&aL2)hmM$Ks<g");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("null");
      jSONScanner1.nextToken();
      jSONScanner1.scanType("unclosed");
      jSONScanner0.skipWhitespace();
      System.setCurrentTimeMillis((-2));
      jSONScanner0.scanISO8601DateIfMatch();
      int int0 = jSONScanner1.intValue();
      assertEquals(8, jSONScanner1.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/fng");
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        jSONScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\u0000");
      stringReader0.read();
      stringReader0.skip(5347909877633654828L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-3009);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3009));
      char[] charArray1 = new char[3];
      jSONScanner0.matchField2(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 9 - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b)rq");
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '~';
      charArray0[2] = 'x';
      charArray0[3] = 'Z';
      charArray0[4] = 'h';
      charArray0[5] = '|';
      charArray0[6] = 'x';
      charArray0[7] = '\"';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      jSONScanner0.lexError("", (Object[]) null);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanDecimal('5');
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.scanFieldStringArray(charArray0, (-3034), (SymbolTable) null);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-1070);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yn&DeKuW", (-1070));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".A_6Y}Chj");
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'U';
      charArray0[2] = '8';
      charArray0[3] = '(';
      charArray0[4] = 'D';
      charArray0[5] = '_';
      charArray0[6] = 's';
      charArray0[7] = 'a';
      charArray0[8] = '<';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanDecimal('8');
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, 'g');
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str");
      jSONReaderScanner0.nextToken();
      char char0 = 'y';
      jSONReaderScanner0.scanUUID('y');
      jSONReaderScanner0.scanBoolean('F');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      char char1 = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2876));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '7');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('\'');
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      jSONScanner0.scanNullOrNew();
      charArray0[1] = '9';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.nextToken();
      jSONScanner0.info();
      assertEquals(20, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("Set", (-2));
      jSONScanner1.tokenName();
      jSONScanner1.scanDate('\'');
      jSONScanner1.stringDefaultValue();
      assertEquals((-2), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      jSONScanner0.scanString('-');
      jSONScanner0.nextToken();
      jSONScanner0.info();
      SymbolTable symbolTable0 = new SymbolTable(123);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : [pos 0, json : $[pxUhTpuR
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.setToken((-460));
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '?';
      charArray0[2] = 'f';
      charArray0[3] = '`';
      charArray0[4] = '=';
      charArray0[5] = ';';
      charArray0[6] = 'P';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.nextToken();
      char[] charArray1 = JSONLexerBase.typeFieldName;
      jSONScanner0.isRef();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4v");
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.ch = 'v';
      jSONReaderScanner0.scanLong('b');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{");
      TimeZone.getDefault();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(3, jSONScanner0.pos());
      
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, symbolTable0, 'b');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"i1y\", pos 7, json : tz4=i1y-51c{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanIdent();
      jSONScanner0.scanType("null");
      jSONScanner0.scanDecimal('e');
      jSONScanner0.tokenName();
      jSONScanner0.isRef();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("gcz");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(1, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 392, (-1350));
      jSONReaderScanner0.np = 100;
      jSONReaderScanner0.scanDouble('4');
      char[] charArray1 = new char[9];
      charArray1[0] = '4';
      charArray1[1] = '4';
      charArray1[2] = '4';
      charArray1[3] = '4';
      charArray1[4] = '4';
      charArray1[5] = '4';
      charArray1[6] = '4';
      charArray1[7] = '4';
      charArray1[8] = '4';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("gcz", (-1));
      jSONReaderScanner1.scanFieldUUID(charArray0);
      jSONReaderScanner1.scanFieldLong(charArray1);
      jSONReaderScanner1.scanString('4');
      assertEquals((-1), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanDate('p');
      char[] charArray0 = new char[0];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      long long1 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      char[] charArray0 = new char[1];
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals(757770282L, long0);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{");
      TimeZone.getDefault();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'K';
      charArray0[3] = 'S';
      charArray0[4] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanDate('a');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("26i>n>#TZv2f4P", (-1743));
      jSONScanner0.scanDecimal('Y');
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.bytesValue();
      char char0 = 'Z';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1743));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      MockDate mockDate0 = new MockDate('p', 0, 'p', 'p', 'p', 'p');
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanDate('p');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 9964);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("gcz");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = 'V';
      charArray0[4] = '%';
      charArray0[5] = 'B';
      charArray0[6] = '1';
      charArray0[7] = 'E';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(";H4.pLh#k|e[", 78);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner1.isEnabled(feature0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol((SymbolTable) null, 'Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(192);
      jSONScanner0.stringDefaultValue = "unclosed";
      SymbolTable symbolTable0 = new SymbolTable(5375);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'R');
      jSONScanner0.putChar('d');
      int int0 = jSONScanner0.token();
      assertEquals(192, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UYq,WQK5/3dGV");
      TimeZone.getDefault();
      jSONScanner0.nextIdent();
      jSONScanner0.hasSpecial = false;
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(1918);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{", (-1743));
      jSONScanner0.scanDecimal('4');
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.info();
      jSONScanner0.integerValue();
      jSONScanner0.tokenName();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a");
      jSONReaderScanner0.isEnabled((-106));
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanBoolean(')');
      JSONScanner jSONScanner0 = new JSONScanner("=C.*+6}9fY]Gs", (-2074));
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Lc*c5-)W'tqym");
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDouble('7');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.isEnabled(0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.setToken(1569);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray1 = new char[6];
      charArray1[0] = 'q';
      charArray1[1] = 'g';
      charArray1[2] = '\\';
      charArray1[3] = 'D';
      charArray1[4] = '6';
      charArray1[5] = '3';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1569, charArray1, 1569, 1569);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{");
      char[] charArray0 = new char[5];
      jSONScanner0.np = (-710);
      charArray0[0] = 'c';
      charArray0[1] = 'H';
      charArray0[2] = 'q';
      charArray0[3] = '^';
      charArray0[4] = 'J';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.sp = 1428;
      TimeZone.getDefault();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanUUID('y');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$[pxUhTpuR");
      jSONScanner0.scanString('-');
      jSONScanner0.nextToken();
      int int0 = 8;
      jSONScanner0.setToken(8);
      jSONScanner0.nextToken();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanLong('r');
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'R');
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2525, 2808, 2808, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.isEnabled(13);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "null";
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[3] = '#';
      charArray0[4] = '6';
      charArray0[5] = '0';
      charArray0[6] = '2';
      charArray0[7] = 'z';
      charArray0[8] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102, 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      char char0 = '|';
      jSONReaderScanner0.scanInt('|');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.nextToken();
      jSONScanner0.scanType("TreeSet");
      System.setCurrentTimeMillis((-528L));
      jSONScanner0.isEnabled((-2));
      int int0 = jSONScanner0.intValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(43183, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = (-106);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.isEnabled((-106));
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanBoolean(')');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1340);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '2');
      jSONScanner0.scanDecimal('#');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_s<");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken();
      assertEquals('s', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25, 0);
      jSONReaderScanner0.scanLong('}');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" p;DRAmBg+g/Q\"", 12);
      jSONReaderScanner0.nextToken(2284);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.scanDate('&');
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      jSONReaderScanner0.scanInt('|');
      jSONReaderScanner0.scanDouble('|');
      jSONReaderScanner0.scanUUID('C');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nulWl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n7\"y&L?OkU|KIb$4");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6.");
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      JSONScanner jSONScanner1 = new JSONScanner("6.");
      jSONScanner1.resetStringPosition();
      int int0 = jSONScanner1.scanType("6.");
      assertEquals((-2), int0);
      
      jSONScanner0.scanFloat('(');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner1.scanDecimal('C');
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.nextToken();
      long long0 = jSONScanner0.longValue();
      assertEquals(22, jSONScanner0.token());
      assertEquals(43183L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(3615);
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("ONRKsJ;9bo=HZ7", 0);
      jSONScanner0.info();
      SymbolTable symbolTable0 = new SymbolTable(55296);
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals("ONRKsJ", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char char0 = ')';
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, ')');
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '-';
      charArray0[2] = '>';
      charArray0[3] = '8';
      charArray0[4] = '~';
      charArray0[5] = 'v';
      charArray0[6] = 'Y';
      charArray0[7] = '+';
      charArray0[8] = 'z';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      int int0 = 44;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 44);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('Y');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nusl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";\"vmKzib~}Aak", (-1826));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'H';
      charArray0[2] = 'V';
      charArray0[3] = '';
      charArray0[4] = 'F';
      charArray0[5] = '`';
      charArray0[6] = '[';
      charArray0[7] = '~';
      charArray0[8] = ':';
      jSONScanner0.scanFieldStringArray(charArray0, (-1826), (SymbolTable) null);
      jSONScanner0.scanFieldStringArray(charArray0, (-1909650846), (SymbolTable) null);
      assertEquals((-1826), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhTSQ-k{");
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanFloat('7');
      SymbolTable symbolTable0 = new SymbolTable('7');
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '7');
      jSONScanner0.next();
      jSONScanner0.scanType((String) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '}';
      charArray0[2] = '7';
      charArray0[3] = '}';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-660));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a");
      jSONReaderScanner0.isEnabled((-106));
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(525277, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.scanDouble('^');
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.setToken(8192);
      jSONScanner0.nextToken();
      char[] charArray0 = JSONLexerBase.typeFieldName;
      jSONScanner0.longValue();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dalvik");
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '9');
      jSONReaderScanner0.scanDecimal('Y');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - d, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 110;
      JSONScanner jSONScanner0 = new JSONScanner("<R,Tnkkh{L{m/7hK`l", 110);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U", (-336));
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'V';
      charArray0[2] = 'T';
      charArray0[3] = '+';
      charArray0[4] = 'k';
      charArray0[5] = 'H';
      charArray0[6] = 'e';
      charArray0[7] = 'S';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aw");
      boolean boolean0 = jSONReaderScanner0.isEnabled((-106));
      assertTrue(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dalvik");
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("dalvik");
      jSONScanner0.scanDouble(':');
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, true);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 109);
      jSONScanner1.scanFieldDouble(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      jSONReaderScanner0.scanDecimal('a');
      JSONLexerBase.isWhitespace('\'');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 8192);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "ue&aL)hm.$Ks<g";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.nextToken(40);
      jSONReaderScanner0.scanDouble('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      StringReader stringReader0 = new StringReader("float overflow : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.getFeatures();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      charArray0[8] = '9';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.bytesValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(192);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      int int0 = JSONLexer.VALUE;
      jSONScanner0.putChar('z');
      int int1 = jSONScanner0.matchStat();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      boolean boolean0 = jSONReaderScanner0.isEnabled(68);
      assertTrue(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu9ll");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2820);
      jSONReaderScanner0.scanDouble(')');
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 89);
      char[] charArray0 = new char[0];
      stringReader0.read();
      jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner1.scanInt('F');
      jSONReaderScanner1.charAt(89);
      assertEquals(89, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1291);
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'z');
      jSONReaderScanner0.scanDecimal('');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - O, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~ Mv.q0|-4t");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match Z - M, info : pos 2, json : ~ Mv.q0|-4t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N_s<");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul<:l");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, ')');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(')', ']', ')', 'F', ']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '#';
      charArray0[2] = '^';
      charArray0[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      double double0 = jSONReaderScanner0.scanDouble('2');
      assertEquals(9.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n;");
      jSONScanner0.scanFloat('7');
      jSONScanner0.nextIdent();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '\\';
      charArray0[2] = 'D';
      charArray0[3] = '@';
      charArray0[4] = '\'';
      charArray0[5] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3637);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("type not match. ");
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ue&aL)hm.$Ks<g");
      jSONScanner0.stringDefaultValue = "ue&aL)hm.$Ks<g";
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanFloat('T');
      jSONScanner0.scanString('@');
      jSONScanner0.scanLong('3');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '9';
      charArray0[2] = 'A';
      charArray0[3] = '6';
      charArray0[4] = 'F';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanString('A');
      jSONScanner0.setToken(78);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.lexError("new", (Object[]) null);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDouble('H');
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = ':';
      charArray0[5] = '^';
      charArray0[6] = 'e';
      charArray0[7] = 'L';
      jSONReaderScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = '^';
      charArray1[1] = 'L';
      charArray1[2] = '^';
      charArray1[3] = '<';
      jSONReaderScanner0.sbuf = charArray1;
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanInt('+');
      jSONReaderScanner1.charAt(3);
      jSONReaderScanner1.isBlankInput();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("]Z@IGmY");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner1.scanStringArray(linkedList0, 'I');
      jSONScanner1.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char char0 = jSONScanner1.next();
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals('@', char0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      char char0 = 'w';
      jSONScanner0.putChar('w');
      char char1 = ')';
      jSONScanner0.scanDouble(')');
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      jSONScanner0.scanString('[');
      JSONScanner jSONScanner1 = new JSONScanner("(", (-1));
      jSONScanner1.nextToken();
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.setToken(78);
      jSONScanner0.scanDecimal('?');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'E');
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.isEnabled(4076, 1837);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'n';
      charArray0[2] = '~';
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g", (-2818));
      jSONScanner0.scanDecimal('&');
      jSONScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(125, 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'O';
      charArray0[2] = 'X';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = 'F';
      charArray0[6] = '}';
      charArray0[7] = ']';
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('l');
      jSONScanner0.scanString('C');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanDouble('[');
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      jSONScanner0.intValue();
      jSONScanner0.isRef();
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bRq]@");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-3908));
      jSONScanner1.scanFloat('u');
      SymbolTable symbolTable0 = new SymbolTable(877);
      jSONScanner0.bytesValue();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-3908));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0W");
      JSONScanner jSONScanner1 = new JSONScanner("new", 0);
      jSONScanner1.putChar('W');
      jSONScanner0.setToken((-2209));
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      int int0 = 78;
      jSONScanner0.setToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.scanDouble('^');
      int int0 = JSONLexer.VALUE;
      char char0 = ':';
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      JSONScanner jSONScanner0 = new JSONScanner("tz4=i1y-51c{");
      jSONScanner0.setToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      jSONScanner0.skipWhitespace();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(")>h'q03^cOafkkEWw{");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")>h'q03^cOafkkEWw{", (-336));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '9');
      jSONReaderScanner0.scanInt('x');
      double double0 = jSONReaderScanner0.scanDouble('t');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, ')');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.info();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanNullOrNew();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 3);
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_s<");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue&aL)hm.$Ks<g");
      jSONReaderScanner0.scanDouble('l');
      int int0 = JSONLexer.VALUE;
      jSONReaderScanner0.scanLong(':');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A&3<?f>");
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("M");
      jSONScanner0.setToken(317);
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}v+{'");
      JSONScanner jSONScanner1 = new JSONScanner("}v+{'");
      jSONScanner1.pos = 0;
      long long0 = jSONScanner1.longValue();
      assertEquals(0L, long0);
      
      String string0 = jSONScanner1.scanString('C');
      assertNull(string0);
      
      jSONScanner1.nextToken();
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) arrayList0;
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.putChar(')');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ull", 41);
      SymbolTable symbolTable0 = new SymbolTable(41);
      char[] charArray0 = new char[5];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'j');
      charArray0[0] = 'e';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = 'b';
      charArray0[4] = '%';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-1), 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.setToken(78);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.lexError("new", (Object[]) null);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.scanDouble(':');
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanUUID('A');
      JSONScanner jSONScanner0 = new JSONScanner("/FnG?eA2*iC%G(`k!*9", (-1));
      jSONScanner0.setToken((-1));
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2095));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.scanFloat('~');
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g", (-1));
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}v+{'");
      Locale locale0 = Locale.PRC;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(arrayList0, set0);
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3392903);
      jSONReaderScanner0.nextTokenWithChar('P');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanType(".XX[r%nha%J(q");
      SymbolTable symbolTable0 = new SymbolTable(2031);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('a');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.scanString('C');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-1));
      char[] charArray0 = new char[8];
      jSONScanner0.close();
      charArray0[0] = '5';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = '5';
      charArray0[4] = 'C';
      charArray0[5] = '&';
      charArray0[7] = 'C';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{s$gKq$iy4L", ':');
      jSONScanner0.setToken(36);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("Set");
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      charArray0[2] = 'Y';
      charArray0[3] = '(';
      charArray0[4] = 'c';
      charArray0[5] = 'Z';
      charArray0[6] = 'a';
      jSONScanner1.scanFieldDate(charArray0);
      jSONScanner1.nextToken(0);
      jSONScanner1.scanBoolean('`');
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = jSONScanner0.pos();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(207);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'G');
      jSONScanner0.token();
      int int0 = jSONScanner0.scanType("error");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      jSONScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(0);
      jSONScanner0.scanBoolean('C');
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(11, jSONScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul", 50);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.matchStat = (int) '*';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner1.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(101);
      jSONReaderScanner1.scanSymbol(symbolTable0);
      jSONReaderScanner1.sub_chars(103, 42);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('4');
      jSONScanner0.scanDate('s');
      assertEquals('=', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.setToken((-548));
      JSONScanner jSONScanner1 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      jSONScanner1.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner1.charAt(0);
      jSONScanner1.scanBoolean('9');
      assertEquals(2, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('X');
      jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      JSONScanner jSONScanner1 = new JSONScanner("float");
      jSONScanner1.setToken(0);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.scanDecimal('s');
      jSONScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(989, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error :");
      char char0 = 'o';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      jSONScanner0.setToken(13);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      boolean boolean1 = JSONLexerBase.isWhitespace('/');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.putChar('3');
      jSONScanner0.setToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '[';
      charArray0[3] = 'o';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O~YqqpE");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = 'O';
      charArray0[3] = '.';
      charArray0[4] = '6';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '0');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.setToken(48);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.charAt(1147);
      jSONScanner0.scanBoolean('\u001A');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.setToken(1569);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\u0000");
      stringReader0.read();
      stringReader0.skip(5347909877633654828L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.reset();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 116);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.sbuf = charArray0;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.nextToken();
      int int0 = (-2535);
      int int1 = 2958;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match | - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4]dJ_r/P=");
      jSONScanner0.bytesValue();
      jSONScanner0.setToken(3478);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.charAt(1147);
      boolean boolean0 = jSONScanner0.scanBoolean('\u001A');
      assertEquals('{', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not close json text, token : ");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'a');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('|');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vJA1f$9e$R? ", 108);
      jSONReaderScanner0.nextToken();
      int int0 = 107;
      SymbolTable symbolTable0 = new SymbolTable(35);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(108);
      // Undeclared exception!
      try { 
        symbolTable1.addSymbol("", 467, 24, 0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'w';
      charArray0[3] = 'L';
      charArray0[4] = '\"';
      charArray0[5] = 'S';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 296);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.scanFloat('7');
      jSONScanner0.scanString('7');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.scanFloat('~');
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.getTimeZone();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "'&`oh ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'&`oh ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      SymbolTable symbolTable0 = new SymbolTable(1919);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("undefined");
      jSONScanner1.nextToken((-595));
      jSONScanner1.scanBoolean('u');
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 3392903;
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('M');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'O');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 70);
      boolean boolean0 = jSONReaderScanner0.isEnabled(70);
      assertEquals(70, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanInt('|');
      jSONReaderScanner0.charAt(9);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{4dyJ_/Pu]");
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("{4dyJ_/Pu]");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'A');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "error parse true";
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.setToken(0);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(86);
      int int0 = 733;
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('z', 'z', 'J', 'z', 'm', '\'');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      jSONScanner0.setToken(3478);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("-=&F{%~^pF?'W_ 9t+1"));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      jSONScanner0.setToken(3478);
      jSONScanner0.nextToken();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.charAt(76);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-=&F{%~^pF?'W_ 9t+1");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.scanDouble(':');
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = (-1094);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",]d|q[JvhfP<re~", (-1094));
      jSONReaderScanner0.nextToken();
      int int1 = 107;
      SymbolTable symbolTable0 = new SymbolTable(107);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UYq,WQK5/3dGV", 14);
      Feature feature0 = Feature.SupportNonPublicField;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals(14, jSONScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("7K\"qgNd>-#9RD_P", 0);
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match S - -, info : pos 0, json : -=&F{%~^pF?'W_ 9t+1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, ')');
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      jSONScanner0.scanIdent();
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-711), charArray0, (-1513), 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.scanInt(')');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhTSQ-k{");
      SymbolTable symbolTable0 = new SymbolTable(3366);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '3');
      jSONScanner0.setToken(3366);
      jSONScanner0.next();
      assertEquals(3366, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4]dJ_r/P=");
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "null";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanUUID('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}thSQ-k{");
      char[] charArray0 = new char[2];
      jSONScanner0.matchField(charArray0);
      charArray0[1] = 's';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.scanDecimal('s');
      jSONScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(989, 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDate", 2817);
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(2817);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      jSONReaderScanner0.scanDouble('a');
      charArray0[1] = 'c';
      charArray0[2] = '{';
      charArray0[3] = 'U';
      charArray0[4] = '\\';
      char char0 = 'b';
      charArray0[5] = 'b';
      charArray0[6] = '*';
      charArray0[7] = 'E';
      charArray0[8] = '?';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'M';
      charArray0[2] = '*';
      charArray0[3] = 'P';
      charArray0[4] = 'u';
      char char0 = 'l';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      jSONScanner0.nextToken();
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", 83);
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '.';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      charArray0[4] = '8';
      charArray0[5] = '7';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      charArray0[8] = 'F';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('t');
      assertEquals(0, int0);
      
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V{4=]dJ_r/Pg=");
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = ';';
      charArray0[3] = 'k';
      charArray0[4] = 'A';
      charArray0[5] = '@';
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('*');
      jSONReaderScanner0.scanUUID(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AllowComment;
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.config(feature0, false);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDouble(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.pos();
      jSONScanner0.getCurrent();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new eror", (-1949));
      jSONScanner0.scanDouble(':');
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = ':';
      charArray0[4] = '=';
      charArray0[5] = 'Y';
      charArray0[6] = ':';
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-3997), jSONScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. V
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ff");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(3615);
      jSONReaderScanner0.charArrayCompare(charArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.isEnabled(91, 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'V';
      charArray0[2] = '$';
      charArray0[3] = '&';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char char0 = '&';
      jSONScanner0.scanString('&');
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = 'C';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 2561);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'V';
      charArray0[2] = 'z';
      charArray0[3] = 'S';
      charArray0[4] = 'q';
      charArray0[5] = 'c';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanDecimal('H');
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.bytesValue();
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jSONScanner0.calendar = calendar0;
      JSONScanner jSONScanner1 = new JSONScanner("create asm serializer error, class ", 0);
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      JSONScanner jSONScanner1 = new JSONScanner("+nv$");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('m');
      assertEquals(1, jSONScanner0.token());
      
      float float0 = jSONScanner1.scanFloat('|');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'L';
      charArray0[2] = '^';
      charArray0[3] = 'F';
      charArray0[4] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7);
      TimeZone.getDefault();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.setToken(7);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(22);
      char[] charArray1 = new char[1];
      charArray1[0] = 'r';
      jSONReaderScanner1.scanFieldBoolean(charArray1);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner1.scanStringArray(set0, '|');
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '^';
      charArray0[2] = 'r';
      charArray0[3] = 'e';
      charArray0[4] = '+';
      charArray0[6] = '0';
      charArray0[7] = 'y';
      charArray0[8] = 'G';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isEnabled(59, 59);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('7');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 381);
      jSONReaderScanner0.features = 53;
      jSONReaderScanner0.features = 53;
      jSONReaderScanner0.token = 381;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5g<8#=mK3J");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O$~++LDe_E~=R^");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.indexOf('Z', 0);
      jSONReaderScanner0.scanInt('a');
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5g<8#=mK3J");
      JSONScanner jSONScanner0 = new JSONScanner("5g<8#=mK3J");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[7];
      jSONScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = '5';
      charArray0[1] = '^';
      charArray0[2] = 't';
      charArray0[3] = 'E';
      charArray0[4] = 'i';
      charArray0[5] = 'Y';
      charArray0[6] = 'f';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanString('m');
      float float0 = jSONScanner0.scanFloat('m');
      assertEquals(8, jSONScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5g<8#=mK3J");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '`';
      charArray0[2] = 'Y';
      charArray0[3] = 'J';
      charArray0[4] = '\"';
      charArray0[5] = '-';
      charArray0[6] = 'P';
      charArray0[7] = 'm';
      charArray0[8] = ' ';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      int int1 = jSONReaderScanner0.scanInt('P');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ksg");
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("9ue&aL2)hmM$Ksg", 433);
      Class<Object> class0 = Object.class;
      jSONReaderScanner1.newCollectionByType(class0);
      jSONReaderScanner1.isRef();
      int int1 = jSONReaderScanner1.scanInt('*');
      assertEquals(433, jSONReaderScanner1.getFeatures());
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('m');
      jSONScanner0.scanFloat('m');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      char char0 = 'a';
      jSONScanner0.scanFloat('a');
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5g<8#=mK3J");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '9';
      charArray0[2] = 'm';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      jSONScanner1.scanFieldLong(charArray0);
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x4d<`FB>8uzt$Cj.i");
      int int0 = (-4420);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2877);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - x, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('7');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhTSQ-k{");
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanUUID('E');
      jSONScanner0.scanFloat('7');
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-3498), 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BwT");
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '';
      int int0 = 1161;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1161, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "/c5o";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/c5o");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      jSONScanner0.scanString('x');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'x');
      jSONScanner0.pos = 121;
      jSONScanner0.scanLong('z');
      jSONScanner0.setToken((-2293));
      jSONScanner0.next();
      assertEquals((-2293), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.scanDouble(':');
      jSONScanner0.config(feature0, true);
      jSONScanner0.putChar('i');
      assertEquals(991, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.isEnabled(632, (-159));
      jSONReaderScanner0.getLocale();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanDecimal('E');
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.resetStringPosition();
      jSONScanner0.putChar('+');
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.isEnabled((-1336), 86);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.subString(83, 83);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('j', '^', 'P', 'V', 'd', '(');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1100));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'q';
      charArray0[2] = '{';
      charArray0[3] = '*';
      charArray0[4] = '_';
      charArray0[5] = 'U';
      jSONReaderScanner0.nextIdent();
      charArray0[6] = 'q';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.matchStat = 119;
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XMpYT(-|oMg=0T");
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'A';
      charArray0[2] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 3633);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(3633, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isEnabled(0, 830);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '^';
      charArray0[2] = 'e';
      charArray0[3] = 'w';
      charArray0[4] = '+';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 53);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.nextIdent();
      int int0 = (-3729);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-3729));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5g<8#=mK3J");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-4420));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      jSONScanner0.intValue();
      charArray0[2] = 'N';
      charArray0[3] = 'u';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('d');
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}X");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'I';
      charArray0[2] = '2';
      charArray0[3] = 'k';
      charArray0[4] = 't';
      charArray0[5] = ';';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('*');
      jSONReaderScanner0.scanBoolean(')');
      JSONScanner jSONScanner0 = new JSONScanner("9ue&aL2)hmM$Ks<g", (-1));
      jSONScanner0.indexOf('O', 49);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NBl*'P8", 102);
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.token = 102;
      int int0 = jSONScanner0.token();
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), (String) null, (-1), 88, (-1), 2048, 88, 99999, (-1), (-1234));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=&F{%~^pF?'W_ 9t+1");
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 's';
      jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanDecimal('4');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'g';
      charArray1[1] = 'r';
      jSONScanner0.scanFieldLong(charArray1);
      jSONScanner0.nextToken();
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      int int1 = jSONReaderScanner0.scanInt('*');
      assertFalse(int1 == int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9ue&aL2)hmM$Ks<g");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.isEnabled(91, 5169);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.setToken(26);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", (-1949));
      SymbolTable symbolTable0 = new SymbolTable(3366);
      SymbolTable symbolTable1 = new SymbolTable(6);
      jSONScanner0.scanSymbolWithSeperator(symbolTable1, '>');
      assertEquals((-1949), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_?");
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanUUID('7');
      jSONScanner0.scanFloat('e');
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", (-1949));
      SymbolTable symbolTable0 = new SymbolTable(3366);
      jSONScanner0.matchStat = 3366;
      String string0 = jSONScanner0.scanString('~');
      assertNotNull(string0);
      
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'G');
      assertEquals((-1949), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", (-1949));
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(3366);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'G');
      assertEquals((-1949), jSONScanner0.getFeatures());
      
      jSONScanner0.scanDouble('G');
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      char[] charArray0 = new char[1];
      char char0 = 'u';
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      char[] charArray0 = new char[2];
      jSONScanner0.matchField(charArray0);
      PipedReader pipedReader0 = new PipedReader();
      SymbolTable symbolTable0 = new SymbolTable(1865);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : &pos 0, json : &}tdhSQ-k{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      jSONReaderScanner0.scanDecimal('1');
      TimeZone.getDefault();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 48, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      jSONScanner0.scanDecimal('s');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      char[] charArray0 = new char[2];
      jSONScanner0.matchField(charArray0);
      charArray0[1] = 's';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('s');
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanUUID(')');
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      jSONScanner0.scanFieldBigInteger(charArray0);
      char char0 = '^';
      jSONScanner0.putChar('^');
      jSONScanner0.nextToken();
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      jSONScanner0.scanUUID('\"');
      jSONScanner0.pos();
      JSONScanner jSONScanner1 = new JSONScanner("&}tdhSQ-k{");
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match \" - &, info : pos 0, json : &}tdhSQ-k{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-3009);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3009));
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanFieldString(charArray0);
      char char0 = '*';
      char[] charArray1 = new char[3];
      charArray1[0] = '*';
      charArray1[1] = '*';
      charArray1[2] = '*';
      jSONScanner0.matchField2(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V{4=]dJ_r/Pg=");
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("equals");
      char char0 = 'o';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONScanner jSONScanner0 = new JSONScanner("1)");
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '-';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = '-';
      charArray0[6] = 's';
      charArray0[7] = 's';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.eofPos = (-1636);
      jSONScanner0.scanDate('q');
      jSONScanner0.nextToken(6);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 's';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('x');
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.matchStat();
      jSONScanner0.putChar('-');
      jSONScanner0.nextToken((-1));
      assertEquals('}', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      JSONScanner jSONScanner0 = new JSONScanner("V0xYXiqS8<t>");
      jSONScanner0.scanFieldDouble(charArray0);
      char char0 = 'x';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 636, 6604);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "H)0aFy%v:>-}xkt!3+F";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H)0aFy%v:>-}xkt!3+F");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "P";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P");
      jSONReaderScanner0.hasSpecial = true;
      char char0 = '\"';
      jSONReaderScanner0.scanDouble('\"');
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(")>h'q03^cOafkkEWw{");
      SymbolTable symbolTable0 = new SymbolTable(752);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'l');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'Q';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanDecimal('\u0000');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanInt('6');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '\u0000');
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.util.OptionalInt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalInt");
      jSONScanner0.nextToken((-2269));
      jSONScanner0.scanDate('X');
      jSONScanner0.scanBoolean('e');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-3009);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3009));
      SymbolTable symbolTable0 = null;
      char char0 = '*';
      char[] charArray1 = new char[3];
      charArray1[0] = '*';
      charArray1[1] = '*';
      charArray1[2] = '*';
      jSONScanner0.matchField2(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.getLocale();
      jSONReaderScanner0.scanLong('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.util.OptionalInt");
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalInt");
      char char0 = 'N';
      jSONScanner0.scanDouble('N');
      jSONScanner0.bytesValue();
      int int0 = 2377;
      jSONScanner0.longValue();
      jSONScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.OptionalInt", 62);
      SymbolTable symbolTable0 = new SymbolTable(62);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 79, 91, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      int int0 = 0;
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('6');
      jSONScanner0.scanBoolean('C');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanUUID('\"');
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&}tdhSQ-k{");
      char[] charArray0 = new char[2];
      int int0 = 1571;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&}tdhSQ-k{", 1571);
      jSONReaderScanner0.scanUUID('?');
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONReaderScanner0.nextToken(0);
      jSONScanner1.scanDate('+');
      jSONReaderScanner0.scanLong('+');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", (-1949));
      JSONScanner jSONScanner1 = new JSONScanner("scan new error", 1157);
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'm';
      charArray0[2] = '9';
      jSONScanner1.scanFieldIntArray(charArray0);
      jSONScanner1.lexError((String) null, (Object[]) null);
      jSONScanner1.scanDate('I');
      assertEquals(1, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.util.OptionalInt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'x';
      stringReader0.markSupported();
      charArray0[2] = 'M';
      charArray0[3] = 'R';
      charArray0[4] = 'l';
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('p');
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = ")>h'q03^cOafkkEWw{";
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(2686);
      jSONScanner0.scanDate('a');
      jSONScanner0.scanBoolean('u');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[2] = '1';
      charArray0[3] = '3';
      charArray0[4] = 'Z';
      charArray0[5] = 'C';
      charArray0[6] = '#';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanDate('^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 306);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanStringArray(collection0, '#');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1696), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'X';
      charArray0[2] = 'c';
      charArray0[3] = '&';
      charArray0[4] = 'y';
      charArray0[5] = 'b';
      charArray0[6] = '|';
      charArray0[7] = 'j';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "f";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 't';
      charArray0[2] = '*';
      charArray0[3] = 'b';
      charArray0[4] = 'g';
      charArray0[5] = '8';
      charArray0[6] = '<';
      charArray0[7] = 'y';
      charArray0[8] = 'F';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanType("");
      char[] charArray1 = null;
      jSONReaderScanner0.setToken((-2));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "";
      int int0 = 2475;
      JSONScanner jSONScanner0 = new JSONScanner("", 2475);
      SymbolTable symbolTable0 = new SymbolTable(2475);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_?");
      jSONScanner0.scanUUID('7');
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'Q';
      charArray0[2] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '\"');
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 0, json : scan false error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8nL*t", 0);
      jSONReaderScanner0.tokenName();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-3143));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "}IY]RC)R s/'E`V$|J";
      JSONScanner jSONScanner0 = new JSONScanner("}IY]RC)R s/'E`V$|J", 78);
      int int0 = (-363);
      char char0 = 'R';
      jSONScanner0.scanDouble('R');
      jSONScanner0.eofPos = (-363);
      jSONScanner0.bytesValue();
      int int1 = 2377;
      jSONScanner0.sp = 2377;
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONScanner");
      char[] charArray0 = new char[8];
      char char0 = 'q';
      charArray0[0] = 'q';
      charArray0[1] = 'X';
      charArray0[2] = 'c';
      charArray0[3] = '&';
      charArray0[4] = 'y';
      charArray0[5] = 'b';
      charArray0[6] = '|';
      charArray0[7] = 'j';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-3009);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3009));
      char[] charArray1 = new char[3];
      charArray1[0] = '*';
      charArray1[1] = '*';
      charArray1[2] = '*';
      jSONScanner0.matchField2(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StringReader stringReader0 = new StringReader("java.util.OptionalInt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'x';
      charArray0[2] = 'M';
      charArray0[3] = 'R';
      charArray0[4] = 'l';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'j';
      charArray0[2] = '1';
      charArray0[3] = '3';
      charArray0[4] = 'Z';
      charArray0[5] = 'C';
      charArray0[6] = '#';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanDate('^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "f";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      jSONReaderScanner0.scanType("");
      char[] charArray0 = null;
      jSONReaderScanner0.setToken((-2));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      int int0 = 122;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 122, 122);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      int int1 = (-3178);
      Locale locale0 = Locale.CHINA;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.scanDate('k');
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-3178), (-79));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -79
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")>h'q03^cOafkkEWw{");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('k');
      jSONScanner0.scanBoolean('u');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n1yVXI=@HYhZz");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U 1$16@pA/I*{^", 160);
      jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      SymbolTable symbolTable0 = new SymbolTable(975);
      jSONScanner0.scanFieldStringArray(charArray0, 88, symbolTable0);
      assertEquals(160, jSONScanner0.getFeatures());
  }
}
