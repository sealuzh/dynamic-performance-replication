/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:21:12 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      Login.showTab(byteArray0);
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_allow("conf/subnet_athena.conf");
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login.getPASSWORDENC();
      Login login0 = new Login();
      login0.getServer_fd();
      Proxy proxy0 = Proxy.NO_PROXY;
      Login.mmo_auth_initXML();
      Login.setPASSWORDENC(50);
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
      
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_");
      login0.setServer_fd(intArray0);
      Login.mmo_auth_syncXML();
      login0.setServer_fd(intArray0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      login0.getAuth_num();
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      int int0 = login0.check_ipmask((-2040311264), "Z]g_0@");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      String string0 = "BABY_KNIGHT";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BABY_KNIGHT");
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-59);
      Login.mmo_auth_syncXML();
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)60;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      
      int int1 = Login.mmo_auth_initTXT();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      login0.setAuth_max(598);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("conf/subnet_athena.conf");
      Login.display_title();
      login0.setOut(mockPrintWriter0);
      login0.do_final();
      assertEquals(598, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int1 = login0.check_ipmask(0, "conf/subnet_athena.conf");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.logUnknownPackets((Socket_data) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      Login.login_log("notice_3");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login.setPASSWORDENC((-1941));
      Login login0 = new Login();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals((-1941), login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_num());
      assertEquals((-1941), login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      boolean boolean0 = login0.check_ip(inetAddress0);
      assertTrue(boolean0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("%7-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = login0.getAuth_num();
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("subnet", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      boolean boolean1 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getMd5key());
      assertNull(socket_data0.getName());
      
      byte[] byteArray0 = socket_data0.getIpTab();
      assertNotNull(byteArray0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getMd5key());
      assertNull(socket_data0.getName());
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-88), (byte)1, (byte)42}, byteArray0);
      
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      login_Timer_interval_check_auth_sync0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      ConfigurationManagement.setAccess_allow("conf/subnet_athena.conf");
      int int0 = login0.parse_console("`8\u0004W");
      assertEquals(0, int0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNotNull(socket_data0);
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      login0.setAuth_max(598);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(598, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      FromChar fromChar0 = new FromChar();
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertNotNull(fromChar0);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertNotNull(socket_data0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getMaintenance());
      
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertNotNull(byteArray0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      
      login0.auth_max = (-200);
      assertEquals((-200), login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      PrintWriter printWriter0 = login0.getOut();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNull(printWriter0);
      assertEquals((-200), login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(intArray0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.setPASSWORDENC(2);
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_ConnectionListener0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      login_ConnectionListener0.close();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      login_ConnectionListener0.run();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      PrintWriter printWriter0 = login0.getOut();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNull(printWriter0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      // Undeclared exception!
      try { 
        Login.getMd5Data((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom(17);
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      
      // Undeclared exception!
      try { 
        login0.parse_admin(64, socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      int int0 = Calendar.SHORT;
      assertEquals(1, int0);
      
      int int1 = Login.mmo_auth_initXML();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      FromChar fromChar0 = new FromChar();
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertNotNull(fromChar0);
      
      Login.setPASSWORDENC(50);
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(50, login1.getPASSWORDENC());
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      assertEquals(50, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      
      UserManagement.setAccountIdCount(10030);
      int int2 = Calendar.MAY;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      File file0 = login1.getLog_fp();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login1.equals((Object)login2));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNull(file0);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(50, login1.getPASSWORDENC());
      assertNotSame(login1, login0);
      assertNotSame(login1, login2);
      
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("OFF");
      assertFalse(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.parse_console("OFF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.save_config_in_log();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = FromChar.REQUEST_ACCOUNT_REG2;
      assertEquals(10030, int0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      ConfigurationManagement.setAccess_allownum((-2103795737));
      FromClient fromClient0 = new FromClient();
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertNotNull(fromClient0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      MockSocket mockSocket1 = new MockSocket(proxy0);
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertNotNull(mockSocket1);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket1.isInputShutdown());
      assertFalse(mockSocket1.isClosed());
      assertFalse(mockSocket1.isBound());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isConnected());
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertFalse(mockSocket0.equals((Object)mockSocket1));
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      int int1 = MockThread.MIN_PRIORITY;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login1.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      MySQLConfig.setLogin_server_db("|83");
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(": ", 31052);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login0));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      
      ConfigurationManagement.setAccess_denynum(2);
      login2.save_config_in_log();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-119);
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-119)}, byteArray0);
      
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("sauvegarde");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login.display_title();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)63;
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.save_config_in_log();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      
      login0.do_initTXT();
      assertFalse(login0.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertNotSame(login0, login1);
      
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      
      int int1 = Calendar.AM_PM;
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      
      // Undeclared exception!
      try { 
        login1.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("OFF");
      assertFalse(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      MySQLConfig.setLogin_server_db("OFF");
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      login0.save_config_in_log();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      
      login0.do_initTXT();
      assertFalse(login0.equals((Object)login1));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertNotSame(login0, login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login2);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      
      int int0 = login1.parse_console("alive");
      assertEquals(0, int0);
      assertFalse(login1.equals((Object)login0));
      assertFalse(login1.equals((Object)login2));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login0);
      assertNotSame(login1, login2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      int int0 = FromChar.ACCOUNT_AUTHENTIFY;
      assertEquals(10002, int0);
      
      int int1 = FromClient.VERSION;
      assertEquals(30000, int1);
      assertFalse(int1 == int0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      login0.save_config_in_log();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Login login0 = new Login();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'R');
      assertNotNull(auth_data0);
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals((-1), auth_data0.getCharserver());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getLogin_id1());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals('R', auth_data0.getSex());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        UserManagement.addUserTXT("LOGIN_LOG_15", "conf/subnet_athena.conf", (String) null, 'H');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getName());
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'R');
      assertNotNull(auth_data0);
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals('R', auth_data0.getSex());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0, auth_data0.getVersion());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals("-", auth_data0.getEmail());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(intArray0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Login.display_title();
      login0.do_initTXT();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.save_config_in_log();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      
      int int0 = FromClient.VERSION;
      assertEquals(30000, int0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      login1.save_config_in_log();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login0);
      
      int int1 = login0.parse_console("help");
      assertEquals(0, int1);
      assertFalse(login0.equals((Object)login1));
      assertFalse(int1 == int0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertNotSame(login0, login1);
      
      login0.do_initTXT();
      assertFalse(login0.equals((Object)login1));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertNotSame(login0, login1);
      
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNotNull(iDBManagementLogin0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(": ", 31052);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      
      ConfigurationManagement.setAccess_denynum(30);
      login2.save_config_in_log();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      int[] intArray0 = login0.getServer_fd();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.save_config_in_log();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = login0.parse_console("]KP{1=Mw");
      assertEquals(0, int0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      MySQLConfig.setLogin_server_port(30);
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("  /_____/  /__//_//_/     /_//_//__/ /_//_//____//_//_//__//_/  ", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'R');
      assertNotNull(auth_data0);
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals('R', auth_data0.getSex());
      assertEquals("  /_____/  /__//_//_/     /_//_//__/ /_//_//____//_//_//__//_/  ", auth_data0.getUserid());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals("-", auth_data0.getEmail());
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      
      Random.setNextRandom(30);
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncTXT();
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login3);
      assertEquals(0, login3.getAuth_num());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_max());
      
      Login login4 = new Login();
      assertFalse(login4.equals((Object)login0));
      assertFalse(login4.equals((Object)login1));
      assertFalse(login4.equals((Object)login3));
      assertFalse(login4.equals((Object)login2));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login4);
      assertEquals(2, login4.getPASSWORDENC());
      assertEquals(0, login4.getAuth_max());
      assertEquals(0, login4.getAuth_num());
      
      // Undeclared exception!
      try { 
        login4.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = login0.getAuth_num();
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      FromClient fromClient0 = new FromClient();
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30000, FromClient.VERSION);
      assertNotNull(fromClient0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      MySQLConfig.setLogin_server_port(31050);
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_allownum((byte)54);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = FromChar.REQUEST_ACCOUNT_REG2;
      assertEquals(10030, int0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      
      ConfigurationManagement.setAccess_allownum(851);
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertNotNull(fromClient0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      
      MySQLConfig.setLogin_server_port(1940);
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_allownum(91);
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MySQLConfig.setLogin_server_ip("LORD_KNIGHT");
      Login login0 = new Login();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      
      ConfigurationManagement.setAccess_denynum(1);
      login1.save_config_in_log();
      assertFalse(login1.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login0);
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_allownum((-525));
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Login login0 = new Login();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MySQLConfig.setLogin_server_ip("@).~^FU!Wj`An+q]wb");
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      
      ConfigurationManagement.setAccess_denynum(10);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      login0.do_initTXT();
      assertFalse(login0.equals((Object)login1));
      assertFalse(login0.equals((Object)login2));
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertNotSame(login0, login1);
      assertNotSame(login0, login2);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30000, FromClient.VERSION);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertNotNull(fromClient0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login2.new Timer_interval_check_auth_sync();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      MySQLConfig.setLogin_server_port((-1383));
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_allownum(250);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MySQLConfig.setLogin_server_ip("LORD_KNIGHT");
      Login login0 = new Login();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login1);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      ConfigurationManagement.setAccess_denynum(1);
      login1.save_config_in_log();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login0);
      
      login0.do_initTXT();
      assertFalse(login0.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertNotSame(login0, login1);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertNotNull(fromClient0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      ConfigurationManagement.setAccess_allownum((-1994666231));
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login2));
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertNotSame(login1, login2);
      assertNotSame(login1, login0);
      
      MySQLConfig.setLogin_server_pw((String) null);
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login3);
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConfigurationManagement.setAccess_allownum(359);
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login3.yesNoOnOffToBoolean("LORD_KNIGHT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }
}
