/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:02:25 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, (-4840.872209096));
      double double0 = 0.0;
      cCSMatrix0.setAll(0.0);
      SparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-1655), (-1655), (-1655));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1655' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)45;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(479, 479);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.swapColumns(0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(16, vectorProcedure0);
      cCSMatrix0.iteratorOfColumn(16);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (double) 1634;
      doubleArray0[2] = (-708.1);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 1634;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1634, 34, doubleArray0);
      int int0 = 1;
      int int1 = (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int0, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-3436), 1758, (double) 1758, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "    ";
      int int0 = 536;
      int int1 = 6;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(6, 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.max();
      org.evosuite.runtime.Random.setNextRandom(999);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.power(0);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("Can not remove from this iterator.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Cp9vui@H_-@4kNNm(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1087;
      doubleArray0[1] = 0.0;
      doubleArray0[7] = (double) 1087;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = (-4070);
      MockRandom mockRandom0 = new MockRandom(1087);
      int int1 = (-3690);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-3690), (-4070), (-3690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3690x-4070
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn((-1081));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1081
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 70;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(70);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.manhattanNorm();
      double double0 = 0.0;
      double[] doubleArray0 = new double[3];
      Vector vector0 = cCSMatrix0.getRow(13);
      cCSMatrix0.multiply(vector0);
      ColumnMajorSparseMatrix.fromMatrixMarket("");
      doubleArray0[0] = double0;
      cCSMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2352);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      cCSMatrix0.isColumnMajor();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1142), 2865, (double) (-1142), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 4370;
      int int1 = 18;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(4370, 18, doubleArray0);
      cCSMatrix0.toRowVector();
      int int2 = 4;
      CCSMatrix.zero(int2, int1);
      int int3 = 1730;
      cCSMatrix0.maxInColumn(int3);
      CCSMatrix.identity(int1);
      int int4 = (-2117);
      Matrix.unit(int1, int4);
      int int5 = (-246);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int5);
      int[] intArray0 = new int[3];
      intArray0[0] = int2;
      intArray0[1] = int1;
      intArray0[2] = int0;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 26;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) 26;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 26;
      doubleArray1[6] = (double) 1;
      MockRandom mockRandom0 = new MockRandom(26);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("v-qxgszzoi{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.max();
      org.evosuite.runtime.Random.setNextRandom(8);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 21;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(16, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix.fromCSV("4.1");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1912, 1912, 1036);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix.identity(24);
      double[][] doubleArray0 = new double[18][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 24;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.setAll(728.43347);
      SparseMatrix.identity(48);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(48, 48, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      SparseMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix.random(13, 32, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(24);
      double[][] doubleArray0 = new double[18][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 24;
      doubleArray2[2] = (double) 24;
      doubleArray2[3] = (double) 24;
      doubleArray0[1] = doubleArray2;
      cCSMatrix0.getRow(24);
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 24;
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(24);
          double[][] doubleArray0 = new double[18][9];
          double[] doubleArray1 = new double[0];
          doubleArray0[0] = doubleArray1;
          double[] doubleArray2 = new double[4];
          doubleArray2[0] = (double) 24;
          cCSMatrix0.setAll(728.43347);
          SparseMatrix.identity(48);
          // Undeclared exception!
          try { 
            cCSMatrix0.getOrElse(48, 48, 48);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Row '48' is invalid.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1846.55451;
      doubleArray1[1] = 2067.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      int int0 = 8;
      int int1 = 1000;
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(8, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.copyOfShape(2963, 5);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.to((MatrixFactory<Matrix>) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 1;
      doubleArray0[0] = (double) 26;
      doubleArray0[6] = (double) 1;
      MockRandom mockRandom0 = new MockRandom(26);
      CCSMatrix cCSMatrix1 = new CCSMatrix(26, 26, 26);
      SparseMatrix.zero(26, 26);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix0.minInColumn(1);
      org.evosuite.runtime.Random.setNextRandom(18);
      org.evosuite.runtime.Random.setNextRandom(4);
      cCSMatrix1.eachNonZeroInColumn(18, (VectorProcedure) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 13, doubleArray0);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.copyOfShape(2963, 2963);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.to((MatrixFactory<Matrix>) null);
      int int1 = (-1279);
      cCSMatrix0.nonZeroAt(int1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[4] = (-35.48160581082462);
      doubleArray0[5] = (double) 0;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(5, 5);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn((-273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -273
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 17.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(2348);
      cCSMatrix0.isZeroAt(32, 767);
      double[][] doubleArray2 = new double[3][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      cCSMatrix1.toRowMajorSparseMatrix();
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix1.mkString(numberFormat0);
      cCSMatrix0.is(matrixPredicate1);
      cCSMatrix1.max();
      int int0 = 296;
      org.evosuite.runtime.Random.setNextRandom(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 17.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.divide(0.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      CCSMatrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-1385.672015255305), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(0, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[2] = 25;
      intArray0[4] = 25;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[2];
      double double0 = 1843.377191;
      doubleArray2[0] = 1843.377191;
      doubleArray2[1] = (double) 25;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 25;
      doubleArray3[1] = 1843.377191;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '25' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 32);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 4.0;
      doubleArray2[1] = 4.0;
      doubleArray2[2] = 4.0;
      doubleArray2[3] = 4.0;
      doubleArray2[4] = 4.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 4.0;
      doubleArray3[1] = 4.0;
      doubleArray3[2] = 4.0;
      doubleArray3[3] = 4.0;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 32);
      int int0 = Double.SIZE;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.copyOfShape(48, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-2192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2191
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 26;
      doubleArray1[6] = (double) 1;
      MockRandom mockRandom0 = new MockRandom(26);
      CCSMatrix cCSMatrix1 = new CCSMatrix(26, 26, 26);
      SparseMatrix.zero(26, 26);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix0.minInColumn(1);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(18, 6);
      sparseMatrix0.rank();
      org.evosuite.runtime.Random.setNextRandom(18);
      org.evosuite.runtime.Random.setNextRandom(4);
      double[][] doubleArray2 = new double[4][7];
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 18;
      doubleArray3[1] = (-2498.3602530081);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray2);
      org.evosuite.runtime.Random.setNextRandom(48);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      cCSMatrix0.toMatrixMarket(numberFormat0);
      Integer integer0 = new Integer(0);
      cCSMatrix0.insert((Matrix) sparseMatrix0);
      cCSMatrix0.toBinary();
      CCSMatrix.identity(1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(26, 26, 26);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[12];
      doubleArray1[2] = 0.0;
      doubleArray1[1] = (double) 19;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      int int0 = 3927;
      CCSMatrix.diagonal(3927, 19);
      cCSMatrix0.maxInColumn(19);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray1);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      vector0.outerProduct(denseVector0);
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixVectorOperation0, vector0);
      int int1 = 2351;
      String string0 = "u-K)%]";
      Matrix.fromMatrixMarket(string0);
      int int2 = 9;
      cCSMatrix0.minInColumn(int2);
      int int3 = 2;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int1, int3);
      cCSMatrix1.getRow(int0);
      int int4 = (-1575);
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix1.eachNonZeroInColumn(int4, vectorProcedure0);
      VectorProcedure vectorProcedure1 = null;
      cCSMatrix0.eachInColumn(int0, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      int int0 = 19;
      cCSMatrix0.toRowVector();
      cCSMatrix0.toRowVector();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = 0.0;
      doubleArray1[1] = (double) 19;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      cCSMatrix0.maxInColumn(19);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(26, 360, (-5775.0961041), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 96;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(96, 96, 96);
      Matrix matrix0 = cCSMatrix0.transpose();
      Matrix matrix1 = cCSMatrix0.add((-1475.88513365557));
      int int1 = 8;
      Matrix matrix2 = cCSMatrix0.rotate();
      CCSMatrix.block(matrix1, matrix2, matrix2, matrix0);
      int int2 = (-1865);
      cCSMatrix0.nonZeroAt(int2, int2);
      cCSMatrix0.transpose();
      int int3 = 395;
      cCSMatrix0.minInRow(int3);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int1);
      cCSMatrix0.max();
      CCSMatrix.diagonal(int0, int3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.setColumn(0, Double.NEGATIVE_INFINITY);
      MockRandom mockRandom0 = new MockRandom(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(1000, 0.0, (Random) mockRandom0);
      cCSMatrix0.minInColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      cCSMatrix1.eachNonZero((MatrixProcedure) null);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(0, vectorProcedure1);
      cCSMatrix1.nonZeroAt(4, 0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.blank();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(47, 47, 47);
      cCSMatrix0.toRowVector();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(16, 22, 47);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(16);
      CCSMatrix cCSMatrix3 = CCSMatrix.identity(2567);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)22, 2.0, (-1882.71602), (-3669.13682), (-2486.3627151528)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix4 = (CCSMatrix)cCSMatrix2.transformColumn(12, vectorFunction1);
      int int0 = (-1350);
      cCSMatrix4.foldNonZeroInRows((VectorAccumulator) null);
      CCSMatrix.identity(int0);
      int int1 = 29;
      cCSMatrix1.minInColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix4, cCSMatrix3, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.hadamardProduct(sparseMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 975
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(21);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformColumn(16, vectorFunction0);
      matrix0.min();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 16;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 16;
      doubleArray2[1] = (double) 21;
      doubleArray0[1] = doubleArray2;
      CCSMatrix.identity(21);
      double[][] doubleArray3 = new double[1][7];
      CCSMatrix.from2DArray(doubleArray3);
      matrix0.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.infinityNorm();
      cCSMatrix0.getRow(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.transpose();
      cCSMatrix0.minInColumn(0);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cRSMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.zero(3206, 0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix1.nonZeroIteratorOfColumn(0);
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cRSMatrix2, cCSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(47);
      cCSMatrix0.toRowVector();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 460.5236900634685, (double)16, 4916.47183127906, 4916.47183127906).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(16, vectorFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(16);
      CCSMatrix.identity(2567);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)12, 3126.147619318, 4916.47183127906, (double)47, (-657.06097)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      matrix0.maxInRow(16);
      cCSMatrix1.transformColumn(12, vectorFunction1);
      int int0 = (-1350);
      CCSMatrix.identity((-1350));
      int int1 = 29;
      matrix0.minInColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
      int int2 = (-682);
      CCSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.blankOfShape(0, 1);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      MockRandom mockRandom0 = new MockRandom((-1145L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(21);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformColumn(16, vectorFunction0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      CCSMatrix.identity(8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 26;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      cCSMatrix0.toSparseMatrix();
      int int1 = 1;
      double double0 = (-139.65328249104562);
      double double1 = 0.0;
      double[][] doubleArray0 = new double[3][8];
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(1, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '26' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfShape(0, 0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      int int1 = 25;
      cCSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[5] = 0;
      cCSMatrix0.setColumn(0, (-2979.444012073));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 11;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(11);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      cCSMatrix0.select(intArray0, intArray0);
      Matrix matrix0 = cCSMatrix0.removeColumn(6);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, matrix0, cCSMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(24);
      double[][] doubleArray0 = new double[18][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      doubleArray2[0] = (double) 24;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(24);
      CCSMatrix.from1DArray(2587, 2587, doubleArray1);
      double double0 = 728.43347;
      cCSMatrix1.setAll(double0);
      int int0 = 48;
      SparseMatrix.identity(int0);
      cCSMatrix0.copyOfColumns(int0);
      cCSMatrix1.getOrElse(int0, int0, int0);
      int int1 = (-1789);
      int int2 = (-40);
      cCSMatrix0.copyOfShape(int2, int1);
      double double1 = (-995.2);
      CCSMatrix.diagonal(int1, double1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 18;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 1911;
      Matrix.identity(1911);
      int int2 = 683;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(683, -0.0);
      MockRandom mockRandom0 = new MockRandom(638L);
      cCSMatrix1.minInColumn(18);
      cCSMatrix1.max();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.010000000000000002, (double)1911, 3754.415, (double)18, 0.1).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix1.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int0;
      intArray0[3] = int0;
      cCSMatrix1.select(intArray0, intArray0);
      int int3 = (-1155);
      double double0 = 2045.1559993089068;
      SparseMatrix.randomSymmetric(int3, double0, (Random) mockRandom0);
      int int4 = 7;
      CCSMatrix.identity(int1);
      int int5 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int5);
      cCSMatrix2.copy();
      cCSMatrix0.power(int1);
      cCSMatrix1.iteratorOfColumn(int4);
      int int6 = (-5);
      cCSMatrix0.blankOfShape(int0, int6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 18;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      double double0 = 1568.7975647961061;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int1 = 1911;
      // Undeclared exception!
      Matrix.identity(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 36;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      int int1 = 8;
      cCSMatrix0.transpose();
      cCSMatrix0.toRowVector();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 460.5236900634685, (double)16, 4916.47183127906, 4916.47183127906).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(16, vectorFunction0);
      matrix0.rank();
      matrix0.product();
      CCSMatrix.identity(int1);
      CCSMatrix.identity(int0);
      byte byte0 = (byte)45;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      int int2 = 39;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int2);
      int int3 = 2329;
      int int4 = (-3885);
      CCSMatrix.zero(int3, int2, int4);
      int int5 = 2212;
      cCSMatrix1.nonZeroIteratorOfColumn(int5);
      int int6 = 1000;
      cCSMatrix1.getColumn(int6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(47);
      cCSMatrix0.toRowVector();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 460.5236900634685, (double)16, 4916.47183127906, 4916.47183127906).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transformColumn(16, vectorFunction0);
      cCSMatrix1.minInColumn(16);
      cCSMatrix0.removeFirstRow();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix1.setAll(16);
      org.evosuite.runtime.Random.setNextRandom((-1634));
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(5);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(829, vectorFunction1);
      int int0 = 32;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(int0, vectorProcedure0);
      int int1 = 1969;
      CCSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(47);
      cCSMatrix0.toRowVector();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 460.5236900634685, (double)16, 4916.47183127906, 4916.47183127906).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(16, vectorFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(16);
      matrix0.maxInColumn(16);
      int int0 = (-1513);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity((-1513));
      int int1 = (-1);
      cCSMatrix0.minInColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int0, vectorProcedure0);
      int int2 = (-2775);
      CCSMatrix.identity(int2);
      int int3 = 2176;
      cCSMatrix2.getColumn(int3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.infinityNorm();
      cCSMatrix0.getRow(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.transpose();
      cCSMatrix0.minInColumn(0);
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cRSMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.zero(3206, 0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix1, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix1.iteratorOfColumn(0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 96;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(96, 96, 96);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.transpose();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix0.add((-1475.88513365557));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.blankOfShape(94, (-1505));
      Matrix matrix0 = cCSMatrix0.transpose();
      int int1 = 770;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int1, int0);
      int int2 = 283;
      cCSMatrix0.copyOfShape(int2, int1);
      Matrix matrix1 = cCSMatrix1.add((Matrix) basic2DMatrix0);
      CCSMatrix.block(basic2DMatrix0, matrix0, cRSMatrix1, matrix1);
      cCSMatrix1.max();
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 18;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      int int1 = 1000;
      MockRandom mockRandom0 = new MockRandom((-2416L));
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(81, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(96);
      Matrix matrix0 = cCSMatrix0.transpose();
      cCSMatrix0.blankOfColumns(96);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      MockRandom mockRandom0 = new MockRandom(285L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric((int) (byte)45, 0.0, (Random) mockRandom0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.transpose();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((-1549), (byte)45);
      int int0 = 318;
      int int1 = 319;
      Matrix matrix1 = cCSMatrix0.copyOfShape(int1, byteArray0[3]);
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric((int) byteArray0[2], (double) int0, (Random) mockRandom0);
      Matrix matrix2 = cCSMatrix2.multiplyByItsTranspose();
      SparseMatrix.block(matrix0, cCSMatrix1, matrix1, rowMajorSparseMatrix0);
      CCSMatrix.block(cCSMatrix1, rowMajorSparseMatrix0, matrix0, matrix2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      cCSMatrix0.toRowVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18, 3754.415, (double)18, 3754.415, 1568.7975647961061).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int0 = 1911;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1911);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      ooPlaceMatricesMultiplication1.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      cCSMatrix0.toRowVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18, 3754.415, (double)18, 3754.415, 1568.7975647961061).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.diagonal(703, (-2892.0));
      MockRandom mockRandom0 = new MockRandom((-692L));
      int int0 = 5290;
      cCSMatrix0.max();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction1);
      MockRandom mockRandom1 = new MockRandom(286L);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity((-1952257860));
      int int1 = 5;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int1);
      cCSMatrix0.copy();
      int int2 = 1930;
      cCSMatrix0.power(int2);
      cCSMatrix2.iteratorOfColumn(int0);
      int int3 = (-1994091957);
      cCSMatrix1.blankOfShape(int3, int2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 96;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(96);
      cCSMatrix0.transpose();
      CCSMatrix cCSMatrix1 = new CCSMatrix(96, 96);
      byte[] byteArray0 = new byte[24];
      byteArray0[12] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[4] = (byte)48;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int1 = 2042;
      double double0 = (-2940.597);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix3 = CCSMatrix.random(int1, (int) byteArray0[3], double0, (Random) mockRandom0);
      cCSMatrix3.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix4 = CCSMatrix.identity(byteArray0[12]);
      cCSMatrix4.nonZeroColumnMajorIterator();
      int int2 = 2717;
      cCSMatrix2.copyOfShape(byteArray0[12], int2);
      cCSMatrix0.max();
      cCSMatrix3.max();
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 96;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(96);
      cCSMatrix0.transpose();
      CCSMatrix cCSMatrix1 = new CCSMatrix(96, 96);
      byte[] byteArray0 = new byte[24];
      byteArray0[19] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[4] = (byte)48;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix3 = CCSMatrix.random(2042, (int) (byte)0, (-2940.597), (Random) mockRandom0);
      cCSMatrix3.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix4 = CCSMatrix.identity(byteArray0[12]);
      cCSMatrix4.nonZeroColumnMajorIterator();
      int int1 = 2717;
      cCSMatrix2.copyOfShape(byteArray0[12], int1);
      double double0 = cCSMatrix0.max();
      double double1 = cCSMatrix3.max();
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      int int2 = 620;
      CCSMatrix.diagonal(int2, double1);
      int int3 = 604;
      CCSMatrix.diagonal(int3, double0);
      cCSMatrix0.iteratorOfColumn(int2);
      CCSMatrix.diagonal(intArray0[0], byteArray0[4]);
  }
}
