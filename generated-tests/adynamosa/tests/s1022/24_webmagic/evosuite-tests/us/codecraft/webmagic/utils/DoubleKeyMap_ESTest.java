/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 10:06:06 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>((Map<HashMap<String, String>, Map<Integer, Integer>>) null);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer((-664));
      doubleKeyMap0.put((Object) hashMap0, (Object) map0, integer0);
      Map<Object, Integer> map1 = doubleKeyMap0.remove((Object) hashMap0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer>();
      Integer integer0 = new Integer((-1296));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, hashMap0, integer0);
      Map<HashMap<Object, Integer>, Integer> map0 = doubleKeyMap0.get(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<HashMap<Object, Integer>, Map<String, String>> hashMap0 = new HashMap<HashMap<Object, Integer>, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>(hashMap0, class0);
      HashMap<Integer, Map<Object, Object>> hashMap1 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(hashMap1);
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0);
      Map<Object, String> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Map<Integer, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Map<Integer, String>>, String>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.put((Object) class0, "", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      String string0 = doubleKeyMap0.put(hashMap0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, String>, String>, HashMap<Map<Integer, String>, Map<Integer, String>>, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, String>, String>, HashMap<Map<Integer, String>, Map<Integer, String>>, HashMap<String, String>>();
      HashMap<Map<Integer, String>, Map<Integer, String>> hashMap0 = new HashMap<Map<Integer, String>, Map<Integer, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = doubleKeyMap0.put((HashMap<Map<Integer, String>, String>) null, hashMap0, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap0.get("jdwbN]F&", (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Object, Object>>();
      Map<Object, Map<Map<Integer, String>, Map<Map<Integer, String>, Map<Object, HashMap<String, Object>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<Integer, String>, Map<Map<Integer, String>, Map<Object, HashMap<String, Object>>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Map<Integer, String>, Map<Object, HashMap<String, Object>>>>(map0);
      Map<Map<Integer, String>, Map<Object, HashMap<String, Object>>> map1 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Integer, String>) null);
      DoubleKeyMap<Map<Integer, String>, Object, HashMap<String, Object>> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, String>, Object, HashMap<String, Object>>(map1);
      HashMap<String, Object> hashMap0 = doubleKeyMap2.get((Map<Integer, String>) null, (Object) doubleKeyMap1);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>();
      Map<HashMap<Integer, Integer>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, String>(map0, class0);
      Map<Object, String> map1 = doubleKeyMap1.get((HashMap<Integer, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Map<HashMap<Integer, Object>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Integer, Object>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Object>, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, HashMap<Object, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Map<Integer, String>>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) doubleKeyMap1, hashMap1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, HashMap<Map<Integer, String>, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, HashMap<Map<Integer, String>, Object>, String>((Map<HashMap<String, String>, Map<HashMap<Map<Integer, String>, Object>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Map<HashMap<Object, String>, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(map0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap2.put(hashMap0, (Object) doubleKeyMap0, (Object) null);
      doubleKeyMap2.remove(hashMap0, (Object) hashMap0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<String, Object>> hashMap0 = new HashMap<HashMap<Object, String>, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, String, Object>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap1, "jmp k7 0fn;c\n{QSW", (Object) "jmp k7 0fn;c\n{QSW");
      Object object0 = doubleKeyMap0.put(hashMap1, "", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, Object>>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Object>>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put((Object) class0, (Object) hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        doubleKeyMap0.get((Object) class0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer((-1507));
      HashMap<Integer, Map<Object, Integer>> hashMap0 = new HashMap<Integer, Map<Object, Integer>>();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.remove(integer0, (Object) class0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.remove((Integer) null, integer0);
      assertNull(object0);
  }
}
