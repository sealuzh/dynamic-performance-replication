/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:21:28 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.GridBagLayout;
import java.awt.SystemColor;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ComponentListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowStateListener;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextSupport;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.DebugGraphics;
import javax.swing.JSlider;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.clusterers.SimpleKMeans;
import weka.core.AllJavadoc;
import weka.core.Attribute;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.TestInstances;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.addDataSourceListener(associator0);
      filter0.removeTrainingSetListener(associator0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addInstanceListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName("@data");
      assertEquals("@data", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Done.", "Done.");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.removeInstanceListener(substringReplacer0);
      TestInstances testInstances0 = new TestInstances();
      filter0.stop();
      boolean boolean0 = filter0.eventGeneratable("");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockJapaneseDate0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-1634074091), (-1634074091));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInputContext();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Associator associator0 = new Associator();
      assertFalse(associator0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom((-6853));
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      Clusterer clusterer0 = new Clusterer();
      filter0.addTestSetListener(clusterer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      boolean boolean0 = filter0.connectionAllowed("testSet");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      // Undeclared exception!
      try { 
        filter0.performRequest("`%CNgw`_CVw`J/]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `%CNgw`_CVw`J/] not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.getInputVerifier();
      Associator associator0 = new Associator();
      filter0.connectionNotification("93y#.r27{C~m;", testSetMaker0);
      ClassOrder classOrder0 = new ClassOrder();
      MultiFilter multiFilter0 = new MultiFilter();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent1 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection((String) null);
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport(filter0, stringSelection0);
      filter0.getInputVerifier();
      filter0.connectionNotification("Aq,T?TK", "Aq,T?TK");
      ImageSaver imageSaver0 = new ImageSaver();
      Logger logger0 = imageSaver0.m_logger;
      filter0.setLog((Logger) null);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Aq,K", "Aq,K");
      ImageSaver imageSaver0 = new ImageSaver();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      GraphViewer graphViewer0 = new GraphViewer();
      BeanContext beanContext0 = graphViewer0.m_beanContext;
      beanContextSupport0.setBeanContext((BeanContext) null);
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("_aFvr7x ]K4");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection((String) null);
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport(filter0, stringSelection0);
      filter0.getInputVerifier();
      filter0.connectionNotification("Aq,T?TK", "Aq,T?TK");
      ImageSaver imageSaver0 = new ImageSaver();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTrainingSetListener(sorter0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection((String) null);
      stringSelection0.getTransferDataFlavors();
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport(filter0, stringSelection0);
      filter0.getInputVerifier();
      filter0.connectionNotification("Aq,T?TK", "Aq,T?TK");
      ImageSaver imageSaver0 = new ImageSaver();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.removeTrainingSetListener(sorter0);
      boolean boolean0 = filter0.eventGeneratable("Aq,T?TK");
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection((String) null);
      filter0.getInputVerifier();
      filter0.connectionNotification("Aq,K", "Aq,K");
      ImageSaver imageSaver0 = new ImageSaver();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTrainingSetListener(sorter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.useDefaultVisual();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      filter0.connectionNotification("3~QRW}2;5!(|!A}g", "knN%4CGk)08");
      SystemInUtil.addInputLine("q=xY,}];#U/)Fe");
      filter0.connectionAllowed("knN%4CGk)08");
      TestSetMaker testSetMaker0 = new TestSetMaker();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      KeyStroke.getKeyStroke("3~QRW}2;5!(|!A}g");
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      Vector vector0 = testSetMaker0.m_listeners;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      filter0.connectionNotification("3~QRW}2;5!(|!A}g", defaultTableModel0);
      filter0.getVisual();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      JSlider jSlider0 = new JSlider(0, (-1), 0, (-1));
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("rGWbxl &", arrayList0, 1);
      TestSetEvent testSetEvent0 = new TestSetEvent(euclideanDistance0, instances0, 1123, 0);
      filter0.acceptTestSet(testSetEvent0);
      filter0.isBusy();
      Classifier classifier0 = new Classifier();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Associator associator0 = new Associator();
      // Undeclared exception!
      try { 
        filter0.performRequest(".bsi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .bsi not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getAutoscrolls();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Appender appender0 = new Appender();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("j4", instances0, (-85), (-4));
      filter0.acceptTrainingSet(trainingSetEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
      // Undeclared exception!
      try { 
        filter0.performRequest("j4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // j4 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Associator associator0 = new Associator();
      filter0.connectionAllowed("hV@O9q:cCIfX");
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Classifier classifier0 = new Classifier();
      filter0.getVisual();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("e`oX#WBx@fi__u{Js7");
      Discretize discretize0 = new Discretize();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Logger logger0 = testSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      filter0.eventGeneratable("e`oX#WBx@fi__u{Js7");
      filter0.disconnectionNotification("CU&j4']W;2", (Object) null);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.addInstanceListener(classifier0);
      filter0.stop();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.isBusy();
      Random.setNextRandom(20);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isDoubleBuffered();
      JSlider jSlider0 = new JSlider(1, (-1), 1, (-1));
      filter0.getHierarchyListeners();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MultiFilter multiFilter0 = new MultiFilter();
      Sorter sorter0 = new Sorter();
      filter0.getMinimumSize();
      filter0.eventGeneratable("Object has wrong class");
      filter0.setFilter(multiFilter0);
      Appender appender0 = new Appender();
      appender0.createToolTip();
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = new StyleContext();
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext2 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext1);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Appender appender1 = new Appender();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("configuration", instances0, (-1), 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.isBusy();
      Random.setNextRandom((-1103));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      StringSelection stringSelection0 = new StringSelection((String) null);
      filter0.getInputVerifier();
      Associator associator0 = new Associator();
      filter0.connectionNotification("93y#.r27{C~m;", associator0);
      ImageSaver imageSaver0 = new ImageSaver();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ClassOrder classOrder0 = new ClassOrder();
      MultiFilter multiFilter0 = new MultiFilter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      TextViewer textViewer0 = new TextViewer();
      filter0.removeTrainingSetListener(textViewer0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      // Undeclared exception!
      try { 
        filter0.performRequest("__");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // __ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(multiFilter0);
      filter0.setFilter(filter1);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(modelPerformanceChart0, (Instances) null);
      trainingSetEvent0.m_maxSetNumber = (-172);
      trainingSetEvent0.m_maxSetNumber = (-172);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.useDefaultVisual();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual0 = classAssigner0.getVisual();
      filter0.setVisual(beanVisual0);
      Object object0 = null;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hSu");
      filter0.performRequest("Stop");
      Predicate.isEqual((Object) "Stop");
      ListOptions listOptions0 = new ListOptions();
      InstanceEvent instanceEvent0 = new InstanceEvent(listOptions0);
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      int[] intArray0 = new int[11];
      intArray0[1] = 1320;
      JSlider jSlider0 = new JSlider(0, (-1), 0, (-1));
      filter0.getHierarchyListeners();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.contains(0, 2);
      instanceEvent0.setStatus(1320);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptInstance(instanceEvent0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        filter0.performRequest(" Error processing prediction ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  Error processing prediction  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      MockPrintStream mockPrintStream0 = new MockPrintStream("weka/gui/beans/icons/");
      MockThread mockThread0 = new MockThread("weka/gui/beans/icons/");
      filter0.m_filterThread = (Thread) mockThread0;
      beanVisual0.list((PrintStream) mockPrintStream0, (-2590));
      Appender appender0 = new Appender();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      systemColor0.getColorSpace();
      filter0.setBackground(systemColor0);
      filter0.getComponentPopupMenu();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/gui/beans/icons/");
      Sorter sorter0 = new Sorter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      appender0.computeVisibleRect(defaultCaret0);
      filter0.eventGeneratable("configuration");
      appender0.createToolTip();
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = new StyleContext();
      filter0.getFilter();
      filter0.enumerateRequests();
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual1 = classAssigner0.m_visual;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      try { 
        simpleKMeans0.getAssignments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The assignments are only available when order of instances is preserved (-O)
         //
         verifyException("weka.clusterers.SimpleKMeans", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      MockPrintStream mockPrintStream0 = new MockPrintStream("weka/gui/beans/icons/");
      beanVisual0.list((PrintStream) mockPrintStream0, (-2590));
      Appender appender0 = new Appender();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      filter0.setLocation(0, 2);
      filter0.getHierarchyListeners();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.contains((-1852660780), 0);
      instanceEvent0.setStatus(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptInstance(instanceEvent0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = " Error processing prediction ";
      // Undeclared exception!
      try { 
        filter0.performRequest("weka/gui/beans/icons/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka/gui/beans/icons/ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.requestFocus(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.getCustomName();
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      filter0.connectionAllowed("AllFilter");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster0);
      flowByExpression0.removeMouseMotionListener((MouseMotionListener) null);
      flowByExpression0.getMinimumSize();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      AWTEventMulticaster.add((WindowStateListener) aWTEventMulticaster0, (WindowStateListener) aWTEventMulticaster0);
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Classifier", e);
      }
  }
}
