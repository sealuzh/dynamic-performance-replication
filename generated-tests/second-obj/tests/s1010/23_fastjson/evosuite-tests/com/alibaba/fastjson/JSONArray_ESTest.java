/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:26:05 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSON.parseArray((String) null);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.addAll(90, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      linkedHashSet0.add(mockHijrahDate0);
      jSONArray0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(90, (Object) null);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      jSONArray1.getTimestamp(0);
      assertEquals(91, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray0);
      jSONArray2.hashCode();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(90, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2620);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(2620);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2620, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1038);
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      jSONArray2.iterator();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-3974), (Object) mockJapaneseDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      // Undeclared exception!
      try { 
        jSONArray0.getDate((short) (-21267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4190);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(4190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4190, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(10);
      jSONArray0.isEmpty();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONArray0.toJavaList(class0);
      JSONObject jSONObject0 = new JSONObject(65, true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.fluentClear();
      jSONObject2.fluentPutAll(jSONObject1);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONArray jSONArray1 = new JSONArray(98);
      // Undeclared exception!
      try { 
        jSONArray1.getShort((-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<Field> list0 = new LinkedList<Field>();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = new JSONArray(10);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 965;
      JSONArray jSONArray0 = new JSONArray(965);
      // Undeclared exception!
      try { 
        jSONArray0.subList(965, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 92
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.remove((Object) parameterizedTypeImpl0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      jSONArray0.setRelatedArray(javaBeanSerializer0);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray0.setComponentType(class1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(979);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      jSONArray0.replaceAll(unaryOperator0);
      jSONArray0.addAll((Collection<?>) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2974);
      JSONObject jSONObject0 = new JSONObject(2974, false);
      // Undeclared exception!
      try { 
        jSONArray0.add(10, (Object) jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3968, mockMinguoDate0);
      // Undeclared exception!
      JSON.toJSONString((Object) jSONArray1, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) concurrentSkipListMap0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(90);
      linkedHashSet1.add(integer0);
      linkedHashSet1.retainAll(jSONArray1);
      Type type0 = jSONArray1.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(10, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(10);
      jSONArray0.isEmpty();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.pollFirstEntry();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class1, class1, class0, (Field) null, 0, 10, 0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature3;
      Object object0 = new Object();
      jSONArray0.indexOf(object0);
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature1;
      serializerFeatureArray0[6] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.parseArray("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockHijrahDate0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      mockJapaneseDate0.getMockedClassName();
      JSONArray jSONArray2 = jSONArray1.fluentSet(10, mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray2.remove((-2240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      Charset charset0 = Charset.defaultCharset();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) charset0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(131072);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 131072, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) serializerFeature0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray0.fluentRetainAll(jSONArray1);
      assertEquals(2, jSONArray1.size());
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.clear();
      jSONArray1.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.getComponentType();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.getRelatedArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      String string0 = "f;'5~;e|AqZ";
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("v7da", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("java.time.ZoneId", class0, class1, class0, (Field) null, 0, 90, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("f;'5~;e|AqZ", class0, class0, class0, (Field) null, 981, 0, 10);
      SerializeConfig serializeConfig0 = new SerializeConfig(90);
      Class<Method> class2 = Method.class;
      BeanContext beanContext1 = new BeanContext(class2, fieldInfo1);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      beanContext1.getField();
      beanContext1.getField();
      jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.getIntValue(0);
      SerializeConfig serializeConfig1 = null;
      try {
        serializeConfig1 = new SerializeConfig((-1637));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Field> class0 = Field.class;
      jSONArray0.toJavaList(class0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      jSONArray0.containsAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(90, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentClear();
      String string0 = "";
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(90, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.add((Integer) 90);
      Integer integer0 = new Integer(90);
      linkedHashSet1.retainAll(jSONArray0);
      Type type0 = jSONArray0.componentType;
      jSONArray0.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(10, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate1);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) concurrentSkipListMap0);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(90);
      linkedHashSet1.retainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(3063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3063, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.fluentRetainAll(linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1));
      linkedHashSet1.add(integer0);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      linkedHashSet2.retainAll(jSONArray0);
      Type type0 = jSONArray0.componentType;
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray0.fluentAdd((Object) pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.io.PipedInputStream@790829b7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate1);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) concurrentSkipListMap0);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      Type type0 = jSONArray1.componentType;
      JSONArray jSONArray2 = new JSONArray(90);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2974);
      jSONArray0.fluentClear();
      JSONArray jSONArray1 = new JSONArray();
      Clock clock0 = MockClock.systemUTC();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) minguoDate0);
      Integer integer0 = new Integer(90);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Minguo ROC 103-02-14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2986);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONArray0.parallelStream();
      jSONArray0.lastIndexOf("");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      ConcurrentHashMap.KeySetView<Method, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      linkedHashSet0.retainAll(concurrentHashMap_KeySetView0);
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3073, mockJapaneseDate0);
      Integer integer0 = new Integer(3088);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      jSONArray1.getShortValue(0);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertEquals(3074, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(3057);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("U+h5-J@]?rcM%*(C", concurrentSkipListMap0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Type type0 = jSONArray1.componentType;
      JSONArray jSONArray2 = jSONArray0.fluentSet(771, (Object) null);
      jSONArray2.getObject(1, (Type) null);
      jSONArray1.listIterator();
      jSONArray0.add((Object) jSONArray2);
      assertEquals(773, jSONArray2.size());
      assertEquals(773, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      linkedHashSet0.add(mockMinguoDate0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", concurrentSkipListMap0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1935));
      linkedHashSet1.retainAll(linkedHashSet0);
      Type type0 = jSONArray0.componentType;
      JSONArray jSONArray2 = jSONArray1.fluentSet(789, jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray3.getObject(1, (Type) class1);
      jSONArray2.listIterator();
      assertEquals(790, jSONArray1.size());
      assertEquals(790, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Type type0 = jSONArray0.componentType;
      jSONArray0.set(10, hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getJSONArray(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class0, class1, (Field) null, 97, 516, 0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(11, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SerializeConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 237, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3968, mockMinguoDate0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray2.spliterator();
      jSONArray2.getBooleanValue(1418);
      Integer integer0 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer(90);
      Integer integer2 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      Integer integer3 = new Integer(90);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer4 = new Integer(10);
      Integer integer5 = new Integer(783);
      Integer integer6 = new Integer(10);
      linkedHashSet1.add(integer6);
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>();
      linkedHashSet3.retainAll(linkedHashSet0);
      jSONArray1.getJSONArray(10);
      assertEquals(3970, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(232, "");
      jSONArray1.getByteValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-3155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3968, mockMinguoDate0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray2.spliterator();
      Integer integer0 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer(783);
      Integer integer2 = new Integer(90);
      Integer integer3 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      Integer integer4 = new Integer(90);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer5 = new Integer(89);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray2.getBoolean(10);
      float float0 = jSONArray2.getFloatValue(90);
      assertEquals(3970, jSONArray1.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Type type0 = jSONArray0.componentType;
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getJSONArray(0);
      ConcurrentSkipListMap<PropertyNamingStrategy, HijrahDate> concurrentSkipListMap0 = new ConcurrentSkipListMap<PropertyNamingStrategy, HijrahDate>();
      jSONArray1.contains(concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.fluentSet(10, mockMinguoDate0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(90, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Type type0 = jSONArray0.componentType;
      jSONArray0.set(10, hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getJSONArray(0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Annotation> class1 = Annotation.class;
      Class<JSONPath.Operator> class2 = JSONPath.Operator.class;
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class2, class1, (Field) null, (-2369), 0, 2169);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 305, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<Object, ChronoLocalDate> concurrentSkipListMap1 = new ConcurrentSkipListMap<Object, ChronoLocalDate>();
      jSONArray0.fluentSet(3427, concurrentSkipListMap1);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) concurrentSkipListMap0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.spliterator();
      Integer integer0 = new Integer((-2165));
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-2165));
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer2 = new Integer(10);
      Integer integer3 = new Integer(266);
      Integer integer4 = new Integer(90);
      linkedHashSet2.add(integer4);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(3427);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      linkedHashSet0.containsAll(linkedHashSet1);
      Integer integer0 = new Integer(430);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<Object, MockThaiBuddhistDate> concurrentSkipListMap1 = new ConcurrentSkipListMap<Object, MockThaiBuddhistDate>();
      ConcurrentSkipListMap<Object, MockThaiBuddhistDate> concurrentSkipListMap2 = new ConcurrentSkipListMap<Object, MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(266);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 266, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONArray0);
      jSONArray1.spliterator();
      Integer integer0 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer(783);
      Integer integer2 = new Integer(90);
      Integer integer3 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      Integer integer4 = new Integer(90);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer5 = new Integer(89);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Type type0 = jSONArray0.componentType;
      jSONArray0.set(10, hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getJSONArray(0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.spliterator();
      Class<Annotation> class0 = Annotation.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class0, (Type) null, (Field) null, (-1), 512, 101);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<Object, ChronoLocalDate> concurrentSkipListMap1 = new ConcurrentSkipListMap<Object, ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(10, concurrentSkipListMap1);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.fluentAdd((Object) concurrentSkipListMap0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.spliterator();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSON.parseArray("", class0);
      Integer integer0 = new Integer((-2165));
      LinkedHashSet<MockMinguoDate> linkedHashSet1 = new LinkedHashSet<MockMinguoDate>();
      linkedHashSet1.add(mockMinguoDate0);
      Integer integer1 = new Integer(3089);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      linkedHashSet2.add((Integer) null);
      Integer integer2 = new Integer(0);
      int int0 = 3047;
      Integer integer3 = new Integer(3047);
      Integer integer4 = new Integer(10);
      Integer integer5 = new Integer(266);
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>();
      Integer integer6 = new Integer(10);
      linkedHashSet3.add(integer6);
      // Undeclared exception!
      try { 
        jSONArray1.subList(444, 444);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 444
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(10, mockMinguoDate0);
      int int0 = 430;
      // Undeclared exception!
      try { 
        jSONArray1.getLong(430);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 430, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(10, mockMinguoDate0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray2.spliterator();
      Integer integer0 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer(783);
      Integer integer2 = new Integer(90);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONBytes((Object) linkedHashSet0, 10, serializerFeatureArray0);
      Integer integer3 = new Integer(783);
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      Integer integer4 = new Integer(90);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer5 = new Integer(89);
      linkedHashSet1.add(integer5);
      Integer integer6 = new Integer((-1));
      linkedHashSet1.add(integer6);
      linkedHashSet1.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@541193f0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Type type0 = jSONArray1.componentType;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 399);
      jSONArray1.set((-1), bufferedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
