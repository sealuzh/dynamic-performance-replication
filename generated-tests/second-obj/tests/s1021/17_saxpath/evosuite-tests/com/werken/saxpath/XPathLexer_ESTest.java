/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:29:35 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.consume((-4353));
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{uT#9naYZv7h");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{uT#9naYZv7h", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".:LS^~pI(/c-y2r=");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".:LS^~pI(/c-y2r=");
      Token token0 = xPathLexer0.number();
      assertEquals(".", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(":@v*A<{PCzQ-AE)");
      xPathLexer1.plus();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)pLa");
      XPathLexer xPathLexer1 = new XPathLexer("?rx\"L(:iO[!5`EDUwk");
      xPathLexer1.hasMoreChars();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("s", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DK");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("DK", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g. 1F2");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("g", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2110));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "y\\|Gu6@i1F#`P@>Bkg";
      XPathLexer xPathLexer0 = new XPathLexer("y|Gu6@i1F#`P@>Bkg");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1417));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.hasMoreChars();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("ph", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*L?jQ|>Y=U!tFI_U");
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("*", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("jQ", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*L?jQ|>Y=U!tFI_U");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("L", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("?j", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("|>", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("Y", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("ajf");
      xPathLexer1.and();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz91a'^U/lsE");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.not();
      assertEquals("G", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz91a'^U/lsE");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.not();
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals("|", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(":@v*A<{PCzQ-AE)");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer(":@v*A<{PCzQ-AE)");
      Token token1 = xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer2.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      xPathLexer1.setPreviousToken(token3);
      assertEquals(3, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer1.doubleColon();
      Token token5 = xPathLexer3.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      xPathLexer5.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token6 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.relationalOperator();
      String string0 = token4.toString();
      assertEquals("[ (19) (v*)", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      int int0 = (-2092);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":JEYy Wx|^R[T");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fTWu QqGa&");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Wu", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals("fT", token0.getTokenText());
      
      char char0 = xPathLexer0.LA(4017);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(" ", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("wM#JB");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("Cgo=");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Cgo", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer1.minus();
      assertEquals("w", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer3.whitespace();
      xPathLexer3.literal();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!^&13W`WP%a[");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.star();
      assertEquals("^", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.currentPosition();
      xPathLexer0.LA(95);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("akf");
      xPathLexer0.and();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.and();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("tq >mi");
      xPathLexer0.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("[ ", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("n($z-_>:jCWK3b9");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('o');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer1.at();
      assertEquals("(", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Z\"f#?S");
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.setXPath("");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.consume();
      xPathLexer2.identifierOrOperatorName();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer1.and();
      xPathLexer1.and();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.plus();
      assertEquals("[", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*L?jQ|>Y=U!tFI_U");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("?j", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals(">Y", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("=", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">37`%dfv*");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("4r+(xw=");
      xPathLexer0.getXPath();
      xPathLexer0.dollar();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.equals();
      xPathLexer2.or();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer2));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("+", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("Q", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("z9", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.comma();
      assertEquals("P", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals("a", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.consume();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("U/", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("27YS;&YrG");
      Token token0 = xPathLexer0.equals();
      assertEquals("2", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      String string0 = token1.toString();
      assertEquals("[ (23) (7)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("YS", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%df[*");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.consume();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.pipe();
      assertEquals("+", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("|", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("Q", token2.getTokenText());
      
      xPathLexer0.consume(1);
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.LA(1);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("Pa", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Se", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("n", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("z", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      xPathLexer0.isIdentifierChar('(');
      xPathLexer0.consume();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("`", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("8 ", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i5 &w");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("5 ", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(4);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!^&13W`WP%a[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("!", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("^&13W`WP%a[", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer2.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|'+sXzKuW`|r@k<7?c");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("'", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("+", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer1.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("XzKuW", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer1.getPreviousToken();
      xPathLexer1.currentPosition();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      boolean boolean1 = xPathLexer1.hasMoreChars();
      assertFalse(boolean1);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("`", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("ajf");
      xPathLexer1.and();
      Token token0 = xPathLexer1.equals();
      assertEquals("a", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("ajf");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("jf", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.currentPosition();
      xPathLexer4.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer4.leftParen();
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.and();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer7.operatorName();
      int int0 = xPathLexer4.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("u", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.comma();
      assertEquals("#", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.setXPath("?lF^N ");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.consume((-138));
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.pipe();
      assertEquals("+", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("|", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.consume(1);
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.LA(1);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.plus();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{uT#9naYZv7h");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("uT", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.consume(111);
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("Q", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token4 = xPathLexer0.not();
      assertEquals("z", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('(');
      xPathLexer0.consume();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("a", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|Qz9Pa'^U/ls-");
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.not();
      assertEquals("G", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.dollar();
      assertEquals("|", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("z9", token3.getTokenText());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      char char0 = xPathLexer0.LA(111);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.comma();
      assertEquals("'", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("^U/ls-", token7.getTokenText());
      
      xPathLexer0.setPreviousToken(token5);
      assertEquals(15, token5.getTokenType());
      assertEquals("a", token5.getTokenText());
      
      xPathLexer0.consume();
      Token token8 = xPathLexer0.slashes();
      assertEquals(12, token8.getTokenType());
      assertEquals("U/", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.plus();
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("DK");
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("D", token9.getTokenText());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("K", token10.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer1.consume();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vjIhVAi4[yg");
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      char char0 = 'j';
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1255));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("h", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("%", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("lJZig", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.comma();
      assertEquals("'", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("ph", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("(", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("V", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("+", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("%", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('w');
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("lJZig", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%df[*");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      XPathLexer xPathLexer1 = new XPathLexer("");
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer1.operatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer(":s*!npOa)OfC6~/H^]");
      XPathLexer xPathLexer3 = new XPathLexer("|Lo{WC! )Cv9");
      Token token0 = xPathLexer3.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer3.equals();
      assertEquals("L", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer3.nextToken();
      assertEquals("o", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("|Lo{WC! )Cv9");
      xPathLexer5.getPreviousToken();
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%df[*");
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      String string0 = "oT";
      xPathLexer0.setXPath("oT");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%dfv[*");
      xPathLexer0.or();
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(">", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(9, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("37", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Seunz<#`8 '");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.colon();
      assertEquals("u", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("nz", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.comma();
      assertEquals("<", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.hasMoreChars();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.leftParen();
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("h", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.plus();
      assertEquals("W", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("V", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(105);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.comma();
      String string0 = token4.toString();
      assertEquals("[ (32) (+)", string0);
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a^i[I|Hvhd..JNy<");
      XPathLexer xPathLexer2 = new XPathLexer("i");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.consume();
      Token token1 = xPathLexer2.nextToken();
      assertEquals("i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!/w");
      XPathLexer xPathLexer1 = new XPathLexer("!/w");
      Token token0 = xPathLexer1.pipe();
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("!/", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("/", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+|Qz9P'^d/ls-");
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("+|Qz9P'^d/ls-");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("|", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("Q", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      xPathLexer0.setXPath("+|Qz9P'^d/ls-");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("^Y[kM3Xy=%_");
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("|", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Qz9P", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals("^", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i5 &w");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("5", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(3);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&w", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".6#h6>[Z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".6", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("#h", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.colon();
      assertEquals("6", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":JEYy Wx|^R[T");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('z');
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c6bJ(FD`M");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.isIdentifierChar('Q');
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\u0005 R&C");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("\u0005", token0.getTokenText());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.number();
      Token token1 = xPathLexer0.not();
      assertEquals(" ", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      char char0 = xPathLexer0.LA(47);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ycVGx B}wUk#AY");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("ycVGx", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("B}", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("wU", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":JEYy Wx|^R[T");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.number();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token2 = xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("aVq;>i5J^SgWgSR5z");
      xPathLexer2.consume((-3515));
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LF5v\b8mf%T^vSCYk@");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("LF5v\b8mf%T^vSCYk@");
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('7');
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("+|Qz9P'^d/ls-");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("+", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("|", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("P", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("'", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("^", token5.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.or();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("ls", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("-", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LF5v\b8mf%T^vSCYk@");
      Token token0 = xPathLexer0.plus();
      assertEquals("L", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("F5v\b8mf", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("u;wM8");
      Token token3 = xPathLexer2.not();
      assertEquals("u", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('7');
      assertFalse(boolean0);
      
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+|QzY#a'^U/ls-");
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token0);
      Token token1 = xPathLexer2.leftBracket();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.doubleColon();
      Token token2 = xPathLexer1.rightBracket();
      xPathLexer2.setPreviousToken(token2);
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      boolean boolean1 = xPathLexer1.isIdentifierChar('-');
      assertFalse(boolean1 == boolean0);
      
      xPathLexer2.consume();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer1.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ph(WV+%lJZig'8");
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("p", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("V", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      String string0 = token4.toString();
      assertEquals("[ (32) (+)", string0);
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.consume();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("lJZig", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("'", token6.getTokenText());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("8", token7.getTokenText());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",k*0.25x{purt");
      Token token0 = xPathLexer0.dollar();
      assertEquals(",", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("*", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(14, token2.getTokenType());
      assertEquals("0.", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(",k*0.25x{purt");
      xPathLexer1.getPreviousToken();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("5x", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("4r+(xw=");
      xPathLexer0.getXPath();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.equals();
      xPathLexer2.or();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertNull(xPathLexer3.getXPath());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.setXPath("_ efdxa=x)__7b");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("_ efdxa=x)__7b");
      xPathLexer0.or();
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("u'4Z85`0~&-y{`");
      xPathLexer1.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("NL~:1(,+/]s'Qao");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("NL~:1(,+/]s'Qao", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("u'4Z85`0~&-y{`");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer4.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('.');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=,']'8");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.hasMoreChars();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      xPathLexer0.isIdentifierChar('\\');
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3429));
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r40g0_VOi.{[\"K@_B=Q");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("0", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("g0_VOi.{[\"K@_B=Q", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("o8$h-oyjy)2s");
      XPathLexer xPathLexer2 = new XPathLexer("6K/bt3MrLua\"$ >");
      xPathLexer2.nextToken();
      xPathLexer1.hasMoreChars();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(22);
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("(9Ci'0\"+H_a6tlSk@j[");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath("");
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("1Seu+z<#`8 '");
      xPathLexer2.currentPosition();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer6.consume();
      assertFalse(xPathLexer6.equals((Object)xPathLexer4));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":JEYy Wx|^R[T");
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.setXPath(":JEYy Wx|^R[T");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.setXPath("TeS3V%S9oK");
      Token token2 = xPathLexer0.nextToken();
      assertNotSame(token2, token1);
      assertEquals("TeS3V%S9oK", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o8$h-oyjy)2s");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.operatorName();
      xPathLexer1.leftParen();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g. 12");
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "$TPdq>mLB{F\\O,";
      XPathLexer xPathLexer0 = new XPathLexer("$TPdq>mLB{FO,");
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.comma();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.notEquals();
      xPathLexer2.or();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("LF5v\b8mf%T^vSCYk@");
      Token token0 = xPathLexer1.dots();
      assertEquals("L", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("5", token4.getTokenText());
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals("v\b", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer1.getPreviousToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("8", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LF5v\b8mf%T^vSCYk@");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("F", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("v\b8mf", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("u;wM8");
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('7');
      assertFalse(boolean0);
      
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("A");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$TPdq>mLB{FO,");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%df[*");
      xPathLexer0.setXPath(">637`%df[*");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(" R\";s\"I7NyUG;");
      xPathLexer1.number();
      xPathLexer0.setXPath("kTL'Olfe~/");
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$uxlH");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierChar('*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";fY2My2");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tq >mi");
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hmV.");
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.not();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Zq >mgi");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('z');
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2092));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[I[*-/VV#0<T");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.setXPath("vv0/7I^d{N7");
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (19) (vv)", string0);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("/7", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token1);
      Token token5 = xPathLexer0.not();
      assertEquals("I", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      assertEquals("^d{N7", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">637`%df[*");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer(">637`%df[*");
      xPathLexer1.and();
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(">", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(">637`%df[*");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("637", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("3", token4.getTokenText());
      
      xPathLexer1.notEquals();
      xPathLexer3.or();
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals(">6", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("H_]*A3Mi");
      Token token6 = xPathLexer4.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer4.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("]", token7.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.setXPath(" R\";s\"I7NyUG;");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g. 12");
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("M");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("M", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("2", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer4.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("(", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".6#h6>[Z");
      xPathLexer1.setXPath("[ (");
      Token token3 = xPathLexer1.nextToken();
      Token token4 = xPathLexer1.notEquals();
      assertEquals(" (", token4.getTokenText());
      
      xPathLexer1.or();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.setPreviousToken(token3);
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d/y+W-,0x!J;|6[D{");
      xPathLexer0.nextToken();
      xPathLexer0.LA(632);
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O31MG[$GIUI");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer(",&");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(32, token5.getTokenType());
      assertEquals(",", token5.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("wv@!4FBbk,>.9");
      xPathLexer5.setXPath("4u+R-lI5mu+p");
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer4.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token8 = xPathLexer11.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer5.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("4", token9.getTokenText());
      
      Token token10 = xPathLexer9.comma();
      assertEquals(32, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("]IH");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("]IH");
      assertFalse(xPathLexer4.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C\"pOb+");
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";%,Vwybo %~[.(Wc\")f");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t>=i VEVG<V+<G@g*7Y");
      xPathLexer0.mod();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("t>=i VEVG<V+<G@g*7Y");
      xPathLexer1.operatorName();
      xPathLexer1.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.comma();
      xPathLexer2.leftBracket();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer2.and();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.pipe();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.notEquals();
      xPathLexer0.or();
      xPathLexer3.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer7 = new XPathLexer("t>=i VEVG<V+<G@g*7Y");
      xPathLexer7.operatorName();
      XPathLexer xPathLexer8 = new XPathLexer("t>=i VEVG<V+<G@g*7Y");
      xPathLexer8.getPreviousToken();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer8.mod();
      xPathLexer8.dollar();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token0 = xPathLexer3.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setXPath(" R\";s\"I7NyU;");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.and();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
  }
}
