/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 05:58:05 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindMain;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.mindmapmode.MindMapMapModel;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Date;
import java.sql.Time;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.GlossaryView;
import javax.help.HelpModel;
import javax.help.HelpSet;
import javax.help.JHelpSearchNavigator;
import javax.help.Map;
import javax.help.plaf.basic.BasicGlossaryNavigatorUI;
import javax.help.plaf.basic.BasicSearchNavigatorUI;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.synth.SynthSeparatorUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.JTextComponent;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.wml.dom.WMLDOMImplementationImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xml.serializer.ToUnknownStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.w3c.dom.Document;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(6);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawWeeks();
      jDayChooser0.initDecorations();
      Color color0 = Color.CYAN;
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      Font font0 = new Font((String) null, 6, 0);
      jDayChooser0.setFont(font0);
      assertEquals(6, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isContentAreaFilled();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = Locale.getISOLanguages();
      Locale locale1 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale1);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 39, (-1L), 605, 43, ':');
      KeyEvent.getKeyText(605);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDay();
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "2c)p(p; ].");
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      Locale locale0 = new Locale("rolloverSelectedIcon", "day", "day");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleTimeZone0.setDSTSavings(12);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("\" object is not assignable to a \"", 105);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.drawDays();
      Locale.getISOLanguages();
      Locale locale1 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale1);
      Color color0 = Color.BLUE;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("CONNECT", false);
      jRadioButtonMenuItem0.getInheritsPopupMenu();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 849, 605, 605, 38, ':');
      KeyEvent.getKeyText(1910);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(7, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(1381);
      int int0 = SwingConstants.BOTTOM;
      jDayChooser0.setMonth(3);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = MindMapMapModel.EXPECTED_START_STRINGS;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 1381, 1381, 742, 'P');
      Color color0 = Color.BLUE;
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 771, 3, 14, (-2496), '_');
      KeyEvent.getKeyText(14);
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont((String) null, 3, (-3319));
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("3", 42);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      JMapViewer jMapViewer0 = new JMapViewer();
      Point point0 = jMapViewer0.getCenter();
      menuSelectionManager1.componentForPoint(jDayChooser0, point0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, 39, 39, 39, 'v', (MenuElement[]) null, menuSelectionManager1);
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      Dimension dimension0 = synthSeparatorUI0.getMaximumSize(jDayChooser0);
      dimension0.setSize(39, 210);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jMapViewer0, (-1328), 1922L, (-1027), 37, 'K');
      KeyEvent.getKeyText(39);
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      Color color1 = Color.gray;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getUIClassID();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDaysInMonth();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("11");
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, 1620, 8, (-4902), 852, 'S', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 8, 0L, 47, 36, 'A');
      jDayChooser2.keyPressed(menuKeyEvent0);
      jDayChooser2.keyReleased(keyEvent0);
      jDayChooser2.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[6] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[7] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 8, (-1009L), (-4902), 28, '3', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 8, 240000L, 28, 36, '3');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "q)0qRX.RzM");
      jDayChooser0.setMonth(1110);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.FRANCE;
      Locale.getISOLanguages();
      jDayChooser0.setLocale(locale0);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1110, 460L, 46, 924, '6');
      KeyEvent.getKeyText(5007);
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("day", 1, 61450);
      jDayChooser0.setFont(font0);
      jDayChooser0.setFocus();
      Date date0 = new Date((-838L));
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, (-1376L), (-2115), 1, '\'');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      jDayChooser0.getColorModel();
      jDayChooser0.setMonth(1070);
      jDayChooser0.setEnabled(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-61), 0L, 1448, 496, 'G');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(1490);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-2956050), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("25", 29);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint(debugGraphics0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton2 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("8", false);
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = Locale.getISOLanguages();
      Locale locale1 = Locale.ITALIAN;
      jDayChooser1.setLocale(locale0);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-2166), 34, 39, 605, ':');
      keyEvent0.consume();
      KeyEvent.getKeyText(39);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.getDay();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("3", 42);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isContentAreaFilled();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", false);
      Locale locale0 = Locale.FRANCE;
      Locale.getISOLanguages();
      Locale locale1 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale1);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 39, (-1L), 605, 34, ':');
      KeyEvent.getKeyText(605);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getAlignmentX();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getDisabledIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("6%n'a@~S>-'Z`", (Icon) null, false);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JButton jButton0 = new JButton("/$>g8");
      jDayChooser0.selectedDay = jButton0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-389), 0L, 24, 790, '}', menuElementArray0, menuSelectionManager0);
      menuSelectionManager0.clearSelectedPath();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser1.getLocale();
      Color color0 = Color.cyan;
      jDayChooser1.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(defaultListCellRenderer_UIResource0, (-1568));
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(1381);
      int int0 = SwingConstants.BOTTOM;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "q)0qRX.RzM");
      jDayChooser0.setMonth(3);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = Locale.getISOLanguages();
      jDayChooser0.setLocale(locale0);
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 1381, 1381, 742, 'P');
      KeyEvent.getKeyText(61450);
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-23);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      PDFDocument pDFDocument0 = new PDFDocument("");
      PDFResources pDFResources0 = pDFDocument0.getResources();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, (PDFStream) null, (byte) (-1), (byte) (-1));
      FontInfo fontInfo0 = new FontInfo();
      jDayChooser0.setMonth(353);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)52, 9223372036854775807L, 246, (byte) (-1), '.');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis(156L);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("PanelUI");
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, 1653, 0L, (-720), 35, '3', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 26438400000L, 29, 35, '3');
      jDayChooser1.keyPressed(menuKeyEvent0);
      assertEquals(31, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis((-4037L));
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[5] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[6] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[7] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 8, (-1009L), (-4902), 28, '3', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 8, 240000L, 28, 36, '3');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis((-4037L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 1244L, 28, 28, ',');
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "com.lightdev.app.shtm.SHTMLEditorKitActions$InsertTableAction");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(1186);
      jDayChooser1.setEnabled(true);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusDownCycle();
      JComponent.getDefaultLocale();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser1.getMaxDayCharacters());
      
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.requestFocusInWindow();
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "15");
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBordersVisible(true);
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("", "day");
      jDayChooser0.setMaxDayCharacters(4);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-705), 4294977024L, 33, 1602, 'g', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getAlignmentX();
      jDayChooser0.requestFocusInWindow();
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getDaysInMonth();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.removeActionListener(jDayChooser0);
      jToggleButton_ToggleButtonModel0.removeActionListener(jDayChooser0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "cd?48pIn qs ,w");
      jDayChooser0.setMonth(0);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(true);
      Color.getColor("day", 2);
      jDayChooser0.getDecorationBackgroundColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10121, 10121, 2, 43, 'j', 2);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "hook_node_action");
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setDecorationBordersVisible(false);
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("day", "day");
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 23, 0L, 33, 30, '1');
      jDayChooser0.keyTyped(keyEvent0);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, 39, 39, 39, 'v', (MenuElement[]) null, menuSelectionManager1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(menuKeyEvent0);
      assertEquals(15, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay((-3737));
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.getSundayForeground();
      Locale locale0 = Locale.UK;
      locale0.getDisplayCountry();
      Locale.setDefault(locale0);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3801, 1540L, 3801, 3801, '*', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, (-20), 28, ')');
      KeyEvent.getKeyText(28);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-20));
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.createToolTip();
      jYearChooser0.removeKeyListener(jDayChooser0);
      jDayChooser0.addFocusListener(jYearChooser0);
      Date date0 = new Date(1995L);
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      date0.after(date1);
      java.util.Date date2 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 228, true);
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(date2);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.requestFocusInWindow();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jYearChooser0, 228, 1995L, 228, 2406, 'r', 2406);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getFont();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getFocusTraversalPolicy();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      JPopupMenu jPopupMenu0 = new JPopupMenu("day");
      jDayChooser0.setDay((-2998));
      int int0 = SwingConstants.EAST;
      jDayChooser0.getMaxDayCharacters();
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      Dimension dimension0 = synthSeparatorUI0.getMaximumSize(jDayChooser0);
      jPopupMenu0.setSize(dimension0);
      KeyEvent keyEvent0 = new KeyEvent(jPopupMenu0, 160, 1L, (-89), 160, 'y', 3);
      keyEvent0.setKeyChar('3');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 30, 3191L, 252, (-458), ' ');
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.keyTyped(keyEvent0);
      Color color0 = Color.BLACK;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3191L;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 30;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-458);
      floatArray0[6] = (float) ' ';
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 3191L;
      // Undeclared exception!
      try { 
        color0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getAlignmentX();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1150), 1, (-1150));
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      plainDocument0.getDefaultRootElement();
      JPopupMenu jPopupMenu0 = new JPopupMenu("\"QLjWcpA");
      jDayChooser0.setDay(1);
      int int0 = SwingConstants.EAST;
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 1, 1, (-202), 3, 'n', (-228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getFont();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getFocusTraversalPolicy();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      jDayChooser0.setComponentOrientation(componentOrientation0);
      jDayChooser0.setEnabled(true);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1153, (-34L), 13, 0, '[');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis((-4062L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 212, 1244L, 212, 212, ',');
      keyEvent0.setKeyChar(',');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2261), false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.setDay((-2261));
      assertEquals(1, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("10", 47);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getSundayForeground();
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color color0 = Color.getColor("F", (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setSundayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(6);
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 18, 13, '$');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, (-976L), 13, 15, '!');
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 13, 604800000L, 10145, 10145, '$', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(6, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.WEST;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setEnabled(false);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("7", 44);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-306L), 49, 49, '2');
      InputEvent.getModifiersExText(7);
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 0, 0, 'V');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getUIClassID();
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, (-20), 28, ',');
      jDayChooser0.keyPressed(keyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-20), true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay((-20));
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.menu;
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = jYearChooser0.dayChooser;
      Locale locale0 = Locale.US;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("day", 277, (-8388608));
      jDayChooser1.setFont(font0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      TimeZone.getTimeZone("day");
      Date date0 = new Date((-1630));
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("13", locale0);
      ParsePosition parsePosition0 = new ParsePosition(8);
      mockSimpleDateFormat0.parse("TD@Ov|z@W&$", parsePosition0);
      java.util.Date date1 = mockSimpleDateFormat0.parse("13");
      date0.before(date1);
      jDayChooser0.setMinSelectableDate(date0);
      Color.getColor(" NE\";Hojrq7V#Ta");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = new MockDate((-322), 8, 4367, (-2492), (-1630), 48);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      jDayChooser0.setForeground((Color) null);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyReleased((KeyEvent) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      Color color0 = Color.DARK_GRAY;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-59);
      floatArray0[1] = 2044.4207F;
      floatArray0[2] = (float) (byte) (-59);
      floatArray0[3] = (float) (byte) (-59);
      color0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setFocus();
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setWeekdayForeground(color0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "year";
      stringArray0[3] = "year";
      stringArray0[4] = "year";
      stringArray0[5] = "year";
      stringArray0[6] = "day";
      stringArray0[7] = "14";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.menu;
      Color.getColor((String) null, 7);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, (-1L), (-1204), (-1138), 'd');
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(47);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JMenu jMenu0 = new JMenu((Action) null);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 47, (-1L), 533, 1282, '5', (MenuElement[]) null, menuSelectionManager1);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Color color0 = Color.getHSBColor(365.19098F, 1625.0F, 2931.58F);
      jDayChooser0.setDecorationBackgroundColor(color0);
      DateFormatSymbols dateFormatSymbols0 = null;
      try {
        dateFormatSymbols0 = new DateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      Color color0 = Color.getHSBColor(0.0F, (-63.81824F), (-63.81824F));
      jDayChooser0.setDecorationBackgroundColor(color0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone.getTimeZone("[Y3=0p$hU:?A+i~sR");
      Date date0 = new Date(8);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Color.getColor("29");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = new MockDate(48, 0, 8, (-2492), 48, 45);
      jDayChooser0.setSelectableDateRange(date1, mockDate0);
      jDayChooser0.setMonth(825);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone.getTimeZone("JDayChooser");
      int int0 = SwingConstants.SOUTH;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      WMLDOMImplementationImpl wMLDOMImplementationImpl0 = new WMLDOMImplementationImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "Dc3WcyJ$#p=7];Z", "XCatalog", "JDayChooser");
      Document document0 = wMLDOMImplementationImpl0.createDocument("toggle_folded", "JDayChooser", documentTypeImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(document0, imageHandlerBase64Encoder0, defaultExtensionHandler0, false);
      DebugGraphics debugGraphics0 = new DebugGraphics(sVGGraphics2D0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getLocale();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 126, 5, 267, 2344, 'p');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addPropertyChangeListener("\"LTo[<S6r@?a", (PropertyChangeListener) null);
      jDayChooser0.getMaxDayCharacters();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "re");
      jToggleButton_ToggleButtonModel0.isRollover();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setModel(jToggleButton_ToggleButtonModel0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setEnabled(false);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = new Date(5);
      jDayChooser0.setMinSelectableDate(date0);
      Color.getColor("<< /Type /Action\n/S /GoTo\n");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = new MockDate(7, 10, 48, 40, 36, 36);
      java.util.Date date1 = jDayChooser1.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TimeZone.getTimeZone("day");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = new Color(164);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMonth((-178));
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-178));
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setForeground((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 78, 78, 78, 78, 'P');
      InputEvent.getModifiersExText(802);
      jDayChooser0.keyTyped(keyEvent0);
      Color color0 = Color.gray;
      color0.getColorSpace();
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.removeActionListener(jDayChooser0);
      jDayChooser0.setToolTipText("day");
      jDayChooser_DecoratorButton0.setModel(jToggleButton_ToggleButtonModel0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.focusGained((FocusEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(788, 788, 788, 788, 5, 788);
      Color color0 = Color.lightGray;
      jDayChooser0.setForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ActionEvent actionEvent0 = new ActionEvent(calendar0, 1, "day", 1, 1);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 4655);
      Color color0 = Color.lightGray;
      jDayChooser0.setForeground(color0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1, 245L, 1, 4655, 'z', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getPath();
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.batik.dom.util.HashTable";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser_DecoratorButton0.addAncestorListener(ancestorListener0);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-522), true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4641, true);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 5, true);
      focusEvent1.paramString();
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "optimizeSpeed");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 2806;
      GapContent gapContent0 = new GapContent(2806);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getDisabledTextColor();
      jDayChooser0.setSundayForeground(color0);
      jTextPane0.remove((Component) jDayChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      boolean boolean0 = false;
      jDayChooser0.setInheritsPopupMenu(false);
      jDayChooser0.putClientProperty(dayOfWeek0, (Object) null);
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      Color color1 = Color.getColor("day", color0);
      jDayChooser0.setForeground(color1);
      int int0 = 0;
      jDayChooser0.setMaxDayCharacters(0);
      long long0 = (-2030L);
      int int1 = (-6222);
      char char0 = 'G';
      MenuElement[] menuElementArray0 = new MenuElement[8];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu0 = new JMenu();
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "day");
      menuElementArray0[0] = (MenuElement) jMenu1;
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      TimeZone.getTimeZone("day");
      Date date0 = new Date((-1690));
      jDayChooser0.setMinSelectableDate(date0);
      Color.getColor(" NE\";Hojrq7V#Ta");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = new MockDate((-322), 8, 4367, (-2492), (-1690), 48);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(1);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-1284), 1, 5065, 164, '1');
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      MockDate mockDate0 = new MockDate((-1L));
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.removeNotify();
      Color.getColor("org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$AllFromRootTraverser");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = new JPanel();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JList<JButton> jList0 = new JList<JButton>((Vector<? extends JButton>) null);
      jList0.getSelectionForeground();
      MockDate mockDate0 = new MockDate(8, 228, 228, 8, 772, 25);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setMonth(8);
      Hashtable<AttributedCharacterIterator.Attribute, MockCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockCalendar>();
      Font font0 = new Font(hashtable0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      TransferHandler transferHandler0 = new TransferHandler("day");
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      jDayChooser0.getDebugGraphicsOptions();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "hook_node_action");
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBordersVisible(false);
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("day", "day");
      jDayChooser0.setMaxDayCharacters(0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 49, 2682L, 0, 33, 'g', (MenuElement[]) null, (MenuSelectionManager) null);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.transferFocusBackward();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.paint((Graphics) null);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.printComponents((Graphics) null);
      jDayChooser0.getBaselineResizeBehavior();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.drawDays();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      JComponent.getDefaultLocale();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      MockDate mockDate0 = new MockDate((-398), 544, (-398), 41, (-947), 5);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.firePropertyChange("zx8q5#G3a E_", 1377.6346, (-127.5));
      jDayChooser0.setFont((Font) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.initDecorations();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2113L));
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      jDayChooser0.addComponentListener((ComponentListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.setFocusCycleRoot(false);
      jMonthChooser0.getInputMethodListeners();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.drawWeeks();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBordersVisible(false);
      TransferHandler transferHandler0 = new TransferHandler("day");
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("day", "day");
      jDayChooser0.setTransferHandler(transferHandler0);
      jDayChooser0.setMaxDayCharacters(0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Cursor cursor0 = Cursor.getPredefinedCursor(2);
      jDayChooser0.setCursor(cursor0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      JList<JButton> jList0 = new JList<JButton>((Vector<? extends JButton>) null);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(0);
      jDayChooser0.getDay();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.getWeekdayForeground();
      int int0 = (-2125);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-2125), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDecorationBordersVisible(false);
      TransferHandler transferHandler0 = new TransferHandler("day");
      TransferHandler.getCutAction();
      jDayChooser0.setTransferHandler(transferHandler0);
      jDayChooser0.setMaxDayCharacters(5);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      AWTKeyStroke.getAWTKeyStroke((-215), 4, false);
      Stack<JButton> stack0 = new Stack<JButton>();
      stack0.removeElement(jDayChooser0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Period period0 = Period.ofMonths((-215));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow();
      DayOfWeek.from(chronoLocalDate0);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setWeekdayForeground(color0);
      int int0 = 10;
      ImageNode imageNode0 = new ImageNode();
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(imageNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JList<JButton> jList0 = new JList<JButton>((Vector<? extends JButton>) null);
      Color color0 = jList0.getSelectionForeground();
      MockDate mockDate0 = new MockDate((-1150));
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.removeNotify();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("m^nT..Z~%", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getLocale();
      MockDate mockDate0 = new MockDate(0L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-1361);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color color1 = Color.getColor("", (Color) systemColor0);
      jDayChooser0.setForeground(color1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("29");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(0);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 407;
      floatArray0[1] = (float) 407;
      floatArray0[2] = (float) 10;
      Color.RGBtoHSB(10, 10, 407, floatArray0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color.getColor("", (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(164, color1.getRed());
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(13);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      JButton jButton0 = new JButton("accessories.plugins.time.JDayChooser$1");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 2309, "A{X#", (-586), (-274));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"accessories.plugins.time.JDayChooser$1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      jDayChooser0.setMaxDayCharacters(5);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, (-1150));
      Color color0 = Color.lightGray;
      jDayChooser0.setForeground(color0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(13);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.firePropertyChange("{!l`9PS|", ':', 'p');
      jDayChooser0.getCursor();
      jDayChooser0.setYear((-1511));
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.initDecorations();
      jDayChooser0.firePropertyChange("PjR)W&=9r./G", ':', ',');
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-624), "day", 86400000L, (-624));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      jDayChooser0.setMaxDayCharacters(5);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, (-1150));
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-586), "day", (-586), (-586));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addPropertyChangeListener("\"LTo[<S6r@?a", (PropertyChangeListener) null);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 20, 578, 0, 661, 'i', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(20);
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      jSpinner0.getEditor();
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 9999, true, jYearChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 5;
      jDayChooser0.setDecorationBordersVisible(false);
      TransferHandler transferHandler0 = new TransferHandler("day");
      jDayChooser0.setTransferHandler(transferHandler0);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", false);
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem(imageIcon0);
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem1;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-4814), (-4814), 5, 2865, '~', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.keyPressed(menuKeyEvent0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addPropertyChangeListener("\"LTo[<S6r@?a", (PropertyChangeListener) null);
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-184L), (-2299), 601, 'i', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(601);
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      jSpinner0.getEditor();
      JButton[] jButtonArray0 = new JButton[9];
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getDefaultButton();
      jButtonArray0[0] = null;
      jDayChooser0.getSelectedDay();
      jButtonArray0[1] = null;
      jDayChooser0.getSelectedDay();
      jButtonArray0[2] = null;
      ImageIcon imageIcon0 = MapNodePositionHolderBase.sMapLocationIcon;
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[3] = jButton0;
      jDayChooser0.getSelectedDay();
      jButtonArray0[4] = null;
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      Color color0 = jDayChooser0.getSundayForeground();
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color.getColor("", (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(164, color0.getRed());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "C5],vxo!o<,L";
      stringArray0[2] = "xml-stylesheet";
      jDayChooser0.setDecorationBackgroundVisible(false);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
      Locale locale0 = xML11NonValidatingConfiguration0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-773), "xml-stylesheet", (-773), 1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      // Undeclared exception!
      try { 
        Time.valueOf("Metal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addPropertyChangeListener("\"LTo[<S6r@?a", (PropertyChangeListener) null);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-184L), 0, 601, '[', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(601);
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JComponent jComponent0 = jSpinner0.getEditor();
      FocusEvent focusEvent0 = new FocusEvent(jComponent0, 0, false, jSpinner0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.isValidateRoot();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getLocale();
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.initDecorations();
      jDayChooser1.drawWeeks();
      jDayChooser1.setFocus();
      jDayChooser1.setDay(26);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.setDecorationBackgroundVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 14, (String) null, 164, 14);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(13);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(false);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 0, " \u0002[k{$9LfA", (-2335), (-773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(5);
      Color color0 = Color.MAGENTA;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMonth(423);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1302));
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser_DecoratorButton0.addAncestorListener(ancestorListener0);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      int int0 = 0;
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getWeekdayForeground();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, (VetoableChangeListener) null);
      jDayChooser_DecoratorButton0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.apazhe.batik.dom.util.HashTable";
      stringArray0[2] = "C5],vxo!o<,L";
      stringArray0[3] = "xml-stylesheet";
      stringArray0[4] = "6UG3-k3'Vc@,w";
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      jSpinner0.getEditor();
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 10132, true, jYearChooser0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.setYear(0);
      HelpSet helpSet0 = new HelpSet();
      Locale locale0 = Locale.JAPAN;
      Hashtable<JButton, MockGregorianCalendar> hashtable0 = new Hashtable<JButton, MockGregorianCalendar>();
      GlossaryView glossaryView0 = new GlossaryView(helpSet0, "jL}Y$$3+yhDWlbTG", "jL}Y$$3+yhDWlbTG", locale0, hashtable0);
      HelpSet helpSet1 = new HelpSet();
      helpSet1.getLocalMap();
      helpSet0.setLocalMap((Map) null);
      JHelpSearchNavigator jHelpSearchNavigator0 = new JHelpSearchNavigator(glossaryView0, (HelpModel) null);
      BasicSearchNavigatorUI basicSearchNavigatorUI0 = new BasicSearchNavigatorUI(jHelpSearchNavigator0);
      ComponentListener componentListener0 = AWTEventMulticaster.add((ComponentListener) basicSearchNavigatorUI0, (ComponentListener) basicSearchNavigatorUI0);
      jDayChooser0.removeComponentListener(componentListener0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.removeKeyListener(jDayChooser1);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.updateUI();
      jDayChooser1.setDayBordersVisible(false);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.setYear(0);
      HelpSet helpSet0 = new HelpSet();
      Locale locale0 = Locale.JAPAN;
      Hashtable<JButton, MockGregorianCalendar> hashtable0 = new Hashtable<JButton, MockGregorianCalendar>();
      GlossaryView glossaryView0 = new GlossaryView(helpSet0, "jL}Y$$3+yhDWlbTG", "jL}Y$$3+yhDWlbTG", locale0, hashtable0);
      JHelpSearchNavigator jHelpSearchNavigator0 = new JHelpSearchNavigator(glossaryView0, (HelpModel) null);
      BasicSearchNavigatorUI basicSearchNavigatorUI0 = new BasicSearchNavigatorUI(jHelpSearchNavigator0);
      ComponentListener componentListener0 = AWTEventMulticaster.add((ComponentListener) basicSearchNavigatorUI0, (ComponentListener) basicSearchNavigatorUI0);
      jDayChooser0.removeComponentListener(componentListener0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.removeKeyListener(jDayChooser1);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setYearChooser((JYearChooser) null);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.weeks = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.isValidateRoot();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.setDoubleBuffered(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jMonthChooser0.getInheritsPopupMenu();
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.init();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.init();
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.drawWeeks();
      int int0 = 0;
      int int1 = 12;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "Dialog Plain 11", 12);
      actionEvent0.setSource(jDayChooser0);
      actionEvent0.setSource(jDayChooser0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Dialog Plain 11", false);
      jCheckBoxMenuItem0.getAccelerator();
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      actionEvent0.setSource("Dialog Plain 11");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addPropertyChangeListener("\"LTo[<S6r@?a", (PropertyChangeListener) null);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-184L), (-2335), 601, '[', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(601);
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      JComponent jComponent0 = jSpinner0.getEditor();
      FocusEvent focusEvent0 = new FocusEvent(jComponent0, 0, false, jSpinner0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.isRollover();
      jDayChooser_DecoratorButton0.setModel(jToggleButton_ToggleButtonModel0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setEnabled(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser_DecoratorButton0.addAncestorListener(ancestorListener0);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jDayChooser_DecoratorButton0.setModel(jToggleButton_ToggleButtonModel0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      int int0 = 8821;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8821, (String) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.firePropertyChange("AO|W<&(D:.l=Y_-')5", (short) (-27), (short) (-27));
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getKeyListeners();
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(true);
      Class<BasicGlossaryNavigatorUI> class0 = BasicGlossaryNavigatorUI.class;
      jDayChooser0.getListeners(class0);
      MockDate mockDate0 = new MockDate((short) (-27), 6, (short) (-27), 6, 6);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getDay();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3054), "day", (-2391), (short) (-27), 0, 14, 6, 0, 1159, 0, 263, 90, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2391
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 965, "West");
      actionEvent0.setSource("West");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.initDecorations();
      jDayChooser0.firePropertyChange("PjR)W&=9r./G", ':', ',');
      jDayChooser0.getCursor();
      jDayChooser0.setYear(160);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0, true);
      jDayChooser0.unregisterKeyboardAction(keyStroke0);
      String string0 = "Center";
      jDayChooser0.firePropertyChange("Center", (short)0, (short)0);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.createVolatileImage(14, 12312, (ImageCapabilities) null);
      jDayChooser0.getInsets();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setYear(12312);
      try { 
        XmlDocument.createXmlDocument("day");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 5;
      jDayChooser0.setMaxDayCharacters(5);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1847);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3144;
      intArray0[4] = 685;
      intArray0[5] = 0;
      intArray0[6] = 238;
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = polygon0.getBounds();
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditor0.removeActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      int int0 = (-1);
      jDayChooser0.setMonth((-1));
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getHierarchyBoundsListeners();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.initDecorations();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.batik.dom.util.HashTable";
      stringArray0[2] = "C5],vxo!o<,L";
      stringArray0[3] = "xml-stylesheet";
      stringArray0[4] = "6UG3-k3'Vc@,w";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 383);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.weekdayForeground = null;
      jDayChooser0.setYearChooser((JYearChooser) null);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.setSource((Object) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-3134), 63722, 0, (-3134));
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.addListeners(0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JList<MockCalendar> jList0 = new JList<MockCalendar>();
      int int0 = 3610;
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      // Undeclared exception!
      try { 
        basicTextPaneUI0.modelToView((JTextComponent) jEditorPane0, (-2103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTextUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.weekOfYearVisible = true;
      jDayChooser0.isDayBordersVisible();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.removeActionListener(jDayChooser0);
      metalComboBoxEditor_UIResource0.setItem(jDayChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-648));
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.KOREA;
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      ComponentOrientation.getOrientation(locale0);
      jDayChooser0.setComponentOrientation(componentOrientation0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3110, 0, 3110);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      TimeZone.getTimeZone("day");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = new Color(164);
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(164, (-1080), 164, (-178), 597, 25);
      mockGregorianCalendar1.setFirstDayOfWeek(25);
      jDayChooser0.setCalendar(mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=25,minimalDaysInFirstWeek=1,ERA=?,YEAR=164,MONTH=-1080,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=164,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-178,HOUR_OF_DAY=-178,MINUTE=597,SECOND=25,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PlainDocument plainDocument0 = new PlainDocument();
      int int0 = 1258;
      Element element0 = plainDocument0.getParagraphElement(1258);
      LabelView labelView0 = new LabelView(element0);
      // Undeclared exception!
      try { 
        labelView0.getForeground();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LabelView needs StyledDocument
         //
         verifyException("javax.swing.text.LabelView", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getAlignmentX();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1150), 1, (-1150));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(1);
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      java.util.Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getLocale();
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      jDayChooser0.setFocus();
      jDayChooser0.setDay(164);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(false);
      ActionEvent actionEvent0 = new ActionEvent(date1, 164, "]G|5Q%/uj\"5xcgC]", 0L, 940);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getActionMap();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.isWeekOfYearVisible();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay((-2480));
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
