/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:02:10 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-675);
      int int1 = 0;
      // Undeclared exception!
      try { 
        CompressedVector.zero((-675), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -675
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      compressedVector0.max();
      int int0 = 1365;
      compressedVector0.swapElements(2300, 1365);
      compressedVector0.nonZeroIterator();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2300;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1365;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1365;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.copy();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList0.remove(1365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1365, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toCSV((NumberFormat) null);
      compressedVector0.swapElements((-1073741824), (-1073741824));
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1531.4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt((-352));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1810).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1810, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("%%MatrixMarket");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      compressedVector0.toColumnMatrix();
      compressedVector0.copy();
      VectorProcedure vectorProcedure0 = null;
      compressedVector0.eachNonZero((VectorProcedure) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = 2296;
      MockRandom mockRandom0 = new MockRandom(2296);
      // Undeclared exception!
      try { 
        CompressedVector.random(2296, 100.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(49.5);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector1 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      linkedList0.add(float0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.manhattanNorm();
      compressedVector0.setAll(0.0F);
      Vector vector0 = compressedVector0.copyOfLength(0);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      compressedVector1.max();
      assertTrue(compressedVector1.equals((Object)vector0));
      assertEquals(0, compressedVector1.cardinality());
      
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 0);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (-2139.845479);
      CompressedVector compressedVector3 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.125, compressedVector3.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.5;
      doubleArray0[1] = 2355.60079889771;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-344.73);
      doubleArray0[4] = (-783.902504);
      doubleArray0[5] = (-101.1262100374801);
      doubleArray0[6] = (-3855.894404685001);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.8571428571428571, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.nonZeroIterator();
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.sum();
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3546.186181554467);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.sum();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      double double0 = compressedVector0.getOrElse(3, 32);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32.0, double0, 0.01);
      assertEquals(32, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      compressedVector0.max();
      int int0 = 1365;
      compressedVector0.manhattanNorm();
      compressedVector0.setAll(49.5);
      compressedVector0.copyOfLength(2300);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(347, 838.789699936503, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = 2657;
      compressedVector0.nonZeroAt(2657);
      int int1 = 850;
      int int2 = (-751);
      SparseVector.zero(850, (-751));
      double double0 = 0.0;
      compressedVector0.setAll(1233.0953552301512);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -751
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.5;
      doubleArray0[1] = 2355.60079889771;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toString();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4020, vectorFunction0);
      compressedVector0.setAll(2355.60079889771);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-285);
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-285);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2375);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(17);
      Float float0 = new Float((float) 17);
      hashMap0.put(integer0, float0);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 458);
      assertEquals(458, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.zero(92);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-787), vectorFunction0);
      assertEquals(92, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(682);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      Integer integer2 = new Integer(13);
      linkedList0.add(integer2);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      MockRandom mockRandom0 = new MockRandom(1L);
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector1.iterator();
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      compressedVector0.mkString(numberFormat0);
      compressedVector0.nonZeroAt(1);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      MockRandom mockRandom1 = new MockRandom(1000L);
      // Undeclared exception!
      try { 
        CompressedVector.random(13, Double.POSITIVE_INFINITY, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1268;
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) 1268;
      doubleArray0[3] = (double) (-274);
      doubleArray0[4] = (double) 1268;
      doubleArray0[5] = (double) (-274);
      doubleArray0[6] = (double) 1268;
      doubleArray0[7] = 2.0;
      doubleArray0[8] = (double) (-274);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, compressedVector1.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 2246);
      ((CompressedVector) sparseVector0).toBinary();
      Integer integer0 = new Integer(2246);
      Long long0 = new Long(2246);
      hashMap0.put(integer0, long0);
      Long long1 = new Long(2246);
      hashMap0.put((Integer) null, long1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2246).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(2682, vectorFunction0);
      assertEquals(1, sparseVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2300);
      compressedVector0.getOrElse(486, 2300);
      compressedVector0.max();
      compressedVector0.swapElements(2300, 1365);
      compressedVector0.nonZeroIterator();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2300;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.shuffle();
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.multiply(3502.9529874479226);
      assertEquals(0.2, compressedVector2.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure0);
      compressedVector1.toBinary();
      assertEquals(5, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1293.75823846);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-2117723619), (-1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      DenseVector.fromCSV("");
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.0, 590.808647556).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.is(vectorPredicate0);
      DenseMatrix.zero(3, 3);
      compressedVector0.blankOfLength(16);
      compressedVector0.blankOfLength(1654);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-656), vectorFunction1);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 7;
      int int1 = 996;
      Integer integer0 = new Integer(996);
      float float0 = 1.0F;
      Float float1 = new Float(1.0F);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int2 = 0;
      int int3 = (-2146735408);
      Integer integer1 = new Integer((-2146735408));
      int int4 = (-1800);
      Integer integer2 = new Integer((-1800));
      Float float2 = new Float((double) (-2146735408));
      hashMap0.put(integer2, float2);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, (-2146735408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1018.350320072;
      doubleArray0[3] = (double) 37;
      doubleArray0[5] = (double) (-285);
      doubleArray0[5] = 512.83297171;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.add(1365.0);
      compressedVector0.shuffle();
      // Undeclared exception!
      try { 
        compressedVector0.innerProduct(vector0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-285);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      compressedVector1.iterator();
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)7);
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Vector vector0 = compressedVector0.shuffle();
      compressedVector0.equals(vector0, 669.5377714);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1018.350320072;
      doubleArray0[0] = (double) 37;
      doubleArray0[5] = (double) (-285);
      doubleArray0[5] = 512.83297171;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.add(1365.4739323501478);
      compressedVector0.shuffle();
      // Undeclared exception!
      try { 
        compressedVector0.innerProduct(vector0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      DenseVector.fromCSV("");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.0, 590.808647556).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      DenseMatrix.zero(3, 3);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)861).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(861, vectorFunction1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(861, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.0, 590.808647556).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)861).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(861, vectorFunction1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(861, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)55;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      compressedVector0.set((byte)16, (-1461.4));
      MockRandom mockRandom0 = new MockRandom((byte)16);
      // Undeclared exception!
      try { 
        CompressedVector.random(1561, (-28.095318), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.sum();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 14;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 983.27;
      doubleArray0[2] = (-308.738);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2141267882);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1018.350320072;
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = (double) 2141267882;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        DenseMatrix.zero(37, (-2132));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-285);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertEquals(81225.0, double0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-285);
      doubleArray0[1] = (double) (-285);
      doubleArray0[2] = 512.83297171;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(2035.5457);
      Vector vector0 = compressedVector0.shuffle();
      double double0 = compressedVector0.innerProduct(vector0);
      assertEquals((-211089.79387470003), double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertFalse(compressedVector0.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 16;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.shuffle();
      compressedVector0.equals(vector0, 0.0);
      CompressedVector compressedVector1 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(37);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 37;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      SparseVector.fromCSV("");
      compressedVector0.add(1.0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(37.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      double double0 = compressedVector0.innerProduct(compressedVector1);
      assertEquals(1369.0, double0, 0.01);
      assertEquals(1, compressedVector1.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 1221);
      assertEquals(1221, compressedVector2.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1015.9629461443346;
      doubleArray0[5] = (double) (-285);
      doubleArray0[5] = 512.83297171;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(4, compressedVector0.cardinality());
      
      compressedVector0.set(2, 0.0);
      assertEquals(3, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1085);
      double[] doubleArray0 = new double[9];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      compressedVector0.set(2, 2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-285);
      doubleArray0[0] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Vector.fromMap(hashMap0, 1541);
      compressedVector0.shuffle();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-285));
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 14;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(2, compressedVector1.cardinality());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }
}
