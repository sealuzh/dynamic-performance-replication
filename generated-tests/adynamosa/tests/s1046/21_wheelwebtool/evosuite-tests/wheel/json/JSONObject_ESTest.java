/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 03:17:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("YC|&", "YC|&");
      boolean boolean0 = jSONObject1.optBoolean("YC|&");
      Boolean.compare(false, false);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)32);
      hashMap0.put("YC|&", short0);
      jSONObject2.optDouble("YC|&");
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>();
      JSONObject jSONObject3 = jSONObject1.put("YC|&", (Map) hashMap0);
      boolean boolean1 = jSONObject0.isNull("YC|&");
      assertTrue(boolean1 == boolean0);
      
      jSONObject0.toString(0, 60);
      jSONObject3.optJSONObject("YC|&");
      Long long0 = new Long(1L);
      JSONObject.valueToString(long0, 60, 123);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Long long0 = new Long((-290));
      JSONObject.getNames((Object) hashMap0);
      Long long1 = new Long((-290));
      Long.getLong("expecteP'", (long) (-290));
      Long.compare((-290), (-290));
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      jSONObject0.optBoolean("B~", true);
      jSONObject0.optString("$A8&[{Sw#}w");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{9D4z=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 5 of {9D4z=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-1188), (-1188));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.accumulate("@(LBHv58&<^M", boolean0);
      jSONObject1.optDouble("is", 2607.012);
      jSONObject1.optInt("is", 75);
      jSONObject0.names();
      jSONObject0.optBoolean("{}");
      Float float0 = new Float((-1159.188522122));
      jSONObject1.getBoolean("@(LBHv58&<^M");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = new JSONObject("{}");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.accumulate(".i}(D6*o", boolean0);
      jSONObject0.optBoolean(".i}(D6*o");
      Float float0 = new Float((-1959.2877047077409));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(".i}(D6*o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .i}(D6*o
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("0", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.quote("");
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optJSONArray("");
      Float float0 = new Float(815.0F);
      jSONObject0.append("\"\"", float0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"\"");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short) (-1984));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optDouble("is");
      try { 
        jSONObject0.get("Hb85v</>x6:b$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Hb85v<\\/>x6:b$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put((Float) null, (Boolean) null);
      JSONObject.valueToString(hashMap0);
      JSONObject.getNames((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("\"\"");
      JSONObject.doubleToString((-30733257));
      JSONObject.quote("S&boG88h;r,");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("w", 0L);
      jSONObject0.getDouble("w");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)0);
      String string0 = "{~:`";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{~:`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 4 of {~:`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float.sum((-2491.458F), (-2491.458F));
      Object object0 = new Object();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getlogicalXor", 0L);
      Byte.compare((byte)105, (byte)105);
      Byte.compare((byte) (-110), (byte)105);
      Double double0 = new Double(0L);
      JSONObject.testValidity(double0);
      JSONObject.valueToString(object0, 2703, (-3068));
      jSONObject0.put("", 0L);
      JSONObject.getNames(jSONObject1);
      long long0 = jSONObject1.getLong("getlogicalXor");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(0.0F);
      Float.isFinite(1103.036F);
      Long long0 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.append("8_]=\"", float0);
      Object object0 = JSONObject.NULL;
      jSONObject1.append("8_]=\"", float0);
      Float float1 = new Float(0.0F);
      String string0 = "] is not a JSONArray.";
      try { 
        Integer.valueOf("] is not a JSONArray.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"] is not a JSONArray.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString(0.0);
      jSONObject0.optJSONArray("un8J[NV~|c=A/dNg(b");
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      String string1 = "Missing value";
      jSONObject0.putOpt("Missing value", ",\n");
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      jSONObject1.getInt(",\n");
      String string2 = null;
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      jSONObject0.toString(57, (-682));
      JSONObject jSONObject1 = jSONObject0.put("{}", 923L);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject1.put("sho", (double) 923L);
      Byte byte0 = new Byte((byte)120);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sho";
      stringArray0[1] = "\n";
      stringArray0[2] = "y1";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject4 = jSONObject0.putOpt("{}", jSONObject3);
      JSONObject jSONObject5 = jSONObject3.put("sho", true);
      jSONObject2.isNull("\n");
      JSONObject jSONObject6 = jSONObject4.getJSONObject("{}");
      JSONObject.quote("[fq`sqUqR^]<j)+#r");
      jSONObject1.remove((String) null);
      JSONObject jSONObject7 = jSONObject6.accumulate("", "[fq`sqUqR^]<j)+#r");
      assertSame(jSONObject7, jSONObject5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "@!HcVG)QA w#ByQw";
      Long long0 = new Long((-601L));
      JSONObject jSONObject1 = jSONObject0.append("@!HcVG)QA w#ByQw", long0);
      Object object0 = JSONObject.NULL;
      jSONObject1.append("@!HcVG)QA w#ByQw", object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("@!HcVG)QA w#ByQw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of @!HcVG)QA w#ByQw
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{UQXdh\"}|L/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {UQXdh\"}|L/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short)83);
      JSONObject.valueToString(short0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Short.toUnsignedInt((short)83);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isputOpt";
      Double double0 = new Double((-82.899322115667));
      hashMap0.put(double0, double0);
      Short.toUnsignedLong((short)83);
      JSONObject jSONObject1 = jSONObject0.accumulate("isputOpt", "java.lang.Short@0000000001");
      jSONObject1.put("java.lang.Short@0000000001", (Object) "java.lang.Short@0000000001");
      jSONObject1.get("java.lang.Short@0000000001");
      try { 
        jSONObject0.getJSONArray("java.lang.Short@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "N!YTC7w/UM8q");
      JSONObject jSONObject0 = new JSONObject("N!YTC7w/UM8q", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-84));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.optString("yG", " at character ");
      boolean boolean0 = jSONObject0.isNull(" at character ");
      assertTrue(boolean0);
      
      String string0 = jSONObject0.optString("yG", "");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "?5vViJb5%GJnTj9Y)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject();
      String string1 = "{>od";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{>od");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {>od
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1188);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString((-658), (-1188));
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-1L));
      jSONObject1.toString(46, (-4553));
      jSONObject1.optInt("wheel.json.JSONObject@0000000001");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject.doubleToString((-1343.0));
      jSONObject1.optString("{}");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of spl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = jSONObject0.toString(57, (-658));
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-1L));
      Float float0 = new Float((float) 57);
      jSONObject1.put("xO+1p", (Object) float0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject0.append("", jSONObject1);
      Short short0 = new Short((short)47);
      JSONObject.numberToString(float0);
      jSONObject2.remove("");
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(57, (-658));
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-1L));
      jSONObject1.optDouble("wheel.json.JSONObject@0000000001");
      jSONObject0.put("joi", (Object) "wheel.json.JSONObject@0000000001");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      try { 
        jSONObject1.append("wheel.json.JSONObject@0000000001", "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONObject@0000000001] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-1L));
      jSONObject1.getDouble("wheel.json.JSONObject@0000000001");
      jSONObject0.put("joi", (Object) "wheel.json.JSONObject@0000000001");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optString("Mzsu$");
      JSONObject jSONObject3 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString("");
      JSONObject.doubleToString(0.0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, (-483), 5207);
      JSONObject.numberToString(float0);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      try { 
        jSONObject0.getJSONObject("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      Float.max(1186.3F, 1186.3F);
      String string0 = "+aULb";
      JSONObject jSONObject0 = new JSONObject((Object) "+aULb");
      JSONArray jSONArray0 = jSONObject0.names();
      String string1 = jSONObject0.toString((-316), 1839);
      jSONObject0.optInt(string1);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      jSONObject0.optString("T[A0+N^#fe5O6'");
      jSONObject0.optLong(string1);
      jSONObject0.put("T[A0+N^#fe5O6'", 0);
      JSONObject.numberToString(float0);
      try { 
        jSONArray0.getJSONObject(1839);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1839] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-1188), (-1188));
      Float.max((-1188), 880.663F);
      String string0 = "+aULb";
      JSONObject jSONObject1 = new JSONObject((Object) "+aULb");
      jSONObject0.names();
      String string1 = jSONObject1.toString((-1188), 1587);
      jSONObject1.optInt("getspliterator");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject.doubleToString(880.663F);
      String string2 = "T[A0+N^#fe5O6'";
      jSONObject1.optString("spl");
      JSONObject jSONObject2 = new JSONObject(string1);
      jSONObject0.optLong("");
      jSONObject0.put("", (-1188));
      Double double0 = new Double((-1188));
      JSONObject.numberToString(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONArray0.getJSONObject((-1188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1188] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1200);
      jSONObject0.toString((-1200));
      JSONObject jSONObject1 = null;
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject0.put("PgyQ|!:cmI?.(", (double) (-1200));
      jSONObject2.put("toJ", (double) (-1200));
      Double double0 = new Double(916.0);
      JSONObject jSONObject3 = jSONObject0.put("sho", 1590.045085284165);
      JSONObject jSONObject4 = jSONObject3.put("sho", true);
      jSONObject4.getBoolean("sho");
      Long long0 = new Long(1L);
      JSONObject.getNames((Object) long0);
      String string0 = "\\b";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("PgyQ|!:cmI?.(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of PgyQ|!:cmI?.(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      jSONObject0.toString(57, (-1188));
      jSONObject0.put("{}", 915L);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(488.0);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double2 = new Double(488.0);
      JSONObject.valueToString(double2);
      jSONObject0.optInt("{}");
      JSONObject.valueToString("y1");
      JSONObject.doubleToString(57);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(57);
      hashMap1.put(integer0, "{}");
      Integer integer1 = new Integer(915);
      Float float0 = new Float((double) (-1188));
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      try { 
        Byte.decode("g$<1'`v%}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g$<1'`v%}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.isNull("par");
      JSONObject.valueToString("par");
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("`OQy6&uE,VI_R", (Collection) linkedList0);
      jSONObject1.write(stringWriter0);
      Short short0 = new Short((short)87);
      JSONObject.testValidity(short0);
      JSONObject.valueToString(jSONObject1);
      JSONObject.doubleToString(0.0);
      jSONObject1.put("\"java.lang.String@0000000004\"", (int) (short)87);
      jSONObject1.toString(47, (-2741));
      JSONTokener jSONTokener0 = new JSONTokener("getvalueOf");
      JSONObject.valueToString("ht4lr1Nqgj");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        linkedList1.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Long long0 = new Long((-2554L));
      JSONObject.valueToString(long0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject1.toString();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      linkedList0.add("getnumberToString");
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = new Boolean(false);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(310.27451425643);
      Double double0 = new Double((-2554L));
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optString("java.lang.Long@0000000005");
      jSONObject1.put("getputOpt", (-3147.2202));
      jSONObject0.optLong((String) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer.getInteger("i|{CDO6cO>fLK~SR/");
      hashMap1.put((Integer) null, (Integer) null);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap1);
      jSONObject0.put("java.lang.Long@0000000005", (-3887));
      JSONObject.numberToString(long0);
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("HT=k3%fwJ?\">Gk#%k");
      linkedList0.add("HT=k3%fwJ?\">Gk#%k");
      Float float0 = new Float(0.7528388F);
      linkedList0.pollFirst();
      JSONObject.valueToString((Object) null);
      linkedList0.add("HT=k3%fwJ?\">Gk#%k");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean boolean1 = new Boolean(true);
      Float float1 = new Float((-1.0F));
      Byte byte0 = new Byte((byte) (-65));
      JSONObject jSONObject1 = new JSONObject(byte0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optString("HT=k3%fwJ?\">Gk#%k");
      JSONObject jSONObject3 = jSONObject2.put("ke", (-411.9689269278792));
      jSONObject3.optLong((String) null);
      jSONObject0.accumulate("Expected a ':' after a key", "");
      try { 
        jSONObject0.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("8C|5@&", "8C|5@&");
      jSONObject1.optBoolean("8C|5@&");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getInt("8C|5@&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8C|5@&\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      JSONObject jSONObject1 = jSONObject0.put("{}", 905L);
      jSONObject1.keys();
      jSONObject1.optInt("{}", (-1188));
      jSONObject0.get("{}");
      jSONObject0.optInt("gettoHexString", 905);
      jSONObject0.getInt("{}");
      Float float0 = new Float(184.23F);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", jSONObject1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.accumulate("{}", (Object) null);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getString("A]:{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A]:{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("HT=k3%fwJ?\">Gk#%k");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("HT=k3%fwJ?\">Gk#%k");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Boolean boolean1 = new Boolean(false);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0);
      JSONObject jSONObject1 = new JSONObject(float0);
      JSONObject jSONObject2 = new JSONObject();
      String string0 = jSONObject2.optString("QL6");
      JSONObject jSONObject3 = jSONObject1.put("getoptJSONObject", 1.0);
      jSONObject3.optLong("getoptJSONObject");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject4.put("@Y1I", (-3887));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject0.put("5O", (Map) hashMap1);
      Long long0 = new Long((-291));
      JSONObject.valueToString("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject4 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", linkedList0);
      jSONObject0.toString();
      jSONObject3.isNull("ov/4:\"$Q");
      Double double0 = new Double(0.0);
      int int0 = (-586);
      JSONObject.valueToString(jSONObject3, (-291), (-586));
      try { 
        jSONObject4.getJSONObject("getgetLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      jSONObject0.toString(57, (-682));
      JSONObject jSONObject1 = jSONObject0.put("{}", 923L);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject1.put("sho", (double) 923L);
      Byte byte0 = new Byte((byte)120);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sho";
      stringArray0[1] = "\n";
      stringArray0[2] = "y1";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject4 = jSONObject0.putOpt("{}", jSONObject3);
      jSONObject2.isNull("\n");
      JSONObject jSONObject5 = jSONObject4.getJSONObject("{}");
      JSONObject.quote("[fq`sqUqR^]<j)+#r");
      jSONObject1.remove((String) null);
      JSONObject jSONObject6 = jSONObject5.accumulate("", "[fq`sqUqR^]<j)+#r");
      assertFalse(jSONObject6.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      jSONObject0.toString(57, (-682));
      jSONObject0.put("{}", 923L);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = "sho";
      Boolean boolean0 = new Boolean(true);
      Float float0 = new Float((float) 923L);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optString("{}");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("sho");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sho
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.names();
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optInt("par");
      jSONObject0.isNull("par");
      JSONObject.valueToString("par");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject1.write(stringWriter0);
      JSONObject.valueToString(jSONObject0, 0, 0);
      JSONObject.valueToString("Missing value");
      jSONObject1.put(".", true);
      jSONObject1.optDouble("");
      Double double0 = new Double(0);
      JSONObject jSONObject2 = new JSONObject(double0);
      jSONObject2.names();
      try { 
        jSONObject1.getInt("NOH8,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NOH8,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[Ax7yZ'C";
      Double double0 = new Double((-985.0316870101));
      Double.min(2798.78, (-985.0316870101));
      Double.max((-1.0), 1.0);
      double double1 = 0.0;
      Double.isFinite(0.0);
      Double.min(2798.78, (-1.0));
      JSONObject jSONObject1 = jSONObject0.append("[Ax7yZ'C", double0);
      jSONObject1.remove("[Ax7yZ'C");
      try { 
        jSONObject0.getInt("[Ax7yZ'C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[Ax7yZ'C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-291));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject1.toString((-291), 8);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      try { 
        jSONObject2.getInt("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(34);
      JSONObject jSONObject1 = jSONObject0.put("`,QFH.lv21K0jPyg00", (Object) integer0);
      jSONObject1.toString();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = new Boolean("qj}7iRd6s.&oW>KNAl");
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Boolean boolean1 = new Boolean(false);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject.valueToString(jSONObject1, 34, 34);
      JSONObject jSONObject4 = jSONObject3.put("US]s7&f_b+N;'#(Gr_|", 3928.084163389162);
      JSONObject.quote("US]s7&f_b+N;'#(Gr_|");
      jSONObject3.optLong("Expected a ',' or ']'");
      jSONObject0.put("Wel0", 116);
      JSONArray jSONArray2 = jSONObject4.toJSONArray(jSONArray1);
      assertNull(jSONArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.valueToString((Object) null);
      JSONObject.doubleToString((-1534.796F));
      Boolean boolean0 = new Boolean("UQ%c]v_F6%pB");
      Short short0 = new Short((short) (-1426));
      jSONObject1.putOpt("nam", "-1534.7960205078125");
      long long0 = jSONObject2.getLong("nam");
      assertEquals((-1534L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.names();
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optInt("par");
      jSONObject0.isNull("par");
      JSONObject.valueToString("par");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject.valueToString(jSONObject0, 0, 0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject@0000000001", (double) 12);
      try { 
        jSONObject2.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = jSONObject0.append("{}", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.optDouble("e1h5S`;/4AnTZ~p0G");
      jSONObject1.put("e1h5S`;/4AnTZ~p0G", (Collection) linkedList0);
      jSONObject0.toString();
      jSONObject0.getJSONArray("{}");
      jSONObject1.optLong("{}");
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = jSONObject1.put("k<(}e6hr$G3", (Collection) linkedList0);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", 1L);
      try { 
        jSONObject1.getLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(34);
      JSONObject jSONObject1 = jSONObject0.put("`,QFH.lv21K0jPyg00", (Object) integer0);
      String string0 = jSONObject1.toString();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("qj}7iRd6s.&oW>KNAl");
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Boolean boolean0 = new Boolean(true);
      JSONObject.valueToString(boolean0);
      JSONObject.doubleToString(0.0);
      Boolean boolean1 = new Boolean("java.lang.Boolean@0000000006");
      String string1 = JSONObject.valueToString(linkedList0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Byte.toUnsignedLong((byte)125);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optString("lo", " at character ");
      jSONObject0.isNull(" at character ");
      JSONObject.valueToString(byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString(1568, (int) (byte) (-81));
      JSONObject jSONObject1 = jSONObject0.put("lo", (long) (byte) (-81));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      JSONObject.doubleToString(635.208720158);
      JSONObject.getNames((Object) hashMap0);
      JSONObject.quote(",\n");
      try { 
        jSONObject2.getInt("java.lang.Byte@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Byte@0000000005\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("_VS)?x%X", "W=SSG994PEzH#:");
      int int0 = jSONObject0.optInt("W=SSG994PEzH#:", (-2269));
      assertEquals((-2269), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("[", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("gqtgeFLong", false);
      jSONObject0.getJSONArray("[");
      jSONObject2.put("[", true);
      JSONObject.valueToString("W=SSG994PEzH#:");
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.put("?V- U", (Map) hashMap0);
      jSONObject0.names();
      String string0 = jSONObject0.optString("?V- U", "?V- U");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2J|lmtPSI^oq&sGn-";
      stringArray0[1] = "MZA#'~";
      stringArray0[2] = "|YhhK!";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = JSONObject.quote("[0#aT*ig%|2R");
      assertEquals("\"[0#aT*ig%|2R\"", string0);
      
      Float float0 = new Float(0.0);
      Float.sum((-3234.0F), (-3234.0F));
      JSONObject jSONObject2 = jSONObject1.putOpt("Missing value", float0);
      double double0 = jSONObject2.optDouble("2J|lmtPSI^oq&sGn-");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject1.remove("|YhhK!");
      jSONObject2.optJSONObject("");
      int int0 = jSONObject0.optInt("wheel.json.JSONObject");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      JSONObject jSONObject1 = jSONObject0.put("{}", 923L);
      jSONObject1.keys();
      jSONObject1.optInt("{}", (-1188));
      jSONObject0.getInt("{}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1);
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (-1));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject.valueToString((Object) null, 58, 1235);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(34);
      JSONObject jSONObject1 = jSONObject0.put("`,QFH.lv21K0jPyg00", (Object) integer0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) "`,QFH.lv21K0jPyg00");
      assertEquals(1, stringArray0.length);
      
      Short short0 = new Short((short)61);
      boolean boolean0 = jSONObject0.optBoolean("val");
      Float float0 = new Float((float) (short)61);
      Byte byte0 = new Byte((byte)6);
      boolean boolean1 = jSONObject1.isNull((String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("_VS)?x%X", "W=SSG994PEzH#:");
      jSONObject0.optInt("W=SSG994PEzH#:", (-2269));
      jSONObject0.keys();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("isparseFloat", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('|');
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject1.getBoolean("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "8EI)b>Ruca(9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject1.optDouble("", (-606.39720212));
      assertEquals((-606.39720212), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("_VS)?x%X", "W=SSG994PEzH#:");
      jSONObject0.optInt("W=SSG994PEzH#:", (-2269));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jSONObject0.getJSONObject("_VS)?x%X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_VS)?x%X\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("_VS)?x%X", "W=SSG994PEzH#:");
      jSONObject0.optInt("W=SSG994PEzH#:", (-2269));
      String string0 = JSONObject.quote("wheel.json.JSONObject$1");
      JSONObject jSONObject2 = jSONObject0.put("e# dl/3wrwrz", (-2269));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "e# dl/3wrwrz";
      stringArray0[1] = "\"wheel.json.JSONObject$1\"";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "\"wheel.json.JSONObject$1\"";
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject3.toJSONArray(jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject3.put("\"wheel.json.JSONObject$1\"", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject2.append("X_}SD~U5", "e# dl/3wrwrz");
      String string1 = jSONObject4.getString("_VS)?x%X");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "OnrKBB8G[z[5De~:";
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      jSONObject0.optBoolean("");
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      Float.sum((-1436.32F), (-1.0F));
      JSONObject jSONObject0 = new JSONObject((Object) "+aULb");
      jSONObject0.names();
      String string0 = jSONObject0.toString((-316), 1839);
      int int0 = jSONObject0.optInt(string0);
      assertEquals(0, int0);
      
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = new JSONObject(string0, stringArray0);
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      jSONObject1.put("", (Map) hashMap1);
      jSONObject0.names();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      Short short0 = new Short((short)53);
      Short.toUnsignedLong((short)53);
      Short.compare((short)53, (short)53);
      JSONObject.numberToString(short0);
      String string0 = "JSON does not allow non-finite numbers.";
      jSONObject0.optString("JSON does not allow non-finite numbers.");
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject1.get("java.lang.Short@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000004\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("null", object0);
      JSONObject.quote("null");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.put("Cyh[&OW%``~d+2i", (Map) hashMap0);
      jSONObject0.put("Cyh[&OW%``~d+2i", 249L);
      jSONObject0.toString(10);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.quote("\"/C=IX|");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)1);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = jSONObject0.optString("{}", (String) null);
      assertNull(string1);
      
      jSONObject0.putOpt((String) null, object0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.doubleToString((-1.0F));
      assertEquals("-1", string0);
      
      Byte byte0 = new Byte((byte)34);
      Byte.toUnsignedLong((byte)26);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-1";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "-1";
      stringArray0[4] = "-1";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      
      String string1 = jSONObject0.toString((int) (byte)34);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject.doubleToString(0.0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2A!{y&|";
      stringArray0[1] = "|17bB";
      stringArray0[2] = "8C|5@&";
      JSONObject jSONObject0 = new JSONObject("8C|5@&", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("8C|5@&", (Object) null);
      jSONObject1.optBoolean((String) null);
      try { 
        jSONObject0.getLong("|17bB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|17bB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long(1481L);
      String string0 = JSONObject.doubleToString(881.0);
      assertEquals("881", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("881", (double) 1481L);
      assertEquals(1481.0, double0, 0.01);
      
      int int0 = jSONObject0.optInt((String) null, 1601);
      assertEquals(1601, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-447.88693517557));
      JSONObject.valueToString(double0);
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double1 = jSONObject0.optDouble("java.lang.Double@0000000001", (-447.88693517557));
      assertEquals((-447.88693517557), double1, 0.01);
      
      String string0 = jSONObject0.toString(1542);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte1);
      String string0 = "sRy^{c\"2g";
      Byte.toUnsignedInt((byte)0);
      JSONObject jSONObject1 = jSONObject0.append("sRy^{c\"2g", byte1);
      jSONObject1.toString();
      jSONObject0.keys();
      int int0 = 12;
      Integer integer0 = new Integer(12);
      JSONObject.getNames((Object) integer0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "sRy^{c\"2g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1188));
      JSONObject jSONObject1 = jSONObject0.put("{}", 923L);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = jSONObject1.put("\n", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject1.accumulate("{}", jSONObject2);
      assertEquals(2, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-447.88693517557));
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      stringArray0[2] = "java.lang.Double@0000000001";
      String string0 = "\\t";
      jSONObject0.toString(8);
      try { 
        jSONObject0.getString("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      String string1 = JSONObject.valueToString(jSONObject1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("\n", 0.0);
      JSONObject.getNames(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("~k,%u}G");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~k,%u}G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "En@C3s9l_-1fH<*";
      stringArray0[2] = "QQ#Hpdt";
      stringArray0[3] = "eT5 :O-<$LT7$'j &E";
      stringArray0[4] = ",:]}/\"[{;=#";
      stringArray0[5] = "7LA~_7<O";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "F_^)%G3z){^\"v!0}\"^a");
      int int0 = (-50530497);
      int int1 = 12;
      jSONObject0.toString((-50530497), 12);
      jSONObject0.optString("JSON does not allow non-finite numbers.");
      jSONObject0.optDouble("zWLVODU>");
      jSONObject0.optInt("F_^)%G3z){^\"v!0}\"^a");
      jSONObject0.optBoolean("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060,\njava.lang.Byte@0000000061,\njava.lang.Byte@0000000062,\njava.lang.Byte@0000000063,\njava.lang.Byte@0000000064,\njava.lang.Byte@0000000065,\njava.lang.Byte@0000000066\n],\n\"java.lang.String@0000000045\": \"java.lang.Class@0000000046\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n            }");
      String string0 = "toJ";
      jSONObject0.remove("toJ");
      String string1 = "isquote";
      try { 
        jSONObject0.getBoolean("isquote");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isquote\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1701L);
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short) (-63));
      Short.toUnsignedLong((short) (-63));
      JSONObject jSONObject2 = jSONObject1.accumulate("k", short0);
      jSONObject2.put("k", (-744L));
      long long1 = jSONObject1.optLong("k");
      assertEquals((-744L), long1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      JSONObject.doubleToString(0L);
      String string0 = JSONObject.doubleToString((-1L));
      assertEquals("-1", string0);
      
      int int0 = jSONObject0.optInt("0");
      assertEquals(0, int0);
      
      jSONObject0.toString(0, 0);
      String string1 = jSONObject0.toString(1592);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(";R^S:jxT4zB71#y:`[w");
      assertEquals("", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      JSONObject.valueToString(jSONObject1);
      boolean boolean0 = jSONObject1.optBoolean("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("getremainderUnsigned", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = (JSONArray)jSONObject0.opt("getremainderUnsigned");
      assertEquals(1, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("g<3Q-XL\")_V");
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (-1475));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1057L);
      Float float0 = new Float(0.0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", (-1615));
      JSONObject jSONObject1 = jSONObject0.putOpt("U1\u0003hJ'(", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("zbnVbH!P)");
      jSONObject0.opt("JSON does not allow non-finite numbers.");
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("zbnVbH!P)", 0.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append("_;nO6", object0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (-1));
      jSONObject1.keys();
      jSONObject1.optInt("Unterminated string", (-1));
      int int0 = jSONObject1.getInt("Unterminated string");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("%q^Du1^");
      assertEquals("", string0);
      
      String string1 = jSONObject0.toString(2217, (-57));
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("8C|5@&", "8C|5@&");
      boolean boolean0 = jSONObject1.optBoolean("8C|5@&");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONObject0.has("8C|5@&");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("i@qCQ3]1Yi\"F&P3=", object0);
      try { 
        jSONObject1.getDouble("i@qCQ3]1Yi\"F&P3=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i@qCQ3]1Yi\\\"F&P3=\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("i@qCQ3]1Yi\"F&P3=", object0);
      boolean boolean0 = jSONObject0.has("-1.00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.toString(1514);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextValue();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 59;
      JSONObject jSONObject1 = jSONObject0.put("0", 59);
      jSONObject1.put("0", (Object) null);
      String string0 = "java.lang.Short@00000000030";
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.accumulate("8C|5@&", "8C|5@&");
      boolean boolean0 = jSONObject0.has("8C|5@&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(88);
      Float float0 = new Float((-1165.3F));
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ',' or '}'", float0);
      Object object0 = jSONObject1.get("Expected a ',' or '}'");
      assertEquals((-1165.3F), object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong((String) null, (-516L));
      jSONObject0.accumulate("8C|5@&", "8C|5@&");
      JSONObject.getNames((Object) "8C|5@&");
      try { 
        jSONObject0.getDouble("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)13);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt(stringArray0[5], stringArray0[1]);
      jSONObject0.optLong(stringArray0[6]);
      long long0 = jSONObject1.optLong(stringArray0[1]);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1.0));
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      JSONObject.valueToString(long0);
      jSONObject0.optDouble((String) null, 0.0);
      JSONObject.doubleToString((-32.454));
      try { 
        jSONObject0.getLong("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("opt", 1L);
      try { 
        jSONObject1.getBoolean("opt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"opt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "VYl\".$ 6wElQ";
      JSONObject.quote("VYl\".$ 6wElQ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "\"VYl\".$ 6wElQ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.accumulate("8C|5@&", "8C|5@&");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.accumulate((String) null, jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(";R^S:jxT4zB71#y:`[w");
      StringWriter stringWriter0 = new StringWriter(149);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 59;
      jSONObject0.put("0", 59);
      String string0 = "java.lang.Short@00000000030";
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0";
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      Short short0 = new Short((short)13);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      stringArray0[3] = "java.lang.Float@0000000001";
      stringArray0[4] = "java.lang.Float@0000000001";
      stringArray0[5] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      jSONObject0.optLong(stringArray0[6]);
      long long0 = jSONObject1.optLong("java.lang.Float@0000000001");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 59);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-1157.1));
      assertEquals("-1157.1", string0);
      
      double double0 = jSONObject0.getDouble("0");
      assertEquals(59.0, double0, 0.01);
      
      jSONObject1.length();
      long long0 = jSONObject1.optLong("wheel.json.JSONObject$1", (long) 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "istoHexString";
      JSONObject jSONObject0 = new JSONObject((Object) "istoHexString");
      String string1 = null;
      long long0 = 3242L;
      try { 
        jSONObject0.put((String) null, 3242L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("sum", (Collection) linkedList0);
      String string0 = jSONObject0.toString(123);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1T7#3]Dw{<6AQ),Ax", 3246);
      jSONObject0.optDouble("1T7#3]Dw{<6AQ),Ax", (double) 59);
      JSONObject.doubleToString(2083.225);
      jSONObject0.optInt("2083.225", 8);
      JSONObject jSONObject1 = jSONObject0.put("", 4398.4751);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject1 = jSONObject0.put("\f", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject((String) null);
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 32);
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = new StringWriter(32);
      jSONObject1.write(stringWriter1);
      JSONObject.valueToString(stringWriter0, 32, 32);
      jSONObject0.length();
      try { 
        jSONObject1.get("\"java.io.StringWriter@0000000004\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.io.StringWriter@0000000004\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (-978));
      jSONObject1.put("0", 0L);
      double double0 = new Integer((-978));
      String string0 = JSONObject.doubleToString((-352.5));
      assertEquals("-352.5", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("3/5l?hTR", (Object) null);
      String string0 = jSONObject0.optString(";R^S:jxT4zB71#yR:`[w");
      assertEquals("", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer((-2359));
      JSONObject.getNames((Object) integer0);
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1, (-2359), 123);
      String string1 = JSONObject.valueToString("null");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Boolean boolean0 = Boolean.valueOf("w|?([");
      JSONObject.valueToString(boolean0);
      Object object0 = new Object();
      jSONObject0.putOpt("java.lang.Boolean@0000000002", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      Short short0 = new Short((short)13);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      stringArray0[3] = "java.lang.Float@0000000001";
      stringArray0[4] = "java.lang.Float@0000000001";
      stringArray0[5] = "java.lang.Float@0000000001";
      stringArray0[6] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Float@0000000001", "java.lang.Float@0000000001");
      jSONObject0.optLong("java.lang.Float@0000000001");
      long long0 = jSONObject1.optLong("java.lang.Float@0000000001");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(2689.294891344502);
      JSONObject.valueToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iswait";
      stringArray0[1] = "ishashCode";
      stringArray0[2] = "Z5";
      stringArray0[3] = "~g98 R&kVh*ZR2;";
      stringArray0[4] = "{{J9GYf;Tu0(9Xxyw3X";
      stringArray0[5] = "i0Zf4I?1";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "-1");
      jSONObject0.optDouble("OedY[Utt;", 0.0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.0);
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalXor(true, false);
      Boolean.logicalXor(true, true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", 0L);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("8!Hu");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.doubleToString(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(2629);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("rR0J7;TqqI-9}frP4");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.append(".", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{'DcC9+!T&e7");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 12 of {'DcC9+!T&e7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(3727);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = ",o/E f2\"4nf274";
      JSONObject jSONObject1 = jSONObject0.put(",o/E f2\"4nf274", 170);
      JSONObject jSONObject2 = jSONObject1.put(",o/E f2\"4nf274", (long) 170);
      jSONObject2.names();
      jSONObject0.toString(170);
      jSONObject1.optString((String) null, "JSONArray[");
      jSONObject2.optDouble(",\n", (double) 170);
      jSONObject2.put("' and instead saw '", 170);
      StringWriter stringWriter0 = new StringWriter(170);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSONArray[");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{\"java.lang.String@0000000002\": java.lang.Long@0000000004}", (-348), (-348));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1892.570585307922));
      jSONObject0.put("-1892.570585307922", (Collection) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("yGM\"[=e>A/vr:dX", (-134.0));
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", (-1241L));
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.accumulate("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject0.remove((String) null);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1894.434760202351));
      Short short0 = new Short((short)1447);
      jSONObject0.append("-1894.434760202351", short0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optJSONObject("A``?4`#UTkWH");
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(16);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-34));
      JSONObject.valueToString(byte0, 6, 6);
      jSONObject0.optDouble("false", Double.NaN);
      jSONObject0.put("java.lang.Byte@0000000002", (Object) "java.lang.Byte@0000000002");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(";R^S:jxT4zB71#y:`[w");
      StringWriter stringWriter0 = new StringWriter(149);
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(101);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optInt("Q])", (-253));
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((JSONArray) null, double0);
      Double double1 = new Double(0.0);
      Double.sum(0.0, (-1795.111));
      hashMap0.put((JSONArray) null, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      int int0 = 10;
      jSONObject1.optInt("", 10);
      jSONObject1.put("", (Map) hashMap0);
      jSONObject1.isNull("");
      StringWriter stringWriter0 = new StringWriter(10);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", (-1838), (-1329));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1283));
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.optInt("Q])", (-1283));
      assertEquals((-1283), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Float float0 = new Float(1211.19F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.max(1211.19F, 1211.19F);
      Float.sum(1211.19F, 1211.19F);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
      
      jSONObject0.optLong("] is not a JSONObject.", 0L);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = JSONObject.valueToString((Object) null, 9, 8192);
      jSONObject0.optBoolean("", false);
      String string1 = JSONObject.valueToString("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("\"{}\"", 8);
      assertEquals(8, int0);
      
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Object) "{}");
      assertEquals(3, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject();
      String string1 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.opt((String) null);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("AEn%gy]eA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of AEn%gy]eA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = new Float(213.44607);
      Float.isFinite(1.0F);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lon";
      stringArray0[1] = "{";
      stringArray0[2] = "t~eMC]Df";
      stringArray0[3] = "islongValue";
      stringArray0[4] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("t~eMC]Df", 4211.80496621);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1334, 2716);
      assertEquals("{}", string0);
      
      Float float0 = new Float(213.44607);
      Float.isFinite(9);
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0);
      String string2 = JSONObject.valueToString("Jx*ft:X", 3978, 9);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(213.44607);
      Float.isFinite(9);
      JSONObject.valueToString(float0);
      Integer integer0 = new Integer(3103);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.optString("lo", " at character ");
      boolean boolean0 = jSONObject0.isNull(" at character ");
      assertTrue(boolean0);
      
      String string0 = jSONObject0.optString("lo", "get");
      assertEquals(1, jSONObject0.length());
      assertEquals("get", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("`He~Bq-");
      assertFalse(boolean0);
      
      Short short0 = new Short((short)58);
      JSONObject.valueToString(short0);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject.valueToString(boolean1, 58, (short)58);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Uv*SXFR<i(:,/l", (-1284L));
      try { 
        jSONObject0.getLong("vcOW7d9c;56Nvj|N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vcOW7d9c;56Nvj|N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(213.59765285650482);
      Float.sum((-2978.2F), 0.0F);
      Float.isFinite(9);
      JSONObject.valueToString(float0);
      JSONObject.valueToString(jSONObject0, 9, 8192);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject.doubleToString((-69.077193));
      String string0 = "toU";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of toU
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Integer integer0 = new Integer(70);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(70);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject0.write(writer0);
      JSONObject.doubleToString(0.0);
      Byte byte0 = new Byte((byte)54);
      jSONObject0.accumulate("", integer0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      Float.max((-44.526F), 0.0F);
      Float.sum((-2491.458F), (-2491.458F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("0[1Ie-[&$,z<q4Z1p", 44);
      jSONObject0.optInt("TjQtu>x<3", (-1));
      try { 
        jSONObject0.getLong("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optString("Expected a ',' or '}'");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) linkedList1);
      jSONObject1.optBoolean("$:ZM.xX?UBm.-b", true);
      jSONObject1.optLong("sV5!#");
      Integer integer0 = new Integer((-3224));
      String string0 = JSONObject.valueToString(integer0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(88);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.write(stringWriter0);
      JSONObject.doubleToString(0.0F);
      Byte byte0 = new Byte((byte)46);
      jSONObject0.accumulate("q 1A^o|h37CGP", byte0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "null";
      stringArray0[1] = "";
      stringArray0[2] = "null";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      JSONObject.valueToString("] is not a Boolean.");
      jSONObject0.put("null", 0L);
      int int0 = jSONObject0.optInt("", (-1560));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1560), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(88);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      boolean boolean0 = jSONObject0.optBoolean("in", true);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "4";
      stringArray1[1] = "wheel.json.JSONObject@0000000001";
      stringArray1[2] = "wheel.json.JSONObject@0000000001";
      stringArray1[3] = "in";
      stringArray1[4] = "wheel.json.JSONObject@0000000001";
      stringArray1[5] = "wheel.json.JSONObject@0000000001";
      stringArray1[6] = "in";
      stringArray1[7] = "wheel.json.JSONObject@0000000001";
      JSONObject jSONObject1 = new JSONObject(integer1, stringArray1);
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
      
      String string1 = jSONObject1.optString("4");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString((Object) null, 9, 8192);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "Y}33aQ23H<l,";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "A JSONArray text must start with '['";
      stringArray0[7] = "|;l`g/S";
      jSONObject0.put("|;l`g/S", 0.0);
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      String string0 = "v'&,";
      stringArray0[0] = "v'&,";
      stringArray0[1] = "N0[kf)AVDu)U?\"2fD1";
      String string1 = "Z|d>XI#N]adCkh3y2";
      stringArray0[2] = "Z|d>XI#N]adCkh3y2";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.getNames((Object) "v'&,");
      int int0 = 107;
      jSONObject0.toString(107, 2050);
      jSONObject0.optJSONArray("Z|d>XI#N]adCkh3y2");
      JSONObject jSONObject1 = jSONObject0.accumulate("Z|d>XI#N]adCkh3y2", "N0[kf)AVDu)U?\"2fD1");
      Object object1 = new Object();
      Integer integer0 = new Integer(2050);
      Integer integer1 = Integer.getInteger("GN?c", integer0);
      JSONObject.valueToString(integer1);
      jSONObject1.optBoolean(")>8@V~DV~.+Cq", true);
      jSONObject1.put("Z|d>XI#N]adCkh3y2", object1);
      jSONObject1.toString();
      try { 
        jSONObject0.get("N0[kf)AVDu)U?\"2fD1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N0[kf)AVDu)U?\\\"2fD1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      int int0 = new Short((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int1 = 1402;
      JSONObject.valueToString(jSONObject0, 173, 1402);
      jSONObject0.put("] is not a Boolean.", false);
      jSONObject0.toString(101, 1402);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.json.JSONObject");
      jSONObject0.optJSONArray("#M%zgH[5L78=:xAeU");
      int int0 = 0;
      long long0 = 4890L;
      jSONObject0.toString(0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("C\"nE* K:\" >j_m}2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of C\"nE* K:\" >j_m}2
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Double double0 = new Double(1607.335511);
      JSONObject jSONObject1 = jSONObject0.put("r=|spugntqy)%>$BH-L", (Object) double0);
      jSONObject1.optInt("r=|spugntqy)%>$BH-L", (-5355));
      try { 
        jSONObject1.getInt("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Integer integer0 = new Integer(47);
      jSONObject0.accumulate("\"{}\"", integer0);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      jSONObject0.opt("{}");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      String string0 = "CWhIwKs^!";
      jSONObject0.optBoolean("xM", true);
      try { 
        jSONObject1.get("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      jSONObject0.put("", (Object) "{}");
      jSONObject2.has("\"{}\"");
      String string0 = "";
      String string1 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-1), 10);
      try { 
        jSONObject2.getBoolean("t`A<F{-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t`A<F{-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      jSONObject0.put(",", false);
      int int0 = 1402;
      JSONObject.valueToString(jSONObject0, 173, 1402);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      String string0 = "_[8m/]/56MdEy^5=k";
      try { 
        jSONObject0.get("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      jSONObject0.optString("4.UhmzqyRCTXp");
      String string0 = "j7N5J`Z%JPJ/o||J";
      try { 
        jSONObject0.getJSONObject("j7N5J`Z%JPJ/o||J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j7N5J`Z%JPJ/o||J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Integer integer0 = new Integer(70);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      int int0 = jSONObject0.optInt("TjQtu>x<3", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xM";
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      jSONObject1.put("Unterminated string", true);
      String string1 = "CWhIwKs^!";
      try { 
        jSONObject1.getJSONArray("CWhIwKs^!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CWhIwKs^!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("] is not a Boolean.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optInt((String) null);
      int int1 = 4;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "#9SWmPi:J[E+?";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      try { 
        jSONObject0.getLong("#9SWmPi:J[E+?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#9SWmPi:J[E+?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("] is not a JSONArray.");
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong(" )k~Dx5 yyQKe@|");
      assertEquals(0L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "%`m-)%nIxZ$}$YbBr");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(784);
      Integer.remainderUnsigned(32, 69);
      BiFunction<Integer, String, String> biFunction0 = (BiFunction<Integer, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyString());
      hashMap0.compute(integer0, biFunction0);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, "xP>=~PMa", biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      jSONObject0.optInt("j+BoK");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put(integer0, "@(r0s#R8n2CmR#");
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      String string0 = "";
      jSONObject0.optBoolean("");
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("(q5zm^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(q5zm^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject.valueToString(float0, 2023, (-3665));
      JSONTokener jSONTokener0 = new JSONTokener("g..y(;.vG:vz\"Kz9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g..y(;.vG:vz\"Kz9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int0 = 1402;
      JSONObject.valueToString(jSONObject0, 173, 1402);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">uNn";
      String string0 = "A+Y";
      stringArray0[1] = "A+Y";
      stringArray0[2] = "";
      stringArray0[3] = "8G&FOl4~";
      stringArray0[4] = "N!DRaXiV1";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.put("", (int) (byte)0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.getNames((Object) boolean0);
      Boolean.getBoolean("");
      jSONObject0.optInt("] is not a JSONObject.", 0);
      String string0 = "5<3}3We'";
      try { 
        jSONObject0.getInt("5<3}3We'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5<3}3We'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      hashMap0.entrySet();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "$VfhCf&3q";
      int int0 = (-1154);
      Integer integer0 = new Integer((-1154));
      String string1 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "&Wjc<,K*5<1)";
      try { 
        jSONObject1.getDouble("&Wjc<,K*5<1)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&Wjc<,K*5<1)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Double double0 = new Double(4977.965);
      JSONObject.numberToString(double0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Double@0000000001";
      stringArray0[4] = "java.lang.Double@0000000001";
      stringArray0[5] = "pA6*F";
      stringArray0[6] = "java.lang.Double@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      jSONObject0.put("", (Object) "{}");
      jSONObject2.has("\"{}\"");
      try { 
        jSONObject2.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.optBoolean("1", false);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      jSONObject2.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("JSONArray initial value should be a string or collection or array.", (Collection) linkedList0);
      try { 
        jSONObject3.append("", "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Integer integer0 = new Integer(125);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("~-XN", true);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "Y}33aQ23H<l,";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(": ", "P?&B<-");
      assertEquals("P?&B<-", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      jSONObject0.put("", (Map) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("pv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of pv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "A JSONArray text must start with '['";
      JSONTokener jSONTokener0 = new JSONTokener("A JSONArray text must start with '['");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A JSONArray text must start with '['
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Double double0 = new Double((-1433.055));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "IGgs#~awo0G";
      stringArray0[2] = "";
      stringArray0[3] = "N*O4z\"+\\}A";
      stringArray0[4] = "yq8kY4@Iy1HW7F#=5t";
      stringArray0[5] = "k3td %'D$";
      stringArray0[6] = "Expected a ':' after a key";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "ATn:*nr9~aYzf";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ATn:*nr9~aYzf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ATn:*nr9~aYzf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      try { 
        jSONObject2.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Integer integer0 = new Integer((-1872));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getJSONObject("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
