/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:05:37 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(60);
      JSONObject jSONObject1 = jSONObject0.append("isnotifyAll", jSONArray0);
      JSONObject jSONObject2 = jSONObject1.put("0[DUB9pfWs:ky", (-1L));
      jSONObject2.optBoolean("isnotifyAll");
      jSONObject2.optInt("0[DUB9pfWs:ky", 57);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject1.put("0[DUB9pfWs:ky", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject3.append("cVGglmag(--F)i4", "isnotifyAll");
      String string0 = jSONObject4.toString(2156, 0);
      JSONObject.valueToString(jSONObject0);
      linkedList0.clear();
      jSONObject1.optLong("isnotifyAll", (-1L));
      jSONObject4.optLong("_opN}(f^8=IYTMP;B5", (long) 0);
      JSONObject jSONObject5 = new JSONObject(string0);
      jSONObject2.putOpt("iscompare", jSONObject5);
      jSONObject3.toString((-1), 95);
      assertEquals(4, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(1943.11158);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double double1 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      jSONObject0.put("Unclosed comment", 13);
      assertEquals(9, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "%B</@$:iqIuhjRT.";
      try { 
        jSONObject0.get("%B</@$:iqIuhjRT.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%B<\\/@$:iqIuhjRT.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "{vx=*gGVZ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{vx=*gGVZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {vx=*gGVZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("N~JQ&\"K{?ZU", "N~JQ&\"K{?ZU");
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      hashMap0.put((String) null, (String) null);
      hashMap1.put("false", "false");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optLong("N~JQ&\"K{?ZU");
      jSONObject0.optInt("false");
      String string0 = "i_Hm7)-mX]";
      jSONObject0.optLong("i_Hm7)-mX]");
      jSONObject0.length();
      hashMap0.put("false", (String) null);
      jSONObject0.getBoolean("false");
      JSONObject.getNames(jSONObject0);
      hashMap1.put((String) null, "kKq\"RXaS*J");
      try { 
        jSONObject0.getJSONObject("F1k6'aqtz4Uzh3h-v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F1k6'aqtz4Uzh3h-v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-146), 65);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("na", (Collection) linkedList0);
      byte byte0 = (byte) (-39);
      Byte byte1 = new Byte((byte) (-39));
      hashMap0.put(byte1, "{}");
      int int0 = 1455;
      Integer integer0 = new Integer(1455);
      linkedList0.addFirst(integer0);
      jSONObject1.optString("na");
      jSONObject0.put("istoJSONArray", 160);
      JSONObject.valueToString(linkedList0, 1371, (-146));
      jSONObject1.optInt("wheel.json.JSONArray@0000000002");
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.optDouble("{}", 0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 3110;
      jSONArray0.optJSONObject(3110);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '\\';
      StringWriter stringWriter1 = stringWriter0.append('\\');
      StringWriter stringWriter2 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      stringWriter1.append((CharSequence) stringBuffer0);
      JSONObject.valueToString(linkedList0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "[]", 3110, 3110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gettoUnsignedLong";
      stringArray0[1] = "'";
      stringArray0[2] = "1i]pcn^#";
      stringArray0[3] = ",SVs";
      jSONObject0.append("1i]pcn^#", "'");
      jSONObject0.toString();
      stringArray0[4] = "iswait";
      stringArray0[5] = "MOlX>s@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      hashMap0.put(jSONObject1, "1i]pcn^#");
      hashMap0.remove((Object) ",SVs", (Object) ",SVs");
      jSONObject1.put("1i]pcn^#", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("1i]pcn^#");
      try { 
        jSONObject2.getJSONArray("LM3Bf+f^RZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LM3Bf+f^RZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Bad value from toJSONString: ", 101);
      jSONObject0.optInt("L4s?e^T3s\"w$iPbt<");
      JSONObject.quote("L4s?e^T3s\"w$iPbt<");
      JSONObject.testValidity("L4s?e^T3s\"w$iPbt<");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("L4s?e^T3s\"w$iPbt<", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("L4s?e^T3s\"w$iPbt<");
      assertNotSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "g %QC=se";
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(193.50658513798);
      jSONObject0.append("g %QC=se", float0);
      jSONArray0.put(12);
      Float float1 = new Float(1645.9F);
      hashMap0.put(jSONArray0, float1);
      jSONObject0.getJSONArray("g %QC=se");
      try { 
        jSONObject0.getJSONObject("#^3cToTgH'M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#^3cToTgH'M\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lo";
      stringArray0[1] = "dqe2{w@";
      stringArray0[2] = "dqe2{w@";
      stringArray0[3] = "dqe2{w@";
      stringArray0[4] = "dqe2{w@";
      JSONObject jSONObject0 = new JSONObject("dqe2{w@", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("dqe2{w@", (-1346L));
      long long0 = jSONObject2.getLong("dqe2{w@");
      assertEquals((-1346L), long0);
      
      boolean boolean0 = jSONObject1.isNull("dqe2{w@");
      assertFalse(boolean0);
      
      JSONObject.valueToString("dqe2{w@", (-35), (-35));
      Object object0 = JSONObject.NULL;
      jSONObject0.put("m?Ix`", object0);
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("isparseFloat", object1);
      Double double0 = new Double(1.0);
      Short short0 = new Short((short)2511);
      hashMap0.put(double0, short0);
      JSONObject jSONObject2 = jSONObject0.putOpt("$Q", object0);
      JSONObject.quote("lyNKe)wqB");
      Short short1 = hashMap0.put(double0, (Short) null);
      jSONObject2.put("$Q", 0.0);
      jSONObject2.keys();
      jSONObject0.optDouble("$Q");
      jSONObject0.length();
      Short.compare((short)2511, (short)2511);
      jSONObject0.optDouble("] is not a JSONArray.");
      JSONObject.numberToString(short1);
      boolean boolean0 = jSONObject1.isNull("isparseFloat");
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "{>euE?+T4Wl)~-Hq!9(";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{>euE?+T4Wl)~-Hq!9(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {>euE?+T4Wl)~-Hq!9(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.testValidity("");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      JSONObject.getNames(jSONObject0);
      jSONObject1.getDouble("");
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float((-157.487));
      Float.max(0.0F, 0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.sum(0.0F, 0.0F);
      jSONObject0.optDouble(".P~!%V95", (-1.0));
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.has("ry[");
      boolean boolean0 = jSONObject0.isNull("to");
      String string1 = JSONObject.quote("");
      assertEquals("\"\"", string1);
      
      int int0 = jSONObject0.optInt("A JSONObject text must begin with '{'", 123);
      assertEquals(123, int0);
      
      boolean boolean1 = jSONObject0.optBoolean("frvUo]@5p");
      assertEquals(8, jSONObject0.length());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Null pointer
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isintValue");
      String string0 = jSONObject0.toString((-1));
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(jSONObject0, boolean0);
      jSONObject0.put("{}", (double) (-1));
      jSONObject0.put("isintValue", (Map) hashMap0);
      jSONObject0.optInt("isintValue", 1059);
      Long long0 = new Long(2787L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      jSONObject0.putOpt("isparseFloat", object1);
      Double double0 = new Double(1.0);
      Short short0 = new Short((short)2511);
      hashMap0.put(double0, short0);
      JSONObject jSONObject1 = jSONObject0.putOpt("$Q", object0);
      JSONObject.quote("lyNKe)wqB");
      Short short1 = hashMap0.put(double0, (Short) null);
      jSONObject1.put("$Q", 0.0);
      jSONObject1.keys();
      jSONObject0.optDouble("$Q");
      jSONObject0.length();
      double double1 = jSONObject0.optDouble("] is not a JSONArray.");
      assertEquals(2, jSONObject0.length());
      
      JSONObject.numberToString(short1);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(2685L);
      Long.getLong("va", long0);
      JSONObject jSONObject1 = jSONObject0.append("va", long0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject1.write(writer0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("q]PRDA", false);
      JSONObject jSONObject1 = jSONObject0.put("?;2t+WR+\"qK", (-1707));
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject$Null", true);
      jSONObject1.getInt("?;2t+WR+\"qK");
      jSONObject2.optBoolean("wheel.json.JSONObject$Null");
      jSONObject1.optLong("wheel.json.JSONObject$Null", 0L);
      jSONObject0.length();
      JSONObject jSONObject3 = jSONObject2.put("?;2t+WR+\"qK", true);
      assertSame(jSONObject0, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      JSONObject jSONObject1 = jSONObject0.put("\f", false);
      jSONObject0.optBoolean("\f");
      try { 
        jSONObject1.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      double double0 = 0.0;
      jSONObject0.put("is", 0.0);
      String string1 = "Substring bounds error";
      boolean boolean0 = true;
      try { 
        jSONObject0.getJSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      double double0 = 1192.397311402273;
      String string0 = ",\n";
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isintValue");
      String string0 = jSONObject0.toString((-1));
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(jSONObject0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-1));
      jSONObject1.optLong("getvalueOf", 0L);
      jSONObject0.put("isintValue", (Map) hashMap0);
      jSONObject0.optInt("isintValue", 1059);
      Long long0 = new Long(2787L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Float float0 = new Float(2308.73F);
      String[] stringArray0 = new String[3];
      String string0 = "getlongValue";
      stringArray0[0] = "getlongValue";
      stringArray0[1] = "iscompare";
      String string1 = "$hfC^Rf-/&B";
      stringArray0[2] = "$hfC^Rf-/&B";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", false);
      jSONObject0.length();
      Float.min(2308.73F, 2308.73F);
      jSONObject0.optJSONObject(">X{W");
      JSONObject jSONObject2 = jSONObject1.accumulate("Unterminated string", (Object) null);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject2.put("\")AIr_S)v*r0B", (Map) hashMap0);
      JSONObject.getNames(jSONObject2);
      jSONObject2.append("getlongValue", (Object) null);
      try { 
        jSONObject0.getJSONObject("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlongValue\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Short short0 = new Short((short)10);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("L<-L%5&)5", (Collection) linkedList0);
      jSONObject0.put("Expected a ':' after a key", (double) (short)10);
      JSONObject jSONObject1 = jSONObject0.accumulate("L<-L%5&)5", short0);
      jSONObject1.append("5>VxXQ6wvtOdk", "L<-L%5&)5");
      JSONObject.valueToString(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "J&;F:NfKM";
      JSONObject jSONObject1 = jSONObject0.accumulate("J&;F:NfKM", "J&;F:NfKM");
      jSONObject1.optBoolean("J&;F:NfKM");
      jSONObject1.names();
      String string1 = null;
      short short0 = (short)744;
      Short short1 = new Short((short)744);
      short short2 = (short)137;
      try { 
        jSONObject0.getBoolean("J&;F:NfKM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J&;F:NfKM\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s[TeNNzahbV-&");
      JSONObject jSONObject1 = jSONObject0.append("null", "s[TeNNzahbV-&");
      jSONObject0.optBoolean("s[TeNNzahbV-&", false);
      jSONObject0.length();
      JSONObject jSONObject2 = jSONObject1.append("null", jSONObject0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject2.put("0osJ", (Collection) linkedList0);
      jSONObject2.optLong("0osJ", 0L);
      assertEquals(5, jSONObject1.length());
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject1 = jSONObject0.put("YuK", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(55);
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'K';
      charArray0[2] = 'k';
      charArray0[3] = '4';
      charArray0[4] = '.';
      stringWriter0.write(charArray0);
      Integer integer0 = new Integer(12);
      Short short0 = new Short((short)3131);
      hashMap0.put(integer0, short0);
      StringWriter stringWriter1 = stringWriter0.append('D');
      jSONObject0.write(stringWriter1);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject1.put("93uU'D!Hr(", (Collection) linkedList0);
      String string0 = "+(p3IEx7#";
      try { 
        jSONObject2.getLong("+(p3IEx7#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+(p3IEx7#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-115959602));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'A?~(nOx2V,_s'4";
      stringArray0[1] = "YJ\"(cA|~o)5";
      String string0 = "=={j/SPnvS2Kp?";
      stringArray0[2] = "=={j/SPnvS2Kp?";
      stringArray0[3] = "istoUnsignedLong";
      stringArray0[4] = "Y<LQ3";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      double double0 = (-1.0);
      jSONArray0.optInt((-115959602), 2066);
      try { 
        jSONArray0.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)19);
      Byte.toUnsignedLong((byte) (-101));
      Byte.toUnsignedInt((byte)81);
      JSONObject.valueToString(byte0, (byte)19, (-2719));
      String string0 = jSONObject0.toString();
      Integer integer0 = new Integer(97);
      Integer.min((-2719), 83);
      Integer.remainderUnsigned(83, 13);
      hashMap0.put("", integer0);
      hashMap0.values();
      String string1 = JSONObject.valueToString(hashMap0);
      assertNotNull(string1);
      
      long long0 = jSONObject0.optLong("", 1443L);
      assertEquals(1443L, long0);
      
      long long1 = jSONObject0.optLong("tri");
      assertEquals(0L, long1);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      String string2 = jSONObject0.toString(0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float((-858.5F));
      JSONObject jSONObject1 = jSONObject0.putOpt(">%p,n|]7WSqz%0&1'W", float0);
      jSONObject1.toString(32, 32);
      jSONObject1.optBoolean(">%p,n|]7WSqz%0&1'W");
      JSONObject jSONObject2 = jSONObject0.put(",\n", 875L);
      jSONObject0.opt(",\n");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject3 = jSONObject2.put(",\n", (Map) hashMap0);
      JSONObject jSONObject4 = jSONObject0.append("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}", jSONObject3);
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}");
      Double double0 = new Double(875L);
      hashMap0.put(double0, jSONObject0);
      JSONObject.valueToString(",\n");
      jSONObject2.optBoolean("par");
      jSONObject4.remove((String) null);
      jSONObject3.put("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}", 0.0);
      String string0 = "BHP#}Jrb";
      try { 
        jSONObject4.getJSONArray("BHP#}Jrb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BHP#}Jrb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      jSONObject0.names();
      stringArray0[0] = "java.lang.Long@0000000001.";
      stringArray0[1] = "9CBpprQq(Buw&eK2#{";
      stringArray0[2] = "fJr>*W20C2w82Tse";
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1313), (-2782));
      stringArray0[3] = "lA;ibE9lUn";
      stringArray0[4] = "isdoubleToRawLongBits";
      stringArray0[5] = "_{a";
      stringArray0[6] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optJSONArray("] is not a number.");
      String string0 = "bIu\"d1\\3yH";
      try { 
        jSONObject1.getDouble("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Float float0 = new Float(1598.09544661);
      Float.sum(1232.1747F, 1232.1747F);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject1 = jSONObject0.append("isreverseBytes", "P\"");
      jSONObject1.toString(77);
      JSONObject.valueToString((Object) null, (-267), (-267));
      try { 
        jSONObject1.getLong("'C3b]|Gqn}`<>mt#+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'C3b]|Gqn}`<>mt#+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "00F");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "00F";
      stringArray0[1] = "00F";
      stringArray0[2] = "00F";
      stringArray0[4] = "00F";
      stringArray0[5] = "00F";
      stringArray0[6] = "00F";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject2.accumulate("f,\";{_}.K}", "00F");
      jSONObject3.append("00F", (Object) null);
      jSONObject1.optInt("");
      String string0 = JSONObject.quote("gettoUpperCase");
      assertEquals("\"gettoUpperCase\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject2.put("] is not a JSONArray.", object0);
      double double0 = jSONObject2.optDouble("<O");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject2.optInt("HWF>Y@Sr|P");
      int int0 = jSONObject4.optInt("00F");
      assertEquals(0, int0);
      
      JSONObject jSONObject5 = jSONObject4.accumulate("isfloatToIntBits", "");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject6 = jSONObject5.put("@%03xk:", (Map) hashMap0);
      String string1 = jSONObject5.toString();
      assertNotNull(string1);
      
      jSONObject6.length();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sw@\"MvlDQY/;";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      jSONObject0.toString();
      String string0 = ",:]}/\\\"[{;=#";
      jSONObject0.put("0", true);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      try { 
        jSONObject0.getLong("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("0", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<Float, Boolean> hashMap1 = new HashMap<Float, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      hashMap0.entrySet();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.optLong((String) null);
      Float float0 = new Float((float) 0L);
      Boolean boolean0 = Boolean.valueOf((String) null);
      hashMap0.put(float0, boolean0);
      Writer writer1 = jSONArray0.write(writer0);
      jSONObject0.write(writer1);
      jSONObject0.length();
      jSONObject0.optBoolean((String) null);
      String string0 = "{&c)P!H9x";
      jSONObject0.optDouble("{&c)P!H9x", 0.0);
      stringWriter0.append((CharSequence) null);
      String string1 = "Expected a ',' or ']'";
      jSONObject0.optLong("Expected a ',' or ']'", 1L);
      jSONObject0.optDouble("{&c)P!H9x", 0.0);
      String string2 = "RY'EP<p7Fj+:K!vvA*";
      jSONObject0.isNull("RY'EP<p7Fj+:K!vvA*");
      jSONObject0.optString("isintValue");
      jSONObject0.keys();
      try { 
        Long.decode("isintValue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"isintValue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject.doubleToString(509.090967289515);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "sp";
      double double0 = 0.0;
      try { 
        jSONObject0.put((String) null, (-896.3846686780927));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.putOpt("ismin", hashMap0);
      int int0 = 28;
      JSONObject.valueToString(jSONObject0, 28, (-599));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{\"java.lang.String@0000000002\": {}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {\"java.lang.String@0000000002\": {}}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      jSONObject0.names();
      stringArray0[0] = "java.lang.Long@0000000001.";
      stringArray0[1] = "9CBpprQq(Buw&eK2#{";
      stringArray0[2] = "fJr>*W20C2w82Tse";
      stringArray0[3] = "lA;ibE9lUn";
      stringArray0[4] = "isdoubleToRawLongBits";
      stringArray0[5] = "_{a";
      stringArray0[6] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optJSONArray("] is not a number.");
      String string0 = "bIu\"d1\\3yH";
      try { 
        jSONObject1.getDouble("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-1474.748);
      JSONObject.doubleToString((-1474.748));
      Long.getLong("-1474.748", (-386L));
      String string0 = "\"}`e^5DnZ/qyh";
      int int0 = 4;
      try { 
        Long.parseUnsignedLong("\"}`e^5DnZ/qyh", 4);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"}`e^5DnZ/qy\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject1 = jSONObject0.put("f}rG", (Map) hashMap0);
      jSONObject0.optLong("f}rG", (-974L));
      jSONObject0.optDouble((String) null);
      jSONObject0.length();
      jSONObject0.optDouble("f}rG");
      JSONObject.getNames((Object) null);
      Object object0 = new Object();
      hashMap0.put((Long) null, object0);
      JSONObject jSONObject2 = jSONObject1.put("f}rG", (-264));
      jSONObject2.optLong((String) null);
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject2.getInt("f}rG");
      assertEquals((-264), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Map<Short, Byte> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "ma";
      try { 
        jSONObject0.getString("'.zkD9uY9n.M)0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'.zkD9uY9n.M)0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("8[_hv5", (Collection) null);
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Byte byte0 = new Byte((byte)125);
      JSONObject.valueToString(byte0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte)9);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "=";
      stringArray0[1] = "true";
      stringArray0[2] = "joi";
      stringArray0[3] = "true";
      stringArray0[4] = "(IsRkIm";
      stringArray0[5] = ":=p<`(k0?NI<}8t0iz";
      stringArray0[6] = "yn%o6-r";
      stringArray0[7] = "gtQbduEN2 s<C}";
      stringArray0[8] = "\n";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject.getNames((Object) "joi");
      jSONObject0.append("Expected a ',' or ']'", "true");
      String string0 = jSONObject0.toString((int) (byte)9, 772);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~1ha\"N\"TrD$'B=;";
      stringArray0[1] = "0";
      stringArray0[2] = "\b";
      stringArray0[3] = "LL#!JgBw/u,jA?";
      stringArray0[4] = "isfloatToIntBits";
      stringArray0[5] = "gettoHexString";
      stringArray0[6] = "v";
      stringArray0[7] = "ishashCode";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Double double0 = new Double((-1491.235));
      Double.max((-1491.235), (-1491.235));
      Double.sum((-1491.235), (-1491.235));
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rP}NH:\"(s 8";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(42, 42);
      Double.max(0.0, 0.0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("0Y9efy4Gd3)1RcGm_8", (-1491.235));
      jSONObject2.keys();
      String string0 = "[";
      jSONObject0.optBoolean("[");
      jSONObject1.isNull("[-j-:4 xuE6;\"$9");
      JSONObject jSONObject3 = jSONObject1.putOpt("[", "rP}NH:\"(s 8");
      try { 
        jSONObject3.getJSONArray("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "java.lang.Short@0000000003.";
      int int0 = 13;
      jSONObject0.remove("|");
      jSONObject0.toString();
      int int1 = 665;
      JSONObject.valueToString("java.lang.Short@0000000003.", 13, 665);
      jSONObject0.optInt("java.lang.Short@0000000003.");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((-806.34384));
      linkedList0.add((Long) null);
      jSONArray0.put(223, (Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "000");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "000";
      stringArray0[1] = "000";
      stringArray0[2] = "000";
      stringArray0[3] = "";
      stringArray0[4] = "000";
      stringArray0[5] = "000";
      stringArray0[6] = "000";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject2.accumulate("f,\";{_}.K}", "000");
      jSONObject3.append("000", (Object) null);
      jSONObject3.optBoolean("2Q");
      jSONObject1.optInt("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject2.put(";/!i/", object0);
      jSONObject2.optDouble("<O");
      jSONObject2.optInt("HWF>Y@Sr|P");
      jSONObject4.optInt("000");
      JSONObject jSONObject5 = jSONObject4.accumulate("isfloatToIntBits", "");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject6 = jSONObject5.put("@%03xk:", (Map) hashMap0);
      jSONObject5.toString();
      int int0 = jSONObject6.length();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-1039);
      Integer integer0 = new Integer((-1039));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "ishashCode";
      jSONObject0.remove("ishashCode");
      Byte byte0 = new Byte((byte) (-19));
      Byte.toUnsignedInt((byte) (-19));
      Byte.toUnsignedLong((byte) (-19));
      JSONObject jSONObject1 = jSONObject0.putOpt("ishashCode", byte0);
      Byte.toUnsignedInt((byte)1);
      Byte byte1 = new Byte((byte) (-19));
      jSONObject1.accumulate("ishashCode", byte1);
      String string1 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ishashCode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Long.getLong("istoHexString");
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "5C`<X \t{1CTdO5");
      String string0 = "Unterminated string";
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", 0.0);
      jSONObject0.optLong("5C`<X \t{1CTdO5", 0L);
      jSONObject0.optDouble("mi", 0.0);
      jSONObject0.optBoolean("5C`<X \t{1CTdO5", true);
      Long long0 = new Long(0L);
      jSONObject0.put("val", (Object) long0);
      jSONObject0.optLong("val", (-1870L));
      jSONObject1.put(")Pwd_xkB=~{O5]1I", 2);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('\"');
      jSONObject1.write(stringWriter0);
      Object object0 = new Object();
      try { 
        jSONObject0.append("val", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[val] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 127);
      JSONObject.quote("BM=C%+tOqu");
      Integer integer0 = new Integer(14);
      Integer.divideUnsigned(127, 63);
      JSONObject.valueToString(integer0, 53, 14);
      jSONObject1.optJSONObject("] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y?Sa'8&o";
      stringArray0[1] = "Y?Sa'8&o";
      stringArray0[2] = "T&p{";
      stringArray0[3] = "Y?Sa'8&o";
      stringArray0[4] = "Y?Sa'8&o";
      stringArray0[5] = "Y?Sa'8&o";
      stringArray0[6] = "Y?Sa'8&o";
      stringArray0[7] = "Y?Sa'8&o";
      stringArray0[8] = "Y?Sa'8&o";
      JSONObject jSONObject0 = new JSONObject("Y?Sa'8&o", stringArray0);
      jSONObject0.optInt("Y?Sa'8&o");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("A JSONObject text must end with '}'", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7 ";
      String string0 = "\\u";
      stringArray0[1] = string0;
      stringArray0[2] = "'TC$a}j2:R>Q0D";
      stringArray0[3] = ",\n";
      stringArray0[4] = "Unclosed comment";
      stringArray0[5] = "8f*j%,*2<4Ku";
      stringArray0[6] = "gkTu\"lR>,*-";
      stringArray0[7] = "Mu%vQIyUBqGG";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("s?m", 2211);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Float float0 = new Float((-461.2153));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum((-1908.407F), (-1908.407F));
      Float.sum((-1.0F), 1525.0F);
      String[] stringArray0 = new String[0];
      jSONObject0.optInt("f1Z40c", (-1314));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "N<!U";
      jSONObject1.optLong("N<!U", 0L);
      jSONObject0.isNull("N<!U");
      Float.isFinite(0.0F);
      jSONObject1.names();
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Byte byte0 = new Byte((byte)125);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ulJrO";
      stringArray0[1] = "IkIfq7";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      jSONObject0.remove(string0);
      String string1 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = ")CBgq";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(")CBgq", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "] not found.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(double0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject.quote("getintBitsToFloat");
      JSONObject jSONObject0 = new JSONObject((Object) "getintBitsToFloat");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = "com";
      int int0 = 2093;
      jSONObject0.optInt("com", 2093);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "toH";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("toH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of toH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "get";
      JSONTokener jSONTokener0 = new JSONTokener("get");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "Pvb(0d\\F8ba&1auSY/;";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Pvb(0dF8ba&1auSY/;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Pvb(0dF8ba&1auSY/;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "ki5QjF";
      stringArray0[2] = "e!%>ThzC.)";
      stringArray0[3] = "[";
      stringArray0[4] = "D_\"+i";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float((-858.5F));
      JSONObject jSONObject1 = jSONObject0.putOpt(">%p,n|]7WSqz%0&1'W", float0);
      jSONObject1.toString(32, 32);
      jSONObject1.optBoolean(">%p,n|]7WSqz%0&1'W");
      JSONObject jSONObject2 = jSONObject0.put(",\n", 875L);
      jSONObject0.opt(",\n");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}");
      JSONObject jSONObject4 = jSONObject0.append("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}", jSONObject3);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(875L);
      hashMap0.put(double0, jSONObject0);
      JSONObject.valueToString(",\n");
      jSONObject2.optBoolean("par");
      jSONObject4.remove((String) null);
      jSONObject3.put("{\"java.lang.String@0000000002\": java.lang.Float@0000000003}", 0.0);
      String string0 = "BHP#}Jrb";
      try { 
        jSONObject4.getJSONArray("BHP#}Jrb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BHP#}Jrb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "mj(amR(NZ,i:&23k^\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.put("R]^! wh)SX", false);
      JSONObject jSONObject2 = jSONObject0.append("mj(amR(NZ,i:&23k^\"", jSONObject1);
      jSONObject2.toString();
      Float float0 = new Float(1.0F);
      jSONObject0.put("{\"java.lang.String@0000000008\":wheel.json.JSONArray@0000000007}", (Object) float0);
      jSONObject0.optBoolean(",I z?;?2J_", false);
      JSONObject jSONObject3 = jSONObject0.append("R]^! wh)SX", jSONObject1);
      try { 
        jSONObject3.get("fH|A^iMEp#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fH|A^iMEp#{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", 2367L);
      jSONObject1.optBoolean("JSON does not allow non-finite numbers.");
      jSONObject1.optInt(",:]}/\"[{;=#", 2544);
      int int0 = jSONObject1.optInt("isreverseBytes", 45);
      assertEquals(1, jSONObject0.length());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "isdecode";
      stringArray0[1] = "isdecode";
      stringArray0[2] = "isdecode";
      stringArray0[3] = "isdecode";
      stringArray0[4] = "isdecode";
      stringArray0[5] = "isdecode";
      stringArray0[6] = "isdecode";
      stringArray0[7] = "isdecode";
      JSONObject jSONObject0 = new JSONObject("isdecode", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("isdecode", false);
      jSONObject1.put("JSONArray initial value should be a string or collection or array.", false);
      JSONObject.testValidity("isdecode");
      jSONObject0.optLong("`_g`5l8");
      jSONObject1.optString("JSONArray initial value should be a string or collection or array.");
      Byte byte0 = new Byte((byte)0);
      JSONObject.getNames((Object) byte0);
      try { 
        jSONObject1.getJSONObject("dec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dec\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-1889.05655660748));
      Double.sum((-1889.05655660748), Double.NaN);
      Double.min((-1889.05655660748), 1058.9537);
      hashMap0.put("toH", double0);
      jSONObject0.put("toH", (Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Boolean boolean0 = new Boolean("toH");
      Boolean.compare(true, true);
      JSONObject.valueToString(boolean0, 13, 88);
      jSONObject0.has("null");
      String string0 = jSONObject0.toString(3069);
      assertEquals("{}", string0);
      
      double double1 = jSONObject0.optDouble("null", 347.2409593368);
      assertEquals(347.2409593368, double1, 0.01);
      
      double double2 = jSONObject0.optDouble("] is not a JSONArray.");
      assertEquals(Double.NaN, double2, 0.01);
  }
}
