/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:13:36 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.CompareMode;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLob;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("create table");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isQuery("bXX(<E)/LN8D");
      String string0 = SQLUtil.removeComments("HlJO'");
      assertEquals("HlJO'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("create table");
      System.setCurrentTimeMillis((-642L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesStructure("PRIMARY KEY ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("rUE~");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rUE~";
      String string0 = SQLUtil.innerJoin("rUE~", stringArray0, "rUE~", "Ze{m?i:U9X(YsF@", stringArray0);
      assertEquals("rUE~ as Ze{m?i:U9X(YsF@ on rUE~.rUE~ = Ze{m?i:U9X(YsF@.rUE~", string0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = " NOT";
      String string1 = SQLUtil.leftJoin("rUE~", stringArray0, " NOT", "rUE~", stringArray1);
      assertEquals("left join  NOT as rUE~ on rUE~.rUE~ = rUE~. NOT", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDML("insertexec");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sdu8S%u?op8rt('=K", defaultDBTable0, (-459), "RDB$PROCEDURE_NAME");
      defaultDBColumn0.setVersionColumn(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "sdu8S%u?op8rt('=K";
      stringArray0[1] = "PRIMARY KEY ";
      stringArray0[2] = "sdu8S%u?op8rt('=K";
      stringArray0[3] = "l";
      stringArray0[4] = "sdu8S%u?op8rt('=K";
      stringArray0[5] = "RDB$PROCEDURE_NAME";
      stringArray0[6] = "YSqa";
      stringArray0[7] = "l";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "l", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      defaultDBColumn0.equals(defaultDBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VM5cd^XqH]-PX_3m";
      stringArray0[1] = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "VM5cd^XqH]-PX_3m";
      stringArray1[1] = "}jANs{L!";
      stringArray1[2] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (VM5cd^XqH]-PX_3m, ) REFERENCES null(VM5cd^XqH]-PX_3m, }jANs{L!, )", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^)0");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^)0", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^)0 PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.removeComments("M@?mNB5OCRz8");
      String string1 = SQLUtil.substituteMarkers("M@?mNB5OCRz8", "M@?mNB5OCRz8", sQLUtil0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("43X33.U", compositeDBObject0);
      tableContainer0.getSchema();
      DBTrigger dBTrigger0 = new DBTrigger("43X33.U", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("43X33.U", string0);
      
      String string1 = SQLUtil.substituteMarkers(",bq:", "", "43X33.U");
      assertEquals("'43X33.U','43X33.U'b'43X33.U'q'43X33.U':'43X33.U'", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?6@M+MlE=r0I");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?6@M+MlE=r0I";
      stringArray0[1] = "?6@M+MlE=r0I";
      stringArray0[2] = "?6@M+MlE=r0I";
      stringArray0[3] = "?6@M+MlE=r0I";
      stringArray0[4] = "?6@M+MlE=r0I";
      stringArray0[5] = "?6@M+MlE=r0I";
      stringArray0[6] = "?6@M+MlE=r0I";
      stringArray0[7] = "?6@M+MlE=r0I";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I' AND ?6@M+MlE=r0I = '?6@M+MlE=r0I'", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      stringArray0[2] = "E";
      stringArray0[3] = "E";
      stringArray0[4] = ".";
      stringArray0[5] = "";
      stringArray0[6] = "E";
      stringArray0[7] = "E";
      String string0 = SQLUtil.renderColumnListWithTableName("E", stringArray0);
      assertEquals("E.E, E.E, E.E, E.E, E.., E., E.E, E.E", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncate", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncate PRIMARY KEY (, , , , , , , )", string0);
      
      SQLUtil.removeComments("@wF;lF(r8eTqDI=d");
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT truncate ", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.removeComments(" DE&ULT ");
      String[] stringArray0 = new String[16];
      stringArray0[0] = " DE&ULT ";
      stringArray0[1] = "%;\"Ae')=<Ku";
      stringArray0[2] = " DE&ULT ";
      stringArray0[3] = " DE&ULT ";
      stringArray0[4] = " DE&ULT ";
      stringArray0[5] = " DE&ULT ";
      stringArray0[6] = " DE&ULT ";
      stringArray0[7] = " DE&ULT ";
      stringArray0[8] = " DE&ULT ";
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("delete");
      String string0 = CompareMode.OFF;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "OFF");
      SQLUtil.removeComments("b2k");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executeselect");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = SQLUtil.normalize("select", true);
      assertEquals("select", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = SQLUtil.isDML("I*cL#f1#4}uj)");
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "(3oMeh-OY Znil?");
      SQLUtil.mutatesDataOrStructure("X#*z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter table8x?0m n0lz_jgtvv";
      SQLUtil.innerJoin("alter table8x?0m n0lz_jgtvv", stringArray0, "alter table8x?0m n0lz_jgtvv", "dB#d-.|+w^", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("updatei*cl#f1#4}uj)", false);
      DBSchema dBSchema0 = new DBSchema("43Y30.U");
      dBSchema0.getTable("0x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0x", (DBTable) null, 8001, "l|F");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("7*^'i5&0i@%|y|IOC%", true);
      assertEquals("7 * ^ 'i5&0i@%|y|IOC%'", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TypeId.SQLXML_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SQLXML");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("storage_class_name", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("*`+?kZl@Eh7B!)#wP", "SQLXML", "SQLXML");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = new String[0];
      SQLUtil.innerJoin("dBqd-.|^", stringArray1, "", "i*cl#f1#", stringArray0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      SQLUtil.renderValue(valueDecimal0);
      String string0 = "0";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" as i*cl#f1# on ", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      int int0 = 1317;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1317, (CharSequence) "0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1317
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into|m;.vaihpo_i>5<e";
      stringArray0[1] = "";
      stringArray0[2] = "select into|m;.vaihpo_i>5<e";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "select into|m;.vaihpo_i>5<e";
      stringArray1[1] = "select into|m;.vaihpo_i>5<e";
      stringArray1[2] = "select into|m;.vaihpo_i>5<e";
      stringArray1[3] = "select into|m;.vaihpo_i>5<e";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "select into|m;.vaihpo_i>5<e";
      stringArray1[8] = "";
      String string0 = SQLUtil.leftJoin("select into|m;.vaihpo_i>5<e", stringArray0, "select into|m;.vaihpo_i>5<e", "select into|m;.vaihpo_i>5<e", stringArray1);
      assertEquals("left join select into|m;.vaihpo_i>5<e as select into|m;.vaihpo_i>5<e on select into|m;.vaihpo_i>5<e.select into|m;.vaihpo_i>5<e = select into|m;.vaihpo_i>5<e.select into|m;.vaihpo_i>5<e and select into|m;.vaihpo_i>5<e. = select into|m;.vaihpo_i>5<e.select into|m;.vaihpo_i>5<e and select into|m;.vaihpo_i>5<e.select into|m;.vaihpo_i>5<e = select into|m;.vaihpo_i>5<e.select into|m;.vaihpo_i>5<e", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-232149837), "select into|m;.vaihpo_i>5<e");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" SELECT INTO|M;.VAIHPO_I>5<E NULL", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "dBqd-.|^", stringArray0);
      assertEquals(" as dBqd-.|^ on . = dBqd-.|^.", string0);
      
      String string1 = SQLUtil.normalize("dBqd-.|^", false);
      assertEquals("dBqd -.| ^", string1);
      
      String string2 = SQLUtil.normalize("insert|m;.vaihpo_i>5<e", false);
      assertEquals("insert | m ;.v  aihpo_i > 5 < e", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("truncateselect intol");
      StringBuilder stringBuilder0 = new StringBuilder(57);
      SQLUtil.addOptionalCondition("drop index0hi", stringBuilder0);
      assertEquals("drop index0hi", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into|m;.vaihpo_i>5<e";
      stringArray0[1] = "";
      stringArray0[2] = "select into|m;.vaihpo_i>5<e";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "select into|m;.vaihpo_i>5<e";
      stringArray1[1] = "select into|m;.vaihpo_i>5<e";
      stringArray0[2] = "select into|m;.vaihpo_i>5<e";
      stringArray1[3] = "select into|m;.vaihpo_i>5<e";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "select into|m;.vaihpo_i>5<e";
      stringArray1[8] = "";
      SQLUtil.leftJoin("select into|m;.vaihpo_i>5<e", stringArray0, "select into|m;.vaihpo_i>5<e", "select into|m;.vaihpo_i>5<e", stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder(1234);
      SQLUtil.addOptionalCondition("select into|m;.vaihpo_i>5<e", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray2 = new String[1];
      stringArray2[0] = "select into|m;.vaihpo_i>5<e";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (select into|m;.vaihpo_i>5<e)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "drop table";
      String string1 = "l^";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", true, defaultDBTable0, "markTempTableAsModifiedInUnitOfWork");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(">'dRS.&m=|^+T4$@o", defaultDBTable0, (-1318), ">'dRS.&m=|^+T4$@o");
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals(">'dRS.&m=|^+T4$@o", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]]d184HPcE*", defaultDBTable0, 608, "]]d184HPcE*");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setOwner(defaultDBTable0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("]]d184HPcE*, ]]d184HPcE*, ]]d184HPcE*, ]]d184HPcE*, ]]d184HPcE*, ]]d184HPcE*", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ma(+&+%vB-:7d7r ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"ma(+&+%vB-:7d7r \" UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("~zD TR]{I- [4e5", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~zD TR]{I- [4e5", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "~zD TR]{I- [4e5";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) defaultDBTable0;
      objectArray0[3] = (Object) dynamicByteArrayOutputStream0;
      objectArray0[4] = (Object) defaultDBTable0;
      objectArray0[5] = (Object) dBSchema0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) dBSchema0;
      objectArray0[8] = (Object) dynamicByteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("~zD TR]{I- [4e5", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index^)0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delete^)0");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "]]d184HPcE*";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]]d184HPcE*";
      stringArray0[1] = "rename";
      stringArray0[2] = "]]d184HPcE*";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("]]d184HPcE*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("rename");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-182374063), (Object) "]]d184HPcE*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -182374063
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBPackage dBPackage0 = new DBPackage("-nRTqn{yi{Px", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("-nRTqn{yi{Px", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertNotNull(string0);
      assertEquals("null -nRTqn{yi{Px", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null -nRTqn{yi{Px";
      stringArray0[1] = "null -nRTqn{yi{Px";
      stringArray0[2] = "null -nRTqn{yi{Px";
      stringArray0[3] = "null -nRTqn{yi{Px";
      stringArray0[4] = "-nRTqn{yi{Px";
      stringArray0[5] = "null -nRTqn{yi{Px";
      stringArray0[6] = "null -nRTqn{yi{Px";
      String string1 = SQLUtil.innerJoin("-nRTqn{yi{Px", stringArray0, "null -nRTqn{yi{Px", "null -nRTqn{yi{Px", stringArray0);
      assertEquals("null -nRTqn{yi{Px as null -nRTqn{yi{Px on -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px and -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px and -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px and -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px and -nRTqn{yi{Px.-nRTqn{yi{Px = null -nRTqn{yi{Px.-nRTqn{yi{Px and -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px and -nRTqn{yi{Px.null -nRTqn{yi{Px = null -nRTqn{yi{Px.null -nRTqn{yi{Px", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(null -nRTqn{yi{Px, null -nRTqn{yi{Px, null -nRTqn{yi{Px, null -nRTqn{yi{Px, -nRTqn{yi{Px, null -nRTqn{yi{Px, null -nRTqn{yi{Px)", string2);
      
      boolean boolean0 = SQLUtil.isDML("null -nRTqn{yi{Px");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h<trUDwn65pGOYv_sn@");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("j-/4MG", true);
      boolean boolean0 = new Boolean("j - / 4MG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("select/csw", true);
      assertEquals("select / csw", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]]d184HPcE*", defaultDBTable0, 608, "]]d184HPcE*");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "cWLe:k%q'fJ";
      stringArray0[1] = "cWLe:k%q'fJ";
      stringArray0[2] = "]]d184HPcE*";
      stringArray0[3] = "]]d184HPcE*";
      stringArray0[4] = "]]d184HPcE* ]]D184HPCE* NULL";
      stringArray0[5] = "]]d184HPcE* ]]D184HPCE* NULL";
      stringArray0[6] = "]]d184HPcE*";
      stringArray0[7] = "]]d184HPcE* ]]D184HPCE* NULL";
      stringArray0[8] = "]]d184HPcE*";
      SQLUtil.innerJoin("cWLe:k%q'fJ", stringArray0, "cWLe:k%q'fJ", "]]d184HPcE*", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals(50, rowOutputTextLog0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.normalize(">J RW,ZQHo", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, ">J RW,ZQHo", (UUID) null, true);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "selectexec", schemaDescriptor0, (-661), false, true);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("}=!($lgZlFGY7G-ER", true);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sdu8S%u?op8rt('=K", defaultDBTable0, (-459), "RDB$PROCEDURr_NAME");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("execexec", defaultDBTable0, (-459), ")");
      defaultDBColumn1.setOwner(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("/QyDnhN&q'", defaultDBTable0, (-459), "");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("sdu8S%u?op8rt('=K, execexec, execexec, execexec, /QyDnhN&q', sdu8S%u?op8rt('=K, execexec", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ma(+&+%vB-:7d7r ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("insertdrop table");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("z", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(608, "truncate");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable1, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "truncate";
      stringArray0[1] = "l";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "6|GvOn<2'}Z>Ot-", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("z", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "alter session", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      SQLUtil.isDDL("l");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PRIMARY KEY ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("PRIMARY KEY CONSTRAINT 6|GvOn<2'}Z>Ot- ", stringBuilder0.toString());
      
      boolean boolean1 = SQLUtil.isDML("l");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(29, "X;SZ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X;SZ", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.substituteMarkers("X;SZ(1)", "X;SZ(1)", integer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("[]IvMq;", true, defaultDBTable0, "1");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT []IvMq; CONSTRAINT []IvMq; ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "]]\"3dw84HPcE*";
      String string1 = "$+rP";
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42ZB4", dBSchema0);
      defaultDBTable0.getCheckConstraints();
      dBSchema0.addTable(defaultDBTable0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "]]\"3dw84HPcE*";
      stringArray0[2] = "]]\"3dw84HPcE*";
      stringArray0[3] = "_2n1XJ;bU{";
      stringArray0[4] = "i2Py){J<S8&Hggl";
      stringArray0[5] = "$+rP";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h2.functionsInSchema";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("h2.functionsInSchema", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("'(XUqASF;JFm'3", false);
      String string1 = SQLUtil.removeComments("'(XUqASF;JFm'3");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertEquals("create table null (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PipedReader pipedReader0 = new PipedReader(1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "- 0");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("alter materialized viewdetaul");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewdetaul", defaultDBTable0, 97, "alter materialized viewdetaul");
      String[] stringArray0 = new String[11];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[0] = "updateString";
      stringArray0[1] = "alter materialized viewdetaul";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewdetaul", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select intok(y{q&pu;'eu", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER MATERIALIZED VIEWDETAUL", string0);
      
      String string1 = SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE updateString = 'updateString' AND alter materialized viewdetaul = 'alter materialized viewdetaul' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
      
      boolean boolean1 = SQLUtil.isDDL("drop materialized view");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM null WHERE updateString = 'updateString' AND alter materialized viewdetaul = 'alter materialized viewdetaul' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("SELECT * FROM null WHERE updateString = 'updateString' AND alter materialized viewdetaul = 'alter materialized viewdetaul' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringBuilder0.toString());
      
      boolean boolean2 = SQLUtil.isDML("alter materialized viewdetaul");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SQLUtil.normalize("]]\"3dw84HPcE*", false);
      assertEquals("] ] \"3dw84HPcE*\"", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("]]\"3dw84HPcE*");
      SQLUtil.removeComments("]]\"3dw84HPcE*");
      boolean boolean0 = SQLUtil.isDDL("truncate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBDataType dBDataType0 = DBDataType.getInstance(42, "BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view)@xk", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("tm^8)`");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string0);
  }
}
