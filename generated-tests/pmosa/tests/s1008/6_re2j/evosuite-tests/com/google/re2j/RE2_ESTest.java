/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:32:53 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 14);
      assertNotNull(list0);
      
      String string0 = RE2.quoteMeta("|");
      assertEquals("\\|", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("<k#5LC43q@c8YCq0X", (-375), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      RE2 rE2_1 = RE2.compile("^x00-x{10FFFF}");
      rE2_1.findUTF8Index(byteArray0);
      rE2_1.reset();
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.findAllSubmatchIndex("<k#5LC43q@c8YCq0X", 1514);
      StringBuffer stringBuffer0 = new StringBuffer("^x00-x{10FFFF}");
      rE2_0.match(stringBuffer0);
      rE2_0.prefixRune = (int) (byte) (-128);
      rE2_0.findAllIndex("<k#5LC43q@c8YCq0X", (-2197));
      rE2_0.match("<k#5LC43q@c8YCq0X");
      RE2.quoteMeta("<k#5LC43q@c8YCq0X");
      rE2_0.findSubmatch("<k#5LC43q@c8YCq0X");
      // Undeclared exception!
      try { 
        rE2_1.match("^x00-x{10FFFF}", (-128), 3128, (byte) (-8), (int[]) null, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllIndex("", 263);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("N5ISBH}EEzuQ'2cj");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String[] stringArray0 = rE2_0.findSubmatch("<|DZdFxVq[11#");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 263);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("3#");
      rE2_0.match("3#");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-91);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)7);
      assertNotNull(list0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[5];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 1);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("`");
      rE2_0.prefix = "pb";
      byte[] byteArray0 = new byte[5];
      rE2_0.findSubmatch("can't happen");
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      RE2.quoteMeta("LITERAL");
      byteArray0[2] = (byte) (-96);
      rE2_0.findSubmatchIndex("7=aq,-hIY");
      byteArray0[3] = (byte) (-51);
      RE2.match("", "pb");
      byteArray0[4] = (byte) (-28);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, (-2620));
      rE2_0.findUTF8(byteArray0);
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      RE2 rE2_1 = RE2.compilePOSIX("LITERAL");
      assertFalse(rE2_1.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 897);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("U<jo");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-32);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findSubmatch("U<jo");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)33;
      rE2_0.findIndex("STAR");
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-119);
      byteArray1[5] = (byte)94;
      rE2_0.findUTF8Submatch(byteArray1);
      List<String[]> list0 = rE2_0.findAllSubmatch("U<jo", 8);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findUTF8Submatch(byteArray0);
      MachineInput.fromUTF16("");
      // Undeclared exception!
      try { 
        MachineInput.fromUTF8(byteArray0, 817, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // end is greater than length: 7 > 0
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 17);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("7swCsV7y", (-736), false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      rE2_0.findSubmatch("");
      rE2_0.findAll("com.google.re2j.RE2", (-1334));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)88;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1167);
      List<String[]> list0 = rE2_0.findAllSubmatch("", (byte)120);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("bWTRt");
      List<String> list0 = rE2_0.findAll("", 2285);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("U=S;l", 4, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      rE2_0.findAllUTF8(byteArray0, (byte) (-99));
      rE2_0.findAllUTF8(byteArray0, 0);
      byte[] byteArray1 = new byte[0];
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      rE2_0.findAllUTF8Index(byteArray1, 4);
      rE2_0.reset();
      rE2_0.match("U=S;l", 571, (-1918), 571, (int[]) null, 0);
      rE2_0.findAllIndex("U=S;l", (-3060));
      rE2_0.findIndex("U=S;l");
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray1, (-1978));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-3978));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("f'?DJX3eAq{LJC\"'OP");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)75);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("t1^\"{?tAQ)UZ0PL75", (-765), false);
      String string0 = rE2_0.replaceFirst("<nFZ:fg+AYF", "t1^\"{?tAQ)UZ0PL75");
      assertEquals("<nFZ:fg+AYF", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("N5ISBH}EEzuQ'2cj");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, (byte) (-10));
      String string0 = rE2_0.replaceAll("can't happen", "Iz 6~/3ztsI");
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("&Jbst");
      String string0 = rE2_0.find("&Jbst");
      assertEquals("&Jbst", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      RE2 rE2_1 = RE2.compileImpl("com.google.re2j.RE2", 1761, false);
      rE2_0.find("com.google.re2j.RE2");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-50);
      rE2_0.findUTF8(byteArray0);
      rE2_1.findSubmatch("k+S86c;'p`tO`dCLV");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)61;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)61;
      rE2_0.prefix = "om4^a;iN9jYN8PoA";
      byteArray0[2] = (byte)44;
      byte byte0 = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      rE2_0.findSubmatch("");
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      byteArray0[5] = (byte)0;
      rE2_0.findIndex("");
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)61);
      rE2_0.reset();
      rE2_0.findIndex("H");
      rE2_0.findUTF8Index(byteArray1);
      rE2_0.findUTF8Submatch(byteArray1);
      rE2_0.get();
      MachineInput.fromUTF16("om4^a;iN9jYN8PoA");
      // Undeclared exception!
      try { 
        MachineInput.fromUTF8(byteArray1, (byte)0, (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // end is greater than length: 61 > 0
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-67);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-67));
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("UTF-8", 2166, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("UTF-8", (-739));
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, (byte)0);
      rE2_0.replaceFirst("UTF-8", "UTF-8");
      rE2_0.replaceAll("UTF-8", "UTF-8");
      rE2_0.find("UTF-8");
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-67));
      assertNull(list1);
      
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.findAllUTF8Index(byteArray0, 128);
      int[] intArray0 = rE2_0.findSubmatchIndex("UTF-8");
      assertArrayEquals(new int[] {0, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("U5");
      String string0 = rE2_0.replaceFirst("U5", "h1");
      assertEquals("h1", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      RE2 rE2_1 = RE2.compilePOSIX("");
      List<byte[]> list0 = rE2_1.findAllUTF8(byteArray0, (-3272));
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      String string0 = rE2_0.replaceAll("", "Iz 6~/3ztsI");
      assertEquals("Iz 6~/3ztsI", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 0, true);
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-142));
      assertNotNull(list0);
      assertEquals(4, list0.size());
      
      String string0 = rE2_0.replaceAll("_^8.SXTwuEDe6", "P");
      assertEquals("P_P^P8P.PSPXPTPwPuPEPDPeP6P", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[0];
      rE2_0.match("", (-1532), (-1532), (-1532), intArray0, 128359);
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("^!|aiNk");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      rE2_0.findAllIndex("c@2=[u%w", (-448));
      RE2.quoteMeta("^!|aiNk");
      rE2_0.longest = true;
      byteArray0[1] = (byte)52;
      rE2_0.match("^!|aiNk");
      rE2_0.replaceFirst("v}3OZ1?~8a!/Y#", "o|{`7xxGI0;Z=tA");
      rE2_0.prefixComplete = false;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-65));
      rE2_0.reset();
      rE2_0.numberOfCapturingGroups();
      rE2_0.matchUTF8(byteArray0);
      rE2_0.replaceFirst("can't happen", "So");
      rE2_0.findAllSubmatchIndex("can't happen", 773);
      rE2_0.findAllSubmatch("^!|aiNk", (byte)52);
      RE2.compile("v}3OZ1?~8a!/Y#");
      RE2.quoteMeta("^!|aiNk");
      rE2_0.findAllSubmatchIndex("", (byte)52);
      rE2_0.findIndex("yA$3i*rq5pn");
      rE2_0.findAllSubmatchIndex("", 2881);
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)14;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 212);
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      RE2 rE2_1 = RE2.compile("(?-m:$)");
      String string0 = rE2_1.replaceAll("(?-m:$)", "\"");
      assertEquals("(?-m:$)\"", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 3570, false);
      List<int[]> list0 = rE2_0.findAllIndex("", 1932);
      assertNotNull(list0);
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      
      RE2 rE2_1 = RE2.compilePOSIX("");
      RE2.compileImpl("", 12, false);
      RE2.match("", "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-87);
      List<int[]> list1 = rE2_1.findAllUTF8Index(byteArray0, (byte) (-87));
      assertEquals(2, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("N5ISBH}EEzuQ'2cj");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      List<String[]> list0 = rE2_0.findAllSubmatch("", 120068);
      assertNull(list0);
      
      boolean boolean0 = rE2_0.match("N5ISBH}EEzuQ'2cj", (byte)0, 16, 4849668, (int[]) null, 8250);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      RE2 rE2_0 = RE2.compilePOSIX(";ws8VG|");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(";ws8VG|", 768);
      assertNotNull(list0);
      assertEquals(2, list0.size());
  }
}
