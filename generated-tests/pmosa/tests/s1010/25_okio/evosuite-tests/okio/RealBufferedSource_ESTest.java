/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:21:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.rangeEquals(8192L, byteString0);
      assertFalse(boolean0);
      
      realBufferedSource0.inputStream();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)0;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readLong();
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[2] = byteString1;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString2 = hashingSink0.hash();
      byteStringArray0[3] = byteString2;
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteStringArray0[4] = byteString3;
      ByteString byteString4 = realBufferedSource0.readByteString();
      byteStringArray0[5] = byteString4;
      realBufferedSource0.readByteString();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte) (-68);
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-12);
      int int0 = realBufferedSource0.read(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)56;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      realBufferedSource0.inputStream();
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.close();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.sha256();
      realBufferedSource0.indexOfElement(byteString0);
      realBufferedSource0.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-52), (long) (byte) (-52), (long) (byte) (-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-52 toIndex=-52
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      long long0 = realBufferedSource0.read(buffer0, 2280L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)10;
      buffer0.clone();
      byteArray1[6] = (byte) (-73);
      ByteString byteString0 = new ByteString(byteArray1);
      realBufferedSource0.indexOfElement(byteString0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      HashingSource.sha1(gzipSource0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      HashingSource.md5(realBufferedSource0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.buffer();
      realBufferedSource0.toString();
      try { 
        realBufferedSource0.readUtf8LineStrict(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 10000000000000L;
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long1 = (-1671L);
      ByteString[] byteStringArray0 = new ByteString[6];
      try { 
        realBufferedSource0.readByteString(10000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(1L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha256(sink0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.rangeEquals(1L, byteString0);
      try { 
        realBufferedSource0.readUtf8(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)10;
      realBufferedSource0.timeout();
      byteArray0[4] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readFully(buffer0, (long) (byte)10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byte byte0 = (byte)121;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource1);
      HashingSource.md5(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      realBufferedSource0.skip(0L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 4L;
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      pipe0.sourceClosed = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.inputStream();
      pipe0.sinkClosed = true;
      try { 
        realBufferedSource0.skip(2779L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      realBufferedSource0.readUtf8Line();
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.indexOfElement((ByteString) null);
      realBufferedSource0.skip((-1L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.skip((-468L));
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteArray((-468L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -468
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(charset0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.indexOf(byteString0, (long) (byte)0);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0);
      realBufferedSource0.readUtf8Line();
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource1.buffer);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource1.rangeEquals(130L, byteString0, 45, (-3834));
      long long0 = 938L;
      try { 
        realBufferedSource1.readUtf8LineStrict(938L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource.sha256(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Buffer buffer1 = new Buffer();
      HashingSource.sha256(hashingSource0);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = null;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)91;
      try { 
        realBufferedSource2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.rangeEquals((-188L), byteString0);
      try { 
        realBufferedSource0.readUtf8LineStrict(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-62);
      buffer0.write(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      realBufferedSource0.indexOf((byte) (-58));
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      try { 
        realBufferedSource0.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(3249L);
      pipe0.sink();
      HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals(1L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(2146609976);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)97;
      buffer0.write(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)24;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource0.readString(0L, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-70L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.require(0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeLongLe(4635L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-112);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      buffer0.readFrom((InputStream) dataInputStream0);
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-10);
      // Undeclared exception!
      try { 
        Charset.forName("x:f7GQ");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // x:f7GQ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer0.readFrom(inputStream0, 1245L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLongLe(4635L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(realBufferedSource0.buffer, deflater0);
      realBufferedSource0.readAll(deflaterSink0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      HashingSource.hmacSha256(hashingSource0, byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLongLe(2L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSource1.rangeEquals(2L, byteString1, (-709), 2);
      try { 
        realBufferedSource0.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=0200000000000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeLongLe(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.buffer();
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".{'K~+]UI");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.writeLongLe(2L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        realBufferedSource1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0200000000000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      HashingSource.hmacSha256(hashingSource0, byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLongLe(2L);
      HashingSink.sha1(buffer1);
      long long0 = realBufferedSource0.read(buffer1, 2L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".{'K~+]UI");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.writeLongLe(2L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = realBufferedSource0.exhausted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-70L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.exhausted();
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readByteArray(818L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLongLe(2L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString[] byteStringArray0 = new ByteString[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = new ByteString(byteArray0);
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = hashingSource0.hash();
      byteStringArray0[3] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.select(options0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
