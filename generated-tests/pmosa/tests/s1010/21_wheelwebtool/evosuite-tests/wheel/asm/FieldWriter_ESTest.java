/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:40:44 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-960));
      classWriter0.newConstItem("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-960), "java/lang/Class", "RuntimeInvisibleAnnotations", "", "");
      fieldWriter0.visitAnnotation("java/lang/Class", false);
      fieldWriter0.visitAnnotation("java/lang/Class", false);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-1474));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "h?ukAZ)smGWs@", "", "LocalVariableTypeTable", "LocalVariableTypeTable");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("h?ukAZ)smGWs@");
      ByteVector byteVector2 = byteVector1.put11(0, 1);
      ByteVector byteVector3 = byteVector2.put11(257, 2558);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "Synthetic", "Synthetic", "");
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = (-2706);
      String string0 = "cg\"V'u\"P_6~+>29";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("InnerClasses");
      fieldWriter0.visitAttribute(attribute0);
      String string1 = "LocalVariableTypeTable";
      classWriter0.newInteger(3);
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      period0.minusYears(0L);
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay(2);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-2706), "B>UYL", "B>UYL", "PiZ'/,Uw~M!`]", chronoLocalDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 1970-01-03
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "eS<+c\"R.@0mj;q%5", "PiZ'/,Uw~M!`]", "+.Lo[[&HXaH$", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putShort((-1));
      fieldWriter0.put(byteVector0);
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, "", "S'{G`YAOAzi0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2706), "PiZ'/,Uw~M!`]", "PiZ'/,Uw~M!`]", "cg\"V'u\"P_6~+>29", "PiZ'/,Uw~M!`]");
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(0);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.HiddenFileFilter", true);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-2706), "", "", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@7d9b3767
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2290), "", "`", "", "");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2290), "", "", (String) null, (Object) null);
      fieldWriter1.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(0);
      int int0 = Frame.CHAR;
      fieldWriter1.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newInteger(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      classWriter0.visit((-2514), 131072, "}#C?eEK(>V7JR^D#", "}#C?eEK(>V7JR^D#", "}#C?eEK(>V7JR^D#", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2514), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "@9y^OQ", "RuntimeVisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }
}
