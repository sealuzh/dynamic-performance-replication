/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:13:43 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.beans.EventSetDescriptor;
import java.beans.MethodDescriptor;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Stack;
import java.util.Vector;
import javax.swing.ActionMap;
import javax.swing.JInternalFrame;
import javax.swing.JLayer;
import javax.swing.JTree;
import javax.swing.border.Border;
import javax.swing.border.StrokeBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.FilteredClusterer;
import weka.core.CheckOptionHandler;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.WekaOffscreenChartRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      Logger logger0 = serializedModelSaver0.m_logger;
      filter0.setLog((Logger) null);
      // Undeclared exception!
      try { 
        filter0.performRequest("c94");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // c94 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sorter sorter0 = new Sorter();
      Filter filter0 = new Filter();
      filter0.getInputContext();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      int int0 = 124;
      filter0.paintImmediately((-332), 0, 124, (-1461));
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      weka.filters.Filter filter1 = filteredClusterer0.getFilter();
      try { 
        weka.filters.Filter.batchFilterFile(filter1, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         // -z <class name>
         // \tOutputs the source code representing the trained filter.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.moveToFront();
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jInternalFrame0);
      filter0.setSize(dimension0);
      filter0.useDefaultVisual();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName(" test set interrupted!");
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      instanceEvent0.setStatus(0);
      filter0.acceptInstance(instanceEvent0);
      BeanVisual beanVisual0 = new BeanVisual("", "r Q9XaGz5mF:#k+vH9", "");
      filter0.setVisual(beanVisual0);
      int int0 = 2951;
      BasicStroke basicStroke0 = null;
      try {
        basicStroke0 = new BasicStroke(2, 0, 2951, 3119.198F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal line join value
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisual();
      filter0.connectionAllowed("weka/gui/beans/icons/");
      filter0.stop();
      String string0 = BorderLayout.NORTH;
      assertEquals("North", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 8, 8, 8, (-9000));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      filter0.getWrappedAlgorithm();
      boolean boolean0 = filter0.eventGeneratable(" RE2j|CuLw");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.removeFocusListener(defaultCaret0);
      filter0.getWrappedAlgorithm();
      filter0.eventGeneratable("w(h$&N>}");
      filter0.stop();
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.getVisual();
      filter0.setVisual((BeanVisual) null);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.transferFocusDownCycle();
      filter0.getBorder();
      filter0.useDefaultVisual();
      Sorter sorter0 = new Sorter();
      filter0.addDataSourceListener(sorter0);
      filter0.getBorder();
      filter0.getCustomName();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.removeInstanceListener(substringReplacer0);
      boolean boolean0 = filter0.connectionAllowed("QMYx0");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "All rows must have the same length.";
      filter0.connectionAllowed("All rows must have the same length.");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      ArffLoader arffLoader0 = new ArffLoader();
      // Undeclared exception!
      try { 
        filter0.getFocusTraversalKeys(3060);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      stratifiedRemoveFolds0.getOptions();
      filter0.setWrappedAlgorithm(stratifiedRemoveFolds0);
      filter0.getFilter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      JLayer<Canvas> jLayer0 = new JLayer<Canvas>();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      jLayer0.setActionMap((ActionMap) null);
      filter0.removePropertyChangeListener((PropertyChangeListener) jLayer0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      filter0.getComponents();
      filter0.removeHierarchyListener((HierarchyListener) null);
      filter0.connectionAllowed("h");
      filter0.setCustomName("h");
      filter0.stop();
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener1);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.removeTestSetListener(trainTestSplitMaker0);
      filter0.setCustomName("ukDc%@<Y4DR+/&3g;4");
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false, false, false);
      logPanel0.add((Component) wekaTaskMonitor0);
      filter0.setLog(logPanel0);
      filter0.enumerateRequests();
      Saver saver0 = new Saver();
      filter0.getUIClassID();
      filter0.addInstanceListener(saver0);
      filter0.getFilter();
      filter0.globalInfo();
      ConfigurationListener configurationListener2 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener2);
      assertEquals("ukDc%@<Y4DR+/&3g;4", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      Instances instances0 = null;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      TestSetEvent testSetEvent0 = new TestSetEvent(globalInfoJavadoc0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      ImageSaver imageSaver0 = new ImageSaver();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      MetaBean metaBean0 = new MetaBean();
      Vector vector0 = metaBean0.m_inputs;
      JTree jTree0 = new JTree(vector0);
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      int int0 = 2;
      int int1 = (-893);
      variableHeightLayoutCache0.getPathClosestTo(2, (-893));
      // Undeclared exception!
      try { 
        multiTreeUI0.getPathBounds(jTree0, (TreePath) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      TestSetEvent testSetEvent0 = new TestSetEvent(globalInfoJavadoc0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      ImageSaver imageSaver0 = new ImageSaver();
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      MetaBean metaBean0 = new MetaBean();
      Vector vector0 = metaBean0.m_inputs;
      JTree jTree0 = new JTree(vector0);
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      filter0.connectionNotification("<!-- globalinfo-end -->", imageSaver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(checkOptionHandler0, (Instances) null, (-3169), 35, (-3628), 35);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Logger logger0 = classifierPerformanceEvaluator0.m_logger;
      filter0.setLog((Logger) null);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("ZmC]xka qEv>4t<TT1", "ZmC]xka qEv>4t<TT1");
      filter0.connectionNotification("ZmC]xka qEv>4t<TT1", "ZmC]xka qEv>4t<TT1");
      // Undeclared exception!
      try { 
        filter0.performRequest("ZmC]xka qEv>4t<TT1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZmC]xka qEv>4t<TT1 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getContainerListeners();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("I<qS]f1<");
      assertTrue(boolean0);
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(crossValidationFoldMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.disconnectionNotification("@data", "I<qS]f1<");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      filter0.addComponentListener((ComponentListener) null);
      filter0.firePropertyChange(" RE2j|CuLw", false, false);
      filter0.connectionNotification("SGDText:\n\n", "SGDText:\n\n");
      Class<MinkowskiDistance> class0 = MinkowskiDistance.class;
      EventSetDescriptor eventSetDescriptor0 = new EventSetDescriptor("a", class0, (MethodDescriptor[]) null, (Method) null, (Method) null);
      boolean boolean0 = filter0.connectionAllowed(eventSetDescriptor0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      filter0.removeMouseWheelListener((MouseWheelListener) null);
      filter0.connectionNotification("Qa+dwjnex .M<", "Qa+dwjnex .M<");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTestSetListener(crossValidationFoldMaker0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, (-5540), 339, (-5065), (-5065));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addTrainingSetListener(classAssigner0);
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(modelPerformanceChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ModelPerformanceChart : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName("aY4pkKt");
      Add add0 = new Add();
      filter0.setFilter(add0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      filter0.isOptimizedDrawingEnabled();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addDataSourceListener(trainTestSplitMaker0);
      Associator associator0 = new Associator();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      associator0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      associator0.transferFocusUpCycle();
      BeanVisual beanVisual0 = associator0.getVisual();
      beanVisual0.setSize((-2044), (-64));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      beanVisual0.firePropertyChange("h(4Z\"e+", true, true);
      filter0.setVisual(beanVisual0);
      filter0.getVisual();
      BeanVisual beanVisual1 = filter0.getVisual();
      filter0.getCustomName();
      filter0.setVisual(beanVisual1);
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setCustomName("`K.`e");
      filter0.acceptInstance(instanceEvent0);
      filter0.setVisual(beanVisual1);
      filter0.addDataSourceListener(appender0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TestSetEvent testSetEvent0 = new TestSetEvent(testSetMaker0, (Instances) null, 2, 3, 557, 0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("`K.`e", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0, (-5540), (-5540), (-5540), (-5540));
      Filter filter1 = new Filter();
      filter0.addInstanceListener(filter1);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter1.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = filter0.eventGeneratable("t?Lc=w");
      assertEquals("Add", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.connectionNotification("instance", "instance");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Qa+dwjnex .M<", "Qa+dwjnex .M<");
      boolean boolean0 = filter0.eventGeneratable("Qa+dwjnex .M<");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Qa+dwjnex .M<", "Qa+dwjnex .M<");
      Filter filter1 = new Filter();
      filter0.removeTrainingSetListener(filter1);
      filter0.eventGeneratable("Qa+dwjnex .M<");
      // Undeclared exception!
      try { 
        filter1.performRequest("Qa+dwjnex .M<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Qa+dwjnex .M< not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.connectionNotification("Qa+dwjnex .M<", attributeSummarizer0);
      boolean boolean0 = filter0.eventGeneratable("Qa+dwjnex .M<");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      MockThread mockThread0 = new MockThread("ERROR (See log for details.");
      MockThread mockThread1 = new MockThread(mockThread0);
      filter0.m_filterThread = (Thread) mockThread1;
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.connectionNotification((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionNotification("instance", add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Loader loader0 = new Loader();
      filter0.connectionNotification("Kfb)e ", loader0);
      boolean boolean0 = filter0.eventGeneratable("Kfb)e ");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getStructure("br)");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      // Undeclared exception!
      try { 
        crossValidationFoldMaker0.getInputMap((-135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }
}
