/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:59:32 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1229, 1229);
      compressedVector0.setAll(1229);
      compressedVector0.swapElements(4, 689);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 2334.152624581;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = (-3071.0);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-3570.082);
      doubleArray0[7] = 432.2;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.set(6, Double.POSITIVE_INFINITY);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = Integer.valueOf(16);
      Float float0 = new Float((-1.0));
      hashMap0.putIfAbsent(integer0, float0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 464);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0021551724137931034, compressedVector0.density(), 0.01);
      assertEquals(25, byteArray0.length);
      
      CompressedVector compressedVector2 = CompressedVector.zero(464);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      compressedVector0.nonZeroIterator();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      compressedVector0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(7, 2073);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-302.2364);
      doubleArray0[1] = 2387.515171441;
      doubleArray0[2] = (-783.4433186740622);
      doubleArray0[3] = 994.0152400956;
      doubleArray0[4] = (-441.612793281);
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector2.density(), 0.01);
      
      Vector.unit(1093);
      Vector vector0 = compressedVector0.copyOfLength(7);
      assertEquals(7, vector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3078.0);
      doubleArray0[1] = (-3078.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector.unit(2283);
      compressedVector0.nonZeroAt(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-421.545005080448)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 27;
      CompressedVector compressedVector0 = new CompressedVector(27, 27);
      compressedVector0.setAll(27);
      int int1 = 2178;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1849.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      Vector vector0 = compressedVector0.divide(864.507);
      compressedVector0.add(vector0);
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        Vector.random((-3), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(27, 27);
      compressedVector0.setAll(27);
      int int0 = 2178;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      Vector vector0 = compressedVector0.divide(1886.0);
      compressedVector0.add(vector0);
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        Vector.random((-3), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 2495.818;
      doubleArray0[2] = (double) 2816;
      doubleArray0[3] = (double) 2;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2816;
      intArray0[2] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2816, 2, doubleArray0, intArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1000);
      assertEquals(0.001, compressedVector1.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3078.0);
      doubleArray0[1] = (-3078.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector.unit(2283);
      compressedVector0.nonZeroAt(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1282.413523411493;
      doubleArray0[2] = (-3803.345452);
      doubleArray0[3] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[5] = (-105.1);
      doubleArray0[6] = 100.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Locale locale0 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      compressedVector0.mkString(numberFormat0, ",Kk&");
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("1.282,Kk&1,Kk&-3.803,Kk&1,Kk&0,Kk&-105,Kk&100,Kk&1,Kk&-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-61));
      Byte.compare((byte) (-1), (byte)10);
      linkedList0.add(byte0);
      Byte.toUnsignedInt((byte) (-1));
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.spliterator();
      linkedList0.add(byte0);
      linkedList0.remove((Object) byte0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-24), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(27, 27);
      compressedVector0.setAll(27);
      Vector vector0 = compressedVector0.divide(1886.0);
      compressedVector0.add(vector0);
      compressedVector0.nonZeroAt(2178);
      compressedVector0.blankOfLength(2178);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1918, 1913);
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(1918, mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1918;
      doubleArray0[1] = (double) 1918;
      doubleArray0[2] = (-3267.0627509);
      doubleArray0[3] = (double) 1913;
      doubleArray0[4] = (double) 1913;
      SparseVector.fromArray(doubleArray0);
      compressedVector0.setAll(1918);
      compressedVector0.copyOfLength(1918);
      compressedVector0.swapElements(1921, (-3963));
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-3963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3963
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 16;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector.fromCollection(linkedList0);
      int int0 = 651;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1880);
      Integer.getInteger("");
      Integer.remainderUnsigned(9, 1880);
      hashMap0.put((Integer) null, (Integer) null);
      compressedVector0.min();
      compressedVector0.copyOfLength(16);
      compressedVector0.set(468, Double.POSITIVE_INFINITY);
      Random.setNextRandom(468);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(893, 1869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Double double0 = new Double((-1366.35));
      Double double1 = new Double(488.7);
      linkedList0.add(double1);
      linkedList0.add(double0);
      compressedVector0.setAll(1.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(6);
      mockRandom0.ints();
      CompressedVector compressedVector1 = CompressedVector.random(6, 1.0, (java.util.Random) mockRandom0);
      assertEquals(6, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.clear();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.blankOfLength(2380);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2380;
      Byte byte0 = new Byte((byte)9);
      linkedList0.add(byte0);
      doubleArray0[1] = (double) 2380;
      compressedVector0.spliterator();
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector1.toBinary();
      assertEquals(41, byteArray0.length);
      
      compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2546.385511;
      doubleArray0[1] = 2575.3;
      doubleArray0[2] = 2146.74216214;
      doubleArray0[3] = (-1420.6957316);
      doubleArray0[4] = 1614.0134359332;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.getOrElse(1, (-734.8794904664649));
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(2575.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int0 = 1427;
      Integer integer0 = new Integer(1427);
      Float float0 = new Float((double) 1427);
      Float float1 = new Float((-3334.308339417));
      hashMap0.replace(integer0, float0, float1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1932);
      compressedVector0.sliceLeft(1932);
      compressedVector0.setAll((-3334.308339417));
      compressedVector0.nonZeroIterator();
      compressedVector0.nonZeroIterator();
      compressedVector0.blankOfLength(1932);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1932, 1427);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1932' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2442;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        CompressedVector.random(2442, (-1.0), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3078.0);
      doubleArray0[1] = (-2008.535749);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertTrue(boolean0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      Vector.random(0, mockRandom0);
      compressedVector0.swapElements(0, 0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-320), 1.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2341;
      doubleArray0[1] = (double) 2341;
      doubleArray0[2] = (double) 2341;
      int[] intArray0 = new int[2];
      intArray0[0] = 2341;
      intArray0[1] = 2341;
      CompressedVector compressedVector0 = new CompressedVector(2341, 2341, doubleArray0, intArray0);
      int int0 = 2398;
      // Undeclared exception!
      try { 
        CompressedVector.zero(2341, 2398);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2398.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(16, (-328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -328.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 599;
      CompressedVector compressedVector0 = CompressedVector.zero(599);
      compressedVector0.toString();
      compressedVector0.sum();
      // Undeclared exception!
      try { 
        compressedVector0.get(599);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '599' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 8);
      compressedVector0.toRowMatrix();
      compressedVector0.spliterator();
      compressedVector0.swapElements((-4152), (-4152));
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("a0h>TYf:<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4124.4756667;
      doubleArray0[1] = 4124.4756667;
      doubleArray0[3] = 4124.4756667;
      doubleArray0[4] = (-1968.0);
      doubleArray0[5] = (-652.08749222378);
      doubleArray0[8] = 1895.41136051408;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = (-1819);
      compressedVector0.swapElements((-1819), 16);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-199));
      linkedList0.add(integer0);
      CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)89;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1371.56857091;
      doubleArray0[1] = 1895.41136051408;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2193.081578758233);
      doubleArray0[4] = (-1120.8);
      doubleArray0[5] = 4124.4756667;
      doubleArray0[6] = 1.073741824E9;
      doubleArray0[7] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      assertEquals(0.875, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-971);
      mockRandom0.ints((-971), 2290);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        CompressedVector.random((-1), 468.363, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)6);
      hashMap0.put(integer0, short0);
      CompressedVector.fromMap(hashMap0, 2743);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-2457));
      Double double0 = new Double((-2457));
      hashMap0.put(integer0, double0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0, doubleArray0, intArray0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("H|`Wa9w/$Kx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "org.la4j.LinearAlgebra$1";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("org.la4j.LinearAlgebra$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      String string0 = ";o\"";
      Integer.getInteger(";o\"");
      byte byte0 = (byte)124;
      Byte byte1 = new Byte((byte)124);
      Byte.toUnsignedLong((byte)0);
      hashMap0.put((Integer) null, byte1);
      CompressedVector.zero(0, 0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector.fromCollection(linkedList0);
      try { 
        Byte.decode("org.la4j.vector.sparse.CompressedVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.la4j.vector.sparse.CompressedVector\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      hashMap0.keySet();
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>(hashMap0);
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap1, 0);
      compressedVector0.setAll(0);
      int int1 = (-1246);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-1246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1246
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-612), (-612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -612
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      linkedList0.add((Byte) (byte)6);
      byteArray0[2] = (byte)89;
      byte byte0 = (byte)8;
      compressedVector0.hadamardProduct(denseVector0);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)109;
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      Random.setNextRandom(2);
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      int[] intArray0 = new int[4];
      intArray0[0] = 1312;
      intArray0[1] = 9;
      intArray0[2] = (-6456);
      intArray0[3] = 9;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-6456), 9, doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -6456
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2143.38172024);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1887.0;
      doubleArray0[3] = 1887.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = (-617);
      ParsePosition parsePosition0 = new ParsePosition((-617));
      decimalFormat0.parseObject("", parsePosition0);
      parsePosition0.setErrorIndex((-5340));
      decimalFormat0.parse("", parsePosition0);
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.set(1, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.setAll(1887.0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      int int1 = 2;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1886);
      boolean boolean0 = compressedVector0.nonZeroAt(1580);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "734DfHXdo>%(}";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("734DfHXdo>%(}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 13;
      Integer integer0 = new Integer(13);
      Long long0 = new Long(13);
      hashMap0.put(integer0, long0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.sliceLeft(0);
      compressedVector0.iterator();
      compressedVector0.nonZeroAt(0);
      compressedVector0.setAll(468.363);
      CompressedVector compressedVector1 = CompressedVector.zero(0);
      int int0 = 2072;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(2072, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector1.swapElements((-2011), 653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(642, 642);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 642);
      CompressedVector compressedVector1 = new CompressedVector();
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(642, matrix0.rows());
      
      Integer integer0 = new Integer((-1));
      Double double0 = new Double(642);
      Double.sum(1222.91, 2738.258594844232);
      hashMap0.put(integer0, double0);
      compressedVector0.manhattanNorm();
      compressedVector0.toString();
      compressedVector0.multiply(matrix0);
      compressedVector1.iterator();
      compressedVector0.blankOfLength(2146351254);
      Vector vector0 = compressedVector1.blankOfLength(726);
      assertEquals(726, vector0.length());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3616, 3616);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3616;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-1582.3), 3616.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      doubleArray0[1] = (double) 3616;
      doubleArray0[2] = (double) 3616;
      doubleArray0[3] = 432.2;
      doubleArray0[4] = (double) 3616;
      doubleArray0[5] = (double) 3616;
      doubleArray0[6] = (double) 3616;
      doubleArray0[7] = (double) 3616;
      doubleArray0[8] = (double) 3616;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.nonZeroIterator();
      compressedVector1.toSparseVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroIterator();
      compressedVector1.copyOfLength(3616);
      compressedVector1.nonZeroIterator();
      compressedVector1.toString();
      int int0 = (-151);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-151), 3616.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-151' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
