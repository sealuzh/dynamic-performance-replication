/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:03:26 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("U%4dvJQID", (String[]) null, "U%4dvJQID", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      dBSchema0.getTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "DAY_OF_MONTH";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "*kK(3?y#W 40UB|";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.store.access.Qualifier[]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[1] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[2] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[3] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[4] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[5] = "org.apache.derby.iapi.store.access.Qualifier[]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.store.access.Qualifier[]", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.iapi.store.access.Qualifier[]", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('R');
      charArrayWriter1.writeTo(charArrayWriter0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "org.apache.derby.iapi.store.access.Qualifier[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, true);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray1[1] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray1[2] = " called with unknown transaction.";
      stringArray1[3] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray1[4] = "F^#4,,[;/q%6Cr";
      stringArray1[5] = "F^#4,,[;/q%6Cr";
      stringArray1[6] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray1[7] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray1[8] = "Cf)O7L^ZQv#V2aP";
      String string0 = SQLUtil.join("org.apache.derby.iapi.store.access.Qualifier[]", "org.apache.derby.iapi.store.access.Qualifier[]", stringArray0, "F^#4,,[;/q%6Cr", "org.apache.derby.iapi.store.access.Qualifier[]", stringArray1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileUtil.canonicalPath("1#j7e7AF");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/1#j7e7AF", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/1#j7e7AF UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rename";
      String string0 = SQLUtil.innerJoin("rename", stringArray0, "rename", "rename", stringArray0);
      String string1 = SQLUtil.substituteMarkers("rename", ",", sQLUtil0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{'^Y??)n~~cp0!Cqq!";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("{'^Y??)n~~cp0!Cqq! = '{'^Y??)n~~cp0!Cqq!'", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "&1i@;g9LM5NS;o/";
      stringArray0[0] = "&1i@;g9LM5NS;o/";
      stringArray0[1] = ".";
      String string1 = ",bTJeg/";
      stringArray0[2] = ",bTJeg/";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = false;
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",bTJeg/", dBSchema0);
      String string2 = "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(".", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(",bTJeg/", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "V";
      SQLUtil.normalize("V", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      stringArray0[4] = "V";
      stringArray0[5] = "V";
      stringArray0[6] = "V";
      stringArray0[7] = "V";
      SQLUtil.renderColumnListWithTableName("V", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "(V, V, V, V, V, V, V, V)";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("V", stringArray0, "", "V", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("42XA6");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "42XA6";
      String string0 = SQLUtil.renderColumnListWithTableName("42XA6", stringArray0);
      assertEquals("42XA6.42XA6", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "VE4O%?QFr_";
      SQLUtil.removeComments("VE4O%?QFr_");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "VE4O%?QFr_";
      stringArray0[2] = "VE4O%?QFr_";
      SQLUtil.leftJoin((String) null, stringArray0, "--", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesStructure("}mFt^zWV@7k~e&x=rB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(2336);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2336, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      SQLUtil.removeComments("42Z33.U");
      Boolean boolean0 = SQLUtil.mutatesStructure("create table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.removeComments(":!{<0DO&\r{N]do/U/3");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(":!{<0DO&\r{N]do/U/3");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "e+1Ju x~w^4h$)&Ao";
      SQLUtil.normalize("e+1Ju x~w^4h$)&Ao", false);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes((-3369), 2467);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -3369 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDML("uqtersgk");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("uqtersgk", false);
      assertEquals("uqtersgk", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view27s)s2,gxc2[.akj");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.toString();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C3_QXjP#IJh!5", defaultDBTable0, (-1614), "5l'#");
      defaultDBColumn0.setName(" REFERENCES ");
      StringBuilder stringBuilder0 = new StringBuilder("5l'#");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("5l'#5L'#", stringBuilder0.toString());
      
      SQLUtil.parseColumnTypeAndSize("5l'#");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" on ", defaultDBTable0, (-1614), "g\"p21|W#cZ2zWIy");
      SQLUtil.renderColumn(defaultDBColumn1);
      SQLUtil.normalize("", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "C3_QXjP#IJh!5";
      stringArray0[1] = "";
      stringArray0[2] = " on  G\"P21|W#CZ2ZWIY NULL";
      stringArray0[3] = "g\"p21|W#cZ2zWIy";
      stringArray0[4] = " on  G\"P21|W#CZ2ZWIY NULL";
      stringArray0[5] = " on  G\"P21|W#CZ2ZWIY NULL";
      stringArray0[6] = " on ";
      String string0 = SQLUtil.join(" on  G\"P21|W#CZ2ZWIY NULL", "I5n3Pe", stringArray0, "", "bpt1B|jy!Lw`]_E", stringArray0);
      assertEquals(" on  G\"P21|W#CZ2ZWIY NULL join  as bpt1B|jy!Lw`]_E on I5n3Pe.C3_QXjP#IJh!5 = bpt1B|jy!Lw`]_E.C3_QXjP#IJh!5 and I5n3Pe. = bpt1B|jy!Lw`]_E. and I5n3Pe. on  G\"P21|W#CZ2ZWIY NULL = bpt1B|jy!Lw`]_E. on  G\"P21|W#CZ2ZWIY NULL and I5n3Pe.g\"p21|W#cZ2zWIy = bpt1B|jy!Lw`]_E.g\"p21|W#cZ2zWIy and I5n3Pe. on  G\"P21|W#CZ2ZWIY NULL = bpt1B|jy!Lw`]_E. on  G\"P21|W#CZ2ZWIY NULL and I5n3Pe. on  G\"P21|W#CZ2ZWIY NULL = bpt1B|jy!Lw`]_E. on  G\"P21|W#CZ2ZWIY NULL and I5n3Pe. on  = bpt1B|jy!Lw`]_E. on ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT  PRIMARY KEY ()", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments(":!{<0DO&\r{N]do/U/3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      SQLUtil.innerJoin("<r\"OX", stringArray0, "", "ho(d)S;wN]~m9zB", stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileUtil.canonicalFile("42X6");
      boolean boolean0 = SQLUtil.isQuery("selectorg.apache.derby.iapi.store.access.qualifier[]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBDataType.getInstance((-2389), "");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery("Dl{`H");
      SQLUtil.substituteMarkers("Dl{`H", "Dl{`H", "Dl{`H");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SESSION", compositeDBObject0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container SESSION", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("O[!8+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablealter table5.0");
      DBDataType dBDataType0 = DBDataType.getInstance((-1726), "-pgAllowOthers");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O[!8+", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column O[!8+", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w0g5&}t+665T";
      stringArray0[1] = "O[!8+";
      stringArray0[2] = "alter tablealter table5.0";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "w0g5&}t+665T";
      stringArray1[1] = "alter tablealter table5.0";
      stringArray1[2] = "w0g5&}t+665T";
      stringArray1[3] = "O[!8+";
      stringArray1[4] = "alter tablealter table5.0";
      stringArray1[5] = "alter materialized viewalter table5.0";
      stringArray1[6] = "5aV+Ym2r^xX?8?rKi";
      stringArray1[7] = "alter tablealter table5.0";
      stringArray1[8] = "create unique index";
      String string1 = SQLUtil.leftJoin("w0g5&}t+665T", stringArray0, "create unique index", "alter materialized viewalter table5.0", stringArray1);
      assertEquals("left join create unique index as alter materialized viewalter table5.0 on w0g5&}t+665T.w0g5&}t+665T = alter materialized viewalter table5.0.w0g5&}t+665T and w0g5&}t+665T.O[!8+ = alter materialized viewalter table5.0.alter tablealter table5.0 and w0g5&}t+665T.alter tablealter table5.0 = alter materialized viewalter table5.0.w0g5&}t+665T", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("inner", stringArray0);
      assertEquals("inner.w0g5&}t+665T, inner.O[!8+, inner.alter tablealter table5.0", string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("L5KVoM{(qP^g-(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: L5KVoM{(qP^g-(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("s");
      DBSchema dBSchema0 = new DBSchema("rena");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "s";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "^4Hb", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (s, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.removeComments("fibr");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Nso`mZ5K1hf";
      stringArray0[1] = "fibr";
      stringArray0[2] = "fibr";
      stringArray0[3] = "fibr";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(;Nso`mZ5K1hf, fibr, fibr, fibr)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fibr", defaultDBTable0, (DBDataType) null, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("fibr", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(10, "org.ap");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.ap", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("42XA6", (DBTable) null, 1517, "org.ap");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("org.ap", (DBTable) null, dBDataType0, integer0, (Integer) null);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isQuery("qN*7gn9HA`zy");
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.removeComments("EA");
      SQLUtil.normalize("/:=4j", false);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("L3~/v0w(0-013dJ{$R", true);
      assertEquals("L3 ~ / v0w (0 - 013dJ { $ R", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("uqtersgk9sw|");
      assertNull(boolean0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("o1E-lyhQVa|:EX4IvxL", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("inner");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("info.FILE_WRITE_TOTAL", false);
      assertEquals("info.FILE_WRITE_TOTAL", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Cannot set character stream because the unsupported encoding is detected in the JVM: ";
      stringArray0[1] = "Cannot set character stream because the unsupported encoding is detected in the JVM: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Cannot set character stream because the unsupported encoding is detected in the JVM: ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Cannot set character stream because the unsupported encoding is detected in the JVM: ", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-636), (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -636
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[4];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray1);
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages0.getNCharacterStream(46);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNCharacterStream(I)Ljava/io/Reader; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2389), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42XA6", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("42XA6 (2) NULL", string0);
      
      String string1 = SQLUtil.normalize("ki;\"H_ mcdj`I", false);
      assertEquals("ki ; \"H_ mcdj`I\"", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.FromList";
      stringArray0[6] = "org.apache.derby.impl.sql.compile.FromList";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.FromList", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.equals((Object) null);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("t;=^fxm;\"I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = "updatehe`z=h:emrv2g!aug@";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("org.apache.derby.impl.sql.compile.FromList");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete", (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      stringArray0[4] = "delete";
      stringArray0[5] = "alter materialized view";
      stringArray0[7] = "delete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized view", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (alter materialized view, delete, delete, , delete, alter materialized view, , delete)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("42Y40");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) mockJapaneseDate0);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuilder stringBuilder4 = stringBuilder3.insert(4, (float) 4);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder4);
      assertEquals("42Y40", dBForeignKeyConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]}59'P");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]}59'P";
      stringArray0[2] = "]}59'P";
      stringArray0[3] = "]}59'P";
      stringArray0[4] = "]}59'P";
      stringArray0[5] = "]}59'P";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]}59'P", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("]}59'P", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('R');
      charArrayWriter1.writeTo(charArrayWriter0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "]}59'P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, true);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "]}59'P";
      stringArray1[1] = "]}59'P";
      SQLUtil.parseColumnTypeAndSize("]}59'P");
      String string0 = SQLUtil.renderValue(charArrayWriter2);
      assertEquals(88, charArrayWriter2.size());
      assertEquals("RR]}59'Pcreate table ]}59'P (,\n\tPRIMARY KEY (]}59'P, , ]}59'P, ]}59'P, ]}59'P, ]}59'P)\n)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", false, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 ", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("42Y40");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("FOREIGN KEY () REFERENCES /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("42Y40");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 FOREIGN KEY () REFERENCES /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("fib6*r", false);
      assertEquals("fib6 * r", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[0];
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.parseColumnTypeAndSize("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = ".v{CL#8kbk(a eAT%2;";
      stringArray1[5] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray1);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = 39;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder1.insert(39, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-2389);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "6[(FZ`uI,hs";
      int int1 = 51;
      StringBuilder stringBuilder0 = new StringBuilder(51);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("6[(FZ`uI,hs", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "");
      int int2 = 17;
      int int3 = (-2789);
      // Undeclared exception!
      try { 
        stringBuilder2.delete(17, (-2789));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("JDBC_SAVEPOINT_");
      tableContainer0.getTable("/*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", (DBTable) null, (DBDataType) null);
      linkedList0.addFirst(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("42Y40");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(263);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('');
      charArrayWriter1.writeTo(charArrayWriter0);
      charArrayWriter0.append((CharSequence) "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("drop materialized view");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40./mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40./mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40' not found in table '/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.normalize("'", true);
      assertEquals("''", string0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DBCatalog dBCatalog0 = new DBCatalog("42Y40");
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dele");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dele";
      stringArray0[1] = "dele";
      stringArray0[2] = "dele";
      stringArray0[3] = "dele";
      stringArray0[4] = "dele";
      stringArray0[5] = "dele";
      stringArray0[6] = "dele";
      stringArray0[7] = "dele";
      stringArray0[8] = "dele";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("dele", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "o\"LQ,b,`f<YuLef", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("updatebuffersnumber", false, dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "dele", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT dele FOREIGN KEY (dele, dele, dele, dele, dele, dele, dele, dele, dele) REFERENCES dele(dele, dele, dele, dele, dele, dele, dele, dele, dele)", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alEer matebialized v ew");
      tableContainer0.getComponents();
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container alEer matebialized v ew", string0);
      
      String string1 = SQLUtil.normalize(",M9,#]%&P0xElv*ym", true);
      assertEquals(", M9, # ] % & P0xElv * ym", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileUtil.canonicalPath("42Y40");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("42Y40");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40./mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", true, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("\"<<:]|; 9oM x/", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R$z{AS");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      charArrayWriter0.writeTo(charArrayWriter1);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      charArrayWriter0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.parseColumnTypeAndSize("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40./mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40./mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, printWriter0);
      assertEquals("create table /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 (,\n\tUNIQUE ()\n)/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40ALTER TABLE /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 ADD \n\tCONSTRAINT /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 FOREIGN KEY () REFERENCES /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40()", charArrayWriter2.toString());
      assertEquals("create table /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 (,\n\tUNIQUE ()\n)/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40ALTER TABLE /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 ADD \n\tCONSTRAINT /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40 FOREIGN KEY () REFERENCES /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/42Y40()", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSIBM_SCHEMA_UUID;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00f8-5b53-28a9-00000019ed88");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c013800d-00f8-5b53-28a9-00000019ed88");
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "c013800d-00f8-5b53-28a9-00000019ed88", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("42Y40", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.setOwner(dBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileUtil.canonicalPath("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl");
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("");
      defaultDBTable0.setName("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("FOREIGN KEY (, , , ) REFERENCES /mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = SQLUtil.normalize("Ih|!$-<#U$0fJ", true);
      assertEquals("Ih  | ! $ - < # U $ 0fJ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Ih  | ! $ - < # U $ 0fJ", false, "Nb.bkCU|Nz|tz ", "select");
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select", string1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.removeComments("^s_fGCNr");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "inner";
      stringArray0[4] = null;
      stringArray0[4] = null;
      stringArray0[5] = "inner";
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc((String) null);
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      StringBuilder stringBuilder2 = stringBuilder0.append('}');
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringBuilder2.append((Object) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[6], false, stringArray0);
      stringBuilder1.insert(4, (Object) dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder3 = stringBuilder0.insert(4, (float) 4);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder3);
      assertEquals("null4.0PRIMARY KEY (, , inner, , , inner, , )}null", stringBuilder0.toString());
      
      String string0 = SQLUtil.leftJoin("-KNYMC$,P@<V", stringArray0, "|gV(:MN@^^p", "execorg.databene.commons.objectnotfoundexception", stringArray0);
      assertEquals("left join |gV(:MN@^^p as execorg.databene.commons.objectnotfoundexception on -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null and -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null and -KNYMC$,P@<V.inner = execorg.databene.commons.objectnotfoundexception.inner and -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null and -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null and -KNYMC$,P@<V.inner = execorg.databene.commons.objectnotfoundexception.inner and -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null and -KNYMC$,P@<V.null = execorg.databene.commons.objectnotfoundexception.null", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.normalize("+{jHo-'-HQo", false);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("+{jHo-'-HQo", compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(299, " + { jHo - '-HQo'");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+{jHo-'-HQo", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+{jHo-'-HQo", defaultDBTable0, 299, "create unique index");
      SQLUtil.renderColumn(defaultDBColumn1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore("create unique index");
      VirtualFile virtualFile0 = new VirtualFile("PRIMARY KEY ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }
}
