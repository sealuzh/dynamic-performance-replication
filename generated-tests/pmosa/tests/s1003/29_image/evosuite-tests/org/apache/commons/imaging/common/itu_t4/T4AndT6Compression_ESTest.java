/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:42:04 GMT 2018
 */

package org.apache.commons.imaging.common.itu_t4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.itu_t4.T4AndT6Compression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class T4AndT6Compression_ESTest extends T4AndT6Compression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)0, 1930);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        T4AndT6Compression.compressModifiedHuffman(byteArray0, 2, 48);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte) (-127), (byte) (-127));
      byte[] byteArray2 = T4AndT6Compression.decompressT4_1D(byteArray1, (byte) (-127), (byte) (-127), true);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byte byte0 = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byte byte1 = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)125;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = T4AndT6Compression.decompressT4_1D(byteArray0, (byte)0, 0, true);
      int int0 = (-4148);
      T4AndT6Compression.decompressT4_2D(byteArray0, (byte)0, (-4148), true);
      T4AndT6Compression.compressT6(byteArray0, (byte)125, (byte) (-3));
      // Undeclared exception!
      try { 
        T4AndT6Compression.compressT6(byteArray1, (byte) (-16), (byte)73);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      T4AndT6Compression.compressT4_1D(byteArray0, (-27), (byte)0, false);
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte) (-116), (-4342));
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray1, (-2474), (-2650));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (-2201), (-2201), true);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (-2201), 1376, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, 2509, 704, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, 1, 1);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 16, 16, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, (byte)0, (byte)0);
      int int0 = 436;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, (byte)0, 436, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)83;
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (byte)83, (byte)83, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)1;
      T4AndT6Compression.compressT6(byteArray0, (byte)61, (byte)0);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, 0, (byte)53, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)96;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)96, (byte)96, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)1, (byte)1);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (-3596), (byte)1, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)1, (byte)1, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte) (-64), (byte)4}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = T4AndT6Compression.decompressT4_1D(byteArray0, (byte) (-105), (byte) (-105), true);
      int int0 = (-3);
      byte[] byteArray2 = T4AndT6Compression.decompressModifiedHuffman(byteArray1, (-3), (-3));
      int int1 = 1749;
      int int2 = (-1600);
      T4AndT6Compression.compressT4_2D(byteArray1, 1749, (-1600), true, (byte) (-105));
      T4AndT6Compression.decompressT4_2D(byteArray2, 1395, 0, true);
      int int3 = 0;
      // Undeclared exception!
      try { 
        T4AndT6Compression.compressT6(byteArray2, (-3794), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byte byte5 = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = 608;
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 12, 608);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)28}, byteArray1);
      
      byte[] byteArray2 = T4AndT6Compression.decompressT6(byteArray1, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 1792, (-4045));
      try { 
        T4AndT6Compression.decompressT6(byteArray1, 1, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unknown T.6 control code 000000000001
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)7;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 1, (byte)59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (-1768), (byte)1);
      try { 
        T4AndT6Compression.decompressT6(byteArray1, (byte)1, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      boolean boolean0 = false;
      T4AndT6Compression.compressT4_2D(byteArray0, (byte)4, (byte)0, false, (-967));
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray0, (byte)80, 383);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte)1, (byte)1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-116);
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte)0, (byte)0);
      T4AndT6Compression.decompressT4_2D(byteArray1, 20, 0, true);
      byte[] byteArray2 = T4AndT6Compression.compressT4_2D(byteArray0, 0, 255, true, 28);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)2;
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 3263, (byte)0);
      byte[] byteArray2 = T4AndT6Compression.compressT4_2D(byteArray1, (byte)0, (byte)2, false, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)25, (byte) (-88), (byte)0, (byte) (-128), (byte)4}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      T4AndT6Compression.compressModifiedHuffman(byteArray0, (-965), (-965));
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, 4, 4240, true, 4240);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte)0, (byte)0, true);
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, 1, 1, false, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)24, (byte) (-32), (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byte byte1 = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byte byte2 = (byte)64;
      byteArray0[3] = (byte)64;
      byte byte3 = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-26);
      T4AndT6Compression.decompressT4_1D(byteArray0, 2801, 0, true);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (-591), (byte)16, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray0, (-3), 2368);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, 2, (byte)2, false, (-1037));
      assertArrayEquals(new byte[] {(byte)0, (byte)27, (byte) (-128), (byte)10, (byte)0, (byte)32}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-80);
      byte byte1 = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)47;
      byte byte2 = (byte)64;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)82;
      T4AndT6Compression.decompressModifiedHuffman(byteArray0, 0, (byte)0);
      boolean boolean0 = true;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)0, 0, true);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, 0, 2, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 445, (byte)0);
      int int0 = 436;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, (byte)0, 436, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, 1, 1);
      byte[] byteArray2 = T4AndT6Compression.decompressModifiedHuffman(byteArray1, 1, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)28}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)40;
      boolean boolean0 = true;
      T4AndT6Compression.decompressT4_1D(byteArray0, 442, (byte) (-56), true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-1);
      byte byte0 = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-77);
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte) (-1);
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray1, (byte)40, (byte)53);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)20;
      boolean boolean0 = false;
      byte[] byteArray1 = T4AndT6Compression.decompressT4_1D(byteArray0, (byte)38, (-992), false);
      T4AndT6Compression.compressT6(byteArray1, 0, 49);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte)20;
      byteArray2[2] = (byte)20;
      byte byte1 = (byte)28;
      byteArray2[3] = (byte)28;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray2, (byte)20, (byte)20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)60;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)60, (byte)60, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)1, (byte)1, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)28, (byte)0, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)1;
      T4AndT6Compression.compressT6(byteArray0, (byte)61, (byte)0);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (byte)61, (byte)1, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (byte)15, (byte)15, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (-664), 6);
      byte[] byteArray2 = T4AndT6Compression.compressT6(byteArray1, 6, 6);
      byte[] byteArray3 = T4AndT6Compression.compressT4_1D(byteArray2, (-289), (byte) (-81), false);
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray3);
      assertArrayEquals(new byte[] {(byte)47, (byte) (-81), (byte) (-1), (byte) (-1), (byte) (-128), (byte)8, (byte)0, (byte) (-128)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)28}, byteArray1);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byte[] byteArray3 = T4AndT6Compression.compressT6(byteArray2, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)8, (byte)0, (byte) (-128)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-56);
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, (byte)2, (byte)2);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)32, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)86;
      try { 
        T4AndT6Compression.compressT6(byteArray0, (byte)15, (byte)30);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      T4AndT6Compression.compressT6(byteArray0, 445, (byte)0);
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, (-3), (-1244));
      byte[] byteArray2 = T4AndT6Compression.compressT4_2D(byteArray1, (byte)0, 27, false, (-3));
      T4AndT6Compression.compressT6(byteArray1, 445, (-1244));
      byte[] byteArray3 = T4AndT6Compression.decompressT4_1D(byteArray2, (-1644), (-3), false);
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, (byte)15, 2);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (byte)15, 2, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-16);
      byteArray1[7] = (byte)39;
      try { 
        T4AndT6Compression.compressT6(byteArray1, (byte)3, 32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      T4AndT6Compression.compressT6(byteArray0, 445, (byte)0);
      byte byte1 = (byte)28;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)28;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray1, 436, 445);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byte byte1 = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)61;
      T4AndT6Compression.compressT6(byteArray0, (byte)0, (byte)0);
      boolean boolean0 = true;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, 652, 63, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)2;
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte)0, 1, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte) (-3);
      byteArray1[6] = (byte)2;
      byte[] byteArray2 = T4AndT6Compression.compressT4_2D(byteArray1, 1, (byte)2, true, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-102), (byte) (-96), (byte)1, (byte)48, (byte)1}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)86;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-62);
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)3, 42, false, 10);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      T4AndT6Compression.decompressModifiedHuffman(byteArray0, 48, (-3317));
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)67, 256, false, (-3317));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-120);
      try { 
        T4AndT6Compression.compressT4_1D(byteArray0, (byte)93, (byte)93, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)86;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)0;
      try { 
        T4AndT6Compression.compressT6(byteArray0, (byte)3, 32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)34;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)34, (byte)34, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)76, (byte)76, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      byteArray0[2] = (byte)83;
      byteArray0[4] = (byte)3;
      T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)3, 25);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, 1792, (byte)83, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)72;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)72, (byte)72, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)15;
      byte byte0 = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)0;
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)15, 30, false, 29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)2;
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)7, 1216, false, (-1828));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      boolean boolean0 = true;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)0, 15, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)82;
      try { 
        T4AndT6Compression.compressT6(byteArray0, (byte)17, 8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (-1555), (byte)103, true);
      T4AndT6Compression.decompressT4_1D(byteArray0, (-1555), (-1713), true);
      T4AndT6Compression.compressT4_1D(byteArray1, 1664, (-1555), true);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 4928, 5, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 5, 5);
      T4AndT6Compression.decompressT6(byteArray1, 5, 5);
      try { 
        T4AndT6Compression.compressT4_2D(byteArray1, 5, 5, true, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)7;
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte)0, 1, true);
      T4AndT6Compression.compressT4_2D(byteArray0, 1, (byte)0, true, (byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)7;
      byteArray1[8] = (byte)7;
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (byte)7, 64, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = T4AndT6Compression.decompressT6(byteArray0, 1890, (byte)1);
      boolean boolean0 = true;
      byte[] byteArray2 = T4AndT6Compression.compressT4_1D(byteArray1, 1890, (byte)1, true);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray2, 1890, 1890, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }
}
