/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:12:39 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("waitNewUrl - interrupted, error {}");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("_6Vpb6K'2=oAV\"Blq");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1082);
      Spider spider4 = spider3.clearPipeline();
      boolean boolean0 = spider4.isSpawnUrl();
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|Osil");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ovZo1F. hGy");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ovZo1F. hGy");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("qozNA;", "OP>HieTV");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider0.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.initComponent();
      spider3.start();
      spider2.getSite();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      List<Request> list0 = page1.getTargetRequests();
      spider3.startRequest(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?&lqU1b?'Y#!k`A'j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setExitWhenComplete(true);
      Page page0 = new Page();
      page0.setSkip(true);
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("%skD})9wsa");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.scheduler(duplicateRemovedScheduler0);
      List<SpiderListener> list1 = spider3.getSpiderListeners();
      assertNull(list1);
      
      spider0.uuid = "%skD})9wsa";
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      spider5.getSite();
      spider2.thread(2);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A$GV");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"okWDw,;clg";
      stringArray0[1] = "page status code error, page {} , code: {}";
      stringArray0[2] = "page status code error, page {} , code: {}";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "application/x-www-form-urlencoded";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("application/x-www-form-urlencoded");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(405);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-4269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getScheduler();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      Spider[] spiderArray0 = null;
      // Undeclared exception!
      try { 
        spiderMonitor0.register((Spider[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.monitor.SpiderMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qmXK;i");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$1", "qmXK;i");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~Z7Mfu(=8H6");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("~Z7Mfu(=8H6");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) synchronousQueue0);
      Spider spider3 = spider2.startRequest(list0);
      spider3.initComponent();
      Request request0 = new Request("~Z7Mfu(=8H6");
      request0.getExtras();
      request0.setExtras((Map<String, Object>) null);
      Spider spider4 = spider2.setScheduler(fileCacheQueueScheduler0);
      spider4.close();
      spider1.getPageCount();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider0.getAll((Collection<String>) linkedHashSet0);
      spider2.close();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-3043));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      Spider spider3 = spider2.setSpawnUrl(false);
      Request[] requestArray0 = new Request[2];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[0] = null;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", resultItems=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      spider2.threadNum = (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      spider2.runAsync();
      assertEquals(Spider.Status.Init, spider2.getStatus());
      
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.startUrls(linkedList0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("nCOe9 q.X`^t{r");
      Spider spider5 = spider4.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider5.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("yD/D%nYRb!'mW");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      spider1.setEmptySleepTime((-324));
      Spider.Status.fromValue((-1202));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yD/D%nYRb!'mW");
      spider1.getStartTime();
      spider0.getStartTime();
      spider0.getThreadAlive();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider0.sleep((-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "HTTP request failed";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HTTP request failed");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("HTTP request failed", "HTTP request failed");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Pipeline pipeline0 = null;
      Spider spider2 = spider1.pipeline((Pipeline) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      spider3.setPipelines((List<Pipeline>) null);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      int int0 = (-378);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      Request request1 = request0.addHeader((String) null, "!Xnr3pp}OO`He_s&(C.");
      requestArray0[0] = request1;
      Request request2 = request0.setCharset("us.codecraft.webmagic.selector.OrSelector");
      requestArray0[1] = request2;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      requestArray0[2] = request3;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = " stop fail!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      // Undeclared exception!
      try { 
        spider3.thread((-1104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pYV");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "pYV";
      stringArray0[1] = "pYV";
      stringArray0[2] = "pYV";
      stringArray0[3] = "pYV";
      stringArray0[4] = "pYV";
      stringArray0[5] = "pYV";
      stringArray0[6] = "pYV";
      stringArray0[7] = "pYV";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("w>auLrD");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.addCookie("w>auLrD", "w>auLrD");
      Request request2 = request1.setUrl("CoI!g>XqQ");
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request3 = request2.setExtras(map0);
      Request request4 = request3.setMethod("CoI!g>XqQ");
      Request request5 = request4.setPriority((-3641L));
      requestArray0[0] = request5;
      Request request6 = request0.setCharset("tQ)mRWUx,tf");
      Request request7 = request6.setUrl("(>?TACV:_<a~E#");
      requestArray0[1] = request7;
      Request request8 = request3.setMethod("Spider {} started!");
      requestArray0[2] = request8;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<='FCqMz(MqpLU=,");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[3] = null;
      Request request9 = new Request();
      requestArray0[4] = request9;
      Request request10 = request4.addCookie("us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline", "_cycle_tried_times");
      requestArray0[5] = request10;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(39);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 3070);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider2.stop();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "AADvcYjVD>M^W6p1";
      stringArray0[1] = ", sleepTime=";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "u";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("u");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "zw'2]El)ikZ>T";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zw'2]El)ikZ>T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider3.thread((-1104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|CbMrojo~}/x:_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.setUUID("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "(E) -y%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(E) -y%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider_Status0.getValue();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 5;
      spider0.thread(5);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Page{request=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("Page{request=");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "Page{request=");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.setSpawnUrl(true);
      spider5.extractAndAddRequests((Page) null, false);
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sgeepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.checkIfRunning();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider2.thread((-1450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("J/h+ab");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline("4");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("4", "4");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.setExitWhenComplete(true);
      Spider spider5 = spider4.pipeline(filePipeline0);
      assertEquals(Spider.Status.Init, spider5.getStatus());
      
      spider4.run();
      spider5.getCollectorPipeline();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      spider4.getStatus();
      filePipeline0.getFile("J/h+ab");
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Pipeline> list1 = spider5.getAll((Collection<String>) list0);
      spider3.pipelines = list1;
      Spider.Status.fromValue((-1718));
      spider3.getSpiderListeners();
      Spider.Status.values();
      spider0.addPipeline(filePipeline0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?&lqU1b?'Y#!k`A'j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.clearPipeline();
      spider2.setExitWhenComplete(true);
      String string0 = "%skD})wsa\\";
      // Undeclared exception!
      try { 
        spider1.get("%skD})wsa");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = null;
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.pipeline(jsonFilePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_zore");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_zore");
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      hashSetDuplicateRemover0.resetDuplicateCheck(spider0);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
