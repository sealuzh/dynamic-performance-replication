/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:15:33 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.util.Collection;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import javax.swing.Action;
import javax.swing.JColorChooser;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.Cobweb;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.HierarchicalClusterer;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String string0 = Evaluation.makeOptionString(classifier0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = new Instances(instances0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      evaluation0.pctUnclassified();
      double double0 = evaluation0.m_SumClass;
      evaluation0.areaUnderPRC((-1453208835));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_SumClass;
      evaluation0.SFEntropyGain();
      evaluation0.numTrueNegatives(32);
      evaluation0.pctUnclassified();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.getClassPriors();
      Evaluation.makeOptionString(randomTree0, false);
      double double0 = evaluation0.m_SumPriorEntropy;
      String string1 = Evaluation.getGlobalInfo(randomTree0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      SGDText sGDText0 = new SGDText();
      try { 
        evaluation0.evaluateModel((Classifier) sGDText0, instances0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.numTrueNegatives((-1995138716));
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(5.7, 4.9E-324);
      IBk iBk0 = new IBk();
      evaluation0.addNumericTrainClass(4, Double.NaN);
      evaluation0.numFalsePositives(1);
      evaluation0.areaUnderPRC(2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.falsePositiveRate((-1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int int0 = Double.MIN_EXPONENT;
      textDirectoryLoader0.getRevision();
      StringSelection stringSelection0 = new StringSelection("q\"%}m+!i-");
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1120.939);
      doubleArray0[1] = (-1120.939);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1120.939), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.totalCost();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(1714.6912165198644, doubleArray0);
      instances0.add((Instance) denseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("@relation", instances0, (-2), testInstances1.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(5.7, 4.9E-324);
      IBk iBk0 = new IBk();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.setSeed(4);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom1);
      evaluation0.addNumericTrainClass((-1008.8575), 2);
      IBk iBk1 = new IBk();
      evaluation0.pctUnclassified();
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.getClassPriors();
      Evaluation.makeOptionString(randomTree0, false);
      Evaluation.getGlobalInfo(randomTree0);
      evaluation0.weightedRecall();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNumeric(2);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.recall(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = new Capabilities(multilayerPerceptron0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      multilayerPerceptron0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      testInstances0.setNumString(2295);
      int int0 = 100;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanAbsoluteError();
      evaluation0.m_SumSqrErr = (-549.991362848987);
      evaluation0.meanPriorAbsoluteError();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = new Capabilities(multilayerPerceptron0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".L)|+73Ha$=2G>1(");
      Instances instances0 = testInstances0.generate();
      multilayerPerceptron0.getRevision();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8034");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      ZeroR.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      Character.getName(2);
      evaluation0.weightedAreaUnderROC();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.addNumericTrainClass(2, 1);
      IBk iBk0 = new IBk();
      evaluation0.pctUnclassified();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFMeanPriorEntropy();
      String string0 = JOptionPane.SELECTION_VALUES_PROPERTY;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.weightedFMeasure();
      testInstances0.setNumRelationalDate(110);
      SparseInstance sparseInstance0 = new SparseInstance(72);
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.m_ConfusionMatrix = null;
      evaluation1.unweightedMacroFmeasure();
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      evaluation1.unweightedMacroFmeasure();
      double double0 = evaluation1.m_SumClassPredicted;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double double1 = evaluation0.m_TotalCost;
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      AbstractClassifier.runClassifier(costSensitiveClassifier1, testInstances0.DEFAULT_WORDS);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      evaluation0.toClassDetailsString();
      try { 
        CostMatrix.parseMatlab("VARIABLE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      capabilities0.disableAllClasses();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      TestInstances.forCapabilities(capabilities0);
      instances0.deleteAttributeType((-1));
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.createFolder(evoSuiteFile1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(267);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.likelihoodThresholdTipText();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.pctIncorrect();
      evaluation0.SFMeanEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numTrueNegatives(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "@data");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.errorRate();
      evaluation0.areaUnderROC((-1));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(357913946);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      KDTree kDTree0 = new KDTree();
      evaluation0.pctIncorrect();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.matthewsCorrelationCoefficient(9);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.m_TotalCost;
      evaluation0.numTrueNegatives((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "easureTeeSie");
      evaluation0.pctUnclassified();
      evaluation0.falsePositiveRate(114);
      evaluation0.totalCost();
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.m_NumTrainClassVals = (-1);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      evaluation0.kappa();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("=== Summary ===\n\nTotal Number of Instances                0     \n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.meanAbsoluteError();
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      String string0 = JColorChooser.SELECTION_MODEL_PROPERTY;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getCapabilities();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String string1 = DefaultEditorKit.defaultKeyTypedAction;
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      RandomTree randomTree0 = new RandomTree();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.m_SumPriorSqrErr;
      Double double2 = new Double((-1));
      evaluation0.rootRelativeSquaredError();
      double double3 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.getHeader();
      evaluation0.meanAbsoluteError();
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String string0 = DefaultEditorKit.selectWordAction;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select-word");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      evaluation0.kappa();
      double double0 = evaluation0.m_SumSqrClass;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "m5+!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRelationalClassFormat();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.setNumericPriorsFromBuffer();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(309.7654, 4.9E-324);
      IBk iBk0 = new IBk();
      iBk0.setDebug(false);
      evaluation0.setNumericPriorsFromBuffer();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader0.setRetrieval(4);
      arffLoader1.getNextInstance(instances0);
      evaluation0.toSummaryString(".arff", true);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      capabilities1.toSource("B:d xoN)U[");
      LogitBoost logitBoost0 = new LogitBoost();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      double double0 = NimbusStyle.SMALL_SCALE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getAutoBuild");
      Evaluation.makeOptionString((Classifier) null, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      evaluation0.toMatrixString();
      MockRandom mockRandom0 = new MockRandom();
      RandomTree randomTree1 = new RandomTree();
      evaluation0.weightedPrecision();
      testInstances0.getWords();
      KDTree kDTree0 = new KDTree();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-3008.6);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(" ");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(true);
      evaluation1.setNumericPriorsFromBuffer();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (double) (-2);
      Version.MINOR = (-2);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1);
      evaluation2.weightedMatthewsCorrelation();
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 99.0;
      doubleArray0[6] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation2.updateMargins(doubleArray0, 2, (-2645.711960755732));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -249250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      evaluation0.areaUnderPRC(32);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Filter[] filterArray0 = Filter.makeCopies(multiFilter0, 1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.matthewsCorrelationCoefficient(7);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) filterArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.filters.MultiFilter cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      testInstances0.setMultiInstance(true);
      Instances instances1 = new Instances(instances0, (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      double double0 = NimbusStyle.LARGE_SCALE;
      RandomTree randomTree1 = new RandomTree();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      evaluation0.kappa();
      LogitBoost logitBoost0 = new LogitBoost();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(13);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-649.8216080389), doubleArray0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toSummaryString();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-549.991362848987), (-872.8578896891));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      IBk iBk0 = new IBk((-294));
      serializedClassifier0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setNumericPriorsFromBuffer();
      Object[] objectArray0 = new Object[0];
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.evaluateModel((Classifier) null, instances1, objectArray0);
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.getClassPriors();
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.incorrect();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.equals(testInstances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(3795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3795
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = null;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      serializedClassifier0.getCapabilities();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      int int0 = (-4032);
      int int1 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      iBk0.setDebug(false);
      evaluation0.setNumericPriorsFromBuffer();
      int int0 = 68;
      evaluation0.toSummaryString("@data", false);
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = DefaultEditorKit.selectWordAction;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.setDiscardPredictions(true);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFEntropyGain();
      StyleConstants styleConstants1 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.addNumericTrainClass(0.0, 1.0);
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "UP");
      SMO sMO0 = new SMO();
      Evaluation.makeOptionString(sMO0, true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1303.06812;
      doubleArray0[3] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(1303.06812, doubleArray0);
      try { 
        evaluation1.evaluateModelOnce((Classifier) randomTree0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "qOJcmk";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      StringSelection stringSelection0 = new StringSelection("q\"%}m+!i-");
      evaluation0.kappa();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominal(15);
      testInstances0.setNumRelationalNominalValues((-1));
      evaluation0.getRevision();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.pctIncorrect();
      evaluation0.SFMeanEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.useNoPriors();
      evaluation0.truePositiveRate(5);
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = DefaultEditorKit.selectWordAction;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      evaluation0.setDiscardPredictions(false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      randomTree0.getCapabilities();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.m_SumClassPredicted;
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      evaluation0.pctUnclassified();
      double double2 = evaluation0.m_WithClass;
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFPriorEntropy();
      evaluation1.sizeOfPredictedRegions();
      evaluation0.KBMeanInformation();
      evaluation1.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      Cobweb cobweb0 = new Cobweb();
      Cobweb cobweb1 = new Cobweb();
      Cobweb cobweb2 = new Cobweb();
      cobweb1.getCapabilities();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.toCumulativeMarginDistributionString();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance((-10.582760972876208), doubleArray0, intArray0, (-2));
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toSummaryString(false);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.getClassPriors();
      evaluation0.getClassPriors();
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      capabilities0.getClassCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter1.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+L2))WVOFG4Ig=");
      Instances instances1 = new Instances(instances0, 1246);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      StringSelection stringSelection0 = new StringSelection("q\"%}m+!i-");
      evaluation0.kappa();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(13);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(61);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      capabilities0.enable(capabilities_Capability0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Logistic logistic0 = new Logistic();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) logistic0;
      objectArray0[3] = (Object) serializedClassifier0;
      objectArray0[4] = (Object) capabilities0;
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      objectArray0[5] = (Object) styleConstants0;
      Evaluation.handleCostOption((String) null, 102);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.setNumRelationalNumeric(2);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.toSummaryString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-@CNwez");
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.getClassPriors();
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumRelationalNumeric(2);
      randomTree0.getCapabilities();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_TotalCost;
      MockRandom mockRandom0 = new MockRandom();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.m_SumPriorSqrErr;
      evaluation0.rootRelativeSquaredError();
      evaluation0.getDiscardPredictions();
      evaluation0.useNoPriors();
      evaluation0.matthewsCorrelationCoefficient((-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.makeDistribution(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = new Capabilities(multilayerPerceptron0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      testInstances0.setNumString(2295);
      Evaluation evaluation0 = new Evaluation(instances0);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      try { 
        Evaluation.handleCostOption(".bsi", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.setNumericPriorsFromBuffer();
      double double0 = evaluation1.m_SumPriorSqrErr;
      evaluation1.rootRelativeSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation3 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "qOJcmk";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      StringSelection stringSelection0 = new StringSelection("q\"%}m+!i-");
      double double0 = evaluation0.m_Incorrect;
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      evaluation0.getRevision();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 9, (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4.9E-324, 4.9E-324);
      IBk iBk0 = new IBk();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.setSeed(4);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom1);
      evaluation0.addNumericTrainClass((-1008.8575), 2);
      IBk iBk1 = new IBk();
      evaluation0.pctUnclassified();
      String string0 = JOptionPane.SELECTION_VALUES_PROPERTY;
      evaluation0.pctIncorrect();
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      capabilities0.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String string0 = JColorChooser.SELECTION_MODEL_PROPERTY;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      FilteredClusterer filteredClusterer1 = new FilteredClusterer();
      filteredClusterer1.getCapabilities();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.setRetrieval(2);
      Instances instances1 = new Instances(instances0, (-29));
      arffLoader0.getNextInstance(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.KBInformation();
      evaluation0.toSummaryString(".arff", true);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      IBk iBk0 = new IBk((-29));
      Evaluation.handleCostOption("", 102);
      C45Loader c45Loader0 = new C45Loader();
      instances1.stream();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      evaluation0.addNumericTrainClass((-1), (-1269.216));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.priorEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(5.7, 4.9E-324);
      IBk iBk0 = new IBk();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.setSeed(4);
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = new Instances(instances0, 1);
      evaluation0.addNumericTrainClass((-1008.8575), 2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 0.07500000298023224;
      doubleArray0[4] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(0.95, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, denseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      textDirectoryLoader0.getRevision();
      StringSelection stringSelection0 = new StringSelection("q\"%}m+!i-");
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getOptions();
      evaluation0.SFPriorEntropy();
      evaluation0.sizeOfPredictedRegions();
      DecisionStump decisionStump0 = new DecisionStump();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, (-1325), (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      char[] charArray0 = new char[6];
      charArray0[1] = '/';
      charArray0[2] = '3';
      charArray0[4] = '7';
      charArray0[5] = ';';
      evaluation1.num2ShortID(4029, charArray0, 4029);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation1.priorEntropy();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      evaluation0.areaUnderPRC(11);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Filter.makeCopies(multiFilter0, 1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      evaluation0.setDiscardPredictions(false);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation1.m_SumPriorSqrErr;
      Double double1 = new Double((-1008.8575));
      evaluation0.rootRelativeSquaredError();
      evaluation1.getDiscardPredictions();
      evaluation0.useNoPriors();
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.setNumRelationalNumeric(2);
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = evaluation0.getClassPriors();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.toSummaryString("YZH", false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      RandomTree randomTree0 = new RandomTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray0 = new double[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1474.6723181196035), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = XML.VAL_YES;
      double double0 = evaluation0.m_SumAbsErr;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities.forInstances(instances0, false);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_ComplexityStatisticsAvailable = false;
      System.setCurrentTimeMillis(1953L);
      evaluation1.SFEntropyGain();
      Instances instances1 = testInstances0.generate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances1);
      double double1 = UnivariateKernelEstimator.CONST;
      try { 
        Evaluation.evaluateModel((Classifier) serializedClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.SerializedClassifier:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -model <filename>
         // \tThe file containing the serialized model.
         // \t(required)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.toSummaryString("YZH", false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      RandomTree randomTree0 = new RandomTree();
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      KDTree kDTree0 = new KDTree();
      evaluation0.pctIncorrect();
      evaluation0.errorRate();
      evaluation0.pctCorrect();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom();
      multiFilter0.isStreamableFilter();
      evaluation0.setDiscardPredictions(true);
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances.forCapabilities(capabilities0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = NimbusStyle.SMALL_SCALE;
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation1.SFMeanSchemeEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.useNoPriors();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.m_NoPriors = false;
      evaluation2.areaUnderPRC((-1));
      evaluation0.meanAbsoluteError();
      evaluation3.coverageOfTestCasesByPredictedRegions();
      evaluation2.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      rEPTree0.getCapabilities();
      capabilities0.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.correlationCoefficient();
      double[] doubleArray0 = evaluation0.getClassPriors();
      Instances instances1 = testInstances0.getData();
      instances1.toSummaryString();
      evaluation0.falseNegativeRate((-2));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[4] = "qOJcmk";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      StringSelection stringSelection0 = new StringSelection("IvUNl#e!ncl/DIH");
      evaluation0.kappa();
      evaluation0.toSummaryString(true);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setDebug(false);
      evaluation0.weightedAreaUnderROC();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      IBk iBk0 = new IBk();
      evaluation0.pctUnclassified();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.confusionMatrix();
      String string0 = Action.ACCELERATOR_KEY;
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = NimbusStyle.SMALL_SCALE;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setHandler(hierarchicalClusterer0);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      double double1 = evaluation1.m_SumPredicted;
      CostMatrix costMatrix0 = new CostMatrix(3);
      testInstances1.getWords();
      KDTree kDTree0 = new KDTree();
      evaluation0.pctIncorrect();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities2 = rEPTree0.getCapabilities();
      capabilities2.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass(933.11457, (-1.0E100));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation1.sizeOfPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation1.unweightedMacroFmeasure();
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      evaluation1.unweightedMacroFmeasure();
      double double0 = evaluation1.m_SumSchemeEntropy;
      evaluation0.addNumericTrainClass((-1120.939), 1);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation2.setNumericPriorsFromBuffer();
      evaluation2.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation3 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.KBMeanInformation();
      evaluation2.areaUnderPRC((-2159));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrClass;
      instances0.spliterator();
      Cobweb cobweb0 = new Cobweb();
      cobweb0.setCutoff((-2));
      Cobweb cobweb1 = new Cobweb();
      Capabilities.forInstances(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.toCumulativeMarginDistributionString();
      serializedClassifier0.getCurrentModel();
      C45Loader c45Loader0 = new C45Loader();
      instances0.stream();
      double double1 = evaluation0.m_TotalCoverage;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1001, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      capabilities1.setMinimumNumberInstances((-1));
      capabilities1.toSource("getTrim");
      LogitBoost logitBoost0 = new LogitBoost();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = NimbusStyle.SMALL_SCALE;
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.makeDistribution(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation1.areaUnderPRC(109);
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.correlationCoefficient();
      double[] doubleArray0 = evaluation2.getClassPriors();
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(0);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.toSummaryString("YZH", false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      RandomTree randomTree0 = new RandomTree();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_SumClassPredicted;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      double double1 = evaluation0.m_TotalCost;
      evaluation0.toClassDetailsString();
      double double2 = evaluation0.m_MaxTarget;
      Evaluation.main(stringArray0);
      CostMatrix costMatrix0 = null;
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString();
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setDiscardPredictions(true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      evaluation0.num2ShortID(484, charArray0, 1);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4029;
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-1474.6723181196035);
      doubleArray0[6] = (double) 4029;
      doubleArray0[7] = (double) 4029;
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.toSummaryString("@data", false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      RandomTree randomTree0 = new RandomTree();
      evaluation0.weightedPrecision();
      instances0.stream();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(randomTree0);
      testInstances0.getWords();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray0 = new double[2];
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.makeDistribution(Double.NaN);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getRevision();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      capabilities0.disableAllClasses();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      TestInstances.forCapabilities(capabilities0);
      instances0.deleteAttributeType((-1));
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.relativeAbsoluteError();
      try { 
        Evaluation.handleCostOption("'~:0-;2YV]B", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities2 = rEPTree0.getCapabilities();
      capabilities2.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      capabilities0.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass(933.11457, (-1.0E100));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation1.sizeOfPredictedRegions();
      DecisionStump decisionStump0 = new DecisionStump();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump0, instances0, 0, (Random) mockRandom0, (Object[]) hierarchicalClusterer0.TAGS_LINK_TYPE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = DefaultEditorKit.selectWordAction;
      MockRandom mockRandom0 = new MockRandom();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.errorRate();
      evaluation1.pctCorrect();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.correct();
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.setNumRelationalNumeric(2);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.trueNegativeRate((-1217));
      evaluation0.weightedPrecision();
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedAreaUnderROC();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      capabilities1.setMinimumNumberInstances((-1));
      capabilities1.toSource("Bl:d xoN)U[");
      LogitBoost logitBoost0 = new LogitBoost();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      evaluation0.toSummaryString("@data", true);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      capabilities0.toSource("synopsis");
      LogitBoost logitBoost0 = new LogitBoost();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = NimbusStyle.SMALL_SCALE;
      Evaluation evaluation3 = new Evaluation(instances0);
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.useNoPriors();
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.areaUnderPRC(1902);
      evaluation4.KBRelativeInformation();
      Evaluation.makeOptionString(serializedClassifier0, false);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(405);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      KStar kStar0 = new KStar();
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setDebug(true);
      Evaluation.getGlobalInfo(zeroR0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.areaUnderPRC((-2));
      IBk iBk0 = new IBk();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 405;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = DefaultEditorKit.selectWordAction;
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.setDiscardPredictions(false);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      System.setCurrentTimeMillis(1953L);
      evaluation1.SFEntropyGain();
      StyleConstants styleConstants1 = (StyleConstants)AttributeSet.ResolveAttribute;
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setHandler((CapabilitiesHandler) null);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFMeanSchemeEntropy();
      evaluation2.addNumericTrainClass((-2), 1953L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "");
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (-10.582760972876208);
      doubleArray0[7] = (double) 1953L;
      doubleArray0[8] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      intArray0[7] = (-2);
      intArray0[8] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-1));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.setNumRelationalNumeric(2);
      MockRandom mockRandom0 = new MockRandom();
      KDTree kDTree0 = new KDTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.addNumericTrainClass(Double.NaN, 962.153950233666);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, ".xrff.gz");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      try { 
        evaluation0.evaluateModelOnce(970.332157, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 970
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities2 = rEPTree0.getCapabilities();
      capabilities2.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass(933.11457, (-1.0E100));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = evaluation1.m_TrainClassVals;
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      rEPTree0.setSpreadInitialCount(false);
      Capabilities capabilities1 = rEPTree0.getCapabilities();
      capabilities1.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass(933.11457, (-1.0E100));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation1.sizeOfPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.KBMeanInformation();
      evaluation0.areaUnderPRC(2);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities1.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      linearRegression0.getCapabilities();
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities2 = rEPTree0.getCapabilities();
      capabilities2.setMinimumNumberInstances((-1));
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass(933.11457, (-1.0E100));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LinearRegression linearRegression0 = new LinearRegression();
          Capabilities capabilities0 = linearRegression0.getCapabilities();
          Capabilities capabilities1 = linearRegression0.getCapabilities();
          TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
          Instances instances0 = testInstances0.generate();
          MultiFilter multiFilter0 = new MultiFilter();
          capabilities1.getClassCapabilities();
          Evaluation evaluation0 = new Evaluation(instances0);
          testInstances0.setNumRelationalNominal(1);
          Evaluation evaluation1 = new Evaluation(instances0);
          MockRandom mockRandom0 = new MockRandom();
          FilteredClusterer filteredClusterer0 = new FilteredClusterer();
          MockRandom mockRandom1 = new MockRandom();
          GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
          boolean boolean0 = evaluation1.m_NoPriors;
          CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          textDirectoryLoader0.listOptions();
          LogitBoost logitBoost0 = new LogitBoost();
          logitBoost0.getOptions();
          FileSystemHandling.shouldAllThrowIOExceptions();
          Random random0 = null;
          boolean boolean1 = true;
          try { 
            evaluation0.KBInformation();
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't compute K&B Info score: class numeric!
             //
             verifyException("weka.classifiers.Evaluation", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-h or -help\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.createFolder(evoSuiteFile1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Evaluation evaluation1 = new Evaluation(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation1.unweightedMacroFmeasure();
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) (-1);
      doubleArray3[3] = 975.7085017432055;
      doubleArray3[4] = (double) (-2);
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = (-1816.274302506315);
      doubleArray4[2] = (double) (-2);
      doubleArray4[3] = (double) (-2);
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 2;
      doubleArray6[1] = (-1816.274302506315);
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = 5776.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 1000.0;
      doubleArray7[1] = (double) 2;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) (-1);
      doubleArray0[7] = doubleArray8;
      evaluation1.m_ConfusionMatrix = doubleArray0;
      instances0.replaceAll(unaryOperator0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMacroFmeasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      ZeroR zeroR0 = new ZeroR();
      RandomTree randomTree0 = new RandomTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[7] = (-1474.6723181196035);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1474.6723181196035);
      evaluation0.weightedAreaUnderPRC();
      textDirectoryLoader0.setOutputFilename(false);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 5390, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MultiFilter multiFilter0 = new MultiFilter();
      capabilities0.getClassCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      capabilities1.setMinimumNumberInstances((-1));
      capabilities1.toSource("Bl:d xoN)U[");
      LogitBoost logitBoost0 = new LogitBoost();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      String string0 = JTree.SELECTION_MODEL_PROPERTY;
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
