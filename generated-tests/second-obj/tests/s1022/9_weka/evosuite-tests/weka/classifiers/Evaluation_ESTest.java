/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:19:10 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.accessibility.AccessibleContext;
import javax.swing.JLayeredPane;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.confusionMatrix();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = Locale.getISOLanguages();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) inputMappedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = Evaluation.makeOptionString(decisionTable0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getRevision";
      Evaluation.main(stringArray0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ConfLevel = (-1092.3824);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.confusionMatrix();
      evaluation0.pctCorrect();
      evaluation0.getHeader();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1992);
      attribute0.copy("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.confusionMatrix();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 2035);
      Attribute attribute1 = attribute0.copy("");
      instances0.sort(attribute1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.recall(2);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      String[] stringArray0 = new String[0];
      SparseInstance sparseInstance0 = new SparseInstance(386);
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, false);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      double[] doubleArray0 = new double[0];
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader0.setKeys("|S=-\"Jad$B63;G)H&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.makeOptionString(regressionByDiscretization0, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1992);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-4812.4));
      evaluation0.meanAbsoluteError();
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however, there is no Target element specifying legal discrete values for the target!", instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute(".arff", protectedProperties0);
      Attribute attribute2 = new Attribute("date");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(3, 4600.8318720587);
      evaluation0.falseNegativeRate(0);
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.stream();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.trueNegativeRate(8);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) kStar0, instances0, 8, (Random) mockRandom0, (Object[]) kStar0.TAGS_MISSING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("debugTipText");
      evaluation0.KBInformation();
      double double0 = evaluation0.m_Correct;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_SumPredicted;
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      Evaluation.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      KDTree kDTree0 = new KDTree();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      evaluation0.weightedTruePositiveRate();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".bsi");
      attribute0.copy("@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(4);
      evaluation0.trueNegativeRate(8);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      JRip jRip0 = new JRip();
      attribute0.equals(jRip0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.toClassDetailsString();
      M5P m5P0 = new M5P();
      Object[] objectArray0 = new Object[0];
      SparseInstance sparseInstance0 = new SparseInstance(1003);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1992);
      byte[] byteArray0 = new byte[8];
      attribute0.copy(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      textDirectoryLoader0.getOptions();
      evaluation0.confusionMatrix();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.weightedMatthewsCorrelation();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 2, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      KDTree kDTree0 = new KDTree();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("q[#WXI%:[M;C:8cQk_", instances0, (-2457));
      Attribute attribute1 = attribute0.copy((String) null);
      instances0.sort(attribute1);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.parallelStream();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("8n`5VU=W.KiF<aJS");
      databaseLoader0.setKeys("seedTipText");
      evaluation0.addNumericTrainClass(2, 1461.1770454735);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.toClassDetailsString();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute(">0-4MJ=~*u. ;e5", instances0, 496);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(496, 3);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.addNumericTrainClass((-803.74069337829), 0.5);
      evaluation0.toMatrixString("@data");
      C45Loader c45Loader0 = new C45Loader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@relation", instances0, 1992);
      Attribute.typeToString((-963));
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(1);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.setDiscardPredictions(true);
      DenseInstance denseInstance0 = new DenseInstance(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation.getGlobalInfo(simpleLinearRegression0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.areaUnderPRC(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@relation", instances0, 1992);
      Attribute.typeToString((-963));
      attribute0.addRelation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Properties properties0 = new Properties();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.setDiscardPredictions(false);
      DenseInstance denseInstance0 = new DenseInstance(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation.getGlobalInfo(simpleLinearRegression0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) adaBoostM1_0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("getNrOfNodes", arrayList0, (-2764));
      Attribute attribute1 = new Attribute("numeric", instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      double[] doubleArray1 = evaluation0.m_ClassPriors;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanPriorEntropy();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8C";
      stringArray0[1] = "GUITipText";
      try { 
        evaluation0.crossValidateModel("h!mzk;ZC.v>HT", instances0, 715827883, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: h!mzk;ZC.v>HT
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.listIterator();
      Attribute attribute0 = new Attribute(".bsi", instances0, 1992);
      attribute0.copy(".bsi");
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.incorrect();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-17));
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(8);
      evaluation0.correct();
      evaluation0.avgCost();
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Vector<String> vector0 = new Vector<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Attribute attribute0 = new Attribute("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.toSummaryString(true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      instances0.resampleWithWeights((Random) null, booleanArray0);
      evaluation0.matthewsCorrelationCoefficient(113);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, ".bsi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.confusionMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      evaluation0.weightedTrueNegativeRate();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.areaUnderPRC(12);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.clear();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setKeys("@relation");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.numInstances();
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Locale.getISOLanguages();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        instances0.numDistinctValues((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = attribute0.copy("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.KBMeanInformation();
      attribute1.addStringValue(attribute0, 9);
      evaluation0.addNumericTrainClass(4600.8318720587, 2006);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DenseInstance denseInstance0 = new DenseInstance(2);
      attribute0.getRevision();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      denseInstance0.setDataset(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DenseInstance denseInstance1 = new DenseInstance((-3051.74371), doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNumeric((-4764));
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      evaluation0.num2ShortID(60, charArray0, 600);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      try { 
        Evaluation.handleCostOption(".bsi", (-878));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 18);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@relation", instances0, 1992);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys("itse~lf");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, (-1901.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 625
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-17));
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.confusionMatrix();
      evaluation0.addNumericTrainClass(0.0, 0.0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R&4B!,T/B9";
      stringArray0[1] = "[_Be";
      stringArray0[2] = "  Precision  Recall";
      stringArray0[3] = "ERSd2,Eq";
      stringArray0[4] = "getTechnicalInformation";
      stringArray0[5] = "NwP";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.kappa();
      evaluation0.sizeOfPredictedRegions();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0, 1992);
      attribute0.copy("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.addNumericTrainClass(4, 458.06256);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DenseInstance denseInstance0 = new DenseInstance(1);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1992;
      doubleArray0[3] = (double) 0;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = DefaultEditorKit.beginParagraphAction;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys(".arff");
      int int0 = 1877;
      evaluation0.falseNegativeRate(1877);
      evaluation0.SFEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      int int1 = 333;
      evaluation0.areaUnderPRC(333);
      evaluation0.pctUnclassified();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = new Attribute("real", instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      attribute1.addStringValue(attribute0, 9);
      attribute0.getRevision();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.getRevision();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = DefaultEditorKit.beginParagraphAction;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1877);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      denseInstance0.setDataset(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString();
      evaluation0.unweightedMicroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, denseInstance0, (-3107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Px");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("Px", instances0, 491);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("Px");
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("-}uR:]L-zr5yjkhb~");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      evaluation0.toMatrixString(".arff");
      String string0 = NimbusStyle.LARGE_KEY;
      evaluation0.KBMeanInformation();
      // Undeclared exception!
      try { 
        testInstances0.setWords((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.confusionMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.unweightedMicroFmeasure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "globalInfo");
      IBk iBk0 = new IBk((-1));
      Classifier classifier0 = AbstractClassifier.makeCopy(iBk0);
      iBk0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, 1215, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("j", instances0, 1992);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      attribute0.copy("j");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute1 = new Attribute((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.priorEntropy();
      evaluation0.m_NumClasses = 494;
      evaluation1.toMatrixString("numeric");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 3;
      evaluation0.m_Incorrect = 100.0;
      doubleArray0[3] = 16.0;
      doubleArray0[4] = 1.0E75;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-293.98188578847));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.confusionMatrix();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      evaluation0.weightedTrueNegativeRate();
      JSONLoader jSONLoader0 = new JSONLoader();
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0, (-2457));
      instances0.sort(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.parallelStream();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("@end");
      databaseLoader0.setKeys(".arff");
      evaluation0.addNumericTrainClass(0, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = XML.DTD_IMPLIED;
      String string1 = DefaultEditorKit.pageDownAction;
      evaluation0.fMeasure(0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.rootRelativeSquaredError();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      evaluation0.KBInformation();
      double double0 = evaluation0.m_ConfLevel;
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.SFSchemeEntropy();
      evaluation0.trueNegativeRate(8);
      evaluation0.SFEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      instances0.remove((Object) simpleLinearRegression0);
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(8, doubleArray0);
      evaluation0.getDiscardPredictions();
      evaluation0.recall(0);
      double double2 = KStarConstants.EPSILON;
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues((-2));
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate("-M <iterations>");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.unweightedMacroFmeasure();
      Attribute.main(testInstances2.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      Locale.getISOLanguages();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.graph();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Classifier: weka.classifiers.rules.ZeroR  cannot be graphed
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = new Attribute("real", 9);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      DenseInstance denseInstance0 = new DenseInstance(2);
      attribute0.getRevision();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      denseInstance0.setDataset(instances0);
      costSensitiveClassifier0.listOptions();
      evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) denseInstance0, true);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel("@end", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @end.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.recall(75);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier1.getModelHeader(instances0);
      KDTree kDTree0 = new KDTree(instances1);
      textDirectoryLoader0.getStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(databaseLoader0);
      evaluation0.addNumericTrainClass((-1182.478585), 99.0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.pctIncorrect();
      CostMatrix costMatrix0 = new CostMatrix(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2537);
      binarySparseInstance0.insertAttributeAt(2);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setKeys("@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      databaseLoader0.setKeys("SARN;7");
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-487.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-487.0));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanAbsoluteError();
      evaluation1.KBInformation();
      evaluation0.KBRelativeInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.makeDistribution(Double.NaN);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      try { 
        evaluation0.updateStatsForPredictor((-2), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("-}uR:]L-zr5yjkhb~");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString();
      evaluation0.KBMeanInformation();
      Attribute.main(testInstances0.DEFAULT_WORDS);
      Float float0 = new Float((double) (-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      evaluation1.priorEntropy();
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_SumSqrClass;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "estimatorTipText");
      CoverTree coverTree0 = new CoverTree();
      int int0 = 500;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(500);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-3107));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however, there is no Target element specifying legal discrete values for the target!", instances0);
      Attribute attribute1 = attribute0.copy("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however, there is no Target element specifying legal discrete values for the target!");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Object object0 = Image.UndefinedProperty;
      protectedProperties0.entrySet();
      Attribute attribute2 = new Attribute(".arff", protectedProperties0);
      Attribute attribute3 = new Attribute("date");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(15.0, 0);
      evaluation0.fMeasure(3);
      evaluation0.rootRelativeSquaredError();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.equals(attribute1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1992);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getOptions();
      IBk iBk0 = new IBk(26);
      Capabilities capabilities0 = iBk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumNumeric(3);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Locale.getISOLanguages();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.relativeAbsoluteError();
      costSensitiveClassifier1.listOptions();
      evaluation0.SFMeanEntropyGain();
      Float float0 = new Float((double) 1992);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LogitBoost logitBoost0 = new LogitBoost();
      SMO sMO0 = new SMO();
      evaluation0.equals(sMO0);
      evaluation0.falsePositiveRate(1);
      evaluation0.weightedRecall();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      KStar kStar0 = new KStar();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.listOptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      databaseLoader0.setKeys("SARN;7");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.setDiscardPredictions(true);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 491
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      KStar kStar0 = new KStar();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      databaseLoader0.setKeys("SARN;7");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominalValues((-2));
      testInstances1.setOptions(testInstances0.DEFAULT_WORDS);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate("-M <iterations>");
      Evaluation evaluation0 = new Evaluation(instances0);
      costMatrix0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      Attribute.main(testInstances2.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      TestInstances testInstances3 = new TestInstances();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.confusionMatrix();
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1992);
      Attribute attribute1 = attribute0.copy("");
      Attribute attribute2 = new Attribute("string", 4);
      instances0.sort(attribute1);
      DenseInstance denseInstance0 = new DenseInstance(5);
      denseInstance0.setDataset(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) denseInstance0, false);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.kappa();
      evaluation0.KBMeanInformation();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(costSensitiveClassifier1);
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      KStar kStar0 = new KStar();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.listOptions();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      databaseLoader0.setKeys("SARN;7");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.getRevision();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = new Attribute("real", instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      attribute1.addStringValue(attribute0, 9);
      DenseInstance denseInstance0 = new DenseInstance(2);
      attribute0.getRevision();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      denseInstance0.setDataset(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.updateStatsForPredictor(31.454267270192, denseInstance0);
      evaluation0.kappa();
      evaluation0.sizeOfPredictedRegions();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".bsi", instances0);
      Attribute attribute1 = new Attribute("real", 9);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClassPredicted;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("relational");
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.unweightedMacroFmeasure();
      String[] stringArray0 = new String[4];
      instances0.deleteWithMissingClass();
      stringArray0[0] = "relational";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      Attribute.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      databaseLoader0.getNextInstance(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      denseInstance0.setDataset(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.fMeasure((-44));
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.incorrect();
      evaluation0.useNoPriors();
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = new Attribute("real", instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      attribute1.addStringValue(attribute0, 9);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Object object0 = Image.UndefinedProperty;
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.unweightedMacroFmeasure();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@data";
      stringArray0[2] = ">-:yIS@G";
      stringArray0[3] = "@data";
      Attribute.main(stringArray0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      evaluation0.evaluateModel((Classifier) kStar0, instances0, (Object[]) stringArray0);
      textDirectoryLoader0.setDirectory(file0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) votedPerceptron0, instances0, 7, (Random) mockRandom0, (Object[]) kStar0.TAGS_MISSING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".bsi");
      attribute0.copy("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(1, 2006);
      CostMatrix costMatrix0 = new CostMatrix(0);
      evaluation0.SFSchemeEntropy();
      attribute0.enumerateValues();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      JRip jRip0 = new JRip();
      attribute0.equals(jRip0);
      simpleLinearRegression0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      M5P m5P0 = new M5P();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) simpleLinearRegression0, instances0, objectArray0);
      evaluation0.toClassDetailsString();
      LogitBoost logitBoost0 = new LogitBoost();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.toMatrixString("setUseADTree");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".arff", instances0, 9);
      Attribute attribute1 = new Attribute("real", instances0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      attribute1.addStringValue(attribute0, 9);
      DenseInstance denseInstance0 = new DenseInstance(2);
      attribute0.getRevision();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      denseInstance0.setDataset(instances0);
      evaluation0.weightedFalseNegativeRate();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(85, false, true);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.equals((Object) null);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = DefaultEditorKit.beginParagraphAction;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys(".arff");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1877);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      denseInstance0.setDataset(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "initPTs";
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString();
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.updateStatsForPredictor(818.841195504207, denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 818
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation.handleCostOption("", (-878));
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      DenseInstance denseInstance0 = new DenseInstance(108);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) lWL0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0, (-2457));
      instances0.sort(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.parallelStream();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("@end");
      databaseLoader0.setKeys(".arff");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1877);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      denseInstance0.setDataset(instances0);
      binarySparseInstance0.toString(attribute0, 1020);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("@data", instances0, (-2457));
      instances0.sort(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_STARTTAG;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys(".arff");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1877);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      denseInstance0.setDataset(instances0);
      evaluation0.weightedFalseNegativeRate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "initPTs";
      FileSystemHandling.shouldAllThrowIOExceptions();
      databaseLoader0.setQuery("numeric");
      evaluation0.toSummaryString();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.updateStatsForPredictor(Double.NaN, denseInstance0);
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("", instances0, 1995);
      attribute0.copy("");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("string");
      Evaluation evaluation0 = new Evaluation(instances0);
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3529.472833;
      doubleArray0[1] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      KStar kStar0 = new KStar();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Stack<String> stack0 = new Stack<String>();
      Properties properties0 = new Properties();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("$~x");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.toSummaryString(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
