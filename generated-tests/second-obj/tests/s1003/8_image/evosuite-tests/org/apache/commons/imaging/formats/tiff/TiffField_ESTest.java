/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:47:24 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(71, 71, fieldTypeShort0, (-1096L), (-1096L), (byte[]) null, byteOrder0, 71);
      assertTrue(tiffField0.isLocalValue());
      
      tiffField0.getOversizeValueElement();
      assertEquals((-1096), tiffField0.getOffset());
      assertEquals(71, tiffField0.getTag());
      assertEquals(71, tiffField0.getSortHint());
      assertEquals(71, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeLong0, 1, 1, byteArray0, byteOrder0, 1);
      boolean boolean0 = tiffField0.isLocalValue();
      assertTrue(boolean0);
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-4453), (-3469), fieldTypeDouble0, 2147483647L, 2147483647L, (byte[]) null, byteOrder0, (-4453));
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(Integer.MAX_VALUE, tiffField0.getOffset());
      assertEquals("-4453 (0xffffee9b: Unknown Tag): ", string0);
      assertEquals((-3469), tiffField0.getDirectoryType());
      assertEquals((-4453), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1539), 2021161080, fieldTypeFloat0.SHORT, 880L, 254L, byteArray0, byteOrder0, 1641);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(700, 700, fieldTypeByte0, 700, 0L, byteArray0, byteOrder0, (byte)83);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-516), (-516), fieldTypeRational0, (-516), (-516), (byte[]) null, byteOrder0, (-516));
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xfffffdfc)", string0);
      assertEquals((-516), tiffField0.getSortHint());
      assertEquals((-516), tiffField0.getDirectoryType());
      assertEquals((-516), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(4088, "lB!T76->");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(4088, 2195, fieldTypeDouble0, 0L, 2195, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "SubjectDistanceRange");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50778, 164, fieldTypeLong0, 164, 1281L, byteArray0, byteOrder0, 1857);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(50778 (0xc65a: CalibrationIlluminant1): ): [I@d44768
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(15, 1546, fieldTypeLong0, 15, 15, byteArray0, byteOrder0, 65106);
      String string0 = tiffField0.getValueDescription();
      assertEquals(60, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(15L, tiffField0.getCount());
      assertEquals(65106, tiffField0.getSortHint());
      assertEquals(15, tiffField0.getTag());
      assertEquals(1546, tiffField0.getDirectoryType());
      assertEquals(15, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (byte) (-78), fieldTypeAscii0, 3289L, 1954, byteArray0, byteOrder0, 0);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@766ca5ac for: 0 (0x0: GPSVersionID): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(0, "^4G<:1eK");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)11;
      TiffField tiffField0 = new TiffField((byte)38, (-1717986917), fieldTypeDouble0, (byte)0, (-2082L), byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals(38, tiffField0.getTag());
      assertEquals((-2082), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(32, "|*zxuj");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeRational0, 32, 32, byteArray0, byteOrder0, 32);
      tiffField0.getIntArrayValue();
      assertEquals(32L, tiffField0.getCount());
      assertEquals(256, tiffField0.getBytesLength());
      assertEquals(32, tiffField0.getTag());
      assertEquals(32, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getOffset());
      assertEquals(32, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(4478, 1, fieldTypeDouble0, 255L, 1, byteArray0, (ByteOrder) null, 1);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@63e73997 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)19;
      byteArray0[0] = (byte)46;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(46, 3105, fieldTypeLong0, 0L, (-2643L), byteArray0, byteOrder0, (byte)0);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(3105, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-2643), tiffField0.getOffset());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(46, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(30, 30, (FieldType) null, 30, 30, byteArray0, byteOrder0, 23);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(30, (byte) (-1));
      tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(23, tiffField0.getSortHint());
      assertEquals(30, tiffField0.getOffset());
      assertEquals(30, tiffField0.getDirectoryType());
      assertEquals(30, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      TiffField tiffField0 = new TiffField(2459, 92, fieldTypeAscii0, (byte)0, (byte)0, byteArray0, byteOrder0, 92);
      String string0 = tiffField0.getValueDescription();
      assertEquals(92, tiffField0.getSortHint());
      assertEquals(92, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(2459, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(769, 769, fieldTypeRational0, 769, 1L, byteArray0, byteOrder0, 769);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(769, int0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(6152, tiffField0.getBytesLength());
      assertEquals(769, tiffField0.getSortHint());
      assertEquals(769, tiffField0.getTag());
      assertEquals(769L, tiffField0.getCount());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-88);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2900, (-2663), fieldTypeLong0, 5775L, 2900, byteArray0, byteOrder0, (byte)55);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-2663), tiffField0.getDirectoryType());
      assertEquals(55, tiffField0.getSortHint());
      assertEquals(2900, tiffField0.getOffset());
      assertEquals(23100, tiffField0.getBytesLength());
      assertEquals(2900, tiffField0.getTag());
      assertEquals(5775L, tiffField0.getCount());
      assertEquals(11024146, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)21;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(94, 94, fieldTypeFloat0, 94, 4L, byteArray0, byteOrder0, 50);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@d8e8e8b for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-661), (-1450), (FieldType) null, (-1450), 434L, byteArray0, byteOrder0, (-1450));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(5352, (-1450));
      // Undeclared exception!
      try { 
        tiffField_OversizeValueElement0.getElementDescription(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField$OversizeValueElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      System.setCurrentTimeMillis((byte) (-39));
      TiffField tiffField0 = new TiffField((byte) (-39), 2751, fieldTypeByte0, 700, 2751, byteArray0, byteOrder0, 2751);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getByteOrder();
      assertEquals(2751, tiffField0.getOffset());
      assertEquals((-39), tiffField0.getTag());
      assertEquals(700, tiffField0.getBytesLength());
      assertEquals(2751, tiffField0.getSortHint());
      assertEquals(2751, tiffField0.getDirectoryType());
      assertEquals(700L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(8, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-45);
      TiffField tiffField0 = new TiffField(478, 478, fieldTypeAscii0, 478, (-754L), byteArray0, (ByteOrder) null, 27);
      String string0 = tiffField0.getStringValue();
      assertEquals(478, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(478, tiffField0.getDirectoryType());
      assertEquals(27, tiffField0.getSortHint());
      assertEquals((-754), tiffField0.getOffset());
      assertEquals(478, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[286];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      Double double0 = new Double(0.896860869961836);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)54, 41494, fieldTypeDouble0, 2459, (-2660), byteArray0, byteOrder1, 2090);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(54, tiffField0.getTag());
      assertEquals((-2660), tiffField0.getOffset());
      assertEquals(19672, tiffField0.getBytesLength());
      assertEquals(2090, tiffField0.getSortHint());
      assertEquals(41494, tiffField0.getDirectoryType());
      assertEquals(2459L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      TiffField tiffField0 = new TiffField(2459, 92, fieldTypeAscii0, 104L, 104L, byteArray0, byteOrder0, 92);
      String string0 = tiffField0.getValueDescription();
      assertEquals(104, tiffField0.getBytesLength());
      assertEquals(92, tiffField0.getSortHint());
      assertEquals(92, tiffField0.getDirectoryType());
      assertEquals(2459, tiffField0.getTag());
      assertEquals(104, tiffField0.getOffset());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-37);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50738, 50738, fieldTypeRational0, 50738, 50738, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getTagName();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(50738, tiffField0.getOffset());
      assertEquals(50738, tiffField0.getDirectoryType());
      assertEquals(50738, tiffField0.getTag());
      assertEquals("AntiAliasStrength", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[246];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-989), (-2020), fieldTypeLong0, 3868L, (-989), byteArray0, byteOrder0, 350);
      String string0 = tiffField0.getValueDescription();
      assertEquals((-989), tiffField0.getTag());
      assertEquals(15472, tiffField0.getBytesLength());
      assertEquals(350, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(3868L, tiffField0.getCount());
      assertEquals((-2020), tiffField0.getDirectoryType());
      assertEquals((-989), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-2471), 1656, fieldTypeByte0, 1656, (-643L), byteArray0, byteOrder0, (-2471));
      int int0 = tiffField0.getSortHint();
      assertEquals(1656, tiffField0.getDirectoryType());
      assertEquals((-2471), tiffField0.getTag());
      assertEquals((-643), tiffField0.getOffset());
      assertEquals((-2471), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-24);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(14, 14, fieldTypeFloat0, 14, 14, byteArray0, byteOrder0, (byte) (-115));
      tiffField0.getValueDescription();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1539), 2021161080, fieldTypeFloat0.SHORT, 880L, 254L, byteArray0, byteOrder0, 1641);
      tiffField0.getIntArrayValue();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      assertEquals((-1539), tiffField0.getTag());
      assertEquals(254L, tiffElement0.offset);
      assertEquals(880L, tiffField0.getCount());
      assertEquals(1760, tiffField0.getBytesLength());
      assertEquals(1641, tiffField0.getSortHint());
      assertEquals(2021161080, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)23;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeLong0, 1087L, (-1), byteArray0, byteOrder0, (byte) (-1));
      tiffField0.getDoubleArrayValue();
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(4348, tiffField0.getBytesLength());
      assertEquals(1087L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[286];
      Double double0 = new Double(513L);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IM=");
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((-2660), "IM=");
      TiffField tiffField0 = new TiffField((-2660), (-2660), fieldTypeShort0, 1L, 513L, byteArray0, byteOrder1, 34016);
      tiffField0.getDoubleArrayValue();
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals(34016, tiffField0.getSortHint());
      assertEquals((-2660), tiffField0.getDirectoryType());
      assertEquals(513, tiffField0.getOffset());
      assertEquals((-2660), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[202];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      long long0 = 1968L;
      int int0 = Pattern.UNICODE_CASE;
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField(2172, (-1747), fieldTypeRational0, 2972L, 64, byteArray0, byteOrder0, (-2068));
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)20, (-16), fieldTypeShort0, (byte)20, (byte)20, byteArray0, byteOrder0, (byte)20);
      tiffField0.getValueDescription();
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)38;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-892), (-892), fieldTypeShort0.IFD, 1L, 4400L, byteArray0, byteOrder0, (-892));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-892), (byte)38);
      tiffField0.getValueDescription();
      try { 
        fieldTypeShort0.writeData(byteOrder1, byteOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: LITTLE_ENDIAN (java.nio.ByteOrder)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)19;
      byteArray0[0] = (byte)46;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(46, 3105, fieldTypeLong0, 1L, 1L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntArrayValue();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(3105, tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(46, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)30;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((byte)30, (byte)30, fieldTypeShort0, (byte)30, 138944L, byteArray0, byteOrder0, (byte)30);
      tiffField0.getDoubleArrayValue();
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)30, (byte)30);
      tiffField0.isLocalValue();
      tiffField0.getFieldTypeName();
      int int0 = (-7);
      try { 
        FieldType.getFieldType((-7));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type -7 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[29];
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffField tiffField0 = new TiffField((byte)0, 1473, fieldTypeRational0, 722L, (byte)0, byteArray0, byteOrder0, (byte)0);
      Object object0 = new Object();
      tiffField0.getDirectoryType();
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        fieldTypeRational0.IFD.getValue((TiffField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(920, 2018, fieldTypeLong0.FLOAT, 1796L, 2018, byteArray0, byteOrder0, 2018);
      Locale locale0 = Locale.ITALY;
      tiffField0.getDoubleArrayValue();
      assertEquals(2018, tiffField0.getOffset());
      assertEquals(7184, tiffField0.getBytesLength());
      assertEquals(2018, tiffField0.getSortHint());
      assertEquals(1796L, tiffField0.getCount());
      assertEquals(2018, tiffField0.getDirectoryType());
      assertEquals(920, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-17);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2966, 2966, fieldTypeShort0, 2966, 2966, byteArray0, byteOrder0, 132);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-30657), int0);
      assertEquals(2966, tiffField0.getDirectoryType());
      assertEquals(5932, tiffField0.getBytesLength());
      assertEquals(2966L, tiffField0.getCount());
      assertEquals(2966, tiffField0.getOffset());
      assertEquals(2966, tiffField0.getTag());
      assertEquals(132, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)31;
      TiffField tiffField0 = new TiffField((-589), (-2496), fieldTypeRational0, 1L, 1156L, byteArray0, (ByteOrder) null, (byte) (-41));
      tiffField0.getIntValueOrArraySum();
      assertEquals((-589), tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-41), tiffField0.getSortHint());
      assertEquals((-2496), tiffField0.getDirectoryType());
      assertEquals(1156, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[29];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffField tiffField0 = new TiffField((-212), (-1), fieldTypeRational0, 1156L, (-6), byteArray0, byteOrder0, (-3032));
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[333];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(971, 971, fieldTypeLong0.FLOAT, 971, 50868, byteArray0, byteOrder0, 971);
      tiffField0.dump();
      String string0 = File.separator;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("InteropebabilityVersion");
      Locale locale0 = Locale.UK;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(263, 778, fieldTypeAscii0, 42021, 42021, byteArray0, byteOrder1, 266);
      tiffField0.toString();
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals(42021, tiffField0.getOffset());
      assertEquals(42021, tiffField0.getBytesLength());
      assertEquals(42021L, tiffField0.getCount());
      assertEquals(263, tiffField0.getTag());
      assertEquals(263, tagInfo0.tag);
      assertEquals(266, tiffField0.getSortHint());
      assertEquals(778, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[254];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(26, 41, fieldTypeByte0, 65535, 26, byteArray0, byteOrder1, 1710);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getOffset();
      assertEquals(65535, tiffField0.getBytesLength());
      assertEquals(41, tiffField0.getDirectoryType());
      assertEquals(1710, tiffField0.getSortHint());
      assertEquals(26, int0);
      assertEquals(26, tiffField0.getTag());
      assertEquals(65535L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[133];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeShort0, 1916L, (byte)20, byteArray0, byteOrder1, 32998);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getBytesLength();
      assertEquals(1916L, tiffField0.getCount());
      assertEquals(3832, int0);
      assertEquals(32998, tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(20, tiffField0.getOffset());
  }
}
