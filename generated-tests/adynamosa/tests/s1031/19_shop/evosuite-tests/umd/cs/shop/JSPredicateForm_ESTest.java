/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 02:12:24 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "()3#X %w";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()3#X %w");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(!B0H=^s)qr~$");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm1.equals(jSPredicateForm0);
      int int0 = (-2823);
      JSJshopVars.rightPar = (-2823);
      SystemInUtil.addInputLine("wmQ[>WE|r");
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      StringReader stringReader0 = new StringReader("(!B0H=^s)qr~$");
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm3);
      StringReader stringReader1 = new StringReader("(!B0H=^s)qr~$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "(!a0\\H=s)9#r~$";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(!a0H=s)9#r~$");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSJshopVars.rightPar = (-1934036071);
      JSJshopVars.coma = (-1);
      StringReader stringReader0 = new StringReader("(!a0H=s)9#r~$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      long long0 = 0L;
      JSJshopVars.verticalL = (-1134);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm2.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("(!0H=s)+#r~$");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!0H=s)+#r~$");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(!c0LH=sRP)9#r~k");
      SystemInUtil.addInputLine(": Error reading control parameters: ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(!c0LH=sRP)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      System.setCurrentTimeMillis(13L);
      StringReader stringReader0 = new StringReader("expected '('");
      StringReader stringReader1 = new StringReader("Reading Predicate");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.ensureCapacity((-2759));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm2.clonePF();
      assertEquals(10, jSPredicateForm1.capacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      SystemInUtil.addInputLine("~<nP>Y&p(M");
      SystemInUtil.addInputLine("eabj<Y,@0FPJp1a8");
      StringReader stringReader0 = new StringReader("vq5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.clonePF();
      assertEquals("[not, [%%%]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(1L);
      jSTerm0.print();
      System.setCurrentTimeMillis(311L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertEquals("[not, [%%%]]", jSTerm0.toString());
      assertTrue(boolean0);
      
      jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      assertEquals("[not, [%%%]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.lastElement();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(UK+Lx aN -");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) "expected '('");
      SystemInUtil.addInputLine("not");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("not");
      jSTerm0.add((Object) "not");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      SystemInUtil.addInputLine("not");
      jSTerm0.add((Object) "not");
      SystemInUtil.addInputLine("not");
      int int0 = 1222;
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("not");
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("not");
      jSTerm0.add((Object) "not");
      SystemInUtil.addInputLine("not");
      SystemInUtil.addInputLine("not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("NBfN&TO>'z0<yu\"N");
      SystemInUtil.addInputLine("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Um+Lx aN6_");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("(UmLx _aN6_~");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(UmLx _aN6_~");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nNt");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(rc0LH=sTP)9#r~k");
      stringReader0.markSupported();
      SystemInUtil.addInputLine("(rc0LH=sTP)9#r~k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7QuUN)A>bn9.Lmlaq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      JSJshopVars.leftPar = (-2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("7QuUN)A>bn9.Lmlaq");
      jSTerm0.trimToSize();
      SystemInUtil.addInputLine("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.print();
      SystemInUtil.addInputLine("x%oyQ/LRDYWCy6%");
      jSPredicateForm0.clone();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSTerm jSTerm1 = (JSTerm)jSPredicateForm2.lastElement();
      jSTerm0.equals(jSPredicateForm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine("7QuUN)A>bn9.Lmlaq");
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm3.print();
      jSPredicateForm2.equals((JSPredicateForm) jSTerm1);
      jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7QuUN)A>bn9.Lmlaq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      JSJshopVars.leftPar = (-2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("7QuUN)A>bn9.Lmlaq");
      jSTerm0.trimToSize();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm3.lastElement();
      jSTerm0.equals(jSPredicateForm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine("7QuUN)A>bn9.Lmlaq");
      jSPredicateForm2.matches((JSPredicateForm) jSTerm0);
      jSTerm1.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm2.print();
      jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7QuUN)A>bn9.Lmlaq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      SystemInUtil.addInputLine("{B%D_bw5g{Qi4zP");
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm2 = (JSTerm)jSPredicateForm0.lastElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm1.lastElement();
      jSSubstitution0.add((Object) jSTerm1);
      streamTokenizer0.parseNumbers();
      jSTerm2.makeVariable();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      jSTerm1.equals(jSPredicateForm0);
      jSTerm3.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine("y0U(0%#W)C'.Fmq");
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ttype = (-1790544634);
      jSTerm0.toStr();
      jSTerm1.isEmpty();
      SystemInUtil.addInputLine("(}}c&(6I");
      jSTerm0.ensureCapacity((-2028306831));
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm2.matches(jSPredicateForm0);
      jSTerm1.print();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm("(}}c&(6I");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7QuUN)A>bn9.Lmlaq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSTerm0.equals((JSPredicateForm) null);
      JSJshopVars.leftPar = (-2);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm("7QuUN)A>bn9.Lmlaq");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      streamTokenizer0.ttype = (-1790544634);
      jSPredicateForm2.toStr();
      jSTerm0.ensureCapacity((-2028306831));
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm3.matches(jSPredicateForm1);
      jSTerm1.print();
      jSPredicateForm3.standarizerPredicateForm();
      JSJshopVars.dot = (-1790544634);
      jSPredicateForm3.toStr();
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      Integer integer0 = new Integer((-1790544634));
      jSSubstitution1.add((Object) integer0);
      jSTerm0.equals(jSPredicateForm3);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      jSPredicateForm3.matches(jSPredicateForm1, jSSubstitution2);
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSSubstitution jSSubstitution1 = jSPredicateForm2.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm0.toStr();
      jSTerm0.equals(jSPredicateForm3);
      StringReader stringReader1 = new StringReader("failed");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8AKp 30kVpaBG");
      StringReader stringReader1 = new StringReader("/eo,Q72dK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      StringReader stringReader2 = new StringReader("/eo,Q72dK");
      StringReader stringReader3 = new StringReader("/eo,Q72dK");
      stringReader3.skip((-2));
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.percent = (-2);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.toStr();
      jSPredicateForm0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSPredicateForm1);
      jSPredicateForm1.toStr();
      StringReader stringReader4 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8AKp 30kVpaBG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      StringReader stringReader1 = new StringReader("7QuUN)A>bn9.Lmaq");
      stringReader0.skip((-2));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      jSPredicateForm1.ensureCapacity((-2028306831));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm2 = jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.matches(jSPredicateForm0);
      jSTerm0.print();
      jSTerm0.toStr();
      jSPredicateForm2.matches((JSPredicateForm) jSTerm1);
      jSTerm0.equals(jSPredicateForm2);
      jSTerm0.clonePF();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8AKp 30kVpaBG");
      StringReader stringReader1 = new StringReader("/eo,Q72dK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      stringReader1.skip((-2));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[0];
      jSTerm2.toArray(objectArray0);
      jSTerm0.print();
      jSPredicateForm1.ensureCapacity(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.matches(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.standardizerTerm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      stringReader0.skip((-2569L));
      jSPredicateForm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm1.toStr();
      jSPredicateForm0.ensureCapacity((-1));
      // Undeclared exception!
      try { 
        jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "failed";
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ttype = (-1790544634);
      jSPredicateForm2.toStr();
      jSTerm0.ensureCapacity((-2028306831));
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm3.matches(jSPredicateForm1);
      jSTerm1.print();
      jSPredicateForm3.standarizerPredicateForm();
      JSJshopVars.dot = (-1790544634);
      jSPredicateForm3.toStr();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.equals(jSPredicateForm3);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm2.toStr();
      jSTerm0.ensureCapacity((-2028306831));
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm3.matches(jSPredicateForm1);
      jSTerm1.print();
      jSPredicateForm3.standarizerPredicateForm();
      jSTerm0.toStr();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.equals(jSPredicateForm3);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.iterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm0.toStr();
      jSTerm0.ensureCapacity(4);
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.clonePF();
      jSPredicateForm4.matches(jSPredicateForm3);
      jSPredicateForm4.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm2);
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm2);
      jSPredicateForm1.clonePF();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm2.toStr();
      jSTerm0.ensureCapacity((-2028306831));
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm3.matches(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSPredicateForm2.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[3];
      charArray0[2] = 'q';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.slash = 2126;
      jSPredicateForm0.trimToSize();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      stringReader0.skip(3);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      jSPredicateForm1.matches(jSPredicateForm2, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.ensureCapacity((-2028306831));
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      jSTerm0.add((Object) jSPredicateForm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm2.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.ensureCapacity((-2028306831));
      jSPredicateForm1.applySubstitutionPF(jSSubstitution2);
      jSTerm0.setSize(41);
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[3];
      charArray0[2] = 'q';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      stringReader0.skip(3);
      System.setCurrentTimeMillis(1586L);
      jSTerm0.clonePF();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toStr();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[3];
      charArray0[2] = 'q';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      stringReader0.skip(3);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2v%mzA7?=S6[AZm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip((-1));
      System.setCurrentTimeMillis((-1));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm1.equals(jSPredicateForm0);
      jSTerm1.toStr();
      jSTerm1.clonePF();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      jSTerm0.add(object0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      stringReader0.skip(1723L);
      System.setCurrentTimeMillis(41);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[3];
      charArray0[2] = 'q';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.addAll((Collection) jSTerm0);
      stringReader0.skip(3);
      System.setCurrentTimeMillis(1586L);
      jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      System.setCurrentTimeMillis(1761L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      jSTerm0.add((Object) jSPredicateForm1);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.set(1, streamTokenizer0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm0.ensureCapacity(41);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm3);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      String string0 = "o\\";
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4));
      unaryOperator0.apply(integer0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Integer integer1 = new Integer((-4));
      unaryOperator1.apply(integer1);
      jSTerm0.replaceAll(unaryOperator1);
      jSTerm0.matches(jSPredicateForm2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'u';
      charArray0[2] = 'q';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      stringReader0.skip(32);
      System.setCurrentTimeMillis(32);
      jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(8, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader1 = new StringReader("4_KEj");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.clonePF();
      jSPredicateForm3.ensureCapacity(1977);
      jSPredicateForm2.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm3);
      assertTrue(boolean0);
      
      jSPredicateForm0.standarizerPredicateForm();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      jSTerm0.add(object0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      int int0 = 1;
      jSTerm0.set(1, streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.ensureCapacity(1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.set(1, streamTokenizer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "Predicateform.print(): 0 elements";
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.parallelStream();
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      String string0 = "Avo/0t#_\\0p>Z( !&z~";
      StringReader stringReader0 = new StringReader("Avo/0t#_\u0000p>Z( !&z~");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      StringBuffer stringBuffer0 = jSPredicateForm3.toStr();
      assertEquals(22, stringBuffer0.length());
      
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = (-610);
      JSJshopVars.flagLevel = (-610);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.remove((-610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -610
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kpo 0kpaBG");
      StringReader stringReader1 = new StringReader("Kpo 0kpaBG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader2 = new StringReader("m!");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      jSPredicateForm1.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("( mhT ai");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.print();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSSubstitution0.add((Object) jSTerm2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      jSTerm0.removeElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(jSPredicateForm1);
      jSTerm0.add((Object) jSPredicateForm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSSubstitution1.add((Object) jSPredicateForm3);
      jSTerm0.matches(jSPredicateForm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm1, jSSubstitution2);
      StreamTokenizer streamTokenizer1 = null;
      try {
        streamTokenizer1 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm1.clone();
      jSSubstitution0.add(object0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm1.add((Object) jSPredicateForm0);
      jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2v%mzA7?=S6[AZm");
      String string0 = "7QuUN)A>bn9.Lmaq";
      StringReader stringReader1 = new StringReader("7QuUN)A>bn9.Lmaq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) streamTokenizer0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSSubstitution jSSubstitution1 = jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
      JSJshopVars.leftPar = (-2);
      jSPredicateForm3.toStr();
      jSPredicateForm2.standarizerPredicateForm();
      jSTerm1.toStr();
      jSTerm1.matches(jSPredicateForm2);
      jSTerm1.equals(jSPredicateForm3);
      StringReader stringReader2 = new StringReader("2v%mzA7?=S6[AZm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("#q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Gsdm~$G&vL");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|pjT/Znk-;A'vQLe");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.clone();
      jSSubstitution0.standarizerSubs();
      jSPredicateForm0.retainAll(jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      String string0 = "Avo/0t#_\\0p>Z( !&z~";
      StringReader stringReader0 = new StringReader("Avo/0t#_\u0000p>Z( !&z~");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      int int0 = 1605;
      // Undeclared exception!
      try { 
        jSTerm0.add(1605, (Object) "Avo/0t#_\u0000p>Z( !&z~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1605 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
