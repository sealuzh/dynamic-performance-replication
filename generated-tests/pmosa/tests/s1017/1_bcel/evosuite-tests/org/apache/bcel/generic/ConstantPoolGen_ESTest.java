/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 11:52:21 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LineNumberGen;
import org.apache.bcel.generic.LocalVariableInstruction;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-614L));
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger(3947);
      constantPoolGen0.adjustSize();
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(249);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-1865L));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupLong((-1L));
      constantPoolGen0.adjustSize();
      constantPoolGen0.getSize();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = null;
      typeArray0[3] = null;
      typeArray0[4] = null;
      typeArray0[5] = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jW,eSwyFsGQhJ:";
      stringArray0[1] = "}{hh/d(";
      stringArray0[2] = "";
      stringArray0[3] = "Xt[7uIj2\nl](]7,1";
      stringArray0[4] = "rt`4K3PAjFSg(";
      stringArray0[5] = "";
      stringArray0[6] = "hnM,^P>dy";
      String string0 = "";
      IFEQ iFEQ0 = new IFEQ();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFEQ0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-1), (Type) null, typeArray0, stringArray0, "", "", instructionList0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.lookupInterfaceMethodref("Expecting a CONSTANT_Class referencing an array type. [Constraint not found in The Java Virtual Machine Specification, Second Edition, 4.8.1]", "SENSITIVE", "SENSITIVE");
      constantPoolGen0.addString("SENSITIVE");
      constantPoolGen0.addFieldref("Expecting a CONSTANT_Class referencing an array type. [Constraint not found in The Java Virtual Machine Specification, Second Edition, 4.8.1]", "}^YucUB?+bk@Y;l %", "Expecting a CONSTANT_Class referencing an array type. [Constraint not found in The Java Virtual Machine Specification, Second Edition, 4.8.1]");
      constantPoolGen0.getConstant(0);
      constantPoolGen0.lookupInteger((-1));
      constantPoolGen0.getConstantPool();
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(", reference_index = ");
      constantPoolGen0.getFinalConstantPool();
      int int0 = Member.PUBLIC;
      int int1 = constantPoolGen0.lookupInterfaceMethodref("OL.u,`^\"<5xD(h&", "OL.u,`^\"<5xD(h&", ", class=");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("d?", "d?", "d?");
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, (String) null, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFieldref("$VALUES", "$VALUES", "$VALUES");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(132.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(482, (-2250));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 150);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2250
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = 106;
      constantPoolGen0.addInteger(106);
      Attribute[] attributeArray0 = new Attribute[4];
      int int1 = 0;
      int int2 = 167;
      String string0 = "";
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble((-1770.3057401769179));
      int int1 = constantPoolGen0.lookupMethodref("astore_1", "astore_1", "astore_1");
      assertTrue(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-27);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("NscjKpl=", "NscjKpl=", "NscjKpl=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("G8he");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat(2.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.getConstant(0);
      constantArray0[3] = null;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(238, 0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      constantInvokeDynamic0.setNameAndTypeIndex(2);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "Orp_y'T9(Pl%N";
      ArrayType arrayType0 = new ArrayType("Orp_y'T9(Pl%N", 2);
      constantPoolGen0.addArrayClass(arrayType0);
      constantPoolGen0.lookupUtf8("Orp_y'T9(Pl%N");
      int int0 = 1;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Orp_y'T9(Pl%N";
      String string1 = null;
      constantInvokeDynamic0.setNameAndTypeIndex((-1));
      Instruction instruction0 = null;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.lookupLong(0L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong(0L);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2101792504));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2101792504), 1706);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(255);
      constantArray0[2] = null;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(47, 47);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(202, 605);
      ConstantMethodHandle constantMethodHandle3 = new ConstantMethodHandle(constantMethodHandle2);
      constantArray0[4] = (Constant) constantMethodHandle3;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ClassPath classPath0 = new ClassPath("\n");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      syntheticRepository0.findClass("\n");
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      constantMethodHandle3.accept(descendingVisitor0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen1.addClass(objectType0);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-91), 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -91
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("AnnotationGen:[", "", "");
      constantPoolGen0.addInteger(5);
      constantPoolGen0.lookupFieldref("", (String) null, "#");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("#");
      constantPoolGen0.setConstant(245, constantUtf8_0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      constantMethodref1.setNameAndTypeIndex(3569);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupUtf8("h");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = " fields:\n%";
      constantPoolGen0.addString(" fields:\n%");
      constantPoolGen0.lookupFieldref(" fields:\n%", "\"eU-~l*Lg9nk0", " fields:\n%");
      String string1 = "<Unknown>";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string2 = "Unknown constant type ";
      constantPoolGen0.addInterfaceMethodref("\"eU-~l*Lg9nk0", "<Unknown>", "Unknown constant type ");
      constantPoolGen0.addFloat(2);
      constantPoolGen0.getConstantPool();
      ConstantLong constantLong0 = new ConstantLong(992L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPoolGen0.setConstant(2, constantLong1);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((Type) null, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-948.82F));
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.addDouble(1057.73);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals((-1), int0);
      
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1773);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(1773);
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(24, 24);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(24, 24);
      ConstantLong constantLong0 = new ConstantLong(24);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-41));
      constantPoolGen0.addLong((-1716L));
      constantPoolGen0.addString("fr#Pn/h");
      constantPoolGen0.addFloat(24);
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.lookupInteger(253);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1903), (-1903));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1903
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(0L);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(917.7084F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1087L);
      constantPoolGen0.lookupFloat(0.0F);
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", reference_index = ";
      stringArray0[1] = "s@6R77Z71NV?qXQ";
      stringArray0[2] = "~89Nl<`L";
      stringArray0[3] = "4].NF>RR";
      stringArray0[4] = ")&org.apache.bcel.generic.ConstantPoolGen&)";
      InstructionList instructionList0 = new InstructionList(aALOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, typeArray0, stringArray0, "~89Nl<`L", "Unknown constant type ", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy(",", constantPoolGen0);
      int int0 = constantPoolGen0.addMethodref(methodGen1);
      assertEquals(18, constantPoolGen0.getSize());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2028178999), (-2028178999));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      MethodGen methodGen0 = new MethodGen(18, basicType0, basicType0.NO_ARGS, stringArray0, "M\"Iq0Of#_E;k|$@r", "M\"Iq0Of#_E;k|$@r", instructionList1, constantPoolGen0);
      constantPoolGen1.lookupInterfaceMethodref(methodGen0);
      constantPoolGen1.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -2028178999, reference_index = -2028178999)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(220, (-1700));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1700
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.toString();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2799, 2799);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType0.setNameIndex(2799);
      int int0 = (-2320);
      constantNameAndType1.setNameIndex((-2320));
      constantNameAndType0.toString();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      constantPoolGen0.getFinalConstantPool();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2320
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(255);
      constantArray0[2] = null;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(47, 47);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(202, 605);
      ConstantMethodHandle constantMethodHandle3 = new ConstantMethodHandle(constantMethodHandle2);
      constantArray0[4] = (Constant) constantMethodHandle3;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("IPTK#3yc_t");
      constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = constantPoolGen0.addInterfaceMethodref("ior", "IPTK#3yc_t", "ior");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(408);
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(408);
      constantArray0[1] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(408);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.lookupInterfaceMethodref("Unexpected element value kind in annotation: ", "C", "(^M(+2'2O4!#u");
      int int0 = constantPoolGen2.addFloat((-942.1012F));
      assertEquals(4, constantPoolGen2.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1773);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.addFloat(1773);
      int int0 = constantPoolGen0.lookupFloat((-20.0F));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(229, 229);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      String string0 = "IPTK#3yc_t";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("IPTK#3yc_t");
      ConstantClass constantClass0 = new ConstantClass(2979);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2979
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Byte.SIZE;
      constantPoolGen0.addFieldref("7F?FJm#*c", "7F?FJm#*c", "7F?FJm#*c");
      int int1 = constantPoolGen0.index;
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      int int2 = constantPoolGen0.getSize();
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("#", "Uknownconstnt type ", "#");
      constantPoolGen0.addFieldref("A", "AnnotationGen:[", "A");
      constantPoolGen0.lookupFieldref("A", "A", "A");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.getSize();
      constantPoolGen1.getConstant(5);
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantFloat constantFloat0 = new ConstantFloat((-4220.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      
      constantPoolGen1.lookupFieldref("Class ", "if_acmpne", "Class ");
      int int0 = constantPoolGen1.lookupString("if_acmpne");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(256, 256);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bE~2*:4Y7|=|p:t");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("bE~2*:4Y7|=|p:t");
      constantArray0[2] = (Constant) constantUtf8_2;
      ConstantClass constantClass0 = new ConstantClass(256);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      int int0 = 256;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3, 256);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(2462);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-4527L));
      ConstantString constantString0 = new ConstantString(1);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.addDouble((-1.0));
      // Undeclared exception!
      try { 
        constantPoolGen1.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1982292596), 0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1982292596
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(1241);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      int int0 = Byte.SIZE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 8);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref1, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Byte.SIZE;
      constantPoolGen0.addFieldref("", "AnnotationGen:[", "");
      constantPoolGen0.lookupFieldref("", "", "");
      constantPoolGen0.addMethodref("H!)gN[LC&)AY", "AnnotationGen:[", "|/7_/TYoTp");
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen1.adjustSize();
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("#", "#", "#");
      constantPoolGen0.addString("9w~@2Lkrn`PpL]]");
      constantPoolGen0.lookupFieldref("A", "A", "A");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4, (-1656));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen2.lookupString("#");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }
}
