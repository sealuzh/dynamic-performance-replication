/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:20:10 GMT 2018
 */

package org.firebirdsql.encodings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.firebirdsql.encodings.Encoding;
import org.firebirdsql.encodings.EncodingFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncodingFactory_ESTest extends EncodingFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncodingFactory.getIscEncodingSize("2E");
      EncodingFactory.getEncoding("2E");
      EncodingFactory encodingFactory0 = new EncodingFactory();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncodingFactory.getIscEncodingSize((String) null);
      // Undeclared exception!
      EncodingFactory.getTranslator((String) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'K';
      charArray0[2] = '~';
      charArray0[3] = 'W';
      charArray0[4] = '@';
      charArray0[5] = 'f';
      charArray0[6] = 's';
      charArray0[7] = '.';
      Encoding encoding0 = EncodingFactory.getEncoding((String) null, charArray0);
      assertNotNull(encoding0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncodingFactory.getCharacterSetSize((-4540));
      EncodingFactory.getCharacterSetSize(1);
      EncodingFactory encodingFactory0 = new EncodingFactory();
      EncodingFactory.getIscEncodingSize("isc_encodings.properties");
      EncodingFactory.getJavaEncoding("isc_encoding_size.properties");
      EncodingFactory.getCharacterSetSize(1);
      EncodingFactory.getJavaEncodingForAlias((String) null);
      EncodingFactory.getJavaEncoding("vg~n7y2SUyzK]Oz#P$9");
      EncodingFactory.createEncoding("");
      EncodingFactory.getJavaEncodingForAlias("M(am-,");
      // Undeclared exception!
      EncodingFactory.getTranslator((String) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncodingFactory encodingFactory0 = new EncodingFactory();
      String string0 = EncodingFactory.getIscEncoding("Cp850");
      assertNotNull(string0);
      assertEquals("DOS850", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = EncodingFactory.getJavaEncoding("01S00");
      assertNull(string0);
      
      EncodingFactory encodingFactory0 = new EncodingFactory();
      String string1 = EncodingFactory.getJavaEncodingForAlias("ISO8859_9");
      assertNotNull(string1);
      assertEquals("ISO-8859-9", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncodingFactory encodingFactory0 = new EncodingFactory();
      EncodingFactory.getEncoding("");
      String string0 = EncodingFactory.getJavaEncoding("ox");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncodingFactory.getEncoding("DOS865");
      String string0 = EncodingFactory.ISC_ENCODING_SIZE_RESOURCE;
      String string1 = EncodingFactory.getJavaEncoding((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncodingFactory.getJavaEncodingForAlias((String) null);
      int int0 = EncodingFactory.getIscEncodingSize((String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncodingFactory.getCharacterSetSize(0);
      EncodingFactory.getIscEncoding("isc_encodings.properties");
      EncodingFactory.getCharacterSetSize((-2033));
      EncodingFactory.getEncoding("Y@");
      String string0 = EncodingFactory.getIscEncoding("Y@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = EncodingFactory.ISC_ENCODING_SIZE_RESOURCE;
      EncodingFactory.getIscEncoding((String) null);
      String string1 = EncodingFactory.getJavaEncoding((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "]!B*";
      EncodingFactory.getIscEncoding("]!B*");
      EncodingFactory.getIscEncoding((String) null);
      String string1 = "<X;R[f!MO";
      EncodingFactory.getJavaEncoding("<X;R[f!MO");
      String string2 = "25000";
      EncodingFactory.getEncoding("25000", (char[]) null);
      EncodingFactory encodingFactory0 = new EncodingFactory();
      EncodingFactory.getIscEncodingSize((String) null);
      // Undeclared exception!
      EncodingFactory.getEncoding("", "<X;R[f!MO");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncodingFactory.getIscEncodingSize("Incorrect mapping format. Mapped value should consist only of single character, but ");
      EncodingFactory.getCharacterSetSize(0);
      String string0 = null;
      EncodingFactory.getEncoding((String) null);
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      EncodingFactory.getEncoding((String) null, charArray0);
      EncodingFactory.getCharacterSetSize(1);
      EncodingFactory.getIscEncoding("Incorrect mapping format. Mapped value should consist only of single character, but ");
      EncodingFactory.getIscEncodingSize("Incorrect mapping format. Mapped value should consist only of single character, but ");
      // Undeclared exception!
      EncodingFactory.getTranslator((String) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncodingFactory.getIscEncodingSize("ISO8859_6");
      EncodingFactory.getJavaEncodingForAlias("U=S;l");
      EncodingFactory.getEncoding("-Z_,fpM", (char[]) null);
      String string0 = "Cp861";
      EncodingFactory.getJavaEncoding("Cp861");
      // Undeclared exception!
      EncodingFactory.getEncoding("U=S;l", "puGw{");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "CnAcl}Gg\\dX8tVOi5:";
      EncodingFactory.createEncoding("CnAcl}GgdX8tVOi5:");
      EncodingFactory.getJavaEncodingForAlias("Cp863");
      EncodingFactory.getEncoding("CnAcl}GgdX8tVOi5:");
      EncodingFactory.getEncoding("CnAcl}GgdX8tVOi5:");
      // Undeclared exception!
      EncodingFactory.getTranslator("Cp863");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncodingFactory.getCharacterSetSize((-4540));
      EncodingFactory.getCharacterSetSize(1);
      EncodingFactory encodingFactory0 = new EncodingFactory();
      EncodingFactory.getEncoding("isc_encodings.properties", encodingFactory0.DEFAULT_MAPPING);
      String string0 = "DOS866";
      EncodingFactory.getJavaEncoding("DOS866");
      // Undeclared exception!
      EncodingFactory.getEncoding("isc_encodings.properties", "Cp775");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[10];
      EncodingFactory.createEncoding("01S06");
      String string0 = EncodingFactory.getJavaEncoding("ISO8859_7");
      assertNotNull(string0);
      assertEquals("ISO-8859-7", string0);
  }
}
