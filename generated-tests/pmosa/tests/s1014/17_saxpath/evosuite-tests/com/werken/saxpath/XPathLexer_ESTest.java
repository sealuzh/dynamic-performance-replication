/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:41:40 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("");
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      xPathLexer0.hasMoreChars();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.isIdentifierStartChar(' ');
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.consume();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.number();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.number();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("5juIspV");
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('|');
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifier();
      assertEquals("Ij", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("2", token4.getTokenText());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("!", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("j", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.consume();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('*');
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.setXPath("}{~~d");
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("~", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.consume();
      xPathLexer0.LA(1559);
      xPathLexer0.setXPath("}{~~d");
      xPathLexer0.and();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("}", token7.getTokenText());
      
      char char0 = xPathLexer0.LA(604);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("[", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("`", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.getXPath();
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierStartChar('V');
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.consume(0);
      assertEquals("6+Q59zh(X)Z>[", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("~R!");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!bk@\">I- $*Lbv0Y");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      xPathLexer0.setXPath("");
      Token token2 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      xPathLexer0.consume(8);
      token0.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.mod();
      xPathLexer0.consume(1547);
      xPathLexer0.consume();
      token1.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.leftParen();
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("6", token0.getTokenText());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q59zh", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("(X", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(")", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("+", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      Token token8 = xPathLexer0.minus();
      assertEquals("z", token8.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.slashes();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.dots();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(18, int0);
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
      
      Token token14 = xPathLexer0.dots();
      assertEquals(13, token14.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('V');
      xPathLexer0.consume();
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
      
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token16 = xPathLexer0.rightParen();
      assertEquals("6", token16.getTokenText());
      assertEquals(2, token16.getTokenType());
      
      Token token17 = xPathLexer0.identifierOrOperatorName();
      assertNull(token17);
      
      Token token18 = xPathLexer0.leftParen();
      assertEquals(1, token18.getTokenType());
      assertEquals("+", token18.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mXux,c_6v,iQ");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setXPath("5$J-\"m1ziHm@/ib)=e");
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.not();
      xPathLexer1.div();
      xPathLexer1.literal();
      xPathLexer0.rightBracket();
      xPathLexer1.consume((-1215));
      xPathLexer1.setPreviousToken((Token) null);
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("g(t<^b7 b_kz_v");
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer1.rightParen();
      xPathLexer1.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer1.minus();
      xPathLexer0.literal();
      xPathLexer1.slashes();
      xPathLexer1.minus();
      xPathLexer1.dots();
      xPathLexer1.star();
      xPathLexer1.currentPosition();
      xPathLexer1.dollar();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.identifier();
      xPathLexer1.dots();
      xPathLexer2.isIdentifierStartChar('g');
      xPathLexer1.consume();
      xPathLexer2.slashes();
      xPathLexer2.setXPath("");
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer1.consume((-1392));
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Ru");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("Ru", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      token1.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (21) ([)", string1);
      
      Token token3 = xPathLexer0.colon();
      assertEquals("H", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("*", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("d", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token1.toString();
      assertEquals("[ (21) ([)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (3) (P)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) (P)");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("H", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("T", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("P4");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("P4", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I_BC");
      Token token0 = xPathLexer0.at();
      assertEquals("1", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("\tpCOD#3e!UCGB1'<]F");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("\tp", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("COD", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.consume(28);
      xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(5, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("N5T", token1.getTokenText());
      
      int int1 = xPathLexer0.currentPosition();
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<HfNl|");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("l", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.setXPath("1tsP\"&H");
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.slashes();
      assertEquals("t", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("sP", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("\"&", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("H", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z~2dWd<jWN .;R");
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.identifier();
      assertEquals("z", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.literal();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.consume(46);
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('B');
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.setXPath("z~2dWd<jWN .;R");
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("~", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals("2", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("d", token10.getTokenText());
      
      Token token11 = xPathLexer0.star();
      assertEquals("W", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertNotSame(token12, token2);
      
      Token token13 = xPathLexer0.equals();
      assertEquals("d", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("j<2l!j", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|3DG,vi98k");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("|", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.setXPath("cN5T!");
      xPathLexer1.operatorName();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("cN5T!");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("cN5T", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.and();
      Token token0 = xPathLexer0.colon();
      assertEquals(")", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".*Bhe)H#7<@0;1W");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      Token token1 = xPathLexer0.number();
      assertEquals(".", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("I", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q8!DOV");
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.endPosition();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.consume(99);
      xPathLexer0.star();
      xPathLexer0.getXPath();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("XLNh0k%>D6");
      assertEquals("XLNh0k%>D6", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" w");
      xPathLexer0.and();
      Token token0 = xPathLexer0.colon();
      assertEquals(" ", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("w", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I_BC");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("I_", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("BC", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      token1.toString();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("[ (15) (.Ij)");
      assertEquals("[ (15) (.Ij)", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.comma();
      token3.toString();
      token0.toString();
      String string1 = token3.toString();
      assertEquals("[ (32) (*)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (15) (E7)", string2);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I_BC");
      Token token0 = xPathLexer0.pipe();
      assertEquals("1", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("_", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("1I_BC");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("1I", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("_BC", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.setXPath("1tsP\"&H");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("tsP", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("\"&", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.and();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("9", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token4 = xPathLexer0.leftParen();
      assertEquals("6", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("+", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(13, int0);
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Q59zh", token7.getTokenText());
      
      int int1 = xPathLexer0.currentPosition();
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("cN5T!");
      xPathLexer1.minus();
      xPathLexer1.leftParen();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      int int0 = xPathLexer2.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("8~I");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      XPathLexer xPathLexer1 = new XPathLexer("s.Ij<2l!j");
      XPathLexer xPathLexer2 = new XPathLexer("7ZgDs_hd,");
      xPathLexer2.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.and();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I_BC");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("I", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("_B", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("C", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "cN5T!";
      XPathLexer xPathLexer0 = new XPathLexer("aL/1AVFri}aR_|h(");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      int int0 = 1735;
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z~2dWd<jWN .;R");
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.star();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("2", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Wd", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("<j", token2.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.consume(46);
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('B');
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.setXPath("z~2dWd<jWN .;R");
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.rightParen();
      assertEquals("z", token10.getTokenText());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("~", token11.getTokenText());
      
      xPathLexer0.rightParen();
      Token token12 = xPathLexer0.pipe();
      assertEquals("d", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals("W", token13.getTokenText());
      assertEquals(20, token13.getTokenType());
      
      xPathLexer0.nextToken();
      int int1 = xPathLexer0.currentPosition();
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setXPath("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.minus();
      token2.toString();
      xPathLexer0.number();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("E7[PH*d`G'");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setXPath("5$J-\"m1ziHm@/ib)=e");
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (19) (5$)", string0);
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.operatorName();
      String string1 = token0.toString();
      assertEquals("[ (26) (5)", string1);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("m1ziHm@/ib)=e", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.div();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("m", token6.getTokenText());
      
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("h3&Cu_iLdbQxFke?##");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.at();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.endPosition();
      xPathLexer1.nextToken();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I_BC");
      XPathLexer xPathLexer1 = new XPathLexer("1I_BC");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer1.slashes();
      String string0 = token0.toString();
      assertEquals("[ (11) (5)", string0);
      
      Token token1 = new Token(109, "", 0, 0);
      token1.toString();
      token1.toString();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      xPathLexer1.slashes();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.and();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (22) (Q5)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("X)Z>[", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(" (", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("qVjKt5");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("qVjKt5", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("`fyqH)I6h");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("`fyqH)I6h", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer1.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer1.slashes();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (5)", string0);
      
      Token token1 = new Token(109, "", 0, 0);
      xPathLexer0.slashes();
      token1.toString();
      token1.toString();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer1.slashes();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("J-", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("h3&Cu_iLdbQxFke?##");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("h", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.minus();
      assertEquals("N", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (c)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("^BIfv");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("^BIfv", token2.getTokenText());
      
      xPathLexer2.slashes();
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.setXPath("5$J-\"m1ziHm@/ib)=e");
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (19) (5$)", string0);
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      String string1 = token0.toString();
      assertEquals("[ (26) (5)", string1);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("1z", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer1.div();
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.setXPath("M=b+");
      XPathLexer xPathLexer2 = new XPathLexer();
      int int0 = xPathLexer2.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.getXPath();
      xPathLexer1.doubleColon();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("b", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.getXPath();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(")", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(" ", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      XPathLexer xPathLexer1 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      xPathLexer0.and();
      Token token0 = xPathLexer1.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer1.notEquals();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (22) (P{)", string0);
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("OP", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (P{)");
      Token token4 = xPathLexer2.slashes();
      assertEquals("[", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("{mQ(5 6?G=QWlyw%U", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Ij", token1.getTokenText());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.colon();
      String string0 = token2.toString();
      assertEquals("[ (18) (2)", string0);
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("!", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertEquals("j", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (11) (s)");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("Nu2UhyZzd");
      xPathLexer1.at();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer(",~y09ok)A!u_5u");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(32, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c5ST!");
      Token token0 = xPathLexer0.at();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.colon();
      assertEquals("5", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (16) (c)", string0);
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("ST", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("!", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("MQQKD$sbsh;BEAEXU+");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("MQQKD", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("$s", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.currentPosition();
      xPathLexer1.operatorName();
      xPathLexer0.consume();
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z~>[");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("6", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.comma();
      assertEquals("Q", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.setXPath("|DG,vi8k");
      xPathLexer1.operatorName();
      int int0 = xPathLexer1.endPosition();
      assertEquals(8, int0);
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("|", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("6+Q59zh(X)Z~>[");
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("D", token3.getTokenText());
      
      boolean boolean0 = xPathLexer2.isIdentifierChar('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("toX{p8S0{>^");
      Token token0 = xPathLexer0.not();
      assertEquals("t", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("oX", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("ew");
      xPathLexer1.nextToken();
      xPathLexer0.or();
      xPathLexer1.number();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("xgV");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("cN5T!");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("gV", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("xgV");
      XPathLexer xPathLexer2 = new XPathLexer("cN5T!");
      XPathLexer xPathLexer3 = new XPathLexer("xgV");
      Token token1 = xPathLexer3.nextToken();
      assertEquals("xgV", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("f7[PH*d`?q");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      String string0 = token1.toString();
      assertEquals("[ (26) ($)", string0);
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals("J-", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("5", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("5", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("J-", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("1z", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.isIdentifierChar('D');
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer2.setXPath("5$J-\"m1ziHm@/ib)=e");
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      Token token10 = xPathLexer0.slashes();
      assertEquals(12, token10.getTokenType());
      assertEquals("@/", token10.getTokenText());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("i", token11.getTokenText());
      
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.at();
      assertEquals("s", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(32, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Ij", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ia2lC");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals(".I", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("a2lC", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("MQQKD$sbsh;BEAEXU+");
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer1.literal();
      assertEquals("", token2.getTokenText());
      assertEquals(27, token2.getTokenType());
      assertNotNull(token2);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".Q[c17.,']PY");
      Token token0 = xPathLexer0.colon();
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.at();
      Token token3 = xPathLexer0.slashes();
      assertEquals("1", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.plus();
      assertEquals("7", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(",", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(12, int0);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.consume(12);
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")N^JY7*b");
      Token token0 = xPathLexer0.plus();
      String string0 = token0.toString();
      assertEquals("[ (5) ())", string0);
      
      Token token1 = xPathLexer0.colon();
      assertEquals("N", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("^J", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Y7", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(")N^JY7*b");
      xPathLexer1.plus();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z1-B9MF_=p)`XU pf");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("5", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("$J", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals("$", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer2.rightParen();
      xPathLexer2.setXPath("5$J-\"m1ziHm@/ib)=e");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      xPathLexer1.getXPath();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("-", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      assertNotNull(token4);
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("m", token5.getTokenText());
      
      xPathLexer1.rightParen();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("-", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer1.isIdentifierChar('o');
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("\"", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]&QB7(0");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("&QB7(0", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer1.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (30) (5)", string0);
      
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("$J", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("-", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".Q[c17.,']PY");
      Token token0 = xPathLexer0.colon();
      assertEquals(".", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Q", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("c", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("7.", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
      
      Token token6 = xPathLexer0.dots();
      assertEquals(",", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("]", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ia2lC");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (14) (s.)", string0);
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("a2lC", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$@\"z56_M?us");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r&+rBxC9Vux9=uy(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9y!3G./cz,J");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("y", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^FL*]cMx{J:(3l^Pc'");
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer1.star();
      xPathLexer1.or();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("KKuc'iwMy");
      xPathLexer2.nextToken();
      boolean boolean0 = xPathLexer2.isIdentifierChar('s');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.j<2l!j");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.literal();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A2lCjCd^sY;");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.literal();
      String string0 = token0.toString();
      assertEquals("[ (22) (A2)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z~2dWd<jWN .;R");
      xPathLexer0.div();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.star();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("d", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Wd", token3.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("WN", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(" ", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      XPathLexer xPathLexer1 = new XPathLexer("gUva5M=Saf0q+");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Uva5M", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k>35kv*`9Zx/Z");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("MQQKD$sbsh;BEAEXU+");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("MQQKD", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"3LsN&EH-k4-,G");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("LsN&EH-k4-,G", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2ViD#cH;w");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("2", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("ViD#cH;w", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*H#7'EIg0:r#*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8A+vI[S-xD}");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("A", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0=");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("=", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iz~njRD");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("iz", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6MV1ntF!A YKlRw#Pc");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getXPath();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vI_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("vI_", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%8PRomF");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">MtaWz#c;nDBb3R?yeV");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?ZI_BC");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(":F`798YNM<ZxG@~");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.getPreviousToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uk:N-~{mA$5(");
      Token token0 = xPathLexer0.identifier();
      assertEquals("uk", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("~{", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("m", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("A", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("$", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.setXPath("uk:N-~{mA$5(");
      char char0 = xPathLexer0.LA(28);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("u", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals("k", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(":", token11.getTokenText());
      
      xPathLexer0.operatorName();
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      assertEquals("N", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("o");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("toX{p8S0{>^");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("K'c/7TOl^:g)g");
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("K", token0.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer1.slashes();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("toX{p8S0{>^");
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.number();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierChar('w');
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer1.dollar();
      xPathLexer0.setXPath("toX{p8S0{>^");
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.slashes();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('<');
      xPathLexer1.doubleColon();
      xPathLexer0.at();
      xPathLexer1.dollar();
      xPathLexer1.at();
      xPathLexer0.setXPath("?qG#)g5;/Vp uzA");
      xPathLexer1.endPosition();
      xPathLexer1.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer1.star();
      xPathLexer0.setXPath("?qG#)g5;/Vp uzA");
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("toX{p8S0{>^");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("toX{p8S0{>^");
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("t", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer1.dollar();
      assertEquals("o", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("oX", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("p8", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals("S", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("0", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4 >");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" 'X4kh;R+R");
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CQ");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Q", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aQ");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("nzJ:!S");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("nzJ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("-sRaCN`26;");
      Token token0 = xPathLexer1.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = new Token(29, "-sRaCN`26;", (-192), 29);
      xPathLexer1.setPreviousToken(token1);
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("-sRaCN", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("7/I3Ug@&a");
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y.x<2l{j");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = new Token(8, ") (", 22, 22);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(24, "l.M)EV9ktRj", (-2343), 24);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Token token0 = new Token(12, "", 22, 22);
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }
}
