/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:06:14 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String> list0 = rE2_0.findAll("", 0);
      assertNull(list0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("\"@i,dOC\"<");
      rE2_0.put((Machine) null);
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst("\"@i,dOC\"<", "\"@i,dOC\"<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2.compilePOSIX("!uArLKa*");
      String string0 = RE2.quoteMeta("!uArLKa*");
      assertEquals("!uArLKa\\*", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.toString();
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte) (-3));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String> list0 = rE2_0.findAll("", 561);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", (-647));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("can't happen", 1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = RE2.match("com.google.re2j.RE2", "com.google.re2j.RE2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Z!erWW42?}FvsD0&J");
      assertNotNull(rE2_0);
      assertEquals("Z!erWW42?}FvsD0&J", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("Z!erWW42?}FvsD0&J");
      assertNull(intArray0);
      assertEquals("Z!erWW42?}FvsD0&J", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("A9");
      assertNotNull(rE2_0);
      assertEquals("A9", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("A9", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 561);
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("A9", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("~A^tl");
      assertNotNull(rE2_0);
      assertEquals("~A^tl", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("~A^tl", 1215);
      assertNull(list0);
      assertEquals("~A^tl", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("6");
      assertNotNull(rE2_0);
      assertEquals("6", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("6", (-661));
      assertNotNull(list0);
      assertEquals("6", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = RE2.match(";0}.~9V03e", "(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("f}u_]");
      assertNotNull(rE2_0);
      assertEquals("f}u_]", rE2_0.toString());
      
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertEquals("f}u_]", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("!uArLKa*");
      assertNotNull(rE2_0);
      assertEquals("!uArLKa*", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("!uArLKa*", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("FJ7RX2bK +,*<");
      assertNotNull(rE2_0);
      assertEquals("FJ7RX2bK +,*<", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("o{@5%=w}>}03h72+k`", 10);
      assertNull(list0);
      assertEquals("FJ7RX2bK +,*<", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match("", 1720, 1720, 2043, (int[]) null, 1720);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      int[] intArray0 = new int[8];
      intArray0[1] = (-37);
      intArray0[2] = 849;
      intArray0[4] = 849;
      intArray0[6] = (-37);
      intArray0[7] = (-37);
      boolean boolean0 = rE2_0.match("UTF-8", (-37), (-37), (-37), intArray0, 0);
      assertArrayEquals(new int[] {0, (-37), 849, 0, 849, 0, (-37), (-37)}, intArray0);
      assertFalse(boolean0);
      assertEquals("UTF-8", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("RPl");
      assertNotNull(rE2_0);
      assertEquals("RPl", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("RPl");
      assertNotNull(stringArray0);
      assertEquals("RPl", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 20);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("H3VO_m1A=uA2.bi0a");
      assertNotNull(rE2_0);
      assertEquals("H3VO_m1A=uA2.bi0a", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-104);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-104));
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-104)}, byteArray0);
      assertEquals("H3VO_m1A=uA2.bi0a", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 401);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("tGS}");
      assertNotNull(rE2_0);
      assertEquals("tGS}", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("!w", 32);
      assertNull(list0);
      assertEquals("tGS}", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mYszCe?fae:lU<");
      assertNotNull(rE2_0);
      assertEquals("mYszCe?fae:lU<", rE2_0.toString());
      
      String string0 = rE2_0.find("mYszCe?fae:lU<");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("mYszCe?fae:lU<", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", (-2521));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("~Ad^rl");
      assertNotNull(rE2_0);
      assertEquals("~Ad^rl", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("~Ad^rl");
      assertNull(stringArray0);
      assertEquals("~Ad^rl", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("Old_Italic", 5, false);
      assertNotNull(rE2_0);
      assertEquals("Old_Italic", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("Old_Italic", 8490, 5, 8490, (int[]) null, 8490);
      assertFalse(boolean0);
      assertEquals("Old_Italic", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("9VLElDIo|");
      assertNotNull(rE2_0);
      assertEquals("9VLElDIo|", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("9VLElDIo|", "9VLElDIo|");
      assertNotNull(string0);
      assertEquals("9VLElDIo||", string0);
      assertEquals("9VLElDIo|", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = RE2.quoteMeta("Unified_Ideograph");
      assertNotNull(string0);
      assertEquals("Unified_Ideograph", string0);
      
      RE2 rE2_0 = new RE2("Unified_Ideograph");
      assertNotNull(rE2_0);
      assertEquals("Unified_Ideograph", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("Unified_Ideograph", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)0);
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("&&+3CK7:cS2J");
      assertNotNull(rE2_0);
      assertEquals("&&+3CK7:cS2J", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-5));
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("&&+3CK7:cS2J", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("&&+3CK7:cS2J", string0);
      assertEquals("&&+3CK7:cS2J", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("oT");
      assertNotNull(rE2_0);
      assertEquals("oT", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("oT", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.find("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("1v#!Fr,DnhmQgt");
      assertNotNull(rE2_0);
      assertEquals("1v#!Fr,DnhmQgt", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("1v#!Fr,DnhmQgt");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 14}, intArray0);
      assertEquals("1v#!Fr,DnhmQgt", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Z!erWW42?}FvsD0&J");
      assertNotNull(rE2_0);
      assertEquals("Z!erWW42?}FvsD0&J", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("Z!erWW42?}FvsD0&J");
      assertNull(intArray0);
      assertEquals("Z!erWW42?}FvsD0&J", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = new RE2("-]");
      assertNotNull(rE2_0);
      assertEquals("-]", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals("-]", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-5), true);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("~A^tl");
      assertNotNull(rE2_0);
      assertEquals("~A^tl", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("~A^tl", "3v.yNnn");
      assertNotNull(string0);
      assertEquals("~A^tl", string0);
      assertEquals("~A^tl", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("n_c", "");
      assertNotNull(string0);
      assertEquals("n_c", string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-1596), true);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1596));
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("can't happen", string0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-210));
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte) (-128)}, byteArray0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("]8,Hb8<NL");
      assertNotNull(rE2_0);
      assertEquals("]8,Hb8<NL", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("]8,Hb8<NL", "]8,Hb8<NL");
      assertNotNull(string0);
      assertEquals("]8,Hb8<NL", string0);
      assertEquals("]8,Hb8<NL", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll("@*", "f");
      assertNotNull(string1);
      assertEquals("", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)0;
      String string0 = rE2_0.replaceFirst("tUv>=Fa2Z", "tUv>=Fa2Z");
      assertNotNull(string0);
      assertEquals("tUv>=Fa2ZtUv>=Fa2Z", string0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.prefix;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("tUv>=Fa2ZtUv>=Fa2Z", (byte)0, 2523, 2523, (int[]) null, 753);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("9VLElDIo|");
      assertNotNull(rE2_0);
      assertEquals("9VLElDIo|", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("9VLElDIo|", (-1219));
      assertNotNull(list0);
      assertEquals("9VLElDIo|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      RE2 rE2_1 = RE2.compile("0");
      assertNotNull(rE2_1);
      assertEquals("0", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotSame(rE2_1, rE2_0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte byte0 = (byte)21;
      byte[] byteArray0 = new byte[18];
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.replaceFirst("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
      
      machine0.init((byte)0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = machine0.submatches();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", rE2_0.toString());
      
      int int0 = RE2.POSIX;
      assertEquals(0, int0);
      
      String string2 = "Noncaracter_Code_Point";
      String string3 = rE2_0.prefix;
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match("Noncaracter_Code_Point", 0, 2523, 2523, intArray0, (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("9VLElDIo|");
      assertNotNull(rE2_0);
      assertEquals("9VLElDIo|", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("9VLElDIo|");
      assertNotNull(string0);
      assertEquals("9VLElDIo\\|", string0);
      
      String string1 = rE2_0.replaceAll("9VLElDIo|", "9VLElDIo|");
      assertNotNull(string1);
      assertEquals("9VLElDIo||9VLElDIo|", string1);
      assertEquals("9VLElDIo|", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = rE2_0.findSubmatch("9VLElDIo|");
      assertNotNull(stringArray0);
      assertEquals("9VLElDIo|", rE2_0.toString());
      
      String string2 = rE2_0.replaceFirst("", "9VLElDIo|");
      assertNotNull(string2);
      assertEquals("9VLElDIo|", string2);
      assertEquals("9VLElDIo|", rE2_0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        rE2_0.findSubmatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }
}
