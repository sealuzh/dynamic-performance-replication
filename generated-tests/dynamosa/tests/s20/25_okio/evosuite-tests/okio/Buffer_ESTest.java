/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:25:42 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((byte)7);
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-80));
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      long long0 = buffer0.indexOfElement(byteString0, 2L);
      assertEquals(4L, buffer0.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.indexOf((byte)19, 9223372036854775807L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(16711680L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(238144L);
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(1000L);
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10);
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57343);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(32L);
      buffer_UnsafeCursor0.buffer.writeShort((-2147221246));
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=0033320102\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1628L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.writeShortLe((byte)71);
      realBufferedSource0.buffer.writeShort(8192);
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=47002000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(4294967295L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.close();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("]");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Segment segment0 = buffer1.head;
      SegmentPool.next = segment0;
      realBufferedSink0.writeHexadecimalUnsignedLong(1000000000L);
      buffer1.writeUtf8CodePoint(128);
      assertEquals((-8L), buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8(".outputStream()", 2, 2);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor1);
      assertEquals(999424L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeUtf8("R{#a.7(s~l>=3");
      assertEquals(999424L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.size = (long) (-1);
      buffer_UnsafeCursor0.buffer.writeUtf8("Expected leading [0-9] or '-' character but was 0x");
      assertEquals(49L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("]");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Segment segment0 = buffer1.head;
      SegmentPool.next = segment0;
      realBufferedSink0.buffer.writeShortLe(1648);
      assertEquals((-2L), buffer1.completeSegmentByteCount());
      assertEquals((-2L), buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      buffer_UnsafeCursor0.buffer.writeLong(100000000L);
      assertEquals(999424L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.size = (long) (byte)114;
      buffer1.writeIntLe(83);
      assertEquals(118L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(1426L);
      Buffer buffer2 = buffer1.clone();
      buffer2.writeInt(2562);
      assertEquals(12L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("]");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Segment segment0 = buffer1.head;
      SegmentPool.next = segment0;
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000000000L);
      assertFalse(buffer0.exhausted());
      assertEquals((-8L), buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-2320L));
      assertEquals(999424L, buffer0.completeSegmentByteCount());
      assertEquals(1000005L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = buffer0.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeUtf8("Y");
      assertFalse(buffer1.exhausted());
      
      long long0 = realBufferedSink0.buffer.writeAll(buffer1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShortLe(11);
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer.write(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.writableSegment(3422);
      assertNotNull(segment0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      long long0 = realBufferedSource0.buffer.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1000000L);
      long long0 = buffer0.size();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.buffer.select(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer_UnsafeCursor0.buffer.readUtf8Line(0L);
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount < 0: ");
      buffer0.readUtf8();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer_UnsafeCursor0.buffer.readString(charset0);
      assertTrue(buffer0.exhausted());
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((-3856L));
      short short0 = buffer1.readShortLe();
      assertEquals(3L, buffer1.size());
      assertEquals((short)13101, short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeIntLe(65536);
      assertTrue(buffer0.exhausted());
      
      short short0 = realBufferedSink0.buffer.readShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeShortLe(1676);
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShort();
      assertEquals((short) (-29690), short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(8075);
      long long0 = buffer_UnsafeCursor0.buffer.readLongLe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1426L);
      long long0 = buffer1.readLongLe();
      assertEquals((-7924927969288519680L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(508L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer0.readLong();
      assertEquals((-287948901175001088L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      int int0 = buffer0.readIntLe();
      assertEquals(999420L, buffer0.completeSegmentByteCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1145L));
      int int0 = buffer0.readIntLe();
      assertFalse(buffer0.exhausted());
      assertEquals(875639085, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(0L);
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeDecimalLong((-425L));
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (short)11572, (byte) (-21));
      Buffer buffer1 = realBufferedSource0.buffer.readFrom((InputStream) byteArrayInputStream0);
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeIntLe(1804);
      buffer1.readShort();
      byte byte0 = buffer0.readByte();
      assertEquals(1L, buffer0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.write(byteArray0);
      long long0 = buffer1.readAll(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("]");
      assertEquals(1L, buffer0.size());
      
      byte[] byteArray0 = new byte[6];
      int int0 = buffer1.read(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(2290L);
      long long0 = realBufferedSink0.buffer.read(buffer0, 71776119061217281L);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      long long0 = buffer1.indexOf((byte)49);
      assertEquals(18L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(922337203685477L);
      Buffer buffer1 = realBufferedSink0.buffer.emitCompleteSegments();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.size = (long) (-1);
      buffer_UnsafeCursor0.resizeBuffer(1L);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2570);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775786L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint((byte)0);
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-2133));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("", 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) dataOutputStream0, (-4377L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-4377
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("= VFI[#", charset0);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(894L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeString("", charset0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(2012L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeString("", 514, (-210), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -210 < 514
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShortLe(0);
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-419));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(181L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe((byte) (-8));
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(0L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-1795L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-3629));
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(3273L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer.writeInt(0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong((byte)0);
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(1357L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(63);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeByte((-222));
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1586L);
      byte[] byteArray0 = buffer1.readByteArray();
      buffer0.write(byteArray0);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      BufferedSink bufferedSink0 = buffer0.write((Source) realBufferedSource0, 0L);
      assertSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write(buffer0, (-31L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-31
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2666
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.skip((byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-80));
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.require(0L);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.require((-1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(181L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      String string0 = realBufferedSource0.buffer.readUtf8(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(deflaterSink0, byteString0);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readString((-2657L), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2657
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.readFully(byteArray0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(deflaterSink0, byteString0);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFully(realBufferedSink0.buffer, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer_UnsafeCursor0.buffer, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString((long) (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte) (-96));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-96
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.readAll((Sink) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (-2897), (-2897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2897 byteCount=-2897
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.buffer.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(2012L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.read(buffer0, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.writeDecimalLong(9223372036854775807L);
      long long0 = buffer0.read(realBufferedSink0.buffer, 132L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.rangeEquals(1L, (ByteString) null, 2, (int) (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = realBufferedSink0.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOf(byteString0, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-111), 1095216660480L, (long) (byte) (-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1095216660480 toIndex=-111
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (-8L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-8 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775786L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.indexOf((byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.getByte(6168L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=6168 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer_UnsafeCursor0.buffer, (-1L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(realBufferedSink0.buffer, 8L, 1130L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=8 byteCount=1130
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(678);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 0L, (-1242L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-1242
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) pipedOutputStream0, 18L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=18
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(11);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[1];
      Segment segment0 = new Segment(byteArray0, (-299), (-778), false, false);
      realBufferedSource0.buffer.head = segment0;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeIntLe(1124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write((Source) null, 32L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(9223372036854775807L);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.write((Source) realBufferedSink0.buffer, 4104L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      buffer0.writeUtf8("timeout == null");
      try { 
        buffer0.write((Source) inflaterSource0, 1367L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write(realBufferedSource0.buffer, 16711680L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=16711680
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2L);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 172608L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(98919L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString(684L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=684
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(3288L);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFully(realBufferedSource0.buffer, (-1789L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1789
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      try { 
        buffer0.readFully(realBufferedSink0.buffer, (long) 3422);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(242);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 15L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer.writeDecimalLong(992L);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      realBufferedSource0.buffer.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-117L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(3288L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer_UnsafeCursor0.buffer.readFrom(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(729L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteArray(729L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=729
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, 2681, 2137939276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 116, (-2358));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=116 byteCount=-2358
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.rangeEquals((-177L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(255L);
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      // Undeclared exception!
      buffer0.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(71776119061217280L);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 1000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte) (-40), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.getByte((-1789L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1789 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot((int) (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.buffer.rangeEquals((-421L), byteString0, (-4546), (int) (byte)57);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals(2L, byteString0, 62, 62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(117L);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("limit < 0: ", charset0);
      long long0 = realBufferedSource0.buffer.indexOfElement(byteString0, (long) 0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOfElement((ByteString) null, 10000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)78, 8192L, 71776119061217280L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-1));
      GzipSink gzipSink0 = new GzipSink(bufferedSink0);
      gzipSink0.flush();
      assertEquals(16L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(100000000000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.write(buffer0, (long) 3);
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write(buffer0, 4278L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.write(buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte) (-52), 810);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-52 byteCount=810
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8(".outputStream()", 4, 9);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(32L);
      buffer0.skip(1L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer0.skip(1L);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(4278190080L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 34323738
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(8L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(117L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = realBufferedSource0.buffer.readLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.size = 9223372036854L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) pipedOutputStream0, 9223372036854L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) pipedOutputStream0, 0L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Pipe pipe0 = new Pipe(2012L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 2012L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(3269L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3269 content=0000000000000000000000000000000000000000000000000000000000000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775786L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, (-2128L), (long) 3422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190059L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo(outputStream0, 3145L, (-2179L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3145 byteCount=-2179
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.close();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 117L;
      buffer_UnsafeCursor0.resizeBuffer(117L);
      assertEquals(117L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(1L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pipe pipe0 = new Pipe(2339L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(2339L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1L);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      long long0 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(1L, long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer_UnsafeCursor0.buffer.emit();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeString(">\"Rp,Qz:", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2774L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2774 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      buffer_UnsafeCursor0.next();
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=52
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(71776119061217280L);
      buffer1.hashCode();
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Pipe pipe0 = new Pipe(686L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.equals(pipe0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      GzipSink gzipSink0 = new GzipSink(buffer_UnsafeCursor0.buffer);
      gzipSink0.flush();
      ByteString byteString0 = buffer0.readByteString();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(2057L);
      buffer1.hmacSha512(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor0.buffer.hmacSha1(byteString0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(71776119061217280L);
      buffer1.sha256();
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      buffer0.segmentSizes();
      assertEquals(999424L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.rangeEquals(10L, byteString0, 313, 9);
      assertEquals(999424L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals(0L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = buffer0.rangeEquals(2627L, byteString0, 110, (int) (byte) (-101));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.buffer.rangeEquals(1913L, (ByteString) null, (int) (byte) (-52), 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = buffer0.rangeEquals(3694L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Pipe pipe0 = new Pipe(1628L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer.writeShortLe((byte)71);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeHexadecimalUnsignedLong(183L);
      ByteString byteString0 = realBufferedSink0.buffer.readByteString();
      realBufferedSource0.buffer.indexOfElement(byteString0, 183L);
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeLong(1000000L);
      ByteString byteString0 = realBufferedSource0.buffer.readByteString();
      buffer1.indexOfElement(byteString0, 4278190080L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement((ByteString) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(3288L);
      buffer1.writeLong(65536L);
      ByteString byteString0 = ByteString.encodeUtf8("unit == null");
      buffer1.indexOf(byteString0, (long) (byte)10);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("r\"kT+_9'.FRc/MN<I");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 1890L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer0.indexOf((byte)0, 0L, 3L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(10000000000000000L);
      buffer1.indexOf((byte)105, 10L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)99, (-813L), (-2159L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-813 toIndex=-2159
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.read(buffer_UnsafeCursor1.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (long) (byte) (-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      realBufferedSource0.readUtf8LineStrict();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(1426L);
      Buffer buffer2 = buffer1.clone();
      buffer2.writeHexadecimalUnsignedLong(100000000000000000L);
      assertEquals(23L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor0.buffer.readFully(buffer1, 10L);
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(0L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(10000000000000L);
      assertEquals(14L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(7177611906121L);
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(92233720368L);
      ByteString byteString0 = ByteString.encodeUtf8("s:A/>fA!8t7");
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(11L, buffer0.size());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000000L);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000000000L);
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190059L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(4278190059L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      buffer0.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000000L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(10000L);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372L);
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000L);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.write((Source) realBufferedSource0, (long) 1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.buffer.write((Source) buffer0, 10000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      BufferedSink bufferedSink0 = realBufferedSource0.buffer.write((Source) buffer0, (-1789L));
      assertNotSame(buffer0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, (-2030), (-2030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("Q{b\"*H;,", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 43, 49, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 49 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("byteCount < 0: ", (-7690), 67, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -7690
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Pipe pipe0 = new Pipe(3288L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-1155), 8192, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2208);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2144730463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fd5fd5f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Pipe pipe0 = new Pipe(772L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeUtf8("\u2026]");
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(".outputStream()", 33, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 33
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8(".outputStream()", (-1991), (-1991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1991
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8((String) null, (-1606), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      buffer0.write(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        realBufferedSink0.buffer.skip(922337203685477L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.ByteString");
      buffer1.readFully(byteArray0);
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.size = 9223372036854L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(9223372036854L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount > Integer.MAX_VALUE: 9223372036854
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(1056);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(1056, int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-2137L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2137
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(71776119061217280L);
      try { 
        buffer1.readUtf8LineStrict((long) 10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=10 content=3731373736313139303631323137323830\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)13);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong((byte)13);
      buffer0.readUtf8Line();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Pipe pipe0 = new Pipe(117L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(117L);
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8Line(1L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Pipe pipe0 = new Pipe(4294967295L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Pipe pipe0 = new Pipe(686L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(56320);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = buffer0.readAll(realBufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = ByteString.encodeUtf8("R[ch-G:Q");
      byteStringArray0[0] = byteString0;
      buffer0.writeShort((byte)47);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)13);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong((byte)13);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(164416L);
      ByteString[] byteStringArray0 = new ByteString[3];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(922337203685477L);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint(128);
      assertEquals(17L, buffer1.size());
      
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
      assertEquals(658145060325971063L, long0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint((byte)65);
      assertEquals(0L, buffer0.size());
      
      long long0 = realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190059L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.writeHexadecimalUnsignedLong(4278190059L);
      long long0 = realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      assertEquals(4278190059L, long0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("]");
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(100000000000000000L);
      long long0 = buffer0.readDecimalLong();
      assertFalse(buffer0.exhausted());
      assertEquals(16345785L, long0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-80));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Pipe pipe0 = new Pipe(1298L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(1298L);
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(1298L, long0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((byte)114);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer0.readLong();
      assertEquals(114L, long0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("endIndex > length(");
      long long0 = buffer0.readLongLe();
      assertEquals(10L, buffer0.size());
      assertEquals(8675450682039627365L, long0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-80));
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readInt();
      assertEquals((-80), int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.size = 1232L;
      realBufferedSink0.buffer.writeUtf8CodePoint(65535);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readIntLe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("byteCount < 0: ");
      int int0 = buffer1.readInt();
      assertEquals(11L, buffer0.size());
      assertEquals(1652126821, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(2L);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(992L);
      realBufferedSource0.buffer.readShort();
      byte byte0 = buffer1.readByte();
      assertEquals(0L, buffer1.size());
      assertEquals((byte)50, byte0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 11L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0, 4L);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1947), 98);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte) (-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -52
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Pipe pipe0 = new Pipe(2898L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 2898L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)105);
      assertEquals(3L, buffer0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("size < ");
      buffer1.writeTo((OutputStream) mockPrintStream0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(l]1SZzL6[");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(71776119061217280L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483619L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.request((-919L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.request(9223372036854775807L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.require(10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(11);
      boolean boolean0 = buffer0.exhausted();
      assertEquals(2L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      buffer_UnsafeCursor1.buffer.readFrom(inputStream0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource0.buffer.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)13);
      Buffer buffer0 = pipe0.buffer;
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      boolean boolean0 = buffer0.rangeEquals((-2274L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1095216660480
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((long) 2194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2194
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.readFrom(inputStream0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.copyTo((OutputStream) pipedOutputStream0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }
}
