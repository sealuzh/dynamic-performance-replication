/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:47:35 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      double double0 = cCSMatrix0.min();
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[19][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.copyOfShape(485, 4);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(19, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-3043), 3951.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1204, 1204, 1204);
      cCSMatrix0.minInColumn(947);
      Integer integer0 = new Integer(947);
      byte[] byteArray0 = new byte[3];
      cCSMatrix0.toMatrixMarket();
      cCSMatrix0.getRow(947);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-1656));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1655
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[1] = (-1732.53257);
      doubleArray1[2] = 2523.2154192334;
      CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, 58.568233);
      cCSMatrix0.sum();
      cCSMatrix0.getRow(37);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix.identity(3);
      RowMajorSparseMatrix.zero(3, 3, 3);
      Random.setNextRandom(3);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(4, 4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1009);
      int int0 = 947;
      cCSMatrix0.minInColumn(947);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1009;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(947, 1009, doubleArray0);
      int int1 = 4;
      cCSMatrix1.blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix.identity(350);
      int[] intArray0 = new int[8];
      intArray0[0] = 350;
      intArray0[1] = 350;
      intArray0[2] = (-5287);
      intArray0[3] = 350;
      intArray0[4] = 350;
      intArray0[0] = 1;
      intArray0[6] = 350;
      intArray0[7] = 350;
      int[] intArray1 = new int[0];
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(350, 0.0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(912);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 912
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.sum();
      cCSMatrix1.toSparseMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1513, 1513);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.set(0, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[2] = 2523.2154192334;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      RowMajorSparseMatrix.zero(3, 3, 3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix.from1DArray(0, 0, doubleArray0);
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray1[0] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      cCSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 10;
      int int1 = 565;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(565);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric((-740), 0.0, (java.util.Random) mockRandom0);
      int int2 = (-2735);
      CCSMatrix.zero(int2, int1);
      int int3 = 0;
      int int4 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      CCSMatrix.from1DArray(int3, int4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RowMajorSparseMatrix.zero(3, 3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 3, 3);
      cCSMatrix0.updateAt(1168, 1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2523.2154192334;
      doubleArray0[1] = (-1732.53257);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (-1732.53257);
      doubleArray0[2] = (-1732.53257);
      doubleArray0[6] = (-1732.53257);
      doubleArray0[2] = (-1732.53257);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1513, (-1732.53257));
      MockRandom mockRandom0 = new MockRandom(1513);
      mockRandom0.ints((long) 1513);
      mockRandom0.ints();
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Locale locale0 = Locale.US;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(79.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1732.53257)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      NumberFormat.getIntegerInstance((Locale) null);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3162);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3162);
      int int0 = 227;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(186, 1725, matrixFunction0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3162;
      doubleArray0[1] = (double) 3162;
      doubleArray0[2] = (double) (-1);
      SparseMatrix.from1DArray(227, (-1), doubleArray0);
      cCSMatrix1.minInColumn(int0);
      int int1 = 224;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix0.eachInColumn(int1, vectorProcedure0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[1] = (-1732.53257);
      doubleArray1[2] = 2523.2154192334;
      CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, 58.568233);
      cCSMatrix0.sum();
      cCSMatrix0.getRow(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1009;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1009);
      cCSMatrix0.product();
      String string0 = "";
      CCSMatrix.fromCSV(string0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.setAll(78.1578038809898);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-87);
      MockRandom mockRandom0 = new MockRandom((-87));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-87), (-87), (double) (-87), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2523.2154192334;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.copyOfShape(0, 1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(26, 26);
          cCSMatrix0.setAll((-1.0));
          cCSMatrix0.equals((Object) cCSMatrix0);
          cCSMatrix0.min();
          Locale locale0 = Locale.CHINA;
          NumberFormat.getIntegerInstance(locale0);
          NumberFormat.getInstance();
          // Undeclared exception!
          try { 
            cCSMatrix0.setColumn(1254, (-1.0));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 1254
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 0);
      cCSMatrix0.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      CCSMatrix.from1DArray(0, 1570, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-87);
      MockRandom mockRandom0 = new MockRandom(1015L);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-87), (-87), 138.3034, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 0);
      cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldColumns(vectorAccumulator0);
      cCSMatrix0.copyOfRows((byte)24);
      byte[] byteArray0 = cCSMatrix1.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cCSMatrix1.set(621, Integer.MAX_VALUE, (byte)24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '621' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 3, 2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(3, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(339, 339, 339);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '339' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      RowMajorSparseMatrix.zero(3, 3, 3);
      cCSMatrix0.trace();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 79.0, (double)3, 3.0, 3.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, 3);
      Random.setNextRandom(3);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix1.to(matrixFactory0);
      cCSMatrix1.blankOfShape(3, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -100
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = (-1732.53257);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1495, 2523.2154192334);
      cCSMatrix0.copyOfColumns(3);
      int int0 = (-1);
      cCSMatrix0.maxInColumn((-1));
      double double1 = (-2143.9102);
      cCSMatrix0.setAll(double1);
      double double2 = -0.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      int int1 = 476;
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(int1, double0, (java.util.Random) mockRandom0);
      cCSMatrix1.setAll(double2);
      String string0 = "";
      cCSMatrix0.equals((Object) string0);
      cCSMatrix0.min();
      int int2 = (-305);
      CCSMatrix.identity(int2);
      int int3 = 5;
      cCSMatrix0.nonZeroAt(int0, int3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4017);
      Integer integer0 = new Integer(4028);
      cCSMatrix0.toColumnMajorSparseMatrix();
      NumberFormat.getInstance();
      cCSMatrix0.setColumn(0, (double) 4028);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2523.2154192334;
      doubleArray0[1] = (-1732.53257);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (-1732.53257);
      doubleArray0[2] = (-1732.53257);
      doubleArray0[6] = (-1732.53257);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1732.53257);
      doubleArray1[1] = 2523.2154192334;
      doubleArray1[4] = (-1732.53257);
      doubleArray1[7] = 2523.2154192334;
      doubleArray0[2] = (-1732.53257);
      int int0 = 1513;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1513, (-1732.53257));
      MockRandom mockRandom0 = new MockRandom(1513);
      mockRandom0.ints();
      Matrix.randomSymmetric(0, mockRandom0);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Locale locale0 = Locale.US;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(79.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(511, vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(511, 511, matrixFunction0);
      NumberFormat.getIntegerInstance((Locale) null);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      String string0 = "";
      CCSMatrix.fromCSV(string0);
      int int1 = (-1115);
      CCSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 9;
      CCSMatrix.identity(9);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows(9, 1867);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1867' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = 837.94583987425;
      doubleArray1[3] = 837.94583987425;
      doubleArray1[2] = 98.56767746031764;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 874.0012669398891;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1777.88064);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 837.94583987425;
      doubleArray2[1] = 874.0012669398891;
      doubleArray2[2] = (-2771.62491647561);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 98.56767746031764;
      doubleArray2[5] = (-1777.88064);
      doubleArray2[6] = (-1777.88064);
      double[][] doubleArray3 = new double[5][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(2, 1.0, (java.util.Random) mockRandom0);
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeColumn(4198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 722);
      cCSMatrix0.minInColumn(0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1009);
      cCSMatrix0.minInColumn(947);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(947, (double) 947, (java.util.Random) mockRandom0);
      cCSMatrix1.norm();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.nextFloat();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1104), 4, (double) 0.0F, (java.util.Random) mockRandom2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1104x4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      RowMajorSparseMatrix.zero(3, 3, 3);
      int int1 = 9964;
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZeroInRow(9964, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-4274.377641688), (-2348.263), (-2348.263)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      SparseMatrix.zero(880, 880, 17);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1900, 79.0);
      Random.setNextRandom(880);
      cCSMatrix1.nonZeroIteratorOfColumn(4);
      cCSMatrix0.minInColumn(744);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 4080;
      int int1 = 997;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 997);
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.eachNonZeroInColumn(252, vectorProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2523.2154192334;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(2523.2154192334);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      cCSMatrix0.select(intArray0, intArray1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 0, 2014.78673770235, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-4274.377641688), (-2348.263), (-2348.263)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      cCSMatrix0.select(intArray0, intArray1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 0, 2014.78673770235, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.setAll((-2348.263));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-3013.783763890543)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 39;
      intArray0[1] = 39;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '39' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      Integer integer0 = new Integer(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(467, 467, doubleArray0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.toMatrixMarket(numberFormat0);
      cCSMatrix0.setColumn(int0, doubleArray0[0]);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      double double0 = 79.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 3);
      Random.setNextRandom(3);
      cCSMatrix0.add((Matrix) rowMajorSparseMatrix0);
      int int1 = 0;
      ColumnMajorSparseMatrix.zero(3, 3, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 493);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(130);
      cCSMatrix1.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1009);
      cCSMatrix0.minInColumn(947);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1376, 1376);
      cCSMatrix1.toMatrixMarket();
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
      int int0 = 1349;
      double double0 = 1.1102230246251565E-14;
      CCSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Integer integer0 = new Integer(0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      locale1.getScript();
      NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      cCSMatrix0.setColumn(0, 1.0);
      cCSMatrix0.getRow(3551);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(174, 814.230705606799);
      cCSMatrix0.min();
      CCSMatrix.fromMatrixMarket("\"vk`>[jj$e z~37*");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.setAll((-2348.263));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = (-448);
      intArray0[1] = (-448);
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-448' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1714, 1714);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(16, vectorProcedure0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1714;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      CCSMatrix.zero(1714, 6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.setAll((-2348.263));
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      cCSMatrix0.rank();
      CCSMatrix.random(16, 1, 0.8164965809277261, (java.util.Random) mockRandom0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(16, 16, 0);
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-1.0));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.divide(1575.6);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(2954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2955
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.multiply((double) 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(2, 2, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 0, 0);
      cCSMatrix0.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.getRow(2304);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(0, (double) 2304);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 0);
      cCSMatrix0.spliterator();
      cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.setRow(8, 3989.0);
      // Undeclared exception!
      try { 
        cCSMatrix1.setColumn(8, (double) 240);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1188);
      int int0 = 1850;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1188, 1850, 1847);
      byte[] byteArray0 = cCSMatrix1.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix0);
      CCSMatrix.identity(int0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberFormat.getNumberInstance();
      cCSMatrix1.equals((Object) decimalFormat0);
      DecimalFormat decimalFormat1 = new DecimalFormat();
      int int1 = 517;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int1);
      MockRandom mockRandom0 = new MockRandom();
      int int2 = (-792);
      Matrix.random(int2, int0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldRows(vectorAccumulator0);
      cCSMatrix1.toSparseMatrix();
      String string0 = "";
      Matrix.fromCSV(string0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix3 = CCSMatrix.identity(int1);
      cCSMatrix3.nonZeroColumnMajorIterator();
      int int3 = 3;
      cCSMatrix1.maxInColumn(int3);
      int int4 = 935;
      int int5 = (-695);
      cCSMatrix2.setColumn(int5, (double) int4);
      cCSMatrix0.min();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1188, 1188);
      int[] intArray0 = new int[6];
      intArray0[0] = 1188;
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.max();
      intArray0[1] = 974;
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(79, 1.0);
      cCSMatrix0.blankOfColumns(79);
      int int0 = 350;
      CCSMatrix.identity(79);
      cCSMatrix0.max();
      cCSMatrix0.getOrElse(79, (-5287), (-5287));
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(int0, double0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2523.2154192334;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1671.2, 2523.2154192334, Double.NEGATIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1190;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1190);
      int int1 = 947;
      Matrix matrix0 = cCSMatrix0.copyOfRows(8);
      matrix0.insert((Matrix) cCSMatrix0);
      int int2 = 1201;
      cCSMatrix0.blankOfRows(int2);
      Integer integer0 = new Integer(int1);
      int int3 = 273;
      byte byte0 = (byte)73;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = byte0;
      CCSMatrix.fromBinary(byteArray0);
      int int4 = 8;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int4, vectorProcedure0);
      cCSMatrix0.getRow(int1);
      double[] doubleArray0 = null;
      int int5 = (-2336);
      CCSMatrix.from1DArray(byte0, int5, doubleArray0);
      cCSMatrix0.blankOfShape(int5, int3);
      int int6 = 1273;
      CCSMatrix.identity(int1);
      int int7 = 1467;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int7, int1, (int) byte0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int0, int6, mockRandom0);
      CCSMatrix.randomSymmetric((int) byteArray0[0], (double) byteArray0[0], (java.util.Random) mockRandom0);
      int int8 = (-1728);
      cCSMatrix1.copyOfShape(int0, int8);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 8;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 1, 1);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(21, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2523.2154192334;
      doubleArray0[1] = (-1732.2944022127635);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 21;
      doubleArray0[4] = (-1732.2944022127635);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      CCSMatrix cCSMatrix1 = new CCSMatrix(21, 21, 21);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '22' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      RowMajorSparseMatrix.zero(3, 3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-1509), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4028);
      Integer integer0 = new Integer(0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      NumberFormat.getInstance();
      cCSMatrix0.setColumn(945, (double) 945);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 0);
      cCSMatrix0.toBinary();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.doubles(2081L);
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 2213.82);
      Matrix matrix0 = cCSMatrix1.blankOfColumns(8);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 1013);
      SparseVector sparseVector0 = SparseVector.zero(8);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      cCSMatrix0.setRow(1013, vector0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, cCSMatrix1, cCSMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3162);
      Integer integer0 = new Integer(945);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      MockRandom mockRandom0 = new MockRandom((-3658L));
      mockRandom0.ints();
      Matrix.randomSymmetric(2, mockRandom0);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      cCSMatrix0.toMatrixMarket();
      ((CCSMatrix) columnMajorSparseMatrix0).getRow(3254);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2952);
      Integer integer0 = new Integer(2952);
      cCSMatrix0.toColumnMajorSparseMatrix();
      NumberFormat.getInstance();
      cCSMatrix0.setColumn(915, (double) 0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[0] = 2523.2154192334;
      doubleArray1[2] = 2523.2154192334;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(2523.2154192334);
      cCSMatrix0.maxInColumn(0);
      Matrix matrix0 = cCSMatrix0.copyOfShape(0, 0);
      cCSMatrix0.blankOfColumns(0);
      matrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3162, 3162);
      cCSMatrix0.minInColumn(1282);
      CCSMatrix.identity(1852);
      Integer integer0 = new Integer(1852);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1282, (-2573.46711));
      cCSMatrix1.minInColumn(952);
      cCSMatrix0.toMatrixMarket();
  }
}
