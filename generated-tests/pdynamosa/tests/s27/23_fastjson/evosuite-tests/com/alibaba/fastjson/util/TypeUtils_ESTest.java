/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:16:19 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("8S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("*PBXp[J{7]0h9q#)&Ot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : *PBXp[J{7]0h9q#)&Ot
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("short", classLoader0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockThread mockThread0 = new MockThread("^(]");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("java.util.UUID", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("boolean");
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.lang.AutoCloseable");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("float", class1.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.lang.AutoCloseable");
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("[byte");
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("short");
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("*PB|p[J{7]0h9q#)&Ot");
      assertEquals(8582569020866679762L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(276.0F);
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short)276, (short)short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)30);
      Long long0 = TypeUtils.castToLong(byte0);
      assertEquals(30L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double((-290.9228012709054));
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals((-290), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("*PB|p[J{7]0h9q#)&Ot");
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(2872.1476);
      Byte byte0 = TypeUtils.castToByte(double0);
      assertEquals((byte)56, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("");
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("+SbUe&9\"f?aJ63a~|n", (ClassLoader) null, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("n0CA9:uV", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = TypeUtils.isHibernateInitialized(timeUnit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Field[] fieldArray0 = new Field[7];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "J%`", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<StringIndexOutOfBoundsException> class0 = StringIndexOutOfBoundsException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("*PB|p[J{7]0h9q#)&Ot", "ACk|0N");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      weakHashMap1.put("ub<0=7)V", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) weakHashMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(zoneOffset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : +18:00
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("&vQk,Mf,x", batchUpdateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: &vQk,Mf,x
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<StringIndexOutOfBoundsException> class0 = StringIndexOutOfBoundsException.class;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(stringIndexOutOfBoundsException0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(aSMDeserializerFactory0.classLoader);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.util.ASMClassLoader@48f70d24
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("java.nio.file.Paths");
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) messageFormat0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("4wZrDvvD@drt99S%LEQ");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 4wZrDvvD@drt99S%LEQ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("kotlin.reflect.KParameter");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("xghC[vxQ12H(zzmD", stringIndexOutOfBoundsException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: xghC[vxQ12H(zzmD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(parameterizedTypeImpl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(classLoader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      InstantiationException instantiationException0 = new InstantiationException();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationException0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      HijrahDate hijrahDate0 = MockHijrahDate.now(zoneId0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hijrahDate0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("@\u0005-YfP", "Ljava.awt.Font");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isKotlin(class0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      assertEquals((-3742566483405827779L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("=M`S");
      assertEquals("=M`S", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("CC");
      assertEquals("CC", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, (String) null, fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleTimeZone>[] classArray0 = (Class<SimpleTimeZone>[]) Array.newInstance(Class.class, 8);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertEquals(1537, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      String[] stringArray0 = new String[4];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class1 = javaBeanSerializer0.getType();
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NumberFormat> class0 = NumberFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<PageAttributes> class0 = PageAttributes.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Font");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.util.FieldInfo", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.util.FieldInfo -> java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("getfillInStackTrace");
      String string0 = TypeUtils.castToString(mockNullPointerException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constructor<InstantiationError>[] constructorArray0 = (Constructor<InstantiationError>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("C}If");
      assertEquals((-4925007675849722322L), long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      concurrentHashMap0.put("sIN-", illegalAccessError0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      NegativeArraySizeException negativeArraySizeException0 = TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("FkuD=[Nf8`)9_Zi");
      assertEquals(2699502044999422664L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.serializer.AdderSerializer");
      assertEquals(5181057893559205358L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [F", class1.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [D", class1.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[D");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("[D").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("X");
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "@2k?ZuG!jDO", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals("class java.lang.Object", class0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      MockThread mockThread0 = new MockThread("java.util.UUID");
      mockThread0.getContextClassLoader();
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      Type[] typeArray0 = new Type[4];
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[2]);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // craete instance error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "pR[3n5R1y%g");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[[@lRt!a6eN+dhi18", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, ";Ljava/lang/String;Ljava/lang/Object;)V");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.text.ChoiceFormat(double[],java.lang.String[])
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      DataTruncation dataTruncation0 = new DataTruncation(37, false, false, 73, 95);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("9y", "9y", 37, dataTruncation0);
      Type[] typeArray0 = new Type[9];
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLRecoverableException -> java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Type[] typeArray0 = new Type[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[4]);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@67e12cdf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Exception exception0 = TypeUtils.cast((Object) "", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(numberFormatException0);
      Type[] typeArray0 = new Type[1];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalArgumentException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("C<3LaJU#[zy]t_]A");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockThread mockThread0 = new MockThread("[C");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(jdk8DateCodec0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "writeReference", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      BufferCapabilities bufferCapabilities0 = TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      assertNull(bufferCapabilities0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("A~tLpcGj}1I(_yG");
      assertEquals("a~tlpcgj}1i(_YG", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      IllegalThreadStateException illegalThreadStateException0 = TypeUtils.castToJavaBean((Object) "", class0);
      assertNull(illegalThreadStateException0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "*PB|p[u$7]Azh9q#)&Ot", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.instrumentation.InstrumentingClassLoader@3ab006f1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Class<TimeUnit> class1 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Time> class1 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("object", "object", (Throwable) null);
      SecurityException securityException0 = new SecurityException(sQLNonTransientConnectionException0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) securityException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.SecurityException: java.sql.SQLNonTransientConnectionException: object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "/<iG)_klL~y~iJt:R=", class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/<iG)_klL~y~iJt:R=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      MockThread mockThread0 = new MockThread("A~tLpcGj}1I(_G");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "A~tLpcGj}1I(_G", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : A~tLpcGj}1I(_G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Byte byte0 = TypeUtils.cast((Object) "", class0, parserConfig0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) batchUpdateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedHashMap<BigInteger, Point> linkedHashMap0 = new LinkedHashMap<BigInteger, Point>();
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeNotPresentException typeNotPresentException0 = TypeUtils.cast((Object) linkedHashMap0, class0, parserConfig0);
      assertNull(typeNotPresentException0.typeName());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = TypeUtils.cast((Object) "", class0, parserConfig0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      HttpCookie httpCookie0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(httpCookie0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = TypeUtils.castToBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(".Kw+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : .Kw+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("a");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(genericArrayType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException> identityHashMap0 = new java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Integer integer0 = TypeUtils.castToInt(byte0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("getClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : toS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Hashtable<NegativeArraySizeException, Object> hashtable0 = new Hashtable<NegativeArraySizeException, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Long long0 = new Long((-2702L));
      Long long1 = TypeUtils.castToLong(long0);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("9Yh~P\"-?L fejnqy_[S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("/<iG)_klL~y~iJt:R=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("-iE&]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Timestamp timestamp0 = TypeUtils.castToTimestamp(bigDecimal0);
      assertEquals("1970-01-01 00:00:00.001", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Short short0 = new Short((short)32);
      Time time0 = TypeUtils.castToSqlTime(short0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(30, 42, 42);
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      java.sql.Date date0 = new java.sql.Date(1099511628211L);
      Time time0 = TypeUtils.castToSqlTime(date0);
      assertEquals("19:53:48", time0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : gettoString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("org.springframework.security.web.savedrequest.DefaultSavedRequest");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.springframework.security.web.savedrequest.DefaultSavedRequest
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(617, 617, mockRandom0);
      java.sql.Date date0 = TypeUtils.castToSqlDate(bigInteger0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      java.sql.Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 2572, 8, 2572, (-743), 8);
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("getClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("is", outOfMemoryError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: is
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Short short0 = new Short((short) (-456));
      Date date0 = TypeUtils.castToDate(short0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("-iE&]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -iE&]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(366);
      Double double0 = TypeUtils.castToDouble(atomicInteger0);
      assertEquals(366.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("*PB|p[J{7]0h9q#)&Ot");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Integer integer0 = new Integer(36);
      Float float0 = TypeUtils.castToFloat(integer0);
      assertEquals(36.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Float float0 = new Float((-2605.00583));
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short) (-2605), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException> identityHashMap0 = new java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException>();
      Locale locale0 = Locale.CANADA;
      Collator collator0 = Collator.getInstance(locale0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("CTo!Z{RQe(4F", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("CTo!Z{RQe(4F", sQLSyntaxErrorException0);
      identityHashMap0.put(collator0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException> identityHashMap0 = new java.util.IdentityHashMap<Collator, SQLIntegrityConstraintViolationException>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2111);
      BigDecimal bigDecimal1 = TypeUtils.castToBigDecimal(bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Short short0 = TypeUtils.castToShort("null");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("*PB|p[J{7]0h9q#)&Ot");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*PB|p[J{7]0h9q#)&Ot\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.Object@27bee493
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Short short0 = new Short((short) (-2507));
      Short short1 = TypeUtils.castToShort(short0);
      assertTrue(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : gettoString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("a");
      assertEquals('a', (char)character0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("");
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException(",pP");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.lang.MockThrowable: ,pP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte("");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("isoSring").when(genericArrayType0).toString();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(genericArrayType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : isoSring
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-35));
      Byte byte1 = TypeUtils.castToByte(byte0);
      assertEquals((byte) (-35), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("kotlin.ranges.LongRange");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.ranges.LongRange\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) mockDateFormat0, class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<Date> class0 = Date.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertFalse(list0.isEmpty());
  }
}
