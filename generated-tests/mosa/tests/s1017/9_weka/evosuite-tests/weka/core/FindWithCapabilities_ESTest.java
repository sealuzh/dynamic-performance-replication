/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:40:36 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_rBMtgedCvV";
      stringArray0[1] = "$02'6XF%0w";
      stringArray0[2] = "7{U-4?\bvk;k>]_g";
      stringArray0[3] = "9n9@*";
      stringArray0[4] = "-binary-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "&Z%(n9%-o=r";
      findWithCapabilities0.getOptions();
      assertEquals("&Z%(n9%-o=r", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("replace");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getRevision();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "AAj_";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "FZOdwsNV1}X*DBOIL";
      stringArray0[3] = "hjPa0QLR<2Xl)R[";
      stringArray0[4] = "qcO{hT!1R3B";
      stringArray0[5] = "<!-- options-start -->";
      stringArray0[6] = "AQg1us9|l|";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TI3ym[EAWPz1'@w4";
      stringArray0[1] = "-binary-class";
      stringArray0[2] = "\"5i_EaOSxOGYIn";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-1");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.m_Test = false;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.m_Filename = "\tMust handle numeric classes.";
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1PDl_j9";
      stringArray0[1] = "$%Xds=p|jA[D+L";
      stringArray0[2] = "-numeric-atts";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "'$}>>gnvq<k%],Yw4E";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "o";
      stringArray0[1] = "PackageURL";
      stringArray0[2] = "-string-atts";
      stringArray0[3] = "-not-date-class";
      stringArray0[4] = "8G/s|";
      stringArray0[5] = "8G/s|";
      stringArray0[6] = "\tlists all packages in the classpath";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("oMV9,990c3");
      findWithCapabilities0.m_Filename = "[57;#Nc]?qw{&7o";
      findWithCapabilities0.m_Superclass = "Missing class values";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("[57;#Nc]?qw{&7o", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " not supported by PerformanceStats.";
      stringArray0[1] = "-relational-date";
      stringArray0[2] = "QOA4h.M7N^.!{m%q`'";
      stringArray0[3] = "</pre>\n\n";
      stringArray0[4] = ":tLKj8n='$`TRlMM\"S";
      stringArray0[5] = "not set";
      stringArray0[6] = "-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      boolean boolean0 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nominal-atts";
      stringArray0[1] = "date-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j2)";
      stringArray0[1] = ".ry=";
      stringArray0[2] = ";9$3pqv8Yl5";
      stringArray0[3] = "-not-string-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{>1A8sK Ud";
      stringArray0[1] = "# Nominal: ";
      stringArray0[2] = "-nominal-class";
      stringArray0[3] = "3W>N|a";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = "averageable";
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ga{Y3,63JtD=:Q>";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = "All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.";
      stringArray0[3] = "Class '";
      stringArray0[4] = "\tMust handle missing attribute values.";
      stringArray0[5] = "7{6 ?P+9|ef~gBL.HI,";
      stringArray0[6] = ", ";
      stringArray0[7] = "Min index (ints): ";
      stringArray0[8] = "Locx";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "Missing class values";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "\tMust handle nominal classes.";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "Missing class values";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-relational-date");
      findWithCapabilities0.m_Superclass = "Missing class values";
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "Missing class values";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-relational-class";
      stringArray0[1] = "-not-relational-class";
      stringArray0[2] = "']G;.";
      stringArray0[3] = "date-class";
      stringArray0[4] = "AQg1us9|l|";
      stringArray0[5] = ")Oa{W8)S";
      stringArray0[6] = "VGv/#uT@<L;h4.Z";
      stringArray0[7] = "f1rrR\"ugb[ht$XSq";
      stringArray0[8] = "  - # String: ";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-numeric-class";
      stringArray0[1] = ":(L";
      stringArray0[2] = "a$Qrt8pD|{*[<";
      stringArray0[3] = "";
      stringArray0[4] = "z#M{";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_ClassIndex = 31;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      capabilities1.enableAll();
      System.setCurrentTimeMillis(1L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Random.setNextRandom((-1));
      findWithCapabilities0.getOptions();
      boolean boolean0 = true;
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Random.setNextRandom((-1954125396));
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      Enumeration enumeration1 = findWithCapabilities0.listOptions();
      assertFalse(enumeration1.equals((Object)enumeration0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "\tMust handle nominal classes.";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_ClassIndex = 31;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      findWithCapabilities0.m_Handler = null;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      capabilities0.enableAll();
      System.setCurrentTimeMillis(1L);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Random.setNextRandom((-1));
      findWithCapabilities0.getOptions();
      boolean boolean0 = true;
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "\tMust handle nominal classes.";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L8!o??5o";
      stringArray0[1] = "x";
      stringArray0[2] = "-string-class";
      stringArray0[3] = "E^";
      stringArray0[4] = "O:Sj,w";
      stringArray0[5] = "#,:z+vA<&,Irhp;*35$";
      stringArray0[6] = "Rl/B4H9bT2k}WL?'IUP";
      stringArray0[7] = "{rV-`f";
      stringArray0[8] = "$*/_v<xCdOu)";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(10, vector0.capacity());
  }
}
