/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:34:52 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.command.dml.BackupCommand;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueDecimal;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      SQLUtil.substituteMarkers("", "", valueDecimal0);
      String string1 = "h0TwGAscn";
      SQLUtil.mutatesStructure("h0TwGAscn");
      String string2 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-869), "YQ&w!TsQy=x_N/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -869
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callupdateleft");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      defaultDBTable0.countProviders();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "call";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-7B;WHA", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT -7B;WHA ", string0);
      
      SQLUtil.removeComments("call");
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("call = 'call'", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "+o;$\\FJ<";
      stringArray0[0] = "+o;$FJ<";
      stringArray0[1] = "S6@1w,OW";
      stringArray0[2] = "\"nX!";
      stringArray0[3] = "";
      stringArray0[4] = "IXuzbE@,z4C: cq{F@!";
      String string1 = "-AvA[WO*V_wl -;VX.";
      stringArray0[5] = "-AvA[WO*V_wl -;VX.";
      stringArray0[6] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("-\"-cG<F}?2'd", "-\"-cG<F}?2'd", "yjWk@HO!7{Y)`8oSpxo");
      SQLUtil.substituteMarkers("-\"-cG<F}?2'd", "-\"-cG<F}?2'd", dBSequence0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-\"-cG<F}?2'd";
      stringArray0[1] = "yjWk@HO!7{Y)`8oSpxo";
      stringArray0[2] = "-\"-cG<F}?2'd";
      stringArray0[3] = "yjWk@HO!7{Y)`8oSpxo";
      stringArray0[4] = "-\"-cG<F}?2'd";
      stringArray0[5] = "-\"-cG<F}?2'd";
      SQLUtil.leftJoin("yjWk@HO!7{Y)`8oSpxo", stringArray0, "-\"-cG<F}?2'd", "-\"-cG<F}?2'd", stringArray0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "N", (VersionNumber) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("p' }M", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'p' }M'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ECR83uh{*\"\"", defaultDBTable0, 1239, "");
      defaultDBTable0.getColumnNames();
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getPrimaryKeyConstraint();
      int int0 = 323;
      StringBuilder stringBuilder0 = new StringBuilder(323);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~W'!^");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addRequiredCondition("'~W'!^'", stringBuilder1);
      assertEquals("~W'!^false and '~W'!^'", stringBuilder1.toString());
      assertEquals("~W'!^false and '~W'!^'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = " DEFAULT ";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getForeignKeyConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(90096, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      SQLUtil.renderColumn(defaultDBColumn1);
      SQLUtil.mutatesDataOrStructure("");
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream();
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "&ihr_@Y-J");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&ihr_@Y-J", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.removeComments("&ihr_@Y-J");
      assertEquals("&ihr_@Y-J", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      SQLUtil.isDML("<missing EOF>");
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("<missing EOF>", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index{ff");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments("execute");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "left");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/ c [ kz", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("LEFT", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      String string0 = "resultSetConcurrency";
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("resultSetConcurrency", dBSchema0);
      String string1 = "";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aIP.d+erraWSt:E1V\"";
      String string0 = SQLUtil.renderColumnListWithTableName("aIP.d+erraWSt:E1V\"", stringArray0);
      assertEquals("aIP.d+erraWSt:E1V\".aIP.d+erraWSt:E1V\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Holdable cursors are supported only for scrollable insensitive result sets.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "call";
      stringArray0[1] = "Holdable cursors are supported only for scrollable insensitive result sets.";
      stringArray0[2] = "call";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT call PRIMARY KEY (call, Holdable cursors are supported only for scrollable insensitive result sets., call)", string0);
      
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT call UNIQUE (call, Holdable cursors are supported only for scrollable insensitive result sets., call)", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("G", true, "r", "G");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("tz|$R/&\"");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d(/dB#c8V*f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "tz|$R/&\"", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("LLozby*8=$", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (d(/dB#c8V*f)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DEPLOY";
      stringArray0[1] = "DEPLOY";
      stringArray0[2] = "DEPLOY";
      stringArray0[3] = "DEPLOY";
      stringArray0[4] = "DEPLOY";
      String string0 = SQLUtil.join("DEPLOY", "DEPLOY", stringArray0, "SQLFUNCTIONPARAMS", "", stringArray0);
      assertEquals("DEPLOY join SQLFUNCTIONPARAMS as  on DEPLOY.DEPLOY = .DEPLOY and DEPLOY.DEPLOY = .DEPLOY and DEPLOY.DEPLOY = .DEPLOY and DEPLOY.DEPLOY = .DEPLOY and DEPLOY.DEPLOY = .DEPLOY", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog("exec");
      DBSchema dBSchema0 = new DBSchema("DEPLOY", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DEPLOY", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DEPLOY", defaultDBTable0, 0, "54t_;{`lDbJe\n8tm");
      defaultDBColumn0.setName("DEPLOY");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p;yyjZDB=4@NM", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9h=*s<~C,N4=B^s", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(dBTable0, "'Y>~d", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY (DEPLOY, DEPLOY, DEPLOY, DEPLOY, DEPLOY)", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "left";
      SQLUtil.mutatesDataOrStructure("left");
      SQLUtil.removeComments("left");
      String string1 = "SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?";
      SQLUtil.isQuery("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.delete(168, 168);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SELECT * FROM ", "XBCM3.S", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema SELECT * FROM ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      SQLUtil.removeComments("~W'!^");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("xSWB", false, "xSWB", "xSWB");
      String string0 = SQLUtil.normalize("xSWB", false);
      assertEquals("xSWB", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT xSWB ", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ESCAPE", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("ESCAPE", dBSchema0);
      DBPackage dBPackage1 = new DBPackage("ESCAPE", dBSchema0);
      dBPackage0.setDoc("ESCAPE");
      dBSchema0.setCatalog((DBCatalog) null);
      DBProcedure dBProcedure0 = new DBProcedure("fjTN}2B", dBPackage0);
      dBProcedure0.getOwner();
      String string0 = SQLUtil.typeAndName(dBProcedure0);
      dBSchema0.getSequences(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "TYPE_INFO";
      stringArray0[2] = "procedure fjTN}2B";
      stringArray0[3] = ";[";
      String string1 = SQLUtil.join("", "jNs;R[:YeBZ@8", stringArray0, "TYPE_INFO", "ESCAPE", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("pl*(a");
      DBSchema dBSchema0 = new DBSchema("pl*(a", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oC", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "oC";
      defaultDBTable0.getColumns();
      stringArray0[1] = "pl*(a";
      stringArray0[2] = "oC";
      stringArray0[3] = "pl*(a";
      stringArray0[4] = "pl*(a";
      stringArray0[5] = "pl*(a";
      stringArray0[6] = "oC";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("pl*(a", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "alter index{ff";
      SQLUtil.parseColumnTypeAndSize("alter index{ff");
      SQLUtil.normalize("rpU!ErK^#", false);
      TableContainer tableContainer0 = new TableContainer("alter index{ff");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rpU!ErK^#", (DBSchema) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rpU ! ErK ^ #";
      stringArray0[1] = "rpU ! ErK ^ #";
      stringArray0[2] = "alter index{ff";
      String string1 = "<missi";
      stringArray0[3] = "<missi";
      stringArray0[4] = "alter index{ff";
      stringArray0[5] = "rpU ! ErK ^ #";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'rpU!ErK^#' has no foreign key with the columns (rpU ! ErK ^ #, rpU ! ErK ^ #, alter index{ff, <missi, alter index{ff, rpU ! ErK ^ #)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "call";
      stringArray0[1] = "ECR83uh{*\"\"";
      stringArray0[5] = "call";
      stringArray0[6] = "ECR83uh{*\"\"";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("CONSTRAINT call ", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-348), (CharSequence) "call");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -348
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.sql.execute.CursorResultSet[]", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("org.apache.derby.iapi.sql.execute.CursorResultSet[]", dBSchema0);
      DBPackage dBPackage1 = new DBPackage("org.apache.derby.iapi.sql.execute.CursorResultSet[]", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("jNs;R[:YeBZ@8", dBPackage1);
      dBProcedure0.setName("org.apache.derby.iapi.sql.execute.CursorResultSet[]");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.typeAndName(compositeDBObject0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "j-Qf7uw/h*Yr=Dm";
      SQLUtil.join("org.apache.derby.iapi.sql.execute.CursorResultSet[]", "jNs;R[:YeBZ@8", stringArray0, "C]*l6@+;^mX}.d,mu*", "null org.apache.derby.iapi.sql.execute.CursorResultSet[]", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("j-Qf7uw/h*Yr=Dm", dBSchema0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateexecute;txeeo\"i\"^*rv+", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "delete;5?a'?4~b}4#zqbpwq");
      String string0 = SQLUtil.normalize("&ihr_@Y-J", true);
      assertEquals("& ihr_ @ Y - J", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete;5?a'?4~b}4#zqbpwq", (DBTable) null, (-441982173), "UNIQUE ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("delete;5?a'?4~b}4#zqbpwq", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "~W'!^";
      String string0 = SQLUtil.innerJoin("~W'!^", stringArray0, "~W'!^", "FOREIGN KEY ", stringArray0);
      assertEquals("~W'!^ as FOREIGN KEY  on ~W'!^.~W'!^ = FOREIGN KEY .~W'!^", string0);
      
      SQLUtil.removeComments("\"[d");
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index");
      assertTrue(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"[d", (DBTable) null, 1310, "3<Ta}s:X");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(1310, "FOREIGN KEY ");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewexecute;txeeo\"i\"^*rv+", (DBTable) null, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("\"[d, alter materialized viewexecute;txeeo\"i\"^*rv+", string1);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "\"[d";
      stringArray1[1] = "create unique index";
      String string2 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("(\"[d, create unique index)", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      VersionNumber versionNumber0 = VersionNumber.valueOf("create table ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "t=&1", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`n;Md/[7Gy<~Dm", (DBSchema) null);
      defaultDBTable0.getForeignKeyConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(90096, "`n;Md/[7Gy<~Dm");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`3qgT3b,TrwElR", defaultDBTable0, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("_vu", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLUtil.renderColumnNames(stringArray0);
      DBDataType.getInstance(90096, "`n;Md/[7Gy<~Dm");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      TableContainer tableContainer0 = new TableContainer("inner");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^6kbc3Zca1zA", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "^6kbc3Zca1zA";
      stringArray0[3] = "^6kbc3Zca1zA";
      stringArray0[4] = "inner";
      stringArray0[5] = "~W'!^";
      stringArray0[6] = "'~W'!^'";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      boolean boolean0 = false;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("my.'Gd&c}9ra:", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("~W'!^");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      dBForeignKeyConstraint0.toString();
      StringBuilder stringBuilder2 = stringBuilder1.append(1361.0248);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(571, '0');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized viewselectexecute", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      dBUniqueIndex0.toString();
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.addColumnName("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "org.apache.derby.iapi.";
      stringArray0[2] = " DEFAULT ";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = " DEFAULT ";
      stringArray0[5] = " DEFAULT ";
      String string0 = SQLUtil.innerJoin(" DEFAULT ", stringArray0, "org.apache.derby.iapi.sql.execute.cursorresultset[]", "org.apache.derby.iapi.", stringArray0);
      assertEquals("org.apache.derby.iapi.sql.execute.cursorresultset[] as org.apache.derby.iapi. on  DEFAULT . DEFAULT  = org.apache.derby.iapi.. DEFAULT  and  DEFAULT .org.apache.derby.iapi. = org.apache.derby.iapi..org.apache.derby.iapi. and  DEFAULT . DEFAULT  = org.apache.derby.iapi.. DEFAULT  and  DEFAULT . DEFAULT  = org.apache.derby.iapi.. DEFAULT  and  DEFAULT . DEFAULT  = org.apache.derby.iapi.. DEFAULT  and  DEFAULT . DEFAULT  = org.apache.derby.iapi.. DEFAULT ", string0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.apache.derby.iapi.sql.execute.cursorresultset[]", "A:,*Ptjn[hMh)H*n5QD", versionNumber0);
      defaultDatabase0.getCatalog("updateAsciiStream(int, InputStream)");
      SQLUtil.typeAndName((DBObject) null);
      String string1 = SQLUtil.normalize("A:,*Ptjn[hMh)H*n5QD", false);
      assertEquals("A :, * Ptjn [ hMh) H * n5QD", string1);
      
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" DEFAULT  = ' DEFAULT ' AND org.apache.derby.iapi. = 'org.apache.derby.iapi.' AND  DEFAULT  = ' DEFAULT ' AND  DEFAULT  = ' DEFAULT ' AND  DEFAULT  = ' DEFAULT ' AND  DEFAULT  = ' DEFAULT '", string2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.sql.execute.CursorResultSet[]", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("org.apache.derby.iapi.sql.execute.CursorResultSet[]", dBSchema0);
      DBPackage dBPackage1 = new DBPackage("org.apache.derby.iapi.sql.execute.CursorResultSet[]", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("org.apache.derby.iapi.sql.execute.CursorResultSet[]", dBPackage1);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("exectruncatejns;r[:yebz@8", "org.apache.derby.iapi.sql.execute.CursorResultSet[]", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.normalize("0?P!42Ma *S", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      stringArray0[1] = "catalog null";
      stringArray0[2] = "0 ? P ! 42Ma * S";
      stringArray0[3] = "0?P!42Ma *S";
      stringArray0[4] = "exectruncatejns;r[:yebz@8";
      stringArray0[5] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[6] = "ECR83uh{*\"\"";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1091474898), "uG8s*<u:<*");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`3qgT3b,TrwElR", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("C(o3c", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string1 = SQLUtil.removeComments("ECR83uh{*\"\"");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      SQLUtil.removeComments("~W'!^");
      VersionNumber versionNumber0 = VersionNumber.valueOf("G");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("~W'!^", "AZ\n& JlHoC[rYxGly", versionNumber0);
      defaultDatabase0.getCatalog("G");
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database ~W'!^", string0);
      
      String string1 = SQLUtil.normalize("database ~W'!^", true);
      assertEquals("database ~ W '!^'", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~W'!^";
      stringArray0[1] = "alter table";
      stringArray0[2] = "~W'!^";
      stringArray0[3] = "~W'!^";
      stringArray0[4] = "AZ\n& JlHoC[rYxGly";
      stringArray0[5] = "database ~W'!^";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) versionNumber0;
      objectArray0[1] = (Object) "~W'!^";
      objectArray0[2] = (Object) "database ~W'!^";
      objectArray0[3] = (Object) "~W'!^";
      objectArray0[4] = (Object) "database ~ W '!^'";
      objectArray0[5] = (Object) defaultDatabase0;
      objectArray0[6] = (Object) "AZ\n& JlHoC[rYxGly";
      objectArray0[7] = (Object) "'~W'!^'";
      objectArray0[8] = (Object) "AZ\n& JlHoC[rYxGly";
      String string2 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("~W'!^ = G AND alter table = '~W'!^' AND ~W'!^ = 'database ~W'!^' AND ~W'!^ = '~W'!^' AND AZ\n& JlHoC[rYxGly = 'database ~ W '!^'' AND database ~W'!^ = ~W'!^", string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "call";
      stringArray0[1] = "ECR83uh{*\"\"";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.derby.iapi.";
      String string0 = SQLUtil.innerJoin("ECR83uh{*\"\"", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on ECR83uh{*\"\".call = null.call and ECR83uh{*\"\".ECR83uh{*\"\" = null.ECR83uh{*\"\" and ECR83uh{*\"\". = null. and ECR83uh{*\"\".org.apache.derby.iapi. = null.org.apache.derby.iapi.", string0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf("]xD.,6SIN~ow>'");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.apache.derby.iapi.sql.execute.cursorresultset[]", (String) null, versionNumber0);
      defaultDatabase0.getCatalog("i.`+");
      String string1 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database org.apache.derby.iapi.sql.execute.cursorresultset[]", string1);
      assertNotNull(string1);
      
      String string2 = SQLUtil.normalize("org.apache.derby.iapi.sql.execute.cursorresultset[]", false);
      assertEquals("org.apache.derby.iapi.sql.execute.cursorresultset [ ]", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("call = 'call' AND ECR83uh{*\"\" = 'ECR83uh{*\"\"' AND  = '' AND org.apache.derby.iapi. = 'org.apache.derby.iapi.'", string3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TableContainer tableContainer0 = new TableContainer("|la[.ZGw+b", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"drop table\" ", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(1446, "alter tablecatalog");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|la[.ZGw+b", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|la[.ZGw+b ALTER TABLECATALOG(0) NULL", string1);
      
      Integer integer1 = RawTransaction.COMMIT;
      String string2 = SQLUtil.normalize("CONSTRAINT \"drop table\" ", false);
      assertEquals("CONSTRAINT \"drop table\"", string2);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "gU}sNM'_v\"7";
      stringArray1[1] = " DEFAULT ";
      stringArray1[2] = "uG8s*<u:<*";
      stringArray1[3] = "CONSTRAINT \"drop table\" ";
      String string3 = SQLUtil.renderWhereClause(stringArray1, stringArray0);
      assertEquals("gU}sNM'_v\"7 = null AND  DEFAULT  = null AND uG8s*<u:<* = null AND CONSTRAINT \"drop table\"  = null", string3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("/c[kZ", true);
      assertEquals("/ c [ kZ", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BackupCommand.correctFileName("~W'!^");
      SQLUtil.removeComments("~W'!^");
      VersionNumber versionNumber0 = VersionNumber.valueOf("DEFAULT");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("0", "al", versionNumber0);
      VersionNumber.valueOf("al");
      defaultDatabase0.getCatalog("4)y=");
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database 0", string0);
      assertNotNull(string0);
      
      versionNumber0.toString();
      String string1 = SQLUtil.normalize("sR}8NVq(~w-m}O<z", true);
      assertEquals("sR } 8NVq (~ w - m } O < z", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "updateAsciiStream(int, InputStream)";
      stringArray0[1] = "DEFAULT";
      stringArray0[2] = "~W'!^";
      stringArray0[3] = "iI%I9*b]lY3>c;|qsH";
      stringArray0[4] = "al";
      stringArray0[5] = "database 0";
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("updateAsciiStream(int, InputStream) = 'updateAsciiStream(int, InputStream)' AND DEFAULT = 'DEFAULT' AND ~W'!^ = '~W'!^' AND iI%I9*b]lY3>c;|qsH = 'iI%I9*b]lY3>c;|qsH' AND al = 'al' AND database 0 = 'database 0'", string2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " DEFAULT ";
      stringArray0[0] = "org.apache.derby.iapi.";
      stringArray0[0] = " DEFAULT ";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = " DEFAULT ";
      stringArray0[5] = " DEFAULT ";
      String string0 = SQLUtil.innerJoin(" DEFAULT ", stringArray0, "org.apache.derby.iapi.sql.execute.cursorresultset[]", stringArray0[1], stringArray0);
      assertEquals("org.apache.derby.iapi.sql.execute.cursorresultset[] as null on  DEFAULT . DEFAULT  = null. DEFAULT  and  DEFAULT .null = null.null and  DEFAULT .null = null.null and  DEFAULT . DEFAULT  = null. DEFAULT  and  DEFAULT . DEFAULT  = null. DEFAULT  and  DEFAULT . DEFAULT  = null. DEFAULT ", string0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.ABORT;
      SQLUtil.removeComments(" DEFAULT ");
      String string1 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string1);
      
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" DEFAULT  = ' DEFAULT ' AND null = null AND null = null AND  DEFAULT  = ' DEFAULT ' AND  DEFAULT  = ' DEFAULT ' AND  DEFAULT  = ' DEFAULT '", string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      defaultDBTable0.countProviders();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.renderValue(dynamicByteArrayOutputStream1);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("qsGO", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.renderValue((Object) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "alter index";
      SQLUtil.normalize("alter index", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ECR/l83uh{*\"\"");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ECR/l83uh{*\"\"";
      stringArray0[1] = "call";
      stringArray0[2] = "create table";
      stringArray0[3] = "call";
      stringArray0[4] = "ECR/l83uh{*\"\"";
      String[] stringArray1 = new String[6];
      stringArray1[0] = null;
      stringArray1[1] = "call";
      stringArray1[2] = "call";
      stringArray1[3] = "call";
      stringArray1[4] = "ECR/l83uh{*\"\"";
      stringArray1[5] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
      
      SQLUtil.removeComments("getJdbcConnection(");
      boolean boolean0 = SQLUtil.isQuery("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.append('*');
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "left");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      assertNull(dBCheckConstraint0.getTableName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 807.42619;
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")*&}):lo9$P}yyJH-O");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "807.42619");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("807.42619", defaultDBTable0, dBDataType0, (Integer) (-4), (Integer) (-4));
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 807.42619;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("807.42619", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.normalize("NCLOB", true);
      assertEquals("NCLOB", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-2987.77331124);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2987.77331124", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")*&}):lo9$P}yyJH-O");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "- 2987.77331124");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- 2987.77331124", defaultDBTable0, dBDataType0, (Integer) (-4), (Integer) (-4));
      String string1 = SQLUtil.normalize(")*&}):lo9$P}yyJH-O", false);
      assertEquals(") * & }) : lo9 $ P } yyJH - O", string1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&ih_@Y-J");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)4;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("fnMso9", true, defaultDBTable0, "fnMso9");
      defaultDBTable0.isIdentical(dBCheckConstraint0);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("&ih_@Y-J", string0);
  }
}
