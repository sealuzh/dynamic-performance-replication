/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:57:40 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "jl<cm{I", "2M(.)78@k");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "jl<cm{I";
      Radio radio1 = (Radio)radio0.attributes(stringArray0);
      assertTrue(radio1.isValid());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "file", "THL]-k&k.ctB>");
      hidden0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000013");
      Form form0 = new Form(numberInput0, "QZw6LaBNR$/`J", actionExpression0);
      Block block0 = new Block(form0);
      Component component0 = block0.nbsp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration("=[>&v");
      ElExpression elExpression0 = new ElExpression("J!+/.E");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "=[>&v", "l-Uz2]_kw0ASUQ", dynamicSelectModel0, elExpression0);
      Component component0 = checkboxGroup0.getParent();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CHECKCAST [J");
      String string0 = xmlEntityRef0.getComponentId();
      assertEquals("CHECKCAST [J", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn((Object) "java.version");
      List<CharSequence> list0 = component0._getRenderHints();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Form form0 = new Form("E^}");
      Checkbox checkbox0 = new Checkbox(form0, "E^}", "E^}");
      checkbox0.renderHint("E^}");
      assertEquals("E^}", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = errorPage0.renderHint(charBuffer0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("a");
      // Undeclared exception!
      try { 
        xmlEntityRef0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      ElExpression elExpression0 = tableBlock0.el("org.mvel.conversion.LongCH$5");
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("br", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.h3((Object) errorPage0);
      // Undeclared exception!
      try { 
        component0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer("AhIL2iu|;CezuC");
      DateInput dateInput0 = new DateInput(errorPage0, "", "^>Dw($Kn=c\"q6 mt", stringBuffer0);
      // Undeclared exception!
      try { 
        dateInput0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "ncLg[n[']HC7#inM`", "mGe!");
      // Undeclared exception!
      try { 
        checkbox0.end((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.em(object0);
      component0.el("4CMq19{T!w<W'");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "TableRow_1");
      // Undeclared exception!
      try { 
        checkbox0.addFirst(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setGeneratedId(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Select select0 = new Select((Component) null, "tS*}x", "VG1~|c", (ISelectModel) null, "tS*}x");
      // Undeclared exception!
      try { 
        select0.var((Object) "VG1~|c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "multiple", "xk:`s\"");
      // Undeclared exception!
      try { 
        radio0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6,ar:P-");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Form form0 = new Form("div");
      // Undeclared exception!
      try { 
        form0.title("oe/wSk9/s)01)y-H{#H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Form form0 = new Form("(C#z0]c1Cz@D@FlM,u5");
      // Undeclared exception!
      try { 
        form0.sup((Object) "(C#z0]c1Cz@D@FlM,u5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("A_doSO6");
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000013");
      Form form0 = new Form(numberInput0, "QZw6LaBNR$/`J", actionExpression0);
      // Undeclared exception!
      try { 
        form0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "Y[~X3%33tcBT*-X", "Y[~X3%33tcBT*-X");
      // Undeclared exception!
      try { 
        textArea0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("could not resolve entity named '");
      // Undeclared exception!
      try { 
        form0.numberInput("f[0+*_MHnZ)Z#W0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "DEFAULT", "DEFAULT");
      // Undeclared exception!
      try { 
        fileInput0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("TableRow_1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.label((Object) "TableRow_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Form form0 = new Form(" in class ");
      TextArea textArea0 = new TextArea(form0, " in class ", " in class ");
      // Undeclared exception!
      try { 
        textArea0.htmlText(" in class ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form("^>Dw($Kn=c\"q6 mt");
      // Undeclared exception!
      try { 
        form0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("bdQ[i.|C;#o");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CHECKCAST [J");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "aQ6NAr7TM=", (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        numberInput0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Form form0 = new Form("{");
      // Undeclared exception!
      try { 
        form0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, (String) null, "  ");
      // Undeclared exception!
      try { 
        radio0.dfn((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("+d|J%^jAYa");
      // Undeclared exception!
      try { 
        form0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ux'wVr");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Thead component can be added only to a Table.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo("Thead component can be added only to a Table.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "qX~v3g*5bu(N", "qX~v3g*5bu(N", stringSelectModel0, "qX~v3g*5bu(N");
      Hidden hidden0 = new Hidden(select0, "qX~v3g*5bu(N", "qX~v3g*5bu(N");
      ActionExpression actionExpression0 = new ActionExpression("qX~v3g*5bu(N");
      Text text0 = new Text(hidden0, actionExpression0);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("':IC3ugcKi\"1UL'_2.6");
      // Undeclared exception!
      try { 
        text0.b((Object) xmlEntityRef0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("K[*P=mApDX]w^/JD");
      // Undeclared exception!
      try { 
        xmlEntityRef0.address((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("^TGd,XXxzIMAk.]Iz");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "D|<j%[NPAhj#PWe", "G*P9@{w0.:IB");
      Hidden hidden0 = new Hidden(checkbox0, (String) null, "G*P9@{w0.:IB");
      // Undeclared exception!
      try { 
        hidden0.a();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ElExpression elExpression0 = new ElExpression("^>Dw($Kn=c\"q6 mt");
      Image image0 = null;
      try {
        image0 = new Image(block0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ^>Dw($Kn=c\"q6 mt in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.eval((Object) null);
      assertEquals("null", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Form form0 = new Form("wheel_ErrorPage");
      Checkbox checkbox0 = new Checkbox(form0, "wheel_ErrorPage", "QZw6LaBNR$/`J");
      // Undeclared exception!
      try { 
        form0.addFormElement(checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      ActionExpression actionExpression0 = new ActionExpression("java/lang/Doble");
      Form form0 = new Form(component0, "`?`GC 9h[kmZug", actionExpression0);
      Hidden hidden0 = new Hidden(form0, "wy)da)5", "wy)da)5");
      form0.addFormElement(hidden0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0.getEngine();
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ux'wVr");
      xmlEntityRef0.afterAdd();
      assertEquals("ux'wVr", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Table table0 = new Table(link0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      // Undeclared exception!
      try { 
        tableBlock0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("vF");
      Form form0 = new Form(errorPage0, "-(3AYA", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "A:xL", "A:xL");
      checkbox0.label("vF");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Form form0 = new Form("gTVL/,>%l");
      Checkbox checkbox0 = new Checkbox(form0, ",%-j0g^lD~.q", ",%-j0g^lD~.q");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      ActionExpression actionExpression0 = new ActionExpression("_");
      Component component1 = component0.actionBinding(actionExpression0);
      assertEquals("Block_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Form form0 = new Form("x7I %lH");
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y0,c8nh`e+#O3");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.br();
      component0.end();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      TextArea textArea0 = new TextArea(tableRow0, " standalone=", " standalone=");
      // Undeclared exception!
      try { 
        textArea0.end(" standalone=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ' standalone='.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "java.lang.String@0000000007", "java.lang.String@0000000007");
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000013");
      Form form0 = new Form(numberInput0, "QZw6LaBNR$/`J", actionExpression0);
      Block block0 = new Block(form0);
      Component component0 = block0.end("java.lang.String@0000000007");
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "h2f3Y`r'5[X}sbJ*", "h2f3Y`r'5[X}sbJ*");
      Radio radio0 = new Radio(checkbox0, "8K", "org.mvel.conversion.FloatCH$10");
      Short short0 = new Short((short)49);
      // Undeclared exception!
      try { 
        radio0.dateFormat("8K", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.IntegerCH$8");
      Component component0 = errorPage0.li((Object) elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression((String) null);
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("java.lang.String@0000000011");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'java.lang.String@0000000011'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Form form0 = new Form("-h\"#Cqf0a9]");
      // Undeclared exception!
      try { 
        form0.up(62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Form form0 = new Form("div");
      Component component0 = form0.up((-1568));
      assertEquals("div", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Form form0 = new Form("We4X':");
      boolean boolean0 = form0.equals("We4X':");
      assertFalse(boolean0);
      assertEquals("We4X':", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      ActionExpression actionExpression0 = new ActionExpression("java/lang/Doble");
      Form form0 = new Form(component0, "`?`GC 9h[kmZug", actionExpression0);
      Component component1 = form0.del();
      form0.remove(component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0.equals((Object)component1));
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "8HzP@TbW");
      TableBlock tableBlock0 = table0.tfoot();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("8HzP@TbW", "&gt;");
      tableBlock0.acronym((Object) initialFieldValue0);
      tableBlock0._clear();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6,ar:P-");
      xmlEntityRef0._clear();
      assertEquals("6,ar:P-", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Form form0 = new Form("^>Dw($Kn=c\"q6 mt");
      Component component0 = form0.addInternalRenderHint("X2%Fds./j");
      assertEquals("^>Dw($Kn=c\"q6 mt", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Form form0 = new Form("no more data available");
      // Undeclared exception!
      try { 
        form0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("vF");
      Form form0 = new Form(errorPage0, "-(3AYA", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "A:xL", "A:xL");
      Form form1 = checkbox0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Ruzvu<*N", "java.lang.String@0000000007");
      Table table0 = new Table(textArea0, "Ruzvu<*N");
      TableBlock tableBlock0 = table0.tbody();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "org.mvel.conversion.FloatCH$6", "Ruzvu<*N");
      checkbox0._getVisibleForm(true);
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Form form0 = new Form(" in class ");
      Form form1 = form0._getVisibleForm(true);
      assertEquals(" in class ", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      ActionExpression actionExpression0 = new ActionExpression("java/lang/Doble");
      Form form0 = new Form(component0, "`?`GC 9h[kmZug", actionExpression0);
      form0.id("h1");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "8HzP@TbW");
      TableBlock tableBlock0 = table0.tfoot();
      assertTrue(tableBlock0._isGeneratedId());
      
      tableBlock0.id("Pragma");
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(block0, "onclick", "", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.id("h1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "E-aHtj ~8CDAe", "E-aHtj ~8CDAe", "E-aHtj ~8CDAe");
      TableBlock tableBlock0 = new TableBlock(dateInput0, "YEA]ZYy");
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.renderComponent((XmlSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Any", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      tableBlock0.tr();
      List<RenderableComponent> list0 = tableBlock0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Form form0 = new Form(" in class ");
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals(" in class ", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "^>Dw($Kn=c\"q6 mt");
      tableBlock0.tr();
      // Undeclared exception!
      try { 
        tableBlock0.find("^>Dw($Kn=c\"q6 mt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ^>Dw($Kn=c\"q6 mt on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("onclick");
      Radio radio0 = new Radio(xmlEntityRef0, "w{A3F0&%>5v6!N-akl", "'");
      radio0._getAction();
      assertEquals("onclick", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Form form0 = new Form("^>Dw($Kn=c\"q6 mt");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        form0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("could not resolve entity named '");
      Form form0 = new Form(errorPage0, "could not resolve entity named '", actionExpression0);
      Submit submit0 = new Submit(form0, "could not resolve entity named '", "could not resolve entity named '");
      Table table0 = new Table(submit0, "OG&@TK'");
      TableRow tableRow0 = table0.tr();
      String[] stringArray0 = new String[0];
      Component component0 = tableRow0.attributes(stringArray0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Link link0 = new Link(errorPage0, tableRow0);
      Table table0 = new Table(link0, "br");
      TableBlock tableBlock1 = table0.thead();
      TableBlock tableBlock2 = tableBlock1.renderHint("br");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("br", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre((Object) null);
      Component component1 = component0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "$");
      DateInput dateInput0 = new DateInput((Component) null, "$", "Cannot add a form element. No surrounding form found.", "");
      // Undeclared exception!
      try { 
        textInput0.cite((Object) dateInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Form form0 = new Form("^>Dw($Kn=c\"q6 mt");
      // Undeclared exception!
      try { 
        form0.del((Object) "^>Dw($Kn=c\"q6 mt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "6pX (Vi\u0004", "6pX (Vi\u0004");
      DateInput dateInput0 = new DateInput((Component) null, "6pX (Vi\u0004", "6pX (Vi\u0004", "6pX (Vi\u0004");
      // Undeclared exception!
      try { 
        dateInput0.h5((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y0,c8nh`e+#O3");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration("=[>&v");
      ElExpression elExpression0 = new ElExpression("J!+/.E");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "=[>&v", "l-Uz2]_kw0ASUQ", dynamicSelectModel0, elExpression0);
      Component component0 = checkboxGroup0.sup();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("l-Uz2]_kw0ASUQ", checkboxGroup0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.br();
      // Undeclared exception!
      try { 
        component0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.q();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      // Undeclared exception!
      try { 
        component0.submit((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      // Undeclared exception!
      try { 
        block0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", (String) null);
      // Undeclared exception!
      try { 
        errorPage0.addFirst(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";\"&U'Q");
      // Undeclared exception!
      try { 
        xmlEntityRef0.select("{9", (ISelectModel) null, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "c5,Gz#(Qe0qH,zNzRvm", "c5,Gz#(Qe0qH,zNzRvm");
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        checkbox0.form("o8%wY`K@}:6", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre((Object) null);
      // Undeclared exception!
      try { 
        component0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Form form0 = new Form(" does not exist.");
      Long long0 = Long.valueOf(1L);
      // Undeclared exception!
      try { 
        form0.p((Object) long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Component component0 = errorPage0.a((Object) mockGregorianCalendar0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("area");
      Submit submit0 = new Submit(xmlEntityRef0, "i", "i");
      // Undeclared exception!
      try { 
        submit0.reset("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Form form0 = new Form("style");
      TextInput textInput0 = new TextInput(form0, "style", "dV8)NNrn.^/J");
      Checkbox checkbox0 = new Checkbox(textInput0, "small", "dV8)NNrn.^/J");
      // Undeclared exception!
      try { 
        checkbox0.big((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "TableRow_1", "body");
      // Undeclared exception!
      try { 
        textArea0.wBlock("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "C`<@J=", "C`<@J=");
      // Undeclared exception!
      try { 
        checkbox0.strong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "uzfN~%g7^");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "TableRow_1", "^>Dw($Kn=c\"q6 mt", (ISelectModel) null, (ElExpression) null);
      Component component0 = errorPage0.pre((Object) null);
      component0._setParent(radioGroup0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(radioGroup0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.em(object0);
      Component component1 = component0.address(object0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Form form0 = new Form("^>Dw($Kn=c\"q6 mt");
      MXSerializer mXSerializer0 = new MXSerializer();
      form0._renderActions(mXSerializer0);
      assertEquals("^>Dw($Kn=c\"q6 mt", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.textarea("V_3J#OKBF:Yi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "^>Dw($Kn=c\"q6 mt", "^>Dw($Kn=c\"q6 mt");
      // Undeclared exception!
      try { 
        checkbox0.u((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "3d/I_K3ghnuT1 >KG3", "3d/I_K3ghnuT1 >KG3");
      TableBlock tableBlock0 = new TableBlock(hidden0);
      Component component0 = tableBlock0.table();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("3d/I_K3ghnuT1 >KG3", hidden0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "TableRow_1");
      // Undeclared exception!
      try { 
        table0.textInput("org.apache.commons.io.filefilter.SuffixFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "Q\"UeK{Fo{mY<^W", "Q\"UeK{Fo{mY<^W", "Q\"UeK{Fo{mY<^W");
      // Undeclared exception!
      try { 
        dateInput0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CHECKCAST [J");
      xmlEntityRef0.action("CHECKCAST [J");
      assertEquals("CHECKCAST [J", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h3");
      ElExpression elExpression0 = new ElExpression("h3");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText(elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        component0.radioGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "8HzP@TbW");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.sub();
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "l$['l3C<");
      Component component0 = block0.label((Object) errorPage0);
      Component component1 = component0.wrapSelf();
      assertTrue(component1._isGeneratedId());
      assertEquals("l$['l3C<", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y0,c8nh`e+#O3");
      Component component0 = table0.link();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      Component component1 = component0.cite();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        component0.message("kdwa&V$]3WRdENSr", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Gy{r.rt-)4D,k'");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.h1((Object) table0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Gy{r.rt-)4D,k'", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Form form0 = new Form("failed to access property: <<");
      TextInput textInput0 = new TextInput(form0, "failed to access property: <<", "failed to access property: <<");
      Hidden hidden0 = new Hidden(textInput0, (String) null, "failed to access property: <<");
      // Undeclared exception!
      try { 
        hidden0.noframes();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "TableBlock_1", "TableBlock_1", "TableBlock_1", stringSelectModel0, false);
      ElExpression elExpression0 = new ElExpression("TableBlock_1");
      RadioGroup radioGroup0 = new RadioGroup(select0, ",2j*DV", "#.r", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.i();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "8HzP@TbW");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.dd((Object) errorPage0);
      assertEquals("8HzP@TbW", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Table table0 = new Table(link0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      tableBlock0._applyFormat(errorPage0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "E-aHtj ~8CDAe", "E-aHtj ~8CDAe", "E-aHtj ~8CDAe");
      TableBlock tableBlock0 = new TableBlock(dateInput0, "YEA]ZYy");
      Component component0 = tableBlock0.u();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "javascript", "TableBlock_1");
      // Undeclared exception!
      try { 
        textInput0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden("Xd\"3{<:4OAn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "' is not registered as an action. Add @ActionMethod annotation to all methods that are action methods.", "iJ?");
      // Undeclared exception!
      try { 
        submit0.small((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Form form0 = new Form(".");
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.ASTNode");
      Integer integer0 = new Integer(46);
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ">B &.d|*g\"XU'4u", "");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        checkbox0.htmlText(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "gtLc'+", "gtLc'+");
      // Undeclared exception!
      try { 
        radio0.li((Object) "gtLc'+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "3d/I_K3ghnuT1 >KG3", "3d/I_K3ghnuT1 >KG3");
      TableBlock tableBlock0 = new TableBlock(hidden0);
      Component component0 = tableBlock0.h5();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("3d/I_K3ghnuT1 >KG3", hidden0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Form form0 = new Form(" in class ");
      Radio radio0 = new Radio(form0, " in class ", "++1bk^}zj*e<");
      // Undeclared exception!
      try { 
        radio0.bdo("++1bk^}zj*e<");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "LtV{3CwWb}+cAT{'", "LtV{3CwWb}+cAT{'");
      // Undeclared exception!
      try { 
        radio0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Component component0 = link0.dt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("v[fpLcC0)8XOr+f2%/s");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("N", (CharSequence) "v[fpLcC0)8XOr+f2%/s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Form form0 = new Form("/");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.text(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Integer integer0 = Integer.valueOf((-3240));
      Component component0 = errorPage0.h4((Object) integer0);
      // Undeclared exception!
      try { 
        component0.submit("h6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Form form0 = new Form("nPdu~CO lG8wf@");
      // Undeclared exception!
      try { 
        form0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "Dy(i4RyX", "TableRow_1", "Dy(i4RyX");
      FileInput fileInput0 = new FileInput(dateInput0, "^>Dw($Kn=c\"q6 mt", "^>Dw($Kn=c\"q6 mt");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        fileInput0.span((Object) errorPage0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y0,c8nh`e+#O3");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.br();
      // Undeclared exception!
      try { 
        component0.b();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Form form0 = new Form("E^}");
      Checkbox checkbox0 = new Checkbox(form0, "E^}", "E^}");
      FileInput fileInput0 = new FileInput(checkbox0, "", "L`ux&+ g");
      // Undeclared exception!
      try { 
        fileInput0.buttonInput("E^}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = block0.entity("5V.?$");
      assertEquals("5V.?$", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "3d/I_K3ghnuT1 >KG3", "3d/I_K3ghnuT1 >KG3");
      TableBlock tableBlock0 = new TableBlock(hidden0);
      // Undeclared exception!
      try { 
        tableBlock0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "expected > to end empty tag not ", "R_+Dk@Di||3VO#n");
      // Undeclared exception!
      try { 
        radio0.encode("expected > to end empty tag not ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("c.Q04/(GU'E1kO");
      Component component1 = errorPage0.var((Object) component0);
      assertTrue(component1._isGeneratedId());
      assertEquals("c.Q04/(GU'E1kO", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "^>Dw($Kn=c\"q6 mt", "^>Dw($Kn=c\"q6 mt");
      // Undeclared exception!
      try { 
        checkbox0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      tableBlock0.ins();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "jl<cm{I", "2M(.)78@k");
      // Undeclared exception!
      try { 
        radio0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "file", "THL]-k&k.ctB>");
      // Undeclared exception!
      try { 
        hidden0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "6GWt,", "Sensitive");
      // Undeclared exception!
      try { 
        fileInput0.tt((Object) "6GWt,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      StringBuffer stringBuffer0 = new StringBuffer(439);
      Any any0 = new Any(tableBlock0, stringBuffer0);
      // Undeclared exception!
      try { 
        any0.radio("del");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "S", "S");
      // Undeclared exception!
      try { 
        hidden0.abbr((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(link0, "~O:5mX%G", actionExpression0);
      Component component0 = form0.div();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertFalse(form0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Table table0 = new Table(link0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.samp((Object) errorPage0);
      component0.date();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Y0,c8nh`e+#O3");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.em();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Y0,c8nh`e+#O3", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Form form0 = new Form("onclick");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Component component0 = link0.base((CharSequence) null);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Form form0 = new Form("TableRow_1");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("grK<,-oFnC`LQ");
      // Undeclared exception!
      try { 
        form0.strike((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "mS\u0002>^j1", "mS\u0002>^j1");
      // Undeclared exception!
      try { 
        checkbox0.q((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.a();
      errorPage0.button();
      ActionExpression actionExpression0 = new ActionExpression("zTz28s0Ph?I :*1w");
      actionExpression0.setOwner(errorPage0);
      // Undeclared exception!
      try { 
        actionExpression0.getUpdateComponentFunctionCall();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.li();
      ElExpression elExpression0 = new ElExpression("java.lang.String@0000000015");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' java.lang.String@0000000015'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Link link0 = new Link(errorPage0, tableRow0);
      Table table0 = new Table(link0, "br");
      Component component0 = table0.s((Object) "");
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "CX*D=pmB6XsC8", "CX*D=pmB6XsC8", "CX*D=pmB6XsC8");
      // Undeclared exception!
      try { 
        dateInput0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "onclick", "((7");
      // Undeclared exception!
      try { 
        checkbox0.imageSubmit("", "+ZJvugx [ZpL8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("A");
      ActionExpression actionExpression0 = new ActionExpression("first character in input was UNICODE noncharacter (0xFFFE)- input requires int swapping");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend((Object) actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("strike");
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "?7", "?7");
      // Undeclared exception!
      try { 
        numberInput0.dl();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Table table0 = new Table(link0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.samp((Object) errorPage0);
      String string0 = component0.getComponentName();
      assertEquals("Label", string0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Table table0 = new Table(block0, "^>Dw($Kn=c\"q6 mt");
      Component component0 = table0.img((String) null, "expected equals sign (=) after version and not ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("^>Dw($Kn=c\"q6 mt", table0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("java.version");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "wheel.util.DynamicSelectModel", "&MK");
      DynamicSelectModel dynamicSelectModel0 = checkbox0.selectModel();
      ElExpression elExpression0 = new ElExpression("&MK");
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("_i2n66e:{LH", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "-OR6ygB5", "^>6aXOLDU|>v*or+e");
      ElExpression elExpression0 = new ElExpression("page.");
      // Undeclared exception!
      try { 
        textInput0.fileInput("\"o", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "pw#rJzaS=LG\"Z&", "pw#rJzaS=LG\"Z&", stringSelectModel0, "pw#rJzaS=LG\"Z&");
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        select0.i((Object) boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "feature name can not be null", "feature name can not be null");
      // Undeclared exception!
      try { 
        textInput0.fileInput("Col component can be added only to a TableBlock.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Table table0 = new Table(tableBlock0, "JR>a7n#u");
      table0.getAttributes();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("JR>a7n#u", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("TableRow_1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.checkbox("=[>&v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "^>Dw($Kn=c\"q6 mt", "^>Dw($Kn=c\"q6 mt");
      ActionExpression actionExpression0 = new ActionExpression("acronym");
      Form form0 = new Form(numberInput0, "^>Dw($Kn=c\"q6 mt", actionExpression0);
      ElExpression elExpression0 = new ElExpression("acronym");
      RadioGroup radioGroup0 = new RadioGroup(form0, (String) null, (String) null, (ISelectModel) null, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "org.mvel.conversion.IntArrayCH$2", "[]jOV(");
      // Undeclared exception!
      try { 
        hidden0.ins((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      Block block0 = component0.placeholder("TableRow_1");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Form form0 = new Form("button");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        form0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "8HzP@TbW");
      TableBlock tableBlock0 = table0.tfoot();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("8HzP@TbW", "&gt;");
      Component component0 = tableBlock0.acronym((Object) initialFieldValue0);
      // Undeclared exception!
      try { 
        component0.title("samp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "^>Dw($Kn=c\"q6 mt", "^>Dw($Kn=c\"q6 mt");
      TextArea textArea0 = new TextArea(checkbox0, (String) null, "R;;EzMT,Ta?");
      Text text0 = new Text(checkbox0, textArea0);
      // Undeclared exception!
      try { 
        text0.dateInput((String) null, "TableRow_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      Component component1 = component0.script();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("c.Q04/(GU'E1kO");
      Component component1 = component0.small();
      Component component2 = component1.param("-lGwBXx,{{sV", "-lGwBXx,{{sV");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("c.Q04/(GU'E1kO", component0.getComponentId());
      assertEquals("Any_1", component2.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000015");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("java.lang.String@0000000015");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("E).A_}hlmv");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "E).A_}hlmv", "vX-8r7{!x5Bq");
      // Undeclared exception!
      try { 
        checkbox0.kbd((Object) "@+S3");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "!oR%^g&5Rhb", "!oR%^g&5Rhb");
      // Undeclared exception!
      try { 
        textArea0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "O f,+G@D}#b", "D4tr4.fD4");
      // Undeclared exception!
      try { 
        textInput0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Table table0 = new Table(block0, "^>Dw($Kn=c\"q6 mt");
      Component component0 = table0.map("mC(Mu=J?S/Y");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
      assertEquals("mC(Mu=J?S/Y", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn((Object) "java.version");
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("h2");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      // Undeclared exception!
      try { 
        component0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      Component component1 = component0.h6((Object) null);
      ActionExpression actionExpression0 = new ActionExpression("dd");
      Component component2 = component1.sup((Object) actionExpression0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "%y*?XZq", "%y*?XZq");
      TextInput textInput0 = new TextInput(textArea0, "del", "del");
      // Undeclared exception!
      try { 
        textArea0.h2((Object) textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";k'y4%1d52");
      Component component0 = xmlEntityRef0.clasS(";k'y4%1d52");
      assertEquals(";k'y4%1d52", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Form form0 = new Form(", parser stopped on");
      // Undeclared exception!
      try { 
        form0.multiSelect("", (ISelectModel) null, ", parser stopped on");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.legend();
      // Undeclared exception!
      try { 
        errorPage0.remove("VDz0d>B:lp:GcNI?51V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id VDz0d>B:lp:GcNI?51V does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      component0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("TableRow_1");
      String string0 = xmlEntityRef0.toString();
      assertEquals("<null id=\"TableRow_1\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "-OR6ygB5", "^>6aXOLDU|>v*or+e");
      // Undeclared exception!
      try { 
        textInput0.dt((Object) "^>6aXOLDU|>v*or+e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
