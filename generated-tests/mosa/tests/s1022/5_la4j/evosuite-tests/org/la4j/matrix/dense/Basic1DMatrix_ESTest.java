/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:00:05 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.setAll(0.5);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-706), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -706x-706
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(375, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("Can not decode Basic1DMatrix from the given byte array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(2, 2);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.set((-982), (-982), (-982));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-982' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(2, 2);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.shuffle();
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(13, 13, 13);
      assertNotNull(basic1DMatrix0);
      assertEquals(13, basic1DMatrix0.rows());
      assertEquals(13, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(13, 13);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(13, basic1DMatrix0.rows());
      assertEquals(13, basic1DMatrix0.columns());
      assertEquals(13, matrix0.rows());
      assertEquals(13, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(4, 4, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      SparseMatrix sparseMatrix0 = basic1DMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix0.getRow(9983);
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-2673), (-2673), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2673x-2673
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(9, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(898, 1256);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.rotate();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapRows(0, (-2951));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(341, 2368);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 341
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(249, 0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(249, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(3175, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(3175, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1, 3175);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(3175, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(3175, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix1, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      
      double[][] doubleArray1 = basic1DMatrix0.toArray();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(55);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(55, basic1DMatrix1.columns());
      assertEquals(55, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix1, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      double double0 = basic1DMatrix0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(2, 2);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapRows((-1), (-1));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(9, 9);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.rows());
      assertEquals(2, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.multiplyByItsTranspose();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, matrix0.columns());
      assertEquals(2, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(1, 1, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.blankOfColumns(1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      DenseMatrix denseMatrix0 = DenseMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotNull(denseMatrix0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotNull(byteArray0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix1.equals((Object)matrix0));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix1.rows());
      assertEquals(1, basic1DMatrix1.columns());
  }
}
