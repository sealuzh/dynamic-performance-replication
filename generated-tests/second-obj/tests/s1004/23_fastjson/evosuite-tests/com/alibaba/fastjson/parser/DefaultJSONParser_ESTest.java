/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:36:52 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldStringArray", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~Uv(");
      LinkedHashMap<NumberFormat, JavaBeanDeserializer> linkedHashMap0 = new LinkedHashMap<NumberFormat, JavaBeanDeserializer>();
      defaultJSONParser0.checkMapResolve(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - U, info : pos 1, json : ~Uv(
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 39);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l_-m:%g", parserConfig0);
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1249);
      Class<Float> class0 = Float.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Locale locale0 = Locale.ITALIAN;
      defaultJSONParser0.parseKey();
      String string0 = ParserConfig.DENY_PROPERTY;
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser1.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : SHHnV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_[H\"^04#");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ], pos 1, json : ]_[H\"^04#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV", parserConfig0);
      classLoader0.clearAssertionStatus();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.handleResovleTask(choiceFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : SHHnV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", (-86));
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(boolean0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_[H\"^04#");
      Class<Boolean> class0 = Boolean.TYPE;
      defaultJSONParser0.getDateFormat();
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ], pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_[H\"^04#");
      Class<Boolean> class0 = Boolean.TYPE;
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ], pos 1, json : ]_[H\"^04#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "unclosed jsonArray";
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray", parserConfig0);
      Class<Point> class0 = Point.class;
      LinkedList<Feature> linkedList0 = new LinkedList<Feature>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 8, json : unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SupportNonPublicField");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s6PBFv5zKK");
      defaultJSONParser0.resolveReference("I");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : s6PBFv5zKK
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      ParserConfig.global = null;
      defaultJSONParser0.resolveReference("(C)Z");
      defaultJSONParser0.accept(10, 10);
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.setResolveStatus((-4482));
      defaultJSONParser0.config(feature0, true);
      assertEquals((-4482), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getContext();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      LinkedHashSet<Timestamp> linkedHashSet0 = new LinkedHashSet<Timestamp>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SV");
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "illegal identifier : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName illegal identifier : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SV");
      defaultJSONParser0.setDateFormat("SV");
      int int0 = 19;
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HH4nV");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "HH4nV", (Object) "HH4nV");
      defaultJSONParser0.resolveReference("-i|/");
      parseContext0.toString();
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.popContext();
      ParserConfig parserConfig0 = ParserConfig.global;
      Vector<ExtraTypeProvider> vector0 = new Vector<ExtraTypeProvider>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : HH4nV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-4429), (-4429));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lan~/reflece Type;)Ljtva/lang/Object;");
      Stack<ExtraProcessor> stack0 = new Stack<ExtraProcessor>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Vector<ExtraTypeProvider> vector0 = new Vector<ExtraTypeProvider>();
      Vector<ChronoLocalDate> vector1 = new Vector<ChronoLocalDate>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lan~/reflece Type;)Ljtva/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lan~/reflece Type;)Ljtva/lang/Object;");
      Stack<ExtraProcessor> stack0 = new Stack<ExtraProcessor>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Vector<ExtraTypeProvider> vector0 = new Vector<ExtraTypeProvider>();
      Vector<ChronoLocalDate> vector1 = new Vector<ChronoLocalDate>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      DateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed str", parserConfig0);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0/A5~W", parserConfig0, 69);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 0/A5~W
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_[H\"^04#");
      Class<Boolean> class0 = Boolean.TYPE;
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      defaultJSONParser0.getObject("com.alibaba.fastjson.serializer.ListSerializer");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Collection<Boolean> collection0 = null;
      defaultJSONParser0.checkListResolve((Collection) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("-2147483648", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. -2147483648
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("d)", false);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d)", parserConfig0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1790));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SV");
      JSON.DEFAULT_TYPE_KEY = "SV";
      defaultJSONParser0.setDateFormat("SV");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect fieldName, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SV");
      LinkedHashMap<NumberFormat, JavaBeanDeserializer> linkedHashMap0 = new LinkedHashMap<NumberFormat, JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "SV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]_[H\"^04#");
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]_[H\"^04#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Feature feature0 = Feature.InternFieldNames;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+", 83);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(feature0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = '}';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1148));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONScanner0, parserConfig0);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.getFieldTypeResolver();
      LinkedHashSet<Timestamp> linkedHashSet0 = new LinkedHashSet<Timestamp>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 64);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      defaultJSONParser0.close();
      defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.HashMap");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashSet<BigInteger> hashSet0 = new HashSet<BigInteger>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7v%Of+", parserConfig0);
      Object object0 = new Object();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setResolveStatus(1757);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(1757, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[3] = '-';
      charArray0[3] = '-';
      LinkedHashSet<Timestamp> linkedHashSet0 = new LinkedHashSet<Timestamp>();
      Class<Integer> class0 = Integer.TYPE;
      LinkedHashSet<MockHijrahDate> linkedHashSet1 = new LinkedHashSet<MockHijrahDate>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1g`b");
      defaultJSONParser0.parse();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV", parserConfig0);
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      int int0 = Calendar.UNDECIMBER;
      defaultJSONParser0.getInput();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "java.lang.String@0000000003");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      Double double0 = new Double(1);
      defaultJSONParser0.setContext((Object) hashtable0, (Object) double0);
      defaultJSONParser0.checkMapResolve(hashtable0, defaultJSONParser_ResolveTask0);
      Byte byte0 = new Byte((byte)30);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("java.lang.String@0000000003");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      assertNotNull(parseContext0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Class<Dimension> class0 = Dimension.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.getInput();
      List<DefaultJSONParser.ResolveTask> list0 = new Vector<DefaultJSONParser.ResolveTask>();
      List<ExtraProcessor> list1 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list1);
      
      defaultJSONParser0.parse();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HD'N0q", parserConfig0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      int int0 = Calendar.ZONE_OFFSET;
      defaultJSONParser0.getInput();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "java.lang.String@0000000003");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double(1);
      defaultJSONParser0.setContext((Object) hashtable0, (Object) double0);
      defaultJSONParser0.getResolveTaskList();
      System.setCurrentTimeMillis(0L);
      Locale locale0 = Locale.ITALIAN;
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(collator0, "$+\"#]g5V&D#@X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 5, json : SHHnV
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = Opcodes.ACC_SUPER;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      Double double0 = new Double(307.0);
      Class<Float> class0 = Float.TYPE;
      Class<HttpCookie> class1 = HttpCookie.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Hashtable<BreakIterator, RuleBasedCollator> hashtable1 = new Hashtable<BreakIterator, RuleBasedCollator>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      IdentityHashMap<Collator, Method> identityHashMap0 = new IdentityHashMap<Collator, Method>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[long", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHH[V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.getResolveStatus();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("TODO : ", linkedHashMap0);
      treeMap0.put("^u:@", (Field) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      defaultJSONParser0.setContext((Object) null, (Object) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("TODO : ", parserConfig0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      linkedHashMap0.put("SHHnV", (Field) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseExtra(parameterizedTypeImpl0, "T~!3%Iw2?WaDYX-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error", parserConfig0, (-2674));
      JSON.DEFAULT_TYPE_KEY = "fastjson.parser.autoTypeSupport";
      defaultJSONParser0.getLexer();
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'v';
      charArray0[2] = 'J';
      defaultJSONParser0.close();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      JSONArray jSONArray0 = new JSONArray();
      JobAttributes jobAttributes0 = new JobAttributes();
      String string0 = "3Ir|spmF?$d&";
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(9pNw3");
      defaultJSONParser0.getObject("voB");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (9pNw3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "+\"#]g5V&D#@X");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Double double0 = new Double(1573.8766174823288);
      Locale locale0 = Locale.CHINESE;
      HttpCookie httpCookie0 = new HttpCookie("-2147483648", "SHHnV");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.getContext();
      Insets insets0 = new Insets(0, 165, 88, 0);
      Byte byte0 = new Byte((byte)3);
      Boolean boolean0 = Boolean.FALSE;
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashSet<BigInteger> hashSet0 = new HashSet<BigInteger>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{UjbI)Pa", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      Locale locale0 = JSON.defaultLocale;
      Locale locale1 = Locale.JAPAN;
      String string0 = ParserConfig.DENY_PROPERTY;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" .Tca3>)1r^)?fgsdFr", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json :  .Tca3>)1r^)?fgsdFr
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{bPA=sZ/_zHpbHc|9}7`");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual =
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = ":\"2kNj.MPH]";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":\"2kNj.MPH]");
      Feature feature0 = Feature.DisableASM;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :\"2kNj.MPH]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, parserConfig0.propertyNamingStrategy);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig1, (-70));
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHHnV");
      int int0 = Calendar.UNDECIMBER;
      defaultJSONParser0.getInput();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "java.lang.String@0000000003");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double(307.0);
      ParseContext parseContext1 = new ParseContext((ParseContext) null, double0, "java.lang.String@0000000003");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext1;
      Double double1 = new Double(1);
      defaultJSONParser0.setContext((Object) hashtable0, (Object) double1);
      defaultJSONParser0.checkMapResolve(hashtable0, defaultJSONParser_ResolveTask0);
      Byte byte0 = new Byte((byte)30);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("java.lang.String@0000000003");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockCalendar> class0 = MockCalendar.class;
      jSONArray0.toJavaList(class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      JSON.parseObject("NaN");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.resolveReference("NaN");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" me8E8!d5I\"");
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addAccept(" me8E8!d5I\"");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      int int0 = Calendar.UNDECIMBER;
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.parseKey();
      HashSet<JSONObject> hashSet0 = new HashSet<JSONObject>();
      // Undeclared exception!
      try { 
        MockHijrahDate.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.HijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("HH4nV");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", actual ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "syntax error, expect ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ", parserConfig0, (-1621));
      defaultJSONParser0.setContext((ParseContext) null);
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getContext();
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", (String) null);
      defaultJSONParser0.setContext((ParseContext) null, (Object) httpCookie0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1621));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.compatibleWithJavaBean = false;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Ujbz)Pa", parserConfig0, 115);
      EvoSuiteFile evoSuiteFile0 = null;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = " me8E8!d5I\"";
      System.setCurrentTimeMillis(0);
      MockDateFormat.getDateTimeInstance();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHH[V");
      boolean boolean0 = new Boolean("SHH[V");
      int int0 = DateFormat.DAY_OF_WEEK_FIELD;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Object object0 = new Object();
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      BeanContext beanContext0 = defaultJSONParser1.lastBeanContext;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      vector0.add(mockThaiBuddhistDate0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Type) null, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : SHH[V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}D>*", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }D>*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Locale locale0 = Locale.ITALIAN;
      JSON.defaultLocale = locale0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      defaultJSONParser0.setResolveStatus((-2696));
      Vector<MockThaiBuddhistDate> vector0 = new Vector<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{bPA=sZ/_zHpbHc|9}7`");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{bPA=sZ/_zHpbHc|9}7`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - =, info : pos 4, json : {bPA=sZ/_zHpbHc|9}7`
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayCountry(locale1);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHH[V");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      HashMap<Byte, MockDate> hashMap0 = new HashMap<Byte, MockDate>();
      defaultJSONParser0.checkMapResolve(hashMap0, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getContext();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : SHH[V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",!V^ay{aCU#Pia`Dj~;");
      Class<Boolean> class0 = Boolean.TYPE;
      IdentityHashMap<MockMinguoDate, MockCalendar> identityHashMap0 = new IdentityHashMap<MockMinguoDate, MockCalendar>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : !pos 1, json : ,!V^ay{aCU#Pia`Dj~;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHH[V");
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.setDateFormat("SHH[V");
      defaultJSONParser0.getInput();
      defaultJSONParser0.accept(18);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = ",!V^ay{aCU#Pia`Dj~;";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",!V^ay{aCU#Pia`Dj~;");
      Class<Boolean> class0 = Boolean.TYPE;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : !pos 1, json : ,!V^ay{aCU#Pia`Dj~;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      int int0 = DateFormat.DEFAULT;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 2);
      defaultJSONParser0.getInput();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      Double double0 = new Double(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setContext((Object) "fastjson.parser.autoTypeSupport", (Object) aSMDeserializerFactory0);
      defaultJSONParser0.checkMapResolve(hashtable0, (Object) null);
      Byte byte0 = new Byte((byte) (-69));
      Double double1 = new Double((-975.31824084));
      Point point0 = new Point(1, 0);
      Point point1 = new Point(point0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(point1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Locale locale0 = Locale.ITALIAN;
      HashSet<BigInteger> hashSet0 = new HashSet<BigInteger>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = new Boolean("h0KW1,>TwVE'Jg");
      defaultJSONParser0.setContext((Object) "null", (Object) boolean0);
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayLanguage();
      DecimalFormatSymbols.getInstance(locale1);
      defaultJSONParser0.parseObject((Type) null, (Object) "null");
      defaultJSONParser0.getContext();
      Random.setNextRandom(2);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Feature feature0 = Feature.InternFieldNames;
      defaultJSONParser0.isEnabled(feature0);
      Class<Short> class0 = Short.TYPE;
      BreakIterator.getWordInstance();
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie((String) null, "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Object object0 = new Object();
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      Feature feature0 = Feature.IgnoreAutoType;
      defaultJSONParser0.config(feature0, false);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[0];
      defaultJSONParser0.parseArray(typeArray0);
      Class<Byte> class1 = Byte.TYPE;
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(9pNw3");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.replaceAll(biFunction0);
      ParserConfig.getFieldFromCache("TODO s ", linkedHashMap0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.setContext((Object) null, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      SortedMap<String, Field> sortedMap0 = treeMap1.tailMap("lQmlex%[Gc*Ig|xfhI");
      ParserConfig parserConfig1 = ParserConfig.global;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("(C)Ljava/math/BigDecimal;", 0);
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      defaultJSONParser0.setContext((Object) jSONScanner0, (Object) parserConfig0);
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      defaultJSONParser0.setContext((Object) fileSystemHandling0, (Object) treeMap1);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.config(feature0, false);
      ParserConfig parserConfig2 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", actual ", parserConfig2, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) sortedMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
