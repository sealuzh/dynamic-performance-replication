/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:14:03 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      classReader0.getClassName();
      classReader0.getSuperName();
      int int0 = 1462;
      ClassWriter classWriter0 = new ClassWriter(1462);
      classReader0.accept((ClassVisitor) classWriter0, 4);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader0.readInt((-1125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1125
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      classReader0.getSuperName();
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '0';
      charArray0[2] = '-';
      charArray0[3] = 'q';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(277, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K1b{fe");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      int int0 = classReader0.readByte(7);
      assertEquals(47, int0);
      assertEquals(1380, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K1b{fe");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      int int0 = classReader0.readByte(7);
      assertEquals(1380, classReader0.header);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.AbstractFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.AbstractFileFilter");
      int int0 = 5;
      classReader0.getInterfaces();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 's';
      charArray0[2] = 'A';
      charArray0[3] = '2';
      charArray0[4] = 'W';
      charArray0[5] = '\"';
      charArray0[6] = 'E';
      classReader0.getSuperName();
      charArray0[7] = 'a';
      charArray0[8] = '0';
      // Undeclared exception!
      try { 
        classReader0.readClass(5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NotFileFilter");
      classReader0.getClassName();
      classReader0.getSuperName();
      int int0 = 1462;
      ClassWriter classWriter0 = new ClassWriter(1462);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader0.readInt((-1125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1125
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)95;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2133, (-1));
      byteArrayInputStream0.skip((byte) (-123));
      byteArrayInputStream0.read();
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-14);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-42), (byte) (-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      int int0 = 157;
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 157);
      pushbackInputStream1.available();
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(pushbackInputStream1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("Deprecated");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 801;
      PipedInputStream pipedInputStream0 = new PipedInputStream(801);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((byte[]) null, 67, 67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      charArray0[3] = 'Y';
      charArray0[4] = 'T';
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      charArray0[5] = ',';
      charArray0[6] = 'H';
      charArray0[7] = ' ';
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter1, 2);
      charArray0[8] = ',';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(91, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-8), 159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "8qatzGaZ4>e#.-g";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("8qatzGaZ4>e#.-g");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("N)]@o");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.getSuperName();
      classWriter0.toByteArray();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classReader0.readShort(289);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 292);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 618);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classAdapter0.visitAnnotation("1$7C8Ar", true);
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, 132);
      int int0 = classReader0.getAccess();
      assertEquals(33, int0);
  }
}
