/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:51:05 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(65536, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      assertSame(cacheControl_Builder1, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      boolean boolean0 = cacheControl0.noTransform();
      cacheControl0.isPrivate();
      boolean boolean1 = cacheControl0.noStore();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(0, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1792), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1792
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noCache();
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "md.w#'";
      stringArray0[1] = "wp,yhdw&6{|*f_$`";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertFalse(boolean0);
      
      boolean boolean1 = cacheControl0.noStore();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      int int0 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1799002270), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1799002270
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.onlyIfCached();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noTransform();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1204238313), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1204238313
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noStore();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      String string0 = cacheControl0.toString();
      assertEquals("no-transform", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheControl_Builder0.maxAge(2147483642, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.toString();
      System.setCurrentTimeMillis(2147483642);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.headerValue;
      int int0 = cacheControl0.maxStaleSeconds();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(21, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(21, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      String string0 = cacheControl0.toString();
      assertEquals("no-store, max-stale=0, min-fresh=0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "public";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertFalse(cacheControl3.noStore());
      assertEquals(Integer.MAX_VALUE, cacheControl3.maxStaleSeconds());
      assertFalse(cacheControl3.noCache());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertFalse(cacheControl3.isPublic());
      assertTrue(cacheControl3.onlyIfCached());
      assertFalse(cacheControl3.isPrivate());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      
      int int0 = MockThread.MIN_PRIORITY;
      cacheControl0.isPublic();
      String string0 = cacheControl0.headerValue;
      assertEquals("max-stale=2147483647, only-if-cached", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("Cache-Control", "rYd>=*Z8sK->$");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("pragma", "pragma");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      assertFalse(cacheControl2.noCache());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
      assertNotNull(string0);
      
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      String string0 = cacheControl0.toString();
      assertEquals("no-cache", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "min-fresh";
      stringArray0[1] = "j[aon<asvc";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "min-fresh";
      stringArray0[4] = "min-fresh";
      stringArray0[5] = "min-fresh";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.noTransform());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl0.FORCE_CACHE.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Headers cannot be null
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("Cache-Control", "max-stale=2147483647, only-if-cached");
      headers_Builder0.build();
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertTrue(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_NETWORK.headerValue = "hmw`JscV.W_uWuZD+A=";
      cacheControl0.toString();
      int int0 = MockThread.NORM_PRIORITY;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "min-fresh";
      stringArray0[1] = "j[aon<asvc";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "t>ph3!e";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "hmw`JscV.W_uWuZD+A=";
      stringArray0[6] = "Cache-Control";
      cacheControl0.FORCE_CACHE.headerValue = "sME0#JNLnQ\"Jm/h/";
      stringArray0[7] = "public";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toString();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      headers0.get("t>ph3!e");
      HashMap<String, String> hashMap0 = new HashMap<String, String>(192, 5);
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      cacheControl1.FORCE_NETWORK.headerValue = "s-maxage=";
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl0.FORCE_CACHE.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "s-maxage=";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      headers_Builder0.addLenient("Cache-Control");
      cacheControl0.isPublic();
      String string0 = cacheControl0.headerValue;
      Headers headers1 = new Headers(headers_Builder0);
      cacheControl2.maxStaleSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MRAx.xjIf1'}X5";
      stringArray0[1] = "cache-conyrol";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "rn;8&5w~Yi*P'EY]G";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertFalse(boolean0);
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "s-maxage=";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      int int0 = MockThread.MIN_PRIORITY;
      cacheControl0.isPublic();
      String string0 = cacheControl0.headerValue;
      assertEquals("max-stale=2147483647, only-if-cached", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[7] = "must-revalidate, ";
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "must-revalidate, ";
      stringArray0[6] = "Cache-Control";
      stringArray0[1] = "p^Cfubic";
      Headers headers0 = Headers.of(stringArray0);
      cacheControl0.toString();
      CacheControl.parse(headers0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("max-stale=2147483647, only-if-cached", "maxAge < 0: ");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      cacheControl_Builder0.onlyIfCached();
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      cacheControl2.maxAgeSeconds();
      CacheControl cacheControl3 = CacheControl.FORCE_NETWORK;
      // Undeclared exception!
      try { 
        headers_Builder0.add("Cache-Control");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: Cache-Control
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[7] = "max-stale=2147483647, only-if-cached";
      cacheControl0.headerValue = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "Ic@ph9!W";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "private";
      stringArray0[6] = "Cache-Control";
      stringArray0[1] = "p^Rubic";
      Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of(stringArray0);
      cacheControl0.toString();
      headers0.values("no-cache");
      cacheControl0.toString();
      Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      int int0 = cacheControl1.minFreshSeconds();
      assertFalse(cacheControl1.noTransform());
      assertTrue(cacheControl1.isPrivate());
      assertEquals((-1), int0);
      assertFalse(cacheControl1.noCache());
      assertTrue(cacheControl1.onlyIfCached());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      
      cacheControl2.isPrivate();
      cacheControl0.noCache();
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[7] = "must-revalidate, ";
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "must-revalidate, ";
      stringArray0[6] = "Cache-Control";
      stringArray0[1] = "p^Cfubic";
      Headers headers0 = Headers.of(stringArray0);
      headers0.get("p^Cfubic");
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.toString();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      Headers headers1 = Headers.of(stringArray0);
      CacheControl.parse(headers1);
      cacheControl1.isPublic();
      String string0 = cacheControl2.headerValue;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.set("9y'IMJPd+Y|", "<K[z^@\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x7f at 4 in header name: 9y'IMJPd+Y|
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "no-transform, ");
      Headers headers0 = headers_Builder0.build();
      Headers headers1 = new Headers(headers_Builder1);
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      CacheControl.parse(headers0);
      List<String> list0 = headers_Builder0.namesAndValues;
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[7] = "must-revalidate, ";
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "must-revalidate, ";
      stringArray0[6] = "Cache-Control";
      stringArray0[1] = "p^Cfubic";
      Headers.of(stringArray0);
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("max-stale=2147483647, only-if-cached", "maxAge < 0: ");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      cacheControl_Builder0.onlyIfCached();
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = cacheControl1.minFreshSeconds();
      assertEquals((-1), int1);
      
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl1.mustRevalidate();
      CacheControl cacheControl3 = CacheControl.FORCE_CACHE;
      cacheControl2.onlyIfCached();
      String string0 = cacheControl2.toString();
      assertEquals("must-revalidate, max-stale=2147483647, only-if-cached", string0);
  }
}
