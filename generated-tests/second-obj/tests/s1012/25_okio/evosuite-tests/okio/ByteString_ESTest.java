/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:32:24 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteString0);
      byteString0.base64();
      String string0 = byteString0.toString();
      assertEquals("[text=vv]", string0);
      
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("not attached to a buffer");
      byteString0.size();
      String string0 = byteString0.base64Url();
      assertEquals("bm90IGF0dGFjaGVkIHRvIGEgYnVmZmVy", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=76f0]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("*rT=7zWLg3", 0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Options.of(byteStringArray0);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA256");
      ByteString byteString1 = ByteString.decodeBase64("HmacSHA256");
      assertNotNull(byteString1);
      
      int int0 = byteString1.lastIndexOf(byteString0, 24);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-52);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("not attached to a buffer");
      int int0 = byteString0.size();
      assertEquals(24, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)121;
      int int1 = byteString0.lastIndexOf(byteArray0, (-2448));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1485L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.skip((-1));
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R6c5:Ek");
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString((byte[]) null);
      byteString0.equals(pipe0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("\u2026]");
      byteString0.EMPTY.md5();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.asByteBuffer();
      byteString0.sha1();
      int int0 = byteString0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      ByteString byteString1 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 113);
      byteString0.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=0c00000000000000000000000000000000000000]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[0];
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ByteString byteString0 = ByteString.read(inputStream0, 0);
      Charset.defaultCharset();
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-117);
      byteArray0[4] = (byte) (-19);
      realBufferedSink0.write(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(104, byteArray0, 15, 15);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      byteString0.toString();
      byteString0.lastIndexOf(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)118;
      byteArray1[5] = (byte)118;
      byteString0.lastIndexOf(byteArray1, 59);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: )
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString.encodeUtf8("not attached to a buffer");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("not attached to a buffer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte byte0 = (byte)12;
      MockFile mockFile0 = new MockFile("Z");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("1<m,7nyw&,SnPb<tzo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$[f_k%L882?{i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: $[f_k%L882?{i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("fD6kY%kuE@Fi{R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: k
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      String string0 = byteString0.hex();
      assertEquals("", string0);
      
      byteString0.EMPTY.asByteBuffer();
      String string1 = byteString0.utf8();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("0x,7v0G", charset0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Lpy=~Fma1p<r<}^HZ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Lpy=~Fma1p<r<}^HZ");
      Locale locale0 = Locale.FRENCH;
      byteString0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-30);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (byte) (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -30
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-65);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (byte) (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      byteString0.toAsciiLowercase();
      charset0.decode(byteBuffer0);
      String string0 = " content=";
      // Undeclared exception!
      try { 
        Charset.isSupported(" content=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  content=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.asByteBuffer();
      MockFile mockFile0 = new MockFile("af=");
      mockFile0.getAbsoluteFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byteString1.toAsciiLowercase();
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)83;
      boolean boolean0 = byteString1.endsWith(byteArray1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      boolean boolean0 = byteString0.rangeEquals((int) (byte)12, byteArray0, (int) (byte)0, 17);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = byteString0.toByteArray();
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 50);
      byteString0.write(bufferedOutputStream0);
      int int0 = byteString0.indexOf(byteArray0, 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource1.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.base64Url();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.asByteBuffer();
      MockFile mockFile0 = new MockFile("af=");
      mockFile0.getAbsoluteFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byteString1.toAsciiLowercase();
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.substring(347, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString.of(byteBuffer1);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = (-69);
      byteString0.rangeEquals((int) (byte)20, byteArray0, (-4), (-69));
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(221L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      realBufferedSink0.close();
      pipe0.sinkClosed = false;
      pipe_PipeSink0.flush();
      HashingSink.sha1(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.EMPTY.hashCode();
      pipe_PipeSink0.close();
      byteString0.equals(pipe_PipeSink0);
      byteString0.EMPTY.write(realBufferedSink0.buffer);
      int int0 = (-1836);
      // Undeclared exception!
      try { 
        byteString0.substring((-1836), (-1836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pipe pipe0 = new Pipe(1946L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.substring(3626, 1646);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)15);
      assertEquals(0, int0);
      
      int int1 = byteString0.EMPTY.indexOf(byteArray0, 0);
      assertEquals((-1), int1);
      
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      byteString0.hashCode();
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFDG\uFFFD\uFFFD~\uFFFD\uFFFD\u0000\uFFFD\uFFFD\uFFFD\uFFFDS\uFFFD2\uFFFD\uFFFD&,\uFFFDc@\uFFFD\uFFFD\u001B@\uFFFD\uFFFD\uFFFDo\uFFFD");
      ByteString byteString2 = byteString1.toAsciiUppercase();
      String string0 = byteString2.utf8();
      assertEquals("\uFFFDG\u0272~\uFFFD\uFFFD\u0000\u06F5\uFFFD\uFFFDS\uFFFD2\u00D3&,\uFFFDC@\uFFFD\uFFFD\u001B@\uFFFD\uFFFD\uFFFDO\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)15);
      byteString0.base64();
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      byteString0.lastIndexOf(byteArray0, (int) (byte)15);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Charset.defaultCharset();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int3 = byteString0.lastIndexOf(byteArray0, 2);
      assertEquals(0, int3);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.asByteBuffer();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte) (-95), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      byteString0.equals(byteString0);
      ByteString byteString1 = byteString0.substring(0, 0);
      assertEquals(0, byteString1.size());
      
      String string0 = byteString0.hex();
      assertEquals("73b7777797f7171797fbf777997fb97777777177779b93777795991b7757b755", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString2);
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 0);
      ByteString[] byteStringArray0 = new ByteString[1];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      MockFile mockFile0 = new MockFile("Z");
      byteString1.size();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteString0.equals(byteString1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\\");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \\
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      boolean boolean0 = byteString0.equals(charset0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(67);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean1 = byteString1.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = byteString0.toByteArray();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 50);
      byteString0.write(bufferedOutputStream0);
      int int0 = byteString0.indexOf(byteArray0, 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 0);
      ByteString[] byteStringArray0 = new ByteString[3];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        byteString0.substring((-995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      int int0 = byteString0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 550);
      ByteString byteString1 = byteString0.sha256();
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Pipe pipe0 = new Pipe((byte)15);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = hashingSource0.hash();
      Object object0 = new Object();
      byteString2.equals(byteString1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      String string0 = "HmacSHA256";
      byte byte1 = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString1.EMPTY.indexOf(byteString0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("#)", charset0);
      byteString2.base64();
      ByteString byteString3 = byteString2.sha256();
      Pipe pipe0 = new Pipe((byte)118);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      ByteString byteString4 = realBufferedSource0.readByteString(0L);
      byteString4.equals(pipedInputStream0);
      byteString3.compareTo(byteString4);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)118, 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=118 byteCount=119
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 113);
      ByteString byteString1 = byteString0.sha256();
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      byteString1.lastIndexOf(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.indexOf(byteArray0, (int) (byte)12);
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 1954);
      ByteString byteString1 = byteString0.sha512();
      byteString0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString(0L);
      byteString0.compareTo(byteString1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.markSupported();
      try { 
        ByteString.read(sequenceInputStream1, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = 99;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      Buffer buffer1 = buffer_UnsafeCursor2.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor1.buffer);
      Object object0 = new Object();
      buffer0.writeHexadecimalUnsignedLong((-1));
      byteString0.substring((int) (byte)12, (int) (byte)12);
      buffer_UnsafeCursor1.close();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[1];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byteString0.base64Url();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ByteString.read(inputStream0, 0);
      ByteString byteString1 = byteString0.substring(0);
      byteString1.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        Charset.forName("offset=%s > size=%s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // offset=%s > size=%s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)58;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.base64();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.base64();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("[size=0]", charset0);
      ByteString byteString3 = ByteString.of(byteArray0);
      byteString0.base64Url();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.compareTo(byteString2);
      ByteString byteString4 = ByteString.of(byteArray0);
      assertNotSame(byteString4, byteString3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.toString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.sha256();
      int int1 = ObjectStreamConstants.baseWireHandle;
      byteString0.EMPTY.sha256();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[43];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 113);
      byteString0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.sha256();
      ByteString byteString1 = byteString0.EMPTY.sha256();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("[hex=0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", charset0);
      byteString1.md5();
      byteString2.toString();
      ByteString byteString3 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      ByteString byteString4 = new ByteString(byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteString2.utf8();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 1954);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.lastIndexOf(byteArray0, 50);
      ByteString byteString3 = byteString1.sha512();
      byteString3.toString();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }
}
