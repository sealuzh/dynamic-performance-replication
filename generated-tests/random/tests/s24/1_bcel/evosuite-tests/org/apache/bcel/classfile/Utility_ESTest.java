/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:34:32 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F)hK;CJdo";
      stringArray0[1] = "F)hK;CJdo";
      stringArray0[2] = "r";
      stringArray0[3] = "F)hK;CJdo";
      stringArray0[4] = "F)hK;CJdo";
      Utility.methodTypeToSignature("F)hK;CJdo", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LF)hK;CJdo;LF)hK;CJdo;Lr;LF)hK;CJdo;LF)hK;CJdo;)LF)hK;CJdo;", "mc=yUqlTFr7ZHn", "Invalid method signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `do;LF)hK;CJdo;Lr;LF)hK;CJdo;LF)hK;CJdo;)LF)hK;CJdo;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "private pr";
      Utility.convertString("private pr");
      Utility.accessToString(2048, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L/<><O/x!0Hy;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `><O/x!0Hy;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-72), 204);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte) (-66), (byte) (-66));
      constantMethodHandle1.clone();
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (-699), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48777. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("iload_3V$Bi.Fj>)<b");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "iload_3V$Bi.Fj>)<b";
      objectArray0[1] = (Object) "iload_3V$Bi.Fj>)<b";
      objectArray0[2] = (Object) "iload_3V$Bi.Fj>)<b";
      objectArray0[3] = (Object) "iload_3V$Bi.Fj>)<b";
      objectArray0[4] = (Object) "Liload_3V$Bi/Fj>)<b;";
      objectArray0[5] = (Object) "Liload_3V$Bi/Fj>)<b;";
      objectArray0[6] = (Object) "Liload_3V$Bi/Fj>)<b;";
      Utility.printArray(objectArray0, false);
      Utility.isSet((-1), 135);
      Utility.clearBit((-3246), (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-104);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(870L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Invalid method signature: ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)39, 2244);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!e1v9ccQx=6~1QNc";
      stringArray0[1] = "YBzII`++o+PKU5|rs";
      stringArray0[2] = "u_Yx*y<s}PW9dM!rGS";
      stringArray0[3] = "!e1v9ccQx=6~1QNc";
      stringArray0[4] = "!e1v9ccQx=6~1QNc";
      stringArray0[5] = "java.lang.impdep1";
      stringArray0[6] = "!e1v9ccQx=6~1QNc";
      stringArray0[7] = "!e1v9ccQx=6~1QNc";
      Utility.methodTypeToSignature("!e1v9ccQx=6~1QNc", stringArray0);
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)74;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), (int) (byte)82, false);
      assertEquals("0:    ifnull\t\t#-9354\n3:    saload\n4:    dastore\n5:    dstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)73;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$C$b3I", string0);
      
      byte[] byteArray1 = Utility.decode("$C$b3I", false);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-77), (byte)73}, byteArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-77);
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{-77}", string1);
      
      String string2 = Utility.format((-2116), 1, true, '6');
      assertEquals("-2116", string2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(16384, 16384);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)10;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Oy3|2dTY5Kn~&Mc{f$");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("Oy3|2dTY5Kn~&Mc{f$");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-1), 0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-128));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(82);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1840700267), 27, true);
      assertEquals("0:    ior\n1:    <illegal opcode>\n2:    fdiv\n3:    istore_1\n4:    ladd\n5:    <illegal opcode>\n6:    frem\n7:    impdep2\n8:    lconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.convertString("c2XQ_~gOee[05^X");
      Utility.searchOpcode("[rr0).8'I]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "5jmvh]fS[k]0o";
      Utility.convertString("5jmvh]fS[k]0o");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.signatureToString("F\"+_Ym\"5D@", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "float";
      objectArray0[1] = (Object) "float";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.accessToString(89);
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-13);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1016, 1211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)52;
      byteArray0[0] = (byte)78;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)69;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G$>/VlSXX");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[8] = (byte)86;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("N$95F$d84$A$FEV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N$95F$d84$A$FEV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.setBit(85, 27);
      Utility.accessToString(27, true);
      Utility.isJavaIdentifierPart('I');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public private static final");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "public private static final";
      objectArray0[1] = (Object) "public private static final";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public private static final";
      objectArray0[4] = (Object) "public private static final";
      Utility.printArray(objectArray0, true);
      String string0 = Utility.replace("null", "Invalid signature: ", "Invalid signature: ");
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup2", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.classOrInterface(80);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2874), 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3176. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit(251, (byte) (-7));
      assertEquals(33554683, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("<", false);
      Utility.compactClassName("'");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)45;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(71);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)15);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)95, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.setBit(39, 93);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4021, (int) (byte)4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.isJavaIdentifierPart('o');
      Utility.clearBit((-466), 133);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "| t2 ONBdmh");
      MockPrintStream mockPrintStream0 = new MockPrintStream("]1t,ePy=");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "]1t,ePy=";
      objectArray0[1] = (Object) mockPrintStream1;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      Utility.fillup("rBE{GTfKHy)aO", 3794, false, '_');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 238, 222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.setBit(170, 170);
      String string0 = "3Pf";
      try { 
        Utility.typeOfSignature("3Pf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Pf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 90. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "KE9UsRbizi";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("KE9UsRbizi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KE9UsRbizi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.fillup("org.apache.bcel.classfile.LocalVariable", 41, true, 'S');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-1);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 194, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".t5H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .t5H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.setBit((-455), 858);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1056), (-2238), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    fload_0
         // 3:    lconst_1
         // 4:    dload\t\t%183
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.skipBytes((-733));
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "boolean";
      Utility.replace("GS[89DZ", "boolean", "boolean");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, 485);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)106;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, 3654, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)51);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifle\t\t#29491", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byte byte0 = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)47;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte) (-21);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jk'I;");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1177), (int) (byte)93, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnull", "jsr_w", "jsr_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("<", false);
      Utility.methodTypeToSignature("'", (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)45;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(71);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)15);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)95, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.typeOfSignature("TJ`4'{M?qU");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 88
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)95;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), 11, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)43;
      objectArray0[1] = (Object) (byte)37;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)43;
      Utility.printArray(objectArray0);
      Utility.accessToString((int) (byte)37, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.classOrInterface(33);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gv1,xI");
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.mark((byte)15);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.accessToString((int) (byte)15, false);
      assertEquals("public private protected static", string1);
      
      String string2 = Utility.convertString("o769zJ\";#");
      assertEquals("o769zJ\\\";#", string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "o769zJ\";#";
      stringArray0[1] = "A27r:_;9Jl(";
      stringArray0[2] = "class";
      stringArray0[3] = "public private protected static";
      stringArray0[4] = "o769zJ\";#";
      stringArray0[5] = "class";
      stringArray0[6] = "public private protected static";
      stringArray0[7] = "class";
      String string3 = Utility.methodTypeToSignature("i2c", stringArray0);
      assertEquals("(Lo769zJ\";#;LA27r:_;9Jl(;Lclass;Lpublic;Lo769zJ\";#;Lclass;Lpublic;Lclass;)Li2c;", string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.getSignature("void");
      Utility.format(2, 78, false, '4');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-35);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 50, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dsub";
      stringArray0[1] = "dsub";
      stringArray0[2] = "dsub";
      stringArray0[3] = "dsub";
      stringArray0[4] = "dsub";
      stringArray0[5] = "dsub";
      stringArray0[6] = "dsub";
      stringArray0[7] = "dsub";
      Utility.methodTypeToSignature("dsub", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-2363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)71;
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2290, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "ireturn";
      Utility.convertString("ireturn");
      Utility.setBit((-1749), 5256);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-90);
      byte byte0 = (byte)116;
      byteArray0[6] = (byte)116;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (-1749), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.setBit(83, 83);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(1343);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)44, 214);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      ConstantPool constantPool0 = null;
      int int0 = 1701;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1701, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-43);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)7;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%]");
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.fillup("$D$w$d7$d5$K$H", (byte)7, false, '!');
      assertTrue(string1.equals((Object)string0));
      
      Utility.compactClassName("new");
      String string2 = Utility.getSignature("new");
      assertEquals("Lnew;", string2);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte) (-41);
      byteArray1[5] = (byte) (-43);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      String string3 = Utility.accessToString(1266);
      assertEquals("private final synchronized volatile transient abstract", string3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.classOrInterface(33);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gv1,xI");
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.mark((byte)15);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("A27r:_;9Jl(", "d2l", false);
      assertEquals("A27r:_;9Jl(", string1);
      
      String string2 = Utility.convertString("o769zJ\";#");
      assertEquals("o769zJ\\\";#", string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "o769zJ\";#";
      stringArray0[1] = "A27r:_;9Jl(";
      stringArray0[2] = "class";
      stringArray0[3] = "A27r:_;9Jl(";
      stringArray0[4] = "o769zJ\";#";
      stringArray0[5] = "class";
      stringArray0[6] = "A27r:_;9Jl(";
      stringArray0[7] = "class";
      String string3 = Utility.methodTypeToSignature("d2l", stringArray0);
      assertEquals("(Lo769zJ\";#;LA27r:_;9Jl(;Lclass;LA27r:_;9Jl(;Lo769zJ\";#;Lclass;LA27r:_;9Jl(;Lclass;)Ld2l;", string3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("%>$$]@[_q&HXjkX||Y$", false);
      assertEquals(17, byteArray0.length);
      
      int int0 = Utility.clearBit(1765, (-99));
      assertEquals(1765, int0);
      
      String string0 = Utility.format(32, (-99), false, '#');
      assertEquals("32", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "32";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{32}", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (-1102029800));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.accessToString(3007, true);
      assertEquals("public private protected static final transient native strictfp", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-61);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Utility.isJavaIdentifierPart('V');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-12);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("j$f4", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(880L);
      constantArray0[0] = (Constant) constantLong0;
      constantLong0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      String string1 = Utility.format((byte)106, (byte) (-12), false, ')');
      String string2 = Utility.convertString("106");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.fillup("m+=.", (byte)106, false, 'l');
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllm+=.", string3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      byte byte1 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.equals(byteArray0, byteArray0);
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("{java.lang.Object@55d86000}", "{java.lang.Object@55d86000}", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 164, 444, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0U?fk&z.W,lIT ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0U?fk&z.W,lIT 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-102);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-370), (int) (byte)12, false);
      assertEquals("0:    fconst_1\n1:    dconst_0\n2:    ifgt\t\t#-11627\n5:    arraylength\n6:    astore\t\t%154\n", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)58;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 8);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-57);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2618, 994, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-10);
      byte byte0 = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-83);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 209, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)121;
      byte byte1 = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)83;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-114), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    lshl
         // 2:    d2i
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-60);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(2346);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-62), (byte) (-105));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1027), 23, true);
      assertEquals("0:    dcmpl\n1:    monitorenter\n2:    <illegal opcode>\n3:    iconst_0\n4:    dreturn\n5:    lshl\n6:    wide\t(wide)\n", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (-1256));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 73;
      Utility.accessToString(73);
      Utility.replace("public static volatile", "long", "public static volatile");
      Utility.isSet(73, 73);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("long", stringArray0);
      Utility.methodSignatureToString("()J", "public static volatile", "public static volatile", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.setBit(2530, 2530);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte) (-18), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.compactClassName("+sVUs-~iV[Xav", "+sVUs-~iV[Xav", true);
      Utility.convertString("Illegal type for StackMapType: ");
      Utility.getSignature("");
      Utility.clearBit(1921, 16384);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1920, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.setBit(77, 1910);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)97;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)82;
      byteArray0[3] = (byte)6;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)102;
      byte byte0 = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-90);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-383), 2180, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    aconst_null
         // 2:    fsub
         // 3:    lconst_1
         // 4:    aload_2
         // 5:    dup_x2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.isSet((byte)0, (byte)95);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[3] = "Invalid signature: `";
      stringArray0[4] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[5] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[6] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", stringArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 171);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable(80, 6, (byte)77, 1648, 74, (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(65, 80, localVariableArray0, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("Fi!q[_C", "boolean", "$l$8b$I$A$A$A$A$A$A$A", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Fi!q[_C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)1;
      byteArray0[0] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString(398, false);
      Utility.getSignature("private protected static transient native");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-63));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-19));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(188, 1232);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.classOrInterface(80);
      Utility.compactClassName("class", "class", false);
      Utility.searchOpcode("f~q>=\"Gzx&g-b4");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.FileFileFilter");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, 13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R\u0000tfqE_A[k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R\u0000tfqE_A[k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)82;
      byteArray0[8] = (byte)6;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)97;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-55));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-38));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Lty Cr9M+<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lty Cr9M+<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)16;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-94);
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"16\", null, \"-94\"}", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.searchOpcode("2");
      Utility.accessToString(79, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 195, (-2143), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3234;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(3234);
      String string0 = "M5bwq";
      try { 
        Utility.typeOfSignature("M5bwq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M5bwq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.getSignature("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)106);
      constantArray0[0] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      // Undeclared exception!
      try { 
        Utility.signatureToString("H|@JwAu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H|@JwAu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.fillup("invokeinterface", 247, true, '<');
      Utility.clearBit(247, 101);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-61);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-2), false);
      try { 
        Utility.typeOfSignature("7T!,,(qH:]^^3@bxn(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7T!,,(qH:]^^3@bxn(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Utility.clearBit(76, 76);
      assertEquals(76, int0);
      
      MockFile mockFile0 = new MockFile("FNFfE|Nt<C<cc6]+3", "FNFfE|Nt<C<cc6]+3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "FNFfE|Nt<C<cc6]+3";
      mockPrintWriter0.format("FNFfE|Nt<C<cc6]+3", objectArray0);
      mockPrintWriter0.close();
      mockPrintWriter0.close();
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte byte0 = Utility.typeOfSignature("FNFfE|Nt<C<cc6]+3");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte)13;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4711, 4711, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)40;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$kmKnrN_okQQEsX");
      Utility.encode(byteArray0, false);
      Utility.format((byte) (-101), (byte) (-77), false, '}');
      Utility.clearBit(230, 1139);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(1139);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4368, (int) (byte) (-23), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-724), 2562);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString((-1059), true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.setBit((byte)11, 11);
      Utility.searchOpcode("public protected static final volatile transient native strictfp synthetic annotation enum");
      byte[] byteArray1 = null;
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)77, (byte) (-42));
      constantArray0[0] = (Constant) constantMethodHandle0;
      int int0 = 1404;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(1404, (byte) (-42));
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)77);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)69;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-20));
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, (int) (byte) (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "EfhLFcx:ju$5vdA";
      // Undeclared exception!
      try { 
        Utility.decode("EfhLFcx:ju$5vdA", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 95, false);
      assertEquals("0:    fload\t\t%0\n2:    nop\n", string0);
      
      String string1 = Utility.accessToString(1, false);
      assertEquals("public", string1);
      
      boolean boolean0 = Utility.isSet((byte)23, (byte)23);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.convertString("long");
      int int0 = 67;
      boolean boolean0 = true;
      Utility.format(67, 4695, true, '\"');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-63);
      byte byte0 = (byte) (-103);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (-2343), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)69;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1401), 584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    if_icmpne\t\t#-20653
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3121), 75);
      assertEquals("0:    lneg\n1:    aload_3\n2:    <illegal opcode>\n3:    pop\n4:    dstore_2\n5:    aload_2\n6:    dcmpl\n7:    arraylength\n", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.format(9, (-2648), false, '_');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)86;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2075), (byte) (-103));
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte)35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.");
      Utility.clearBit((-628), (-628));
      Utility.methodTypeToSignature("T-O:b9$ld]T-O:b9$ld]", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("l2f");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2049), (byte)84);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-91));
      constantArray0[2] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      constantArray0[4] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ")UYX'|/a$\"A";
      try { 
        Utility.typeOfSignature(")UYX'|/a$\"A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )UYX'|/a$\"A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)36;
      byteArray0[3] = (byte)83;
      int int0 = 109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (-180), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10258. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xo!:)L9>UZL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xo!:)L9>UZL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8|}wJi@FZkIw6i[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8|}wJi@FZkIw6i[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("G.a+I`v_EC(", false);
      try { 
        Utility.methodSignatureReturnType("G.a+I`v_EC(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G.a+I`v_EC('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.accessToString(1966, true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "L^j";
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte)47, (int) (byte)47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("d2f");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_acmpeq\t\t#4825", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.format(126, 126, false, ')');
      Utility.searchOpcode("jar:file:");
      Utility.clearBit((short) (-1), (short) (-1));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((byte) (-62));
      try { 
        Utility.methodSignatureReturnType("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.methodTypeToSignature(" ", (String[]) null);
      Utility.clearBit(2116, 83);
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.clearBit(175, 175);
      String string0 = Utility.format(175, (-282), false, 'G');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-94);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "175");
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      Utility.decode("*", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)27;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 74, 1678);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-91);
      byte byte0 = (byte)122;
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-123);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JD";
      stringArray0[1] = "JD";
      stringArray0[2] = "JD";
      stringArray0[3] = "JD";
      stringArray0[4] = "JD";
      stringArray0[5] = "JD";
      stringArray0[6] = "JD";
      stringArray0[7] = "JD";
      stringArray0[8] = "JD";
      Utility.methodTypeToSignature("JD", stringArray0);
      Utility.methodSignatureArgumentTypes("(LJD;LJD;LJD;LJD;LJD;LJD;LJD;LJD;LJD;)LJD;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("JD", "LV:y,2\"YoXV/{q-kl^rb;V", "JD", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "2`oyM0Ls";
      try { 
        Utility.typeOfSignature("2`oyM0Ls");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2`oyM0Ls
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)59;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), 71, true);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureArgumentTypes("u.V(y~m}X~4|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u.V(y~m}X~4|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)62;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(887, 887, false, '#');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-86);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, (int) (byte)50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("dstore_2", stringArray0);
      assertEquals("()Ldstore_2;", string0);
      
      Utility.getSignature("caload");
      byte byte0 = Utility.typeOfMethodSignature("()Ldstore_2;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.format((byte)14, (byte)14, false, 'Y');
      assertEquals("YYYYYYYYYYYY14", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName(")\t", false);
      try { 
        Utility.typeOfSignature("6^L$-)t40[b?#mF4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6^L$-)t40[b?#mF4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.util.ClassPathRepository");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/H^;A,5[HzJSS@s");
      String string0 = "org.apache.bcel.classfile.AnnotationElementValue";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.AnnotationElementValue");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-69);
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)100;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 8);
      assertEquals("0:    lconst_1\n1:    jsr_w\t\t#-1775748562\n6:    <illegal opcode>\n7:    fcmpg\n8:    isub\n", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-72), 204);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte) (-66), (byte) (-66));
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("bipush\t\t110", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("System");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.replace("GS[89DZ", "boolean", "boolean");
      Utility.classOrInterface(64);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, 477);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "Ou/K~Z*~2";
      try { 
        Utility.methodSignatureReturnType("Ou/K~Z*~2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ou/K~Z*~2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "\t";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t");
      int int0 = (-307);
      Utility.clearBit((-307), (-307));
      Utility.clearBit(82, 82);
      String string1 = ",53t!T+4M7UHk3";
      try { 
        Utility.typeOfSignature(",53t!T+4M7UHk3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,53t!T+4M7UHk3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|5+X.w`y=S;Rsa)P5");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("? super ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(88, 88);
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      Utility.searchOpcode("Warning: Padding byte != 0 in ");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      String string1 = "@;{||\"|";
      try { 
        Utility.typeOfSignature("@;{||\"|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @;{||\"|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "$";
      boolean boolean0 = true;
      try { 
        Utility.decode("$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HmI5m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HmI5m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "[";
      Utility.typeOfSignature("[");
      Utility.clearBit((byte)13, (-1615312926));
      Utility.accessToString((-1615312926));
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C4KM}&\"b");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "/zSrdlu^_";
      try { 
        Utility.typeOfSignature("/zSrdlu^_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /zSrdlu^_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 182;
      Utility.fillup("ireturn", 182, false, 'Z');
      Utility.methodSignatureReturnType("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZireturn", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6Q47C*qmO}/&;vOG*", "instanceof", "instanceof", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Q47C*qmO}/&;vOG*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)74;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)74, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("!<SD3jSR1-|Mcy`J3\"x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <SD3jSR1-|Mcy`J3\"x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.compactClassName("ifgt", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger(1217);
      constantInteger0.setBytes(1007);
      constantPool0.constantToString((Constant) constantInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.compactClassName("dastore", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.fillup("liYk$qBGMp", 27, true, 'Q');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1123), (int) (byte)53, true);
      Utility.getSignature("0:    lor\n1:    saload\n2:    <illegal opcode>\n");
      Utility.replace("L0:;", "%[K*m@}", "liYk$qBGMpQQQQQQQQQQQQQQQ");
      String string1 = Utility.format((byte) (-127), 1139, false, 'j');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      byte byte1 = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), 1049, true);
      String string0 = ".KL_VQ#VXDp&";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorenter", ".KL_VQ#VXDp&", "F&;)4k6_?A42kBFpz11", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.clearBit((-3699), (-3699));
      String string0 = "s{[A&+q/";
      Utility.searchOpcode("s{[A&+q/");
      try { 
        Utility.methodSignatureArgumentTypes("({ED,qpvu6^}(7Nup0O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{ED,qpvu6^}(7Nup0O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("*UH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Q";
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('*');
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(11);
      assertEquals("public private static", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte) (-33));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(173, 80);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[2] = (Constant) constantLong2;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(195, 168);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)90;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.fillup("java.lang.", (-1895), false, '9');
      String string0 = "";
      Utility.compactClassName("", "", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.";
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("-*=c$+4Kx$P;D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -*=c$+4Kx$P;D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("G.a+I`v_EC(", false);
      Utility.classOrInterface(92);
      Utility.format(65, 39, true, 'y');
      boolean boolean0 = false;
      Utility.format((byte) (-107), (byte) (-107), false, 'y');
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1377, 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.getSignature("-*=c$+4Kx$P;D r^");
      Utility.clearBit(49, 49);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "L-*=c$+4Kx$P;D;";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "-*=c$+4Kx$P;D r^";
      objectArray0[3] = (Object) "L-*=c$+4Kx$P;D;";
      objectArray0[4] = (Object) "-*=c$+4Kx$P;D r^";
      objectArray0[5] = (Object) "L-*=c$+4Kx$P;D;";
      objectArray0[6] = (Object) "-*=c$+4Kx$P;D r^";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byte byte0 = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byte byte1 = (byte)125;
      byteArray0[2] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.methodSignatureReturnType("JyZ?5Xf`'~");
      boolean boolean0 = true;
      int int0 = 8;
      LocalVariable[] localVariableArray0 = new LocalVariable[6];
      int int1 = 77;
      Constant[] constantArray0 = new Constant[7];
      int int2 = 140;
      ConstantClass constantClass0 = new ConstantClass(140);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInteger constantInteger0 = new ConstantInteger(140);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      int int3 = 1682;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("_pX8t2F5Zg^");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (int) (byte)7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "N\"VG^E.(yT_Jwc>l|wG";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N\"VG^E.(yT_Jwc>l|wG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N\"VG^E.(yT_Jwc>l|wG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("baload", string0);
      
      byte byte0 = Utility.typeOfSignature("Z/,E%fI=dA0");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ">ZhTgr2V1PAwEB3sd";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature(">ZhTgr2V1PAwEB3sd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ZhTgr2V1PAwEB3sd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byte byte1 = (byte)7;
      byteArray0[1] = (byte)7;
      byte byte2 = (byte)84;
      byteArray0[2] = (byte)84;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)1;
      byte byte3 = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-102);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 442, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      
      int int0 = Utility.clearBit((-53786696), 125);
      assertEquals((-590657608), int0);
      
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      classPathRepository0.findClass("");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-590657608), false);
      assertEquals("2:    aconst_null\n3:    fneg\n", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)21;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "multianewarray");
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)110;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "LM~Tau{$";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LM~Tau{$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LM~Tau{$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("#YFE$<9T&r2](~4%E", false);
      int int0 = 75;
      Utility.accessToString(75, false);
      String string0 = "LR|\";V";
      String string1 = "fload_0";
      int int1 = (-841);
      int int2 = (-1597);
      LocalVariable[] localVariableArray0 = new LocalVariable[4];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("#YFE$<9T&r2](~4%E", "*pm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"*pm\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Utility.compactClassName("(name_index = ", ", npairs = ", false);
      assertEquals("(name_index = ", string0);
      
      String string1 = Utility.signatureToString("Bd;Mx", false);
      assertEquals("byte", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)91;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("53 43 89 a8 40 05 00 5b", string2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "AnTp*_$F!j:";
      try { 
        Utility.typeOfSignature("AnTp*_$F!j:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnTp*_$F!j:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 16384, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "E2D+R9z$v<oft83ebX";
      try { 
        Utility.typeOfSignature("E2D+R9z$v<oft83ebX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E2D+R9z$v<oft83ebX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.typeOfSignature("Js0fh+s] vLeG");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)11);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1372), (-497));
      assertEquals("0:    <illegal opcode>\n1:    lshr\n2:    ixor\n", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.convertString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.fillup("[SbpBzsShRmj^", (-2981), false, 'b');
      Utility.methodSignatureReturnType("[SbpBzsShRmj^");
      Utility.compactClassName("", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)22;
      objectArray0[1] = (Object) (byte)102;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-492));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "+vLsd'^)Tw";
      try { 
        Utility.typeOfSignature("+vLsd'^)Tw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vLsd'^)Tw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "[D,#K2R8c+3x";
      String string1 = "/e>!DVpA!CY'E$74KoD";
      // Undeclared exception!
      try { 
        Utility.getSignature("[D,#K2R8c+3x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [D,#K2R8c+3x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.isSet((-1109), 65);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1109), (-1109));
      String string0 = "boolean";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore_3\n", "boolean", "\"6_k$$%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-34);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-4504), (int) (byte)67);
      assertEquals("0:    fstore_0\n1:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.setBit(16, 188);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.skip(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dmul");
      Utility.methodTypeToSignature("dmul", (String[]) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("J3)QEC=j-(c349", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)31;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("Mit@Ip~XH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mit@Ip~XH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.isSet((-1109), 65);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1109), (-1109));
      String string0 = "boolean";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    daload\n", "boolean", "\"6_k$$%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    daload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("UH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.replace("1yM@1q#LG= ", "1yM@1q#LG= ", "+#{z*K");
      try { 
        Utility.typeOfSignature("+#{z*K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #{z*K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.setBit(163, 163);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 129, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format((-4602), (-4602), true, '\'');
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byte byte1 = (byte)7;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass((byte)7);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      int int0 = (-1027);
      int int1 = 46;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1027), 46);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantClass constantClass2 = new ConstantClass((byte)48);
      constantArray0[2] = (Constant) constantClass2;
      String string0 = "lstore_0";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lstore_0");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("Unknown constant type ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unknown constant type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.setBit(11, 11);
      Utility.isJavaIdentifierPart('X');
      Utility.accessToString(0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)72, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("cI8Kc?LZooY:#_(nA");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ]&^hW+W\"s aj");
      Utility.compactClassName("_DPsrI)", "_DPsrI)", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)47;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("_DPsrI)");
      Utility.compactClassName("~aue9sX*_:/$u", "", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(47, 965);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Utility.decode("#A$q)hWZ;", false);
          Utility.isJavaIdentifierPart('I');
          Utility.isJavaIdentifierPart('I');
          Object[] objectArray0 = new Object[2];
          objectArray0[0] = (Object) "#A$q)hWZ;";
          objectArray0[1] = (Object) "#A$q)hWZ;";
          Utility.printArray(objectArray0, false);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor115.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("[g|OLyr_rDXHk6w/f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g|OLyr_rDXHk6w/f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("d2f");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12482. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.compactClassName("fG@cqA(O|", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)85);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.replace("Li2d;V", "Li2d;V", "Li2d;V");
      Utility.signatureToString("Li2d;V", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "i2d";
      objectArray0[1] = (Object) "Li2d;V";
      objectArray0[2] = (Object) "Li2d;V";
      objectArray0[3] = (Object) "Li2d;V";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)20;
      byte byte1 = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)40;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString((byte)120);
      constantArray0[0] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)37, 1950);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat0;
      Constant constant0 = constantArray0[2].copy();
      constantArray0[3] = constant0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(377, (byte)41);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("(d3p");
      Utility.clearBit((short) (-1), 20);
      Utility.clearBit(128, (-1206));
      Utility.typeOfSignature("DQu-H7WM?C^^");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(d3p", "lreturn", "DQu-H7WM?C^^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d3p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('n');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "f2d");
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertEquals(7, charArrayWriter1.size());
      assertEquals("nf2d{}\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)19;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)64);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-40), (-1433047071), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55361. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Utility.clearBit(21, 21);
      assertEquals(21, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vh[G:IKp^x5xJByb");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.replace("arraylength", "Lo;.U`,J'taUJ|]$", "./k?1sqZ/");
      assertEquals("arraylength", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0c 0c 0c 0c 0c 00 0c 0c", string1);
      
      int int0 = Utility.clearBit((byte)12, (byte)0);
      assertEquals(12, int0);
      
      String string2 = Utility.fillup("arraylength", 1932, false, '2');
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.ConstantMethodType");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("org.apache.bcel.classfile.ConstantMethodType", objectArray0);
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("|\"N`)q", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString((byte)60);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      Constant constant0 = constantClass0.copy();
      constantArray0[3] = constant0;
      Constant constant1 = constantMethodType1.copy();
      constantArray0[4] = constant1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1919.5695));
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_1", "getstatic", "getstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "s45@{h5q@l[]";
      stringArray0[1] = "Null";
      stringArray0[2] = "Null";
      stringArray0[3] = "Null";
      stringArray0[4] = "Null";
      stringArray0[5] = "Null";
      stringArray0[6] = "Null";
      String string0 = Utility.methodTypeToSignature("Null", stringArray0);
      assertEquals("([Ls45@{h5q@l;LNull;LNull;LNull;LNull;LNull;LNull;)LNull;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$a9$r$fd$b3$3d$q$A$B", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)80);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)80);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("goto_w\t\t#-1109738626", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.convertString("Jn");
      String string0 = "P|0[}UJvu1Ww;rG%";
      try { 
        Utility.methodSignatureReturnType("P|0[}UJvu1Ww;rG%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P|0[}UJvu1Ww;rG%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "\"";
      Utility.convertString("\"");
      String string1 = "QuEYm5ALl?wYyrU&4.";
      boolean boolean0 = true;
      int int0 = 18;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\"", ", index = , index = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \", index = , index = \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c(aaH%");
      try { 
        Utility.typeOfSignature("1{a:Ng");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1{a:Ng
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = Utility.clearBit(2207, 97);
      assertEquals(2205, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-86);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-65);
      byteArray1[7] = (byte) (-65);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = ";Hq{6m`U*O4:OS`'";
      try { 
        Utility.typeOfSignature(";Hq{6m`U*O4:OS`'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Hq{6m`U*O4:OS`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte) (-106));
      assertEquals("1:    aload_1\n2:    fcmpg\n3:    fload_0\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)51;
      byte byte0 = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)69;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte) (-18);
      Utility.equals(byteArray1, byteArray1);
      try { 
        Utility.typeOfSignature("'V]\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'V]\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.replace("\n     Method Arguments:", "\n     Method Arguments:", "\n     Method Arguments:");
      Utility.compactClassName("ishl", "\n     Method Arguments:", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n     Method Arguments:";
      Utility.methodTypeToSignature("T8{{jOQe&uvvaW</Q|", stringArray0);
      Utility.convertString("T8{{jOQe&uvvaW</Q|");
      Utility.compactClassName("T8{{jOQe&uvvaW</Q|", false);
      Utility.convertString("\n     Method Arguments:");
      Utility.replace("}l~qHh?uE4{b}!ut9if", "I{^}", "T8{{jOQe&uvvaW</Q|");
      Utility.methodTypeToSignature("MnS-K0Nx'2eM`%ARU", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QYx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QYx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_0", string0);
      
      String string1 = Utility.compactClassName(")", true);
      assertEquals(")", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('l');
      int int0 = (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("RAN7A^aleri%Qb", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RAN7A^aleri%Qb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "=klz&hFi@!?'/yAC+k";
      try { 
        Utility.typeOfSignature("=klz&hFi@!?'/yAC+k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =klz&hFi@!?'/yAC+k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("T:V5@*bD@P:}gG", "T:V5@*bD@P:}gG", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T:V5@*bD@P:}gG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T:V5@*bD@P:}gG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "putstatic";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("putstatic", "putstatic", "putstatic");
      Utility.fillup("putstatic", 1159, true, '(');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", (String) null, "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "PI@wiF{J,NYi";
      try { 
        Utility.typeOfSignature("PI@wiF{J,NYi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PI@wiF{J,NYi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      Utility.format(69, 69, false, '(');
      Utility.format(82, 582, true, '<');
      try { 
        Utility.typeOfMethodSignature("(_^Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (_^Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      
      int int0 = Utility.clearBit((-53786696), 125);
      assertEquals((-590657608), int0);
      
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore\t\t%63", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = 5;
      Utility.clearBit(51, 5);
      int int1 = 1917;
      Utility.isSet(4711, 1917);
      Utility.signatureToString("CONSTANT_InvokeDynamic");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(1917, 19);
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.methodSignatureReturnType("VcYB", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "void";
      objectArray0[3] = (Object) "VcYB";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName("jsr_w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yp4x2@^) ~E9c{{VS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yp4x2@^) ~E9c{{VS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.compactClassName("Iy6's");
      Utility.typeOfSignature("Iy6's");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lreturn");
      try { 
        Utility.methodSignatureArgumentTypes("Iy6's");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Iy6's
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#i1e#o&");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.accessToString((-297), false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "#i1e#o&";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = (Object) "#i1e#o&";
      objectArray0[5] = (Object) "public private protected final volatile transient interface abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "#i1e#o&";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("EO]/B@\"9)G},");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EO]/B@\"9)G},'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W7eKI~Ho:EYr+Pg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W7eKI~Ho:EYr+Pg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".Hpi7[ov@'c";
      stringArray0[1] = ".Hpi7[ov@'c";
      stringArray0[2] = ".Hpi7[ov@'c";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(".Hpi7[ov@'c", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[ov@'c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "#5";
      try { 
        Utility.typeOfSignature("#5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(X.3,-f);QJ*:VTS_", "(X.3,-f);QJ*:VTS_", "\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X.3,-f);QJ*:VTS_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte) (-16), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "'V]\"";
      Utility.methodTypeToSignature("'V]\"", (String[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)38;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109), false);
      Utility.setBit((-595), (-926));
      String string1 = "iconst_2";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("iconst_2", "(|g*\"^-GHA");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (|g*\"^-GHA
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4|+Xmc);LWU=r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4|+Xmc);LWU=r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = Utility.setBit(11, 11);
      assertEquals(2059, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(0, true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "tJ(xPxCp`|]:'Qe]";
      Utility.convertString("tJ(xPxCp`|]:'Qe]");
      boolean boolean0 = true;
      try { 
        Utility.decode("t+k,a", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "qj@.f|1luf!9&roi";
      stringArray0[1] = "qj@.f|1luf!9&roi";
      stringArray0[2] = "char";
      stringArray0[3] = "qj@.f|1luf!9&roi";
      stringArray0[4] = "qj@.f|1luf!9&roi";
      stringArray0[5] = "qj@.f|1luf!9&roi";
      stringArray0[6] = "qj@.f|1luf!9&roi";
      Utility.methodTypeToSignature("qj@.f|1luf!9&roi", stringArray0);
      Utility.isJavaIdentifierPart('&');
      Utility.clearBit(1156, (-2378));
      Utility.clearBit(112, 112);
      Utility.replace("qj@.f|1luf!9&roi", "<5zN6|!.CShnbt", "I");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 45;
      Utility.accessToString(45, false);
      String string0 = "(descriptor_index = ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(descriptor_index = ", "public protected static synchronized", "(descriptor_index = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `descriptor_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Uxc,Z3";
      stringArray0[1] = "Uxc,Z3";
      stringArray0[2] = "Uxc,Z3";
      stringArray0[3] = "Uxc,Z3";
      stringArray0[4] = "Uxc,Z3";
      stringArray0[5] = "Uxc,Z3";
      stringArray0[6] = "Uxc,Z3";
      Utility.methodTypeToSignature("Uxc,Z3", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("Uxc,Z3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uxc,Z3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "KKU+iYR3dah1!1k{'/";
      try { 
        Utility.methodSignatureReturnType("KKU+iYR3dah1!1k{'/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KKU+iYR3dah1!1k{'/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.convertString("java.lang.TS; $6#YjbY~s]1");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.accessToString((-553));
      Utility.signatureToString("SENSITIVE");
      Utility.isJavaIdentifierPart('A');
      String string0 = "multianewarray";
      Utility.searchOpcode("multianewarray");
      int int0 = 3211;
      Utility.accessToString(3211);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)111;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((-553));
      int int1 = (-2025);
      Utility.clearBit((-2025), 4329);
      Utility.isJavaIdentifierPart('b');
      try { 
        Utility.methodSignatureArgumentTypes("55yR\nC|yX;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 55yR
         // C|yX;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.convertString("Invalid type: ");
      Utility.signatureToString("Float", true);
      Utility.isSet(1950, (-944));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteSequence0.skip(0L);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)83;
      int int0 = 109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Uxc,Z3";
      stringArray0[1] = "Uxc,Z3";
      stringArray0[2] = "Uxc,Z3";
      stringArray0[3] = "Uxc,Z3";
      stringArray0[4] = "Uxc,Z3";
      stringArray0[5] = "Uxc,Z3";
      stringArray0[6] = "Uxc,Z3";
      Utility.methodTypeToSignature("Uxc,Z3", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.classOrInterface(2234);
      Utility.accessToString(2234);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, true, true);
      Utility.format(2234, 93, false, 'b');
      Utility.isJavaIdentifierPart('}');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('_');
      String string0 = "8;$o\\M~,q%Ct58Q";
      Utility.searchOpcode("8;$oM~,q%Ct58Q");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("CONSTANT_Utf8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "\"z;mtT}eKZUPc*U";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("\"z;mtT}eKZUPc*U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"z;mtT}eKZUPc*U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0|o1L71:*8YW");
      Utility.replace("0|o1L71:*8YW", "0|o1L71:*8YW", "0|o1L71:*8YW");
      Utility.compactClassName("C;*Ho");
      try { 
        Utility.methodSignatureReturnType("0|o1L71:*8YW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0|o1L71:*8YW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)48;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('p');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.setBit(77, 1763);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.format(132, 59, true, '/');
      assertEquals("132////////////////////////////////////////////////////////", string1);
      
      String string2 = Utility.replace("VF2V", "class", "{\"java.lang.Object@2b18187c\", \"java.lang.Object@27002cd1\", \"java.lang.Object@2054071b\"}");
      assertEquals("VF2V", string2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.methodSignatureReturnType("I#=VcA");
      String string0 = "char";
      try { 
        Utility.typeOfMethodSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)69;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G$>/VlSXX");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[8] = (byte)86;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$d9$95F$d84N$FEV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $d9$95F$d84N$FEV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.format(2238, 2238, true, 'K');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(2238, 512);
      Utility.clearBit(4539, 4539);
      Utility.isSet(2238, 4539);
      Utility.setBit(4539, 4539);
      try { 
        Utility.methodSignatureArgumentTypes("XOs~1x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XOs~1x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.isSet(2, 1580);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.fillup("i2c", 1580, false, ']');
      // Undeclared exception!
      try { 
        Utility.signatureToString("57I\"O>g:X_.x..&K2a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `57I\"O>g:X_.x..&K2a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.compactClassName("istore_0", "&r9c{D2X:My+", true);
      try { 
        Utility.typeOfSignature("&r9c{D2X:My+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &r9c{D2X:My+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.isSet((-3366), (-3366));
      try { 
        Utility.typeOfMethodSignature("]HsGFo+Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]HsGFo+Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.classOrInterface(3270);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-113);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("vR~E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vR~E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getstatic");
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;L;L;)L;", string0);
      
      String string1 = Utility.accessToString(57);
      assertEquals("public static final synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-1336), false);
      Utility.searchOpcode("putfield");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "putfield";
      objectArray0[1] = (Object) "putfield";
      Utility.printArray(objectArray0, true);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "putfield";
      objectArray1[1] = (Object) "putfield";
      objectArray1[2] = (Object) "putfield";
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) null;
      objectArray1[5] = (Object) "static volatile transient interface strictfp synthetic annotation enum";
      Utility.printArray(objectArray1, false);
      Utility.compactClassName(")/UW]4,sP5^.~ZO^/", "{putfield, putfield}", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.compactClassName("\t\t", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)103;
      Utility.encode(byteArray0, true);
      Utility.accessToString(244, true);
      try { 
        Utility.methodSignatureReturnType("`9\"X%}\"N\"[BP^}^1[Dj", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``9\"X%}\"N\"[BP^}^1[Dj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@45c06067, java.lang.Object@c73a745, java.lang.Object@6a5fa2c6, java.lang.Object@67b40443, java.lang.Object@2131938a, java.lang.Object@30695166, java.lang.Object@27b78c3f, java.lang.Object@60e61296");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@45c06067, java.lang.Object@c73a745, java.lang.Object@6a5fa2c6, java.lang.Object@67b40443, java.lang.Object@2131938a, java.lang.Object@30695166, java.lang.Object@27b78c3f, java.lang.Object@60e61296
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short short0 = Utility.searchOpcode("U}e");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(1130, 1130);
      assertEquals(1130, int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yq\"vN^v753");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yq\"vN^v753
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmplt");
      File file0 = MockFile.createTempFile("if_icmplt", "ifnonnull");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "if_icmplt";
      mockPrintWriter0.println();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "ifnonnull";
      objectArray0[4] = (Object) "if_icmplt";
      objectArray0[5] = (Object) file0;
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = Utility.decode("@e|Y-\n2!LCZ}H(,", false);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "0?Qgk|Y7S4B#l>l@ax";
      // Undeclared exception!
      try { 
        Utility.signatureToString("0?Qgk|Y7S4B#l>l@ax", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0?Qgk|Y7S4B#l>l@ax'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("org.apache.commons.io.filefilter.OrFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.OrFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(67);
      Utility.clearBit(264, 264);
      Utility.getSignature("public private volatile");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("idiv", "XA<we*a+AxgN[iM2", ":HfhB8%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: idiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      try { 
        Utility.typeOfSignature("constant pool\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: constant pool\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.accessToString((-1338));
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("invokevirtual", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.compactClassName("B", "B", false);
      String string0 = "lpp7g,xvq&";
      Utility.compactClassName("B", "lpp7g,xvq&", false);
      Utility.searchOpcode("?/ VtFc$");
      Utility.classOrInterface((short) (-1));
      Utility.fillup("interface", (short) (-1), true, 'E');
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.convertString(">Ek /4w");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">Ek /4w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>Ek /4w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      Utility.replace("QeoJs\"_!5CDaC4K{ueT", "", (String) null);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.compactClassName("i%=Q9GS$I", "i%=Q9GS$I", true);
      try { 
        Utility.methodSignatureArgumentTypes("i%=Q9GS$I", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i%=Q9GS$I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte) (-49);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(105, 55);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(105);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-46);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte) (-46), (byte)99);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger2 = new ConstantInteger((byte) (-127));
      constantArray0[4] = (Constant) constantInteger2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Uz7g{3xJ<da#y");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[6] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-46), (-4372), true);
      assertEquals("0:    lor\n1:    istore_3\n2:    <illegal opcode>\n3:    castore\n4:    iconst_0\n5:    lstore_3\n6:    astore_1\n7:    dadd\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.signatureToString("Du[dAP_<K2ao$s][Cp");
      Utility.signatureToString("Du[dAP_<K2ao$s][Cp");
      Utility.accessToString(606);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      byte byte1 = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.compactClassName("61fJGF\"");
      Utility.isSet(2225, (-514));
      Utility.getSignature("61fJGF\"");
      Utility.getSignature("8!Ap");
      Utility.clearBit(2225, 46);
      Utility.accessToString((-514), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\\", "L8!Ap;", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7qp}oH=${QiY";
      stringArray0[1] = "7qp}oH=${QiY";
      stringArray0[2] = "7qp}oH=${QiY";
      stringArray0[3] = "7qp}oH=${QiY";
      String string0 = "<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      stringArray0[4] = "A{8_Lt-$}[<;[YRPh'";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("7qp}oH=${QiY", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[<;[YRPh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.isSet(512, 512);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-114);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)107;
      objectArray0[1] = (Object) (byte)107;
      objectArray0[2] = (Object) (byte) (-114);
      objectArray0[3] = (Object) (byte) (-44);
      Utility.printArray(objectArray0, false, true);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = Utility.clearBit(60, 60);
      assertEquals(60, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-62);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a2 b3 af 6e c2", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)18;
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.classOrInterface(1580);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.getSignature("invokedynamic");
      String string0 = "invokeVirtual";
      try { 
        Utility.decode("invokeVirtual", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      String string0 = "UNKNOWN (";
      Utility.convertString("UNKNOWN (");
      try { 
        Utility.typeOfSignature("5A{BsVG(uPv-$3$wur");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5A{BsVG(uPv-$3$wur
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
