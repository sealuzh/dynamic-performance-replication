/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:57:27 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4850);
      // Undeclared exception!
      try { 
        CCSMatrix.random(4850, 4850, (double) 4850, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.copy();
      assertTrue(matrix0.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2009);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(2009, 0.0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1997, 1997);
      cCSMatrix0.setColumn(1997, (double) 1997);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.multiply((double) 3);
      assertTrue(matrix0.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1666, 1676);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply((-1404.5));
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals((-1404.5), cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.removeLastRow();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.125, cCSMatrix1.density(), 0.01);
      assertEquals(7, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      
      double double0 = ((CCSMatrix) columnMajorSparseMatrix0).min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix1));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = ((CCSMatrix) columnMajorSparseMatrix0).iteratorOfColumn(8);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(vectorIterator0);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      double double0 = columnMajorSparseMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(0.125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(5);
      assertEquals(25, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(853L);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1), 143, (double) (-1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, Double.POSITIVE_INFINITY);
          assertEquals(17, cCSMatrix0.columns());
          assertFalse(cCSMatrix0.isRowMajor());
          assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
          assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
          assertEquals(0.0, cCSMatrix0.min(), 0.01);
          assertEquals(17, cCSMatrix0.cardinality());
          assertEquals(17, cCSMatrix0.rows());
          assertNotNull(cCSMatrix0);
          
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
          double[] doubleArray0 = cCSMatrix0.foldColumns(vectorAccumulator0);
          assertEquals(17, cCSMatrix0.columns());
          assertFalse(cCSMatrix0.isRowMajor());
          assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
          assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
          assertEquals(0.0, cCSMatrix0.min(), 0.01);
          assertEquals(17, cCSMatrix0.cardinality());
          assertEquals(17, cCSMatrix0.rows());
          assertNotNull(doubleArray0);
          
          CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.multiply(Double.POSITIVE_INFINITY);
          assertEquals(17, cCSMatrix0.columns());
          assertFalse(cCSMatrix0.isRowMajor());
          assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
          assertEquals(0.058823529411764705, cCSMatrix0.density(), 0.01);
          assertEquals(0.0, cCSMatrix0.min(), 0.01);
          assertEquals(17, cCSMatrix0.cardinality());
          assertEquals(17, cCSMatrix0.rows());
          assertFalse(cCSMatrix1.isRowMajor());
          assertEquals(17, cCSMatrix1.rows());
          assertEquals(17, cCSMatrix1.columns());
          assertEquals(Double.POSITIVE_INFINITY, cCSMatrix1.max(), 0.01);
          assertEquals(0.058823529411764705, cCSMatrix1.density(), 0.01);
          assertEquals(17, cCSMatrix1.cardinality());
          assertEquals(0.0, cCSMatrix1.min(), 0.01);
          assertNotNull(cCSMatrix1);
          assertNotSame(cCSMatrix0, cCSMatrix1);
          assertNotSame(cCSMatrix1, cCSMatrix0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(777, 777);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(15, 15);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(15.0, cCSMatrix0.max(), 0.01);
      assertEquals(15, cCSMatrix0.cardinality());
      assertEquals(0.06666666666666667, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(15, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(2149, 2149, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      double[] doubleArray0 = new double[0];
      CCSMatrix.from1DArray(1875, 0, doubleArray0);
      cCSMatrix0.setAll(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      ColumnMajorSparseMatrix.zero(3, 9, 9);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 193.49866385915;
      doubleArray0[1] = (double) 1683;
      doubleArray0[2] = (-2595.78829491);
      CCSMatrix.from1DArray(3, 1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1959, 1959, 1959);
      cCSMatrix0.getRow(1959);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2737, 143, 0.0, (Random) mockRandom0);
      cCSMatrix0.maxInColumn(4049);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1843);
      // Undeclared exception!
      CCSMatrix.random(17, 1843, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 2016;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2016, Double.POSITIVE_INFINITY);
      cCSMatrix0.copyOfColumns(15);
      cCSMatrix0.setColumn(2016, 0.964);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int0);
      int int1 = 31;
      cCSMatrix1.nonZeroIteratorOfColumn(int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow((-908), vectorProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(99, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.block(cCSMatrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(24, 24, 24);
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = (double) 24;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 24;
      intArray0[1] = 17;
      intArray0[2] = 0;
      intArray0[3] = 24;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 24;
      intArray0[7] = 0;
      CCSMatrix cCSMatrix1 = new CCSMatrix(24, 24, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix1.copyOfColumns(17);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-2319), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..23
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.setColumn(0, (double) 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, 13);
      cCSMatrix0.rank();
      cCSMatrix0.setColumn(1887, 1497.1060503081478);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(143, 0.058712659773689814, (Random) mockRandom0);
      double[][] doubleArray0 = new double[8][6];
      int int0 = (-2774);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)48, (byte)48);
      cCSMatrix0.multiply((double) (byte)48);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1902, 1902);
      cCSMatrix0.setColumn(1441, (double) 1441);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      columnMajorSparseMatrix0.determinant();
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).maxInColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(278.6240515423597);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1972, 1000, 1972);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[6] = 907;
      intArray0[7] = 1852;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(907);
      columnMajorSparseMatrix0.swapColumns(76, 86);
      ((CCSMatrix) columnMajorSparseMatrix0).minInColumn((-1295));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 8;
      int int1 = 242;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 242);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-2951), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow((-2713));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[8];
      intArray0[1] = 7;
      intArray0[5] = 7;
      intArray0[6] = 907;
      intArray0[7] = 1852;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(114);
      cCSMatrix0.nonZeroRowMajorIterator();
      columnMajorSparseMatrix0.copyOfRows(7);
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(907);
      CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2024, 2541.641);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(1576, vectorAccumulator0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.setColumn(27, 2541.641);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(35, 5617.16202515);
      CCSMatrix.zero(35, 35);
      Matrix matrix0 = cCSMatrix0.multiply((-52.0));
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(36, 36, 8);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2953, 887.23);
      ColumnMajorSparseMatrix.identity(1691);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-50.8868966338084);
      doubleArray1[1] = (-3622.6118465009686);
      doubleArray1[2] = 941.95231227495;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(451, (-50.8868966338084));
      cCSMatrix1.subtract(941.95231227495);
      cCSMatrix0.getRow(451);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      CCSMatrix.fromMatrixMarket("");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-50.8868966338084);
      doubleArray1[1] = (-3622.6118465009686);
      doubleArray1[2] = (-50.8868966338084);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-204.1386), 1204.463).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(451, (-50.8868966338084));
      cCSMatrix1.subtract((-50.8868966338084));
      cCSMatrix0.getRow(451);
      int int0 = 447;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(447, 451, matrixFunction1);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(210.132567743, 147.0, 887.23, 887.23, 210.132567743).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(451, 0.0);
      cCSMatrix1.subtract(941.95231227495);
      cCSMatrix0.getRow(451);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1648);
      cCSMatrix0.setAll(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1852);
      ((CCSMatrix) columnMajorSparseMatrix0).blankOfShape(1852, 1852);
      ((CCSMatrix) columnMajorSparseMatrix0).maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 7;
      intArray0[6] = 907;
      intArray0[7] = 1852;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(114);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1540, 1852, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CCSMatrix) columnMajorSparseMatrix0).updateAt(1585, 3, matrixFunction0);
      ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2016, 2541.641);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.setColumn(0, 2541.641);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1692);
      Matrix matrix0 = ((CCSMatrix) columnMajorSparseMatrix0).blankOfShape(1692, 1852);
      CCSMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(102, 0.0, (Random) mockRandom0);
      mockRandom0.nextLong();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1760.1292), 2006.0, (-293.023697), 1216.3349668631463, Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(0, vectorFunction0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.minInColumn(13);
      CCSMatrix.fromMatrixMarket("S]':-/|q5e6tRhR)s");
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.setAll(0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2159, 2159);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1852, 0.0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1692);
      Matrix matrix0 = ((CCSMatrix) columnMajorSparseMatrix0).blankOfShape(1692, 1852);
      matrix0.maxInColumn(1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1975, 1975);
      cCSMatrix0.setColumn(2, (double) 2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 882);
      cCSMatrix0.setAll(882);
      cCSMatrix0.maxInColumn(54);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(35, 5617.16202515);
      CCSMatrix.diagonal(35, 35);
      int[] intArray0 = new int[7];
      intArray0[0] = 35;
      intArray0[1] = 35;
      intArray0[2] = 35;
      intArray0[3] = 14;
      intArray0[4] = 35;
      intArray0[5] = 35;
      intArray0[6] = 35;
      int[] intArray1 = new int[0];
      cCSMatrix0.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[8];
      CCSMatrix cCSMatrix0 = new CCSMatrix(2753, 9, 870, (double[]) null, intArray0, intArray0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      columnMajorSparseMatrix0.determinant();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1980;
      doubleArray0[1] = (double) 1980;
      doubleArray0[3] = (double) (-2836);
      doubleArray0[4] = (double) (-1286);
      doubleArray0[5] = (double) (-1286);
      ((CCSMatrix) columnMajorSparseMatrix0).max();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2541.641;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix.identity(769);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (byte)48;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1975, 1975);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.multiply((double) (-834));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 1975;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1975, 1975);
      int int1 = (-834);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) null, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.columnMajorIterator();
      int int2 = 1;
      int int3 = (-1239);
      CCSMatrix.zero(int2, int3);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.setRow(int1, vector0);
      cCSMatrix0.multiply((double) int0);
      int int4 = (-2007);
      int int5 = 1;
      CCSMatrix.zero(int4, int5);
  }
}
