/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:25:08 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      ParserConfig.getGlobalInstance();
      String string0 = TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals("ljava.util.concurrent.ConcurrentSkipListMap", string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ParserConfig parserConfig0 = new ParserConfig();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "andDecrement", "Ljava.util.concurrent.ConcurrentSkipListMap", 33);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.util.concurrent.ConcurrentSkipListMap.andDecrement(Ljava.util.concurrent.ConcurrentSkipListMap:33)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-1590));
      stringIndexOutOfBoundsException0.getStackTrace();
      stringIndexOutOfBoundsException0.printStackTrace();
      stringIndexOutOfBoundsException0.printStackTrace();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      stringIndexOutOfBoundsException0.addSuppressed(numberFormatException0);
      stringIndexOutOfBoundsException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.StringIndexOutOfBoundsException: String index out of range: -1590
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeUtils.loadClass("\"Io*(");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getCollectionItemClass(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Insets insets0 = new Insets(785, 26, 785, 26);
      insets0.right = (-516);
      TypeUtils.castToString(insets0);
      insets0.left = 785;
      Class<Float> class0 = Float.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.awt.Font", class0, class0, class0, (Field) null, 102, 102, 50);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, fieldInfo0.declaringClass);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("SizeIsSticky", concurrentHashMap0);
      String string0 = "f *K\\Y\"";
      Type[] typeArray0 = new Type[4];
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ParserConfig parserConfig0 = new ParserConfig();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      TypeUtils.loadClass("ha");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@8c0db965
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, typeArray0[3]);
      Class<?> class1 = TypeUtils.getClass(typeArray0[2]);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", class1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<TimeZone> class0 = TimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("L~2m})<e>m:_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. L~2m})<e>m:_
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      int int0 = Opcodes.IOR;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.isKotlin(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeUtils.toLocale("LandIncrement");
      Locale locale0 = Locale.GERMAN;
      String string0 = TypeUtils.castToString(locale0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      TypeUtils.castToString("");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(renderingHints_Key0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Mock for Key, hashCode: 886185738
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isNumber(",T 0~");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("_z");
      TypeUtils.castToString(illegalAccessError0);
      SecurityException securityException0 = new SecurityException("_z");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.lang.IllegalAccessError@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.IllegalAccessError@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      String string0 = "kotlin.ranges.ClosedDoubleRange";
      TypeUtils.fnv1a_64("kotlin.ranges.ClosedDoubleRange");
      TypeUtils.isNumber("N={hMg{2ydN,=^");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("N={hMg{2ydN,=^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : N={hMg{2ydN,=^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      WeakHashMap<ThrowableDeserializer, Calendar> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, Calendar>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = "clo";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<BitSet> class1 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.addAndGet(0L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      long long0 = new Long(655L);
      Class<java.util.Date> class2 = java.util.Date.class;
      atomicLong0.getAndAdd(0L);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) atomicLong0, class2, parserConfig0);
      ParserConfig parserConfig1 = ParserConfig.global;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<SQLWarning> class3 = SQLWarning.class;
      SQLWarning sQLWarning0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class3, parserConfig1);
      assertEquals(0, sQLWarning0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.castToInt((Object) null);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.castToInt((Object) null);
      TypeUtils.getClass(type0);
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.isProxy(class1);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<java.util.Date> class1 = java.util.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("wmt-16!J\"=Y[F", classLoader0, false);
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("wmt-16!J\"=Y[F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "mt-16!J\"=Y[F";
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.isKotlin(class0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TreeSet<InternalError> treeSet0 = new TreeSet<InternalError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setInternationalCurrencySymbol((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "toJdbc";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("toJdbc", classLoader0);
      HashMap<MockCalendar, SQLTransactionRollbackException> hashMap0 = new HashMap<MockCalendar, SQLTransactionRollbackException>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "[m(R p|4iM:v.HgMT";
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[m(R p|4iM:v.HgMT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeUtils.loadClass("", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isProxy(class0);
      Class<Byte> class1 = Byte.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AllowISO8601DateFormat");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "f *KY\"", fieldArray0);
      assertNull(field0);
      
      long long0 = TypeUtils.fnv1a_64("get");
      assertEquals((-3106811833996379657L), long0);
      
      Object object0 = new Object();
      Class<java.util.Date> class1 = java.util.Date.class;
      LinkedHashMap<JavaBeanDeserializer, Long> linkedHashMap0 = new LinkedHashMap<JavaBeanDeserializer, Long>();
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TypeUtils.getClassFromMapping("V");
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      linkedHashMap0.getOrDefault(class1, "Z5uPt? Mh~Pq1Rz");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters(class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("Z5uPt? Mh~Pq1Rz");
      assertEquals((-5094428933800016576L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("SizeIsSticky", concurrentHashMap0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "f *KY\"", fieldArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 24;
      intArray0[2] = 420;
      TypeUtils.castToDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("mb0NT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mb0NT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("z@v=P`b~iy$`", classLoader1, true);
      Object object0 = new Object();
      Class<java.util.Date> class1 = java.util.Date.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "z@v=P`b~iy$`", class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z@v=P`b~iy$`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isKotlin(class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<java.util.Date> class2 = java.util.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashtable0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@5390c073
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.merge((String) null, "lineNumber", biFunction0);
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      breakIterator0.last();
      breakIterator0.preceding(0);
      weakHashMap0.remove((Object) breakIterator0, (Object) "lineNumber");
      weakHashMap0.put("H;q;R&3mL~mcZFHE,r", "org.springframework.security.web.authentication.WebAuthenticationDetails");
      weakHashMap0.put((String) null, "org.springframework.security.web.authentication.WebAuthenticationDetails");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      parserConfig0.checkAutoType((String) null, class0);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToByte((Object) null);
      Locale locale0 = Locale.JAPANESE;
      Collator collator0 = Collator.getInstance(locale0);
      Class<Point> class1 = Point.class;
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) collator0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Properties> class1 = Properties.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<Long> class0 = Long.TYPE;
          MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
          TypeUtils.getRawClass(class0);
          Type[] typeArray0 = new Type[0];
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          ParserConfig parserConfig0 = new ParserConfig();
          VerifyError verifyError0 = new VerifyError();
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) verifyError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // parseLong error, field : null
             //
             verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      String string0 = "g";
      String string1 = "ha";
      String string2 = "\\o*";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("o*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : o*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      SecurityException securityException0 = new SecurityException();
      TypeUtils.getClassFromMapping("vTt3N-");
      VerifyError verifyError0 = new VerifyError();
      TypeUtils.castToFloat((Object) null);
      TypeUtils.fnv1a_64("p>|*3]bWs6+SpaelS");
      TypeUtils.fnv1a_64_lower("vTt3N-");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger(1004);
      TypeUtils.castToInt(atomicInteger0);
      TypeUtils.isProxy(class0);
      TypeUtils.clearClassMapping();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1004);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      TypeUtils.isGenericParamType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getlongValue");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      TypeUtils.castToSqlTime((Object) null);
      Hashtable<String, String> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, String>(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: 0.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeUtils.castToInt("");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertTrue(class0.isInterface());
      
      Class<BreakIterator> class1 = BreakIterator.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower(";aTp7:an9>0yC>a)b");
      assertEquals((-358635690936486626L), long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ParserConfig parserConfig0 = new ParserConfig();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.TypeReference", class1, (-1059));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.TypeReference -> java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      MockDate mockDate0 = new MockDate();
      Object object0 = new Object();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. org.evosuite.runtime.mock.java.lang.MockIllegalAccessException -> com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.isNumber("");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, (PropertyNamingStrategy) null);
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [errorCode, stackTrace, localizedMessage, message, SQLState, nextException, cause]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      String string0 = "z@v=P`b~iy$`";
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("java/lang/Character", identityHashMap0);
      Class<java.util.Date> class1 = java.util.Date.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      ParserConfig parserConfig1 = ParserConfig.global;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<SQLWarning> class2 = SQLWarning.class;
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class2, parserConfig1);
      Float float0 = new Float((-827.2F));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -827.2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      TypeUtils.isKotlin(class2);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      linkedHashMap0.getOrDefault(class1, "Z5uPt? Mh~Pq1Rz");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      Time time0 = new Time(0L);
      TypeUtils.isHibernateInitialized(time0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException(")$U@:_=");
      TypeUtils.isHibernateInitialized(illegalThreadStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("P", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.instrumentation.InstrumentingClassLoader@1e9b7051
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.util.concurrent.ConcurrentSkipListMap", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("^(6QZ<QnN");
      TypeUtils.castToString(illegalAccessError0);
      Class<Byte> class1 = Byte.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      Float float0 = new Float((float) 0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      TypeUtils.getCollectionItemType(class1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.loadClass("z@v=P`b~6iy$`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("z@v=P`b~6iy$`", classLoader1, true);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Type[] typeArray0 = new Type[0];
      classLoader1.setClassAssertionStatus("z@v=P`b~6iy$`", true);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = " nbot found";
      Boolean boolean0 = new Boolean(" nbot found");
      Constructor<MockHijrahDate>[] constructorArray0 = (Constructor<MockHijrahDate>[]) Array.newInstance(Constructor.class, 5);
      constructorArray0[1] = constructorArray0[0];
      constructorArray0[2] = constructorArray0[1];
      constructorArray0[3] = constructorArray0[2];
      constructorArray0[4] = constructorArray0[3];
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.lang.String@0000000001", concurrentHashMap0);
      ParserConfig.getFieldFromCache("SizeIsSticky", concurrentHashMap0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "f *KY\"", fieldArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 24;
      intArray0[2] = 420;
      intArray0[3] = 24;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("[float");
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      FieldInfo fieldInfo0 = new FieldInfo("f *KY\"", class1, class0, class1, (Field) null, 24, 24, 24);
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      FieldInfo.getFieldType(class2, fieldInfo0.fieldClass, class2);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.computeIfPresent("yyyy-MM-dd'T'HH:mm:ss.SSS", biFunction0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, (PropertyNamingStrategy) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TypeUtils.getClassFromMapping("1Z");
      TypeUtils.castToFloat((Object) null);
      String string0 = "KBKS";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KBKS");
      TypeUtils.fnv1a_64("KBKS");
      TypeUtils.fnv1a_64_lower("1Z");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.fillInStackTrace();
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      sQLTransientException0.printStackTrace();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("1Z", sQLTransientException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeNotPresentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.TypeNotPresentException: Type 1Z not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.fnv1a_64("KBKS");
      TypeUtils.fnv1a_64_lower("illegal identifier : ");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("fastjson.parser.autoTypeAccept", sQLTransientException0);
      TypeUtils.castToBoolean((Object) null);
      // Undeclared exception!
      try { 
        Date.valueOf("8Y%r=[SP(]LD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "toJdbc";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("toJdbc", classLoader0);
      ParserConfig.getGlobalInstance();
      TypeUtils.castToTimestamp((Object) null);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      TypeUtils.isKotlin(class2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      linkedHashMap0.put("Z5uPt? Mh~Pq1Rz", "0brv`{4I ^sCw\"OI");
      linkedHashMap0.getOrDefault(class1, "Z5uPt? Mh~Pq1Rz");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      TypeUtils.isNumber("2\"N");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      SecurityException securityException0 = new SecurityException();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("vTt3N-");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("vTt3N-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : vTt3N-
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Byte> class1 = Byte.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy0);
      Float float0 = new Float((float) 0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "_z", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64("kotlin.ranges.ClosedDoubleRange");
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "kotlin.ranges.ClosedDoubleRange", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Constructor<SimpleDateFormat>[] constructorArray0 = (Constructor<SimpleDateFormat>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      parserConfig0.checkAutoType((String) null, class0);
      TypeUtils.getCollectionItemClass((Type) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isKotlin(class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      String string0 = File.separator;
      linkedHashMap0.getOrDefault((Object) null, "ishashCode");
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      TypeUtils.isNumber("ishashCode");
      TypeUtils.castToBytes("M2Q6UJ");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Z");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.toLocale("toJdbc");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("Z", (ClassLoader) aSMClassLoader0, false);
      Class<SQLException> class0 = SQLException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Double double0 = new Double((-5808527186339947923L));
      TypeUtils.castToBigInteger(double0);
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) weakHashMap0, false);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dj7~01R");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.createCollection(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getSerializeFeatures(class0);
      String string0 = "is";
      TypeUtils.toLocale("is");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(0, timeUnit1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : DAYS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((Map<? extends String, ? extends Field>) treeMap0);
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("getelements");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToFloat(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isKotlin(class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[2]);
      ParserConfig parserConfig0 = new ParserConfig();
      VerifyError verifyError0 = new VerifyError();
      TypeUtils.cast((Object) typeArray0[3], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      Class<MapDeserializer> class2 = MapDeserializer.class;
      TypeUtils.isPath(class0);
      ConcurrentHashMap<TypeNotPresentException, Insets> concurrentHashMap0 = new ConcurrentHashMap<TypeNotPresentException, Insets>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AllowISO8601DateFormat");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("scanFieldString");
      TypeUtils.loadClass((String) null);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("SizeIsSticky", concurrentHashMap0);
      String string0 = "f *K\\Y\"";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "f *KY\"", fieldArray0);
      String string1 = "v}T{M_6+";
      TypeUtils.fnv1a_64_lower("v}T{M_6+");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.text.MockDateFormat@6a243433
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Double double0 = new Double((-2150.585));
      TypeUtils.castToBigInteger((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("toJdbc", " not found");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      Type type0 = TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      atomicLong0.getAndAdd(4647432019745535567L);
      ParserConfig.getGlobalInstance();
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Integer integer0 = new Integer((-941));
      TypeUtils.castToSqlDate(atomicLong0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      Type type0 = TypeUtils.getGenericParamType(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = type0;
      typeArray0[0] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = type0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[4]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializeBeanInfo0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@d6984105
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.awt.Font", class0, class0, class0, (Field) null, 102, 102, 50);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, fieldInfo0.declaringClass);
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Dimension dimension0 = new Dimension(32, 94);
      Dimension dimension1 = new Dimension(dimension0);
      TypeUtils.decapitalize("[XNbq;g Ypt(");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.fnv1a_64("");
  }
}
