/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:39:29 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Unknown;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.SIZE;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(135, 135);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(195, 195);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger(0);
      constantPoolGen0.addFloat((-1));
      ObjectType objectType0 = Type.THROWABLE;
      String[] stringArray0 = new String[3];
      String string0 = "gmO}RhqV'hF~";
      stringArray0[0] = "gmO}RhqV'hF~";
      stringArray0[1] = "java.lang.Character";
      String string1 = "$Oqh^yjs-A83";
      stringArray0[2] = "$Oqh^yjs-A83";
      RET rET0 = new RET();
      InstructionList instructionList0 = new InstructionList(rET0);
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionConst", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("BEn%/GXo8", "BEn%/GXo8", "BEn%/GXo8");
      constantPoolGen0.addInteger(2326);
      int int0 = Pattern.UNICODE_CASE;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1921, 1921);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(97);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[3] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 46);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(46);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[6] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      String string0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat((-1098.0F));
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("[p\u0005``MG=,@&|:Y*", "z", "z");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("9Kp}?");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
      assertEquals(1, int0);
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.addFloat(208.3F);
      int int0 = 0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addMethodref("3v", "3v", "3v");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref(": ", ": ", ": ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.toString();
      int int0 = (-177);
      constantPoolGen0.addInteger((-177));
      Constant[] constantArray0 = new Constant[1];
      String string1 = "XB";
      constantPoolGen0.addFieldref("XB", "'.RY", "");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-177), 2744);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -177
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("caload", "caload", "caload");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(4390, (-3803));
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(2334L);
      Constant.getComparator();
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantString constantString0 = new ConstantString((-2034458190));
      constantString0.clone();
      constantLong0.toString();
      int int0 = constantPoolGen0.addDouble(1.0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2672));
      constantPoolGen0.lookupFloat((-1098.0F));
      int int0 = constantPoolGen0.addInterfaceMethodref("do\"l_", "do\"l_", "do\"l_");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(240);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
      assertEquals(1, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.toString();
      constantPoolGen0.addInteger((-177));
      constantPoolGen0.lookupFieldref("", "", "E]z:hDSWv*.:vUb2)JxC20L)/?(|>:FJ_.mWj:Mr:f3TH1eF");
      constantPoolGen0.lookupFieldref("", "E]z:hDSWv*.:vUb2)JxC20L)/?(|>:FJ_.mWj:Mr:f3TH1eF", (String) null);
      constantPoolGen0.addInteger((-1717986916));
      int int0 = constantPoolGen0.addClass("!0t6@uipi>.C[_");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(97);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[3] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 46);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(46);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[6] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType(type0, 2);
      constantPoolGen0.addArrayClass(arrayType0);
      constantPoolGen0.lookupNameAndType("so", "%");
      int int0 = constantPoolGen0.addUtf8("il.append(new IINC(");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2528, 2528);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2528, 2528);
      constantArray0[1] = (Constant) constantMethodHandle0;
      int int0 = (-1431655764);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2528, (-1431655764));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1255);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      String string0 = "U1";
      MockPrintStream mockPrintStream0 = new MockPrintStream("U1");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      constantMethodType1.dump(dataOutputStream0);
      ConstantDouble constantDouble0 = new ConstantDouble(2877.6510329057664);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1431655764
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(20);
      constantArray0[0] = null;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Huh?! Constant pool index of instruction '");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(20);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(88, 88);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-209), (-32));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      constantArray0[5] = (Constant) constantDouble2;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat((-1098.0F));
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass0 = new ConstantClass((-1));
      BasicType basicType0 = Type.LONG;
      String[] stringArray0 = new String[0];
      Character character0 = new Character('`');
      PUSH pUSH0 = new PUSH(constantPoolGen1, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((-1), basicType0, basicType0.NO_ARGS, stringArray0, "bytes must not be null!", "E]z:hDSWv*.", instructionList0, constantPoolGen0);
      constantPoolGen1.addMethodref(methodGen0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantClass1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("b", "eOS&>hgeAY_?uQ-B", "0.TCBE5j-3&Unexpected constant type: &Unexpected constant type: ");
      constantPoolGen0.addLong(289L);
      constantPoolGen0.getConstantPool();
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(193, 193);
      constantPoolGen0.addFloat(193);
      int int0 = constantPoolGen0.lookupLong(193);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addFieldref("caload", "caload", "caload");
      constantPoolGen0.addString("caload");
      constantPoolGen0.lookupFieldref("caload", (String) null, "Unexpected constant type: ");
      constantPoolGen0.lookupFieldref((String) null, "' with proper signature not declared in superclass hierarchy.", (String) null);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantPoolGen0.setConstant(200, constantFloat1);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(135, 135);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      constantArray0[1] = (Constant) constantMethodref0;
      int int0 = constantPoolGen0.lookupFloat(135);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      int int1 = constantPoolGen0.lookupNameAndType((String) null, "5)im-y[(itRN13bP<F");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1474L);
      constantPoolGen0.lookupInterfaceMethodref("? J.*", ":wEXQ#", ":wEXQ#");
      constantPoolGen0.addInteger(2);
      int int0 = constantPoolGen0.lookupFloat(2);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(135, 135);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(1169);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat((-1098.0F));
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass0 = new ConstantClass((-1));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      int int0 = 509;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2089443547), 509);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInvokeDynamic0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -2089443547, name_and_type_index = 509)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(46);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(388.64F);
      int int0 = constantPoolGen0.lookupFloat(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-4148.254F));
      constantPoolGen0.lookupDouble(1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantClass constantClass0 = new ConstantClass(3732);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantClass constantClass1 = new ConstantClass(3732);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen2.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen2.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(" !");
      ConstantString constantString0 = new ConstantString(2);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2163), (-2058005160));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2163
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2490), (-1));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.generic.ConstantPoolGen");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      int int0 = constantPoolGen3.addConstant(constantInteger0, constantPoolGen0);
      assertEquals(2, constantPoolGen3.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addString("'; use Type.INT instead.");
      assertEquals(5, constantPoolGen0.getSize());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'; use Type.INT instead.");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_1;
      constantArray0[5] = (Constant) constantUtf8_1;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantPoolGen2.addConstant(constantFloat1, constantPoolGen1);
      constantPoolGen3.getConstantPool();
      int int0 = constantPoolGen3.lookupMethodref("'; use Type.INT instead.", (String) null, "'; use Type.INT instead.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addClass("%");
      constantPoolGen0.addString("'; use Type.INT instead.");
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.addInterfaceMethodref("", "%", "'; use Type.INT instead.");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupNameAndType("'; use Type.INT instead.", "|$>/=DcS");
      aRETURN0.getType(constantPoolGen1);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addNameAndType("<9@7Wjwptb',8M", "%");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Character.MAX_CODE_POINT;
      constantPoolGen1.adjustSize();
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      String string0 = "'; use Type.INT instead.";
      constantPoolGen0.addString("'; use Type.INT instead.");
      ARETURN aRETURN0 = new ARETURN();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      aRETURN0.getType(constantPoolGen1);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(4);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen2);
      int int0 = (-2128);
      int int1 = 165;
      Attribute[] attributeArray0 = new Attribute[7];
      int int2 = 129;
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariableTypeTable localVariableTypeTable0 = null;
      try {
        localVariableTypeTable0 = new LocalVariableTypeTable((LocalVariableTypeTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addDouble((-165.0));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addMethodref("9Kp}?", "", "org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals(7, constantPoolGen1.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addClass("%");
      constantPoolGen0.addFieldref("Z3\"'MC", "", ">+c>s  GX,-nLR7M");
      constantPoolGen0.addString("'; use Type.INT instead.");
      ARETURN aRETURN0 = new ARETURN();
      constantPoolGen0.addInterfaceMethodref("", "%", "'; use Type.INT instead.");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupNameAndType("'; use Type.INT instead.", "|$>/=DcS");
      aRETURN0.getType(constantPoolGen1);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref((String) null, (String) null, (String) null);
      constantPoolGen0.addMethodref("fconst_1", "Unknown constant type ", ")");
      constantPoolGen0.lookupFieldref("org.apache.bcel.generic.ConstantPoolGen", "fconst_1", "Unknown constant type ");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, (-1));
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-1908874352);
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(4648905019111505560L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = constantPoolGen0.lookupLong(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("fload_1", "/Vv", "");
      constantPoolGen0.addString("_!|$c4EUdc%U");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("astor:e_2", "astor:e_2", "astor:e_2");
      Constant constant0 = constantPool0.getConstant(4);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      int int0 = constantPoolGen0.addConstant(constant0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }
}
