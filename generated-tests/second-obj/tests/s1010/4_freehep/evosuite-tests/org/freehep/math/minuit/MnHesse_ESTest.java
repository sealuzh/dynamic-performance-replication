/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:30:51 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1484);
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-4421.18), (-4421.18), (-4421.18), (-4421.18), 8503.62777003006).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-2319));
      assertEquals(24, mnUserParameterState0.nfcn());
      assertEquals((-4421.18), mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 3.4641016151377544);
      MinimumParameters minimumParameters0 = new MinimumParameters(533);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3.4641016151377544, (-1209));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1209));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1720.3244355696836;
      doubleArray0[1] = (-631.06);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(20, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1432.842361019222;
      doubleArray0[1] = 1810.88;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-2319));
      assertEquals(20, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters1, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, (MnUserCovariance) null, 1649);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1682);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-120.98981), 10000.0, (-120.98981), (double)1682, 10000.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1682;
      doubleArray0[2] = (double) 1682;
      doubleArray0[3] = (double) 1682;
      doubleArray0[5] = (double) 1682;
      doubleArray0[6] = (double) 1682;
      doubleArray0[7] = (double) 1682;
      doubleArray0[8] = (double) 1682;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.toString();
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 1682);
      assertEquals(64, mnUserParameterState0.nfcn());
      assertEquals((-120.98981), mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(3);
      MinimumState minimumState0 = new MinimumState(3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.setPrecision(591.0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(535);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      MinimumState minimumState0 = new MinimumState(535);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.trafo();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) (-3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      mnUserTransformation1.setLowerLimit(0, 3.0);
      mnUserTransformation1.setPrecision((-3.0));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, 535);
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2100.17925608), (-2100.17925608), (-2100.17925608)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 591.0);
      MinimumParameters minimumParameters0 = new MinimumParameters(0);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      MinimumState minimumState0 = new MinimumState(3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserParameters0.add("", (double) 3, 95.99999999999999, 85143.78462622315, 21.84);
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnUserTransformation1.clone();
      mnUserTransformation0.setPrecision(992.9732052549801);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 7);
      mnHesse0.ncycles();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      MnAlgebraicVector mnAlgebraicVector1 = minimumState1.vec();
      MnAlgebraicVector mnAlgebraicVector2 = mnAlgebraicVector1.clone();
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (-864.23);
      doubleArray0[3] = 10.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MinimumParameters minimumParameters0 = new MinimumParameters(3);
      mnHesse0.tolerstp();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-5974.948257366), 0.2, (-864.23), 10.0, 10.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, 2861);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3, (-4941));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("MnHesse: matrix is not pos. def.!", (double) (-4941), (-2107.3), (-98.5491075), 2.8421709430404007E-14);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      mnUserTransformation0.clone();
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-33183.30368200862), 10.0, 10.0, (-864.23), 0.2).when(fCNBase3).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase3, mnUserParameters0, (MnUserCovariance) null);
      assertEquals((-33183.30368200862), mnUserParameterState1.fval(), 0.01);
      assertEquals(12, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 494;
      MnHesse mnHesse0 = new MnHesse(494);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 494);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(494);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2506.6802555));
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(1555);
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, (-3275.5), 534);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1555;
      doubleArray0[1] = (double) 494;
      doubleArray0[2] = (-3275.5);
      doubleArray0[3] = (-3275.5);
      doubleArray0[4] = 4.0;
      doubleArray0[5] = (-3275.5);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-690);
      MnStrategy mnStrategy0 = new MnStrategy((-690));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-690);
      mnStrategy0.setHessianNCycles((-690));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-690));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-317.276664), (-690.0), 1.275561659722222E10, (-6259.223761888546), (-317.276664)).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(535);
      MinimumParameters minimumParameters1 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(1);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 591.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-3211.23313481);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      mnUserTransformation1.setPrecision(1.0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 200);
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, 1172);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      mnStrategy0.setMediumStrategy();
      MinimumParameters minimumParameters0 = new MinimumParameters(522);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      double[] doubleArray0 = new double[2];
      MinimumState minimumState0 = new MinimumState(3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnUserTransformation0.clone();
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1687));
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(535);
      MinimumParameters minimumParameters1 = new MinimumParameters(0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.trafo();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 591.0;
      doubleArray0[3] = (double) 535;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserParameters0.trafo();
      mnUserTransformation1.clone();
      mnUserTransformation0.setPrecision(2.8421709430404007E-14);
      MinimumState minimumState0 = new MinimumState(1);
      MnUserTransformation mnUserTransformation2 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation2, 0);
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, 535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0, 591.0, (-720.5815306784797)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(535);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      MinimumState minimumState0 = new MinimumState(535);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.trafo();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      mnUserTransformation1.setPrecision(0);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MinimumParameters minimumParameters0 = new MinimumParameters(535);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      MinimumState minimumState0 = new MinimumState(535);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnFcn0.theNumCall = 535;
      double double0 = 10.0;
      mnUserParameters0.add("v2\"C@Grt_}\r", 511.0, 10.0, 591.0, 738.43088);
      mnUserParameters0.setValue(0, 10.0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 535);
      FCNBase fCNBase1 = null;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      int int0 = 1784;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters1, mnUserCovariance0, 1784);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 591.0, 591.0, 2.9950606993978977E10).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      int int0 = 611;
      MinimumParameters minimumParameters0 = new MinimumParameters(611);
      MinimumParameters minimumParameters1 = new MinimumParameters(3);
      mnFcn0.theNumCall = (-2170);
      MinimumState minimumState0 = new MinimumState(611);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      double[] doubleArray0 = new double[2];
      mnFcn0.theNumCall = 0;
      doubleArray0[1] = (double) 0;
      minimumState0.vec();
      Double double0 = new Double(3);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnUserTransformation0.clone();
      MnUserTransformation mnUserTransformation2 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnStrategy0.setHessianStepTolerance((-1503.102333));
      mnUserTransformation2.setPrecision((-3383.404));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, 3889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
