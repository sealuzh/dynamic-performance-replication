/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:16:39 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Spliterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10);
      Locale locale0 = Locale.CANADA;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      MatrixVectorOperation<Double> matrixVectorOperation0 = (MatrixVectorOperation<Double>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.toString();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(32, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 812;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(812, (-3.72));
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(812, 812);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, (-3.72));
      // Undeclared exception!
      rowMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.toString();
      cCSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      matrix0.toColumnMajorSparseMatrix();
      double double0 = new Double(0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(8, 0);
      basic1DMatrix0.iterator();
      Object object0 = new Object();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 0);
      basic1DMatrix0.equals((Object) denseMatrix0);
      cCSMatrix0.euclideanNorm();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(238, 8);
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(3, 3);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInRow(689, vectorProcedure0);
      basic2DMatrix0.equals((Object) cCSMatrix1);
      basic2DMatrix0.rank();
      // Undeclared exception!
      try { 
        basic2DMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[3];
      cCSMatrix0.iterator();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-2034), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NumberFormat.getInstance();
      Matrix matrix0 = Matrix.zero(1868, 5648);
      matrix0.blank();
      matrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2026.0037797828);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-2765.522239);
      doubleArray2[3] = 0.0;
      doubleArray2[5] = (-618.3535253);
      doubleArray2[6] = (-942.875);
      doubleArray2[7] = (-2765.522239);
      doubleArray2[8] = (-1.0);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = sparseMatrix0.blankOfRows(0);
      assertEquals(0, matrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      int int0 = (-1);
      int int1 = 153;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceBottomRight(153, (-2237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [153..10][-2237..10].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(790, 790);
      int int0 = 7;
      int int1 = (-1982292597);
      int int2 = (-2271);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapRows((-2271), 790);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2271' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte byte0 = (byte)54;
      int int0 = (-1068);
      // Undeclared exception!
      try { 
        matrix0.slice(4, 866, (byte)54, 160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4..54][866..160].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = cRSMatrix0.diagonalProduct();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(1.0, double1, 0.01);
      
      Vector vector0 = Vector.zero(0);
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      Spliterator<Double> spliterator0 = vector0.spliterator();
      assertEquals(0, vector0.length());
      assertNotNull(spliterator0);
      
      Vector vector1 = cRSMatrix0.multiply(vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, vector0.length());
      assertEquals(0, vector1.length());
      assertNotNull(vector1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.slice((-2112), 17, 2039, 1923);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2112' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Matrix matrix0 = basic1DMatrix0.blank();
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-3547), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2911);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply((double) 2911);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2911, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      // Undeclared exception!
      try { 
        cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      double[] doubleArray0 = matrix0.foldColumns((VectorAccumulator) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(doubleArray0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertNotNull(decimalFormat1);
      
      decimalFormat1.setMinimumIntegerDigits(0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("#,###.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("#,###.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertNotSame(decimalFormat1, decimalFormat0);
      
      decimalFormat0.setParseIntegerOnly(false);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotSame(decimalFormat0, decimalFormat1);
      
      Locale locale0 = Locale.forLanguageTag("Can not decode CRSMatrix from the given byte array.");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat2 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertFalse(decimalFormat2.equals((Object)decimalFormat1));
      assertFalse(decimalFormat2.equals((Object)decimalFormat0));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertFalse(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat2.isGroupingUsed());
      assertEquals(3, decimalFormat2.getGroupingSize());
      assertFalse(decimalFormat2.isParseIntegerOnly());
      assertEquals(2, decimalFormat2.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      assertEquals("\u00A4 #,##0.00", decimalFormat2.toLocalizedPattern());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals("-\u00A4 ", decimalFormat2.getNegativePrefix());
      assertEquals(1, decimalFormat2.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("\u00A4 #,##0.00", decimalFormat2.toPattern());
      assertEquals(2, decimalFormat2.getMaximumFractionDigits());
      assertEquals("\u00A4 ", decimalFormat2.getPositivePrefix());
      assertNotNull(decimalFormat2);
      assertNotSame(decimalFormat2, decimalFormat1);
      assertNotSame(decimalFormat2, decimalFormat0);
      
      String string0 = matrix0.mkString((NumberFormat) decimalFormat2);
      assertFalse(decimalFormat2.equals((Object)decimalFormat1));
      assertFalse(decimalFormat2.equals((Object)decimalFormat0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertFalse(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat2.isGroupingUsed());
      assertEquals(3, decimalFormat2.getGroupingSize());
      assertFalse(decimalFormat2.isParseIntegerOnly());
      assertEquals(2, decimalFormat2.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      assertEquals("\u00A4 #,##0.00", decimalFormat2.toLocalizedPattern());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals("-\u00A4 ", decimalFormat2.getNegativePrefix());
      assertEquals(1, decimalFormat2.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("\u00A4 #,##0.00", decimalFormat2.toPattern());
      assertEquals(2, decimalFormat2.getMaximumFractionDigits());
      assertEquals("\u00A4 ", decimalFormat2.getPositivePrefix());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(decimalFormat2, decimalFormat1);
      assertNotSame(decimalFormat2, decimalFormat0);
      
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(477404L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(562L);
      assertNotNull(intStream0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      String string0 = columnMajorSparseMatrix0.toCSV();
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(string0);
      assertEquals("", string0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 424;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 424);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(424, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(424, sparseVector0.length());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(424, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector0.update(vectorFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(424, sparseVector0.length());
      
      boolean boolean0 = cRSMatrix0.equals((Object) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(424, sparseVector0.length());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(424, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(424, (-71.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '424' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn(10, vectorFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      double double0 = basic2DMatrix0.min();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertEquals(9, basic2DMatrix0.columns());
      assertEquals(5, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int int0 = 752;
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft((-1994091957), 752);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1994091957][0..752].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = Matrix.zero(0, 5);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotNull(matrix1);
      assertNotSame(matrix1, matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = matrix0.foldColumns(vectorAccumulator0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(doubleArray0);
      assertNotSame(matrix0, matrix1);
      
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = matrix0.foldColumns(vectorAccumulator1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(doubleArray1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(doubleArray1, doubleArray0);
      
      matrix0.hashCode();
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, matrix1);
      
      // Undeclared exception!
      try { 
        Matrix.fromCSV(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      
      double double0 = matrix0.euclideanNorm();
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      decimalFormat0.setParseIntegerOnly(false);
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      
      String string0 = matrix0.mkString((NumberFormat) decimalFormat0);
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = matrix0.foldColumn((-1417), vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      matrix0.setRow((-1417), 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      double double1 = matrix0.min();
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      VectorIterator vectorIterator0 = matrix0.iteratorOfRow(130);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-143.3);
      doubleArray1[1] = (-751.2058882189765);
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-143.3);
      doubleArray2[1] = (-1695.9151998238005);
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(2, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int int0 = (-967);
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfRows((-967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -967x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(1149, 5);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1149, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      NumberFormat.getCurrencyInstance();
      cCSMatrix0.infinityNorm();
      String string0 = "fKP";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      double double0 = (-52.0);
      rowMajorSparseMatrix0.subtract(double0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(219, 219, 243);
      assertEquals(219, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(219, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      sparseMatrix0.copy();
      sparseMatrix0.divide(6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(5, matrix0.rows());
      assertEquals(9, matrix0.columns());
      assertNotNull(matrix0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(1748, (-2610));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 7;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) (-1328);
      doubleArray0[3] = (double) (-1328);
      doubleArray0[4] = (double) (-1328);
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = (double) 7;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1328), 7, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1328x7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 0, (-1.0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.sum();
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertNotNull(columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix1);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.multiply(0.0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      double double0 = basic2DMatrix0.maxInColumn(0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Matrix matrix0 = basic2DMatrix0.rotate();
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      
      int int0 = 9;
      basic2DMatrix0.swapColumns(0, 0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotSame(basic2DMatrix0, matrix0);
      
      int int1 = 8;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 2706);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(8, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2706, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(8);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(2706);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      IntStream intStream0 = mockRandom2.ints();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(intStream0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      double double1 = matrix0.maxInRow((-2051));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(171.1900898).when(vectorAccumulator0).accumulate();
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)92;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = matrix0.foldColumn(0, vectorAccumulator0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(171.1900898, double0, 0.01);
      
      double double1 = matrix0.euclideanNorm();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, double1, 0.01);
      
      Matrix matrix1 = matrix0.blankOfColumns(5648);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.updateRow((byte)0, vectorFunction0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      matrix1.swapColumns((-1802), (byte) (-4));
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(5648, (double) (byte)92, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 31899904.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2911);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply((double) 2911);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(2911, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldColumn(764, vectorAccumulator0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(2911, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.swapRows(0, 0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2911, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = matrix0.foldColumn((-1417), vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double1 = matrix0.fold(matrixAccumulator0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        matrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1561, 1561, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1561, basic1DMatrix0.columns());
      assertEquals(1561, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        basic1DMatrix0.maxInRow(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9366
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 22;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(22);
      assertEquals(22, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(22, cCSMatrix0.rows());
      assertEquals(22, cCSMatrix0.cardinality());
      assertEquals(0.045454545454545456, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertTrue(decimalFormat1.isParseIntegerOnly());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat1);
      assertNotSame(decimalFormat1, decimalFormat0);
      
      String string0 = null;
      String string1 = "%.h";
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow(22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '22' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.randomSymmetric(0, (Random) null);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.rotate();
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      int int1 = 0;
      int int2 = 2109;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      MatrixDecompositor matrixDecompositor0 = matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrixDecompositor0);
      assertNotSame(matrix0, matrix1);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(0, 2109, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double double0 = basic1DMatrix0.minInRow(2199);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Matrix matrix0 = basic1DMatrix0.power(0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      
      Double double1 = new Double(0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = basic2DMatrix0.minInRow(0);
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.constant(0, 0, (-1.0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      int int1 = 0;
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1149;
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(1149, 5);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1149, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.set(1091, 0, 3015.3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.hashCode();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1149;
      intArray0[3] = 0;
      intArray0[4] = 1149;
      Matrix matrix0 = Matrix.fromCSV("x");
      int int1 = (-4092);
      int int2 = 2886;
      matrix0.insert((Matrix) cCSMatrix0, int1, int2);
      int int3 = 2906;
      int int4 = (-1006);
      DenseVector denseVector0 = DenseVector.constant(int4, int0);
      cCSMatrix0.setColumn(int3, (Vector) denseVector0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 0, (-1.0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.sum();
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(477404L);
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, columnMajorSparseMatrix1.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix1.density(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.columns());
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix1));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix1.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      int int0 = 1972;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1972);
      assertEquals(1972, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(5.070993914807302E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1972, rowMajorSparseMatrix0.columns());
      assertEquals(1972, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-1), 1972);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x1972
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertEquals(9, basic2DMatrix0.columns());
      assertEquals(5, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Matrix matrix0 = basic2DMatrix0.shuffle();
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(9, basic2DMatrix0.columns());
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(9, matrix0.columns());
      assertEquals(5, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, 0, (-980), (-980), 468, 99, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -980, 468
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      double double0 = denseMatrix0.euclideanNorm();
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(denseMatrix0, matrix0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 0, 32, 0, (-2151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-2151
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(790, 790);
      assertEquals(790, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0012658227848101266, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(790, rowMajorSparseMatrix0.cardinality());
      assertEquals(790, rowMajorSparseMatrix0.columns());
      assertEquals(790.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      assertEquals(790, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0012658227848101266, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(790, rowMajorSparseMatrix0.cardinality());
      assertEquals(790, rowMajorSparseMatrix0.columns());
      assertEquals(790.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(790, denseMatrix0.rows());
      assertEquals(790, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(790, mockRandom0);
      mockRandom0.nextInt(50);
      mockRandom0.longs();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      basic2DMatrix0.insertColumn((-1059), vector0);
      rowMajorSparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Double double0 = new Double(0.0);
          Integer integer0 = new Integer(0);
          Locale locale0 = Locale.KOREA;
          locale0.getDisplayScript();
          locale0.hasExtensions();
          Locale locale1 = Locale.PRC;
          NumberFormat.getCurrencyInstance(locale1);
          Locale.getISOCountries();
          Matrix matrix0 = Matrix.diagonal(17, 0.75);
          Object object0 = new Object();
          matrix0.infinityNorm();
          Matrix matrix1 = Matrix.fromCSV("");
          // Undeclared exception!
          try { 
            matrix1.subtract(matrix0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Given matrices should have the same shape: 0x0 does not equal to 17x17.
             //
             verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 4328;
      int int1 = 32;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(4328, 32, 32);
      int int2 = (-188);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow((-188), (double) 4328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(790, mockRandom0);
      mockRandom0.nextInt(790);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(790, 790, 243);
      mockRandom0.longs();
      Matrix matrix0 = sparseMatrix0.copy();
      matrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(37, 37, 37);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.updateAt(2, 37, matrixFunction0);
      sparseMatrix0.getColumn(3);
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 2);
      Matrix matrix0 = cCSMatrix0.blankOfRows(5193);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(3, vectorFunction0);
      cCSMatrix0.toBinary();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2656, 3);
      columnMajorSparseMatrix0.multiply((-157.2));
      CCSMatrix.zero(Integer.MAX_VALUE, (-1059));
      int int0 = (-713);
      matrix0.removeColumn(int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 1);
      basic2DMatrix0.rotate();
      // Undeclared exception!
      try { 
        basic2DMatrix0.swapColumns((-1705), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1705
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.transpose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(5, 5);
      // Undeclared exception!
      try { 
        basic2DMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.minInRow(32);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.infinityNorm();
      int int1 = 816;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 816);
      int int2 = 1;
      int int3 = 5;
      CCSMatrix.diagonal(5, (-3.72));
      matrix0.iterator();
      // Undeclared exception!
      try { 
        basic1DMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int int0 = (-1417);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 862;
      cCSMatrix0.swapRows(0, 862);
      int int1 = (-298);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(0, (-298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      double double0 = 927.2749404784282;
      Double double1 = new Double(927.2749404784282);
      int int0 = 3;
      Integer integer0 = new Integer(3);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.ITALY;
      NumberFormat.getCurrencyInstance(locale1);
      Matrix.diagonal(1131, 2189.62282424116);
      int int1 = 1076;
      Matrix.identity((-3957));
      String string0 = "";
      Matrix.fromMatrixMarket(string0);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[3];
      double double2 = 2.0;
      doubleArray1[0] = double2;
      double double3 = 4.999999999999998;
      doubleArray1[1] = double3;
      doubleArray1[2] = (double) int1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = double0;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = double2;
      doubleArray2[3] = (double) int1;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.shuffle();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      matrix0.toColumnMajorSparseMatrix();
      matrix0.infinityNorm();
      int int0 = 44;
      MockRandom mockRandom0 = new MockRandom(8);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(12, mockRandom0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.maxInRow(10);
      Matrix matrix0 = basic2DMatrix0.transpose();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator1);
      basic2DMatrix0.setColumn(10, (double) 2624);
      double double0 = new Double(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(10, 8, 8, 2624);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..8][8..2624].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(10, 10);
      basic2DMatrix0.removeLastRow();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(10, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 355.15569744;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 355.15569744;
      doubleArray1[3] = (-3.718386383410463);
      doubleArray1[5] = 355.15569744;
      doubleArray1[6] = 398.94;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.diagonal((-1548), 355.15569744);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Object object0 = new Object();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("F^NDRM(cBo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      ColumnMajorSparseMatrix.zero(3, 874);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(9, vectorAccumulator0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.swapRows(684, 323);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("org.la4j.matrix.dense.Basic1DMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.toString();
      cCSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      matrix0.infinityNorm();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 8);
      basic1DMatrix0.iterator();
      Object object0 = new Object();
      basic1DMatrix0.equals(object0);
      columnMajorSparseMatrix0.euclideanNorm();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      int int1 = 1681;
      int int2 = 861;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic1DMatrix0, 8, 1681, 159, 861, 32, 171);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 159, 861
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(185, 185, 12.833260329260987);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 185;
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(2, mockRandom0);
      mockRandom0.nextInt(139);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(2, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 185.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 18;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(18);
      int int1 = 11;
      Matrix matrix0 = basic2DMatrix0.slice(11, 17, 2217, 17);
      matrix0.toRowVector();
      // Undeclared exception!
      try { 
        matrix0.slice(18, 18, 2217, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [18..2217][18..17].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeColumn((-2034));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 902);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.swapRows(684, 323);
      columnMajorSparseMatrix0.swapColumns(323, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-90.9825), 2442.0, (double)323, (-90.9825), 816.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      columnMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 8);
      basic1DMatrix0.iterator();
      Object object0 = new Object();
      basic1DMatrix0.equals(object0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 5);
      basic2DMatrix0.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      int int0 = 32;
      cCSMatrix0.minInRow(32);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int1 = 822;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 822);
      matrix0.iterator();
      Object object0 = new Object();
      basic1DMatrix0.equals((Object) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("'Pl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 22;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(22);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayVariant(locale1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      locale0.getDisplayLanguage();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      mockRandom0.longs();
      int int1 = 8;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(22, 22);
      Locale locale2 = Locale.PRC;
      cRSMatrix1.toSparseMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateRow(22, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.rank();
      cCSMatrix0.swapColumns(779, 779);
      MockRandom mockRandom0 = new MockRandom(9953L);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1610.8794508);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 2651.82271769742;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1027.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1027.0;
      doubleArray0[2] = doubleArray3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(790, 790);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-270L));
      Vector.random(790, mockRandom1);
      SparseMatrix.zero(473, 3040);
      MockRandom mockRandom2 = new MockRandom();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap0, 473);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(473, 16);
      basic2DMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 185;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1681, 185);
      // Undeclared exception!
      columnMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      mockRandom0.nextBoolean();
      byteArray0[0] = (byte)54;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.longs((long) (byte)0, (long) (byte)0, (long) (byte)54);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.random(0, (byte)0, mockRandom0);
      matrix0.iteratorOfColumn(2614);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateColumn(10, vectorFunction1);
      matrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 185;
      double double0 = 12.833260329260987;
      Matrix matrix0 = Matrix.constant(185, 185, 12.833260329260987);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 185;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = (-1068);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(185, vectorFunction0);
      int int2 = 866;
      int int3 = (-2797);
      matrix0.slice(int1, int0, int2, int3);
      int int4 = 1681;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix.zero(int4, int0);
      double double1 = new Double(double0);
      Double double2 = new Double(int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 487;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(487, 487);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfShape(233, 233);
      int int1 = 474;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 474, (-3278), 2, 493);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 474, -3278
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 902);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 902 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 902);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(931.667379507512);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.swapRows(684, 323);
      matrix0.swapColumns(323, 3);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(189, 0.0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, 189, 826, 3, 866, 866, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3, 866
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 95;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(95);
      String string0 = "Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.";
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Locale locale0 = Locale.FRENCH;
      locale0.getScript();
      // Undeclared exception!
      try { 
        Locale.lookupTag((List<Locale.LanguageRange>) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NumberFormat.getInstance();
      int int0 = 5648;
      Matrix matrix0 = Matrix.zero(1868, 5648);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5648;
      doubleArray0[1] = (double) 1868;
      doubleArray0[2] = (double) 5648;
      Vector vector0 = Vector.fromArray(doubleArray0);
      Vector vector1 = vector0.multiply(5648.0);
      matrix0.insertColumn(5648, vector1);
      Matrix matrix1 = matrix0.blank();
      int int1 = 3;
      matrix1.sliceTopLeft(int1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 902);
      Matrix matrix1 = columnMajorSparseMatrix0.multiply(931.667379507512);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.swapRows(684, 323);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      Matrix.unit(1901, 7);
      cCSMatrix0.insert(matrix0);
      columnMajorSparseMatrix0.diagonalProduct();
      matrix1.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(790, 790);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(790, mockRandom0);
      mockRandom0.nextInt(50);
      mockRandom0.longs();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.add((Matrix) denseMatrix0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)18;
      CRSMatrix cRSMatrix0 = new CRSMatrix(790, 50);
      cRSMatrix0.getRow(520);
      vector0.subtract((double) 520);
      MockRandom mockRandom1 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(5, 2.220446049250313E-14, (Random) mockRandom0);
      sparseVector0.toSparseVector();
      sparseVector0.add(2.7755575615628903E-13);
      denseMatrix0.columns();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Matrix.constant(0, 0, 12.833260329260987);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(Integer.MAX_VALUE, 225, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      NumberFormat.getCurrencyInstance(locale0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 17);
      int int0 = 508;
      int int1 = 1528;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 17 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1418.2200676);
      doubleArray1[1] = (-1609.46);
      doubleArray1[2] = (-803.5948);
      doubleArray1[3] = 804.42;
      doubleArray1[4] = 1663.876208199;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 816.0;
      doubleArray2[1] = 1663.876208199;
      doubleArray2[2] = 1663.876208199;
      doubleArray2[3] = (-1609.46);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-803.5948);
      doubleArray3[1] = (-803.5948);
      doubleArray3[2] = (-1609.46);
      doubleArray3[3] = 804.42;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1481.6621565690825);
      doubleArray4[1] = 816.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1418.2200676);
      doubleArray5[1] = 1663.876208199;
      doubleArray5[2] = 816.0;
      doubleArray5[3] = 1663.876208199;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1418.2200676);
      doubleArray6[1] = (-1481.6621565690825);
      doubleArray6[2] = (-1609.46);
      doubleArray6[3] = (-803.5948);
      doubleArray6[4] = (-803.5948);
      doubleArray6[5] = 816.0;
      doubleArray6[6] = 804.42;
      doubleArray6[7] = 804.42;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 804.42;
      doubleArray7[1] = (-1609.46);
      doubleArray7[2] = 4048.33722850027;
      doubleArray7[3] = 1663.876208199;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 804.42;
      doubleArray8[1] = (-1418.2200676);
      doubleArray8[2] = 1663.876208199;
      doubleArray8[3] = 816.0;
      doubleArray8[4] = 4048.33722850027;
      doubleArray8[5] = 4048.33722850027;
      doubleArray0[7] = doubleArray8;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.divide(4048.33722850027);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.constant(0, 0.0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-1523), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 8);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.ints();
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.PRC;
      NumberFormat.getCurrencyInstance(locale0);
      Matrix matrix0 = Matrix.diagonal(1, 1);
      Matrix.fromCSV("");
      Double double0 = new Double(1);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix1 = sparseMatrix0.insert(matrix0);
      MockRandom mockRandom2 = new MockRandom(1);
      Locale locale2 = Locale.PRC;
      NumberFormat.getCurrencyInstance(locale2);
      Matrix.fromCSV("");
      matrix1.transpose();
      Matrix matrix2 = Matrix.identity(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix2.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      basic2DMatrix0.toColumnMajorSparseMatrix();
      Double double0 = new Double(0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(2199);
      basic2DMatrix1.select(intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom(2199);
      Matrix.random(495, 5, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.equals((Object) null);
      Basic2DMatrix.unit(5, 5);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 902);
      Matrix matrix1 = columnMajorSparseMatrix0.multiply(931.667379507512);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)902).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(1149, vectorAccumulator0);
      columnMajorSparseMatrix1.euclideanNorm();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate1).test(anyInt() , anyInt());
      columnMajorSparseMatrix1.non(matrixPredicate1);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix1.is(advancedMatrixPredicate0);
      matrix1.sum();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      basic2DMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 2.3916281370176127);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.is(matrixPredicate0);
      cRSMatrix0.toRowVector();
      cRSMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(0, 0, (-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0);
      basic1DMatrix0.equals((Object) basic2DMatrix0);
      Basic1DMatrix.diagonal(0, (-1.0));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldRows(vectorAccumulator1);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cRSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, (-14), 802, (-14), (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -14x-14
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      cCSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      cCSMatrix1.toColumnMajorSparseMatrix();
      cCSMatrix1.infinityNorm();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 8);
      basic1DMatrix0.iterator();
      Object object0 = new Object();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix1.is(matrixPredicate0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate1).test(anyInt() , anyInt());
      basic1DMatrix0.non(matrixPredicate1);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cCSMatrix1.is(advancedMatrixPredicate0);
      cCSMatrix1.sum();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Double double0 = new Double(0);
      cCSMatrix0.copyOfColumns(0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      MockRandom mockRandom1 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(4, 0.0, (Random) mockRandom0);
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      columnMajorSparseMatrix0.toMatrixMarket(numberFormat0);
      columnMajorSparseMatrix0.transpose();
      columnMajorSparseMatrix0.subtract(164.120934495665);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 16);
      matrix0.norm();
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[5][9];
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.minInColumn((-2013265919));
      cRSMatrix0.shuffle();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        Matrix.constant((-1224), 189, 189);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(778, 778, 778);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(778, mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(306, 306, 778);
      mockRandom0.longs();
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(denseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      denseMatrix0.insertColumn(6, vector0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(790, 790);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(790, mockRandom0);
      SparseMatrix.zero(5, 790);
      SparseMatrix.zero(219, 219, 241);
      rowMajorSparseMatrix0.copy();
      denseMatrix0.multiply((Matrix) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.multiplyByItsTranspose();
      basic2DMatrix0.maxInRow((-1278));
      basic2DMatrix0.max();
      MockRandom mockRandom0 = new MockRandom(477393L);
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.zero(1);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.mkString("U", "");
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(180, 180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [180..0][180..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      mockRandom0.longs(9984L, 9990L);
      mockRandom0.nextGaussian();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 185;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(185, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1751;
      double[] doubleArray0 = null;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(1751, 1868, (double[]) null);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 10;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.updateAt(10, 8, matrixFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transformColumn((-283), vectorFunction1);
      matrix0.toBinary();
      Matrix matrix1 = basic2DMatrix0.transformRow(0, vectorFunction0);
      matrix1.euclideanNorm();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int int0 = (-713);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 2063;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-1426), 2063);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1426x2063
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 3369.051311253396;
      doubleArray2[2] = 387.688;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 3369.051311253396;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 3369.051311253396;
      doubleArray3[3] = 3369.051311253396;
      doubleArray3[4] = 3369.051311253396;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 387.688;
      doubleArray4[1] = 3369.051311253396;
      doubleArray4[2] = 387.688;
      doubleArray4[3] = 3369.051311253396;
      doubleArray4[4] = 3369.051311253396;
      doubleArray4[6] = 387.688;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 387.688;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 3369.051311253396;
      doubleArray0[5] = doubleArray6;
      doubleArray0[6] = doubleArray3;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 651.9180882214;
      doubleArray7[1] = 651.9180882214;
      doubleArray7[2] = (-2380.595556566);
      doubleArray7[3] = 3369.051311253396;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 3369.051311253396;
      doubleArray0[7] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.unit(6, 8);
      matrix0.add((double) 6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(2, vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 23;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleAttributes();
      locale0.getUnicodeLocaleAttributes();
      Matrix matrix0 = cCSMatrix0.sliceBottomRight(23, 23);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-2305);
      matrix0.trace();
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-2305), (-2305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2305x-2305
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(790, 790);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-270L));
      Vector.random(790, mockRandom1);
      int int0 = 473;
      SparseMatrix.zero(473, 3040);
      int int1 = 7;
      int int2 = 239;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(473, 3040);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 816;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(816, (-3.72));
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(816, mockRandom0);
      int int1 = 7;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(816, 816);
      denseMatrix0.trace();
      int int2 = Integer.MAX_VALUE;
      basic2DMatrix0.sliceBottomRight(Integer.MAX_VALUE, (-386));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.updateColumn(int2, vectorFunction0);
      denseMatrix0.rank();
      denseMatrix0.blankOfShape(int0, int1);
      Matrix.random(int1, int0, mockRandom0);
      int int3 = (-1068);
      String string0 = "The";
      Matrix matrix0 = Matrix.fromMatrixMarket(string0);
      int int4 = 147;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(int3, int4);
      Basic1DMatrix.block(denseMatrix0, denseMatrix0, basic2DMatrix0, matrix0);
      basic1DMatrix0.iterator();
      Object object0 = new Object();
      basic1DMatrix0.equals((Object) matrix0);
      basic2DMatrix0.euclideanNorm();
      int int5 = 4916;
      CCSMatrix cCSMatrix0 = new CCSMatrix(int4, int0, int5);
      String string1 = "c";
      cCSMatrix0.mkString(string1, string0);
      cCSMatrix0.sliceBottomRight(int1, int3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformColumn((-283), vectorFunction1);
      Matrix matrix0 = basic2DMatrix0.transformRow(0, vectorFunction0);
      basic2DMatrix0.add(1.0);
      matrix0.euclideanNorm();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = (double) 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix1 = matrix0.transpose();
      basic2DMatrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix1.foldColumns(vectorAccumulator0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.mkString("U", "");
      basic2DMatrix0.toColumnVector();
      cCSMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 790;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(790, 790);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.transformColumn(790, vectorFunction0);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(int0, mockRandom0);
      int int1 = 5;
      SparseMatrix.zero(int1, int0);
      int int2 = 7;
      int int3 = 219;
      int int4 = 239;
      SparseMatrix.zero(int3, int3, int4);
      rowMajorSparseMatrix0.copy();
      denseMatrix0.insertColumn(int2, vector0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      mockRandom0.nextDouble();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Y\"'PPs");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[5][9];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      basic2DMatrix0.norm();
      Vector.fromMap(hashMap0, 0);
      basic2DMatrix0.toColumnMajorSparseMatrix();
      Matrix.fromCSV(", ");
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1427;
      doubleArray0[1] = (double) 1427;
      doubleArray0[2] = (double) 1427;
      int[] intArray0 = new int[8];
      intArray0[0] = 1427;
      intArray0[1] = 1427;
      intArray0[2] = 1427;
      intArray0[3] = 1427;
      intArray0[4] = 1427;
      intArray0[5] = 1427;
      intArray0[6] = 1427;
      intArray0[7] = 1427;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1427, 1427, 1427, doubleArray0, intArray0, intArray0);
      String string0 = "'~#:{mIj";
      // Undeclared exception!
      cRSMatrix0.power(3229);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(501, 501);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(501, 501);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 501);
      basic2DMatrix0.transpose();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      int int0 = (-1);
      int int1 = 9;
      double double0 = 682.4363555819992;
      basic2DMatrix0.setColumn(int1, double0);
      basic2DMatrix0.min();
      int int2 = 8;
      basic2DMatrix0.slice(int2, int1, int2, int2);
      rowMajorSparseMatrix0.divide(int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      Integer integer0 = new Integer(0);
      Locale locale0 = Locale.KOREA;
      locale0.hasExtensions();
      locale0.getDisplayScript();
      locale0.hasExtensions();
      locale0.getDisplayVariant();
      Locale locale1 = Locale.PRC;
      NumberFormat.getCurrencyInstance(locale0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.diagonal(0, 0);
      Object object0 = new Object();
      Matrix.fromCSV("     ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom(310L);
      MockRandom mockRandom3 = new MockRandom(310L);
      Vector.random(462, mockRandom3);
      int int0 = 473;
      int int1 = 501;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(23, 501);
      MockRandom mockRandom4 = new MockRandom();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Vector.fromMap(hashMap1, 23);
      Integer integer0 = new Integer((-2347));
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(integer0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        sparseMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 2199;
      basic1DMatrix0.minInRow(2199);
      basic2DMatrix0.toColumnMajorSparseMatrix();
      basic1DMatrix0.power(2);
      Double double0 = new Double(1562.762018069);
      // Undeclared exception!
      try { 
        basic2DMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9958L);
      mockRandom0.nextDouble();
      int int0 = 17;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1);
      basic2DMatrix0.determinant();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      basic2DMatrix0.fold(matrixAccumulator0);
      int int1 = 2;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        basic2DMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(17, 0.0);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      Basic2DMatrix.unit(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.transpose();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(5, 5);
      basic2DMatrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 812;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(812, 812);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(812);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 812);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(int0, vectorFunction0);
      rowMajorSparseMatrix0.product();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      String string0 = "JE";
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic2DMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.mkString(string0, string0);
      String string1 = "`{V:iN$$O";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket(string1);
      int int1 = 17;
      rowMajorSparseMatrix0.add((double) int0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int0, vectorProcedure0);
      int int2 = (-1666);
      cCSMatrix1.swapRows(int1, int2);
      String string2 = "da{XP1cc0(0]R";
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromMatrixMarket(string2);
      Object object0 = new Object();
      double double0 = 1182.313409753711;
      Double double1 = new Double(double0);
      int int3 = (-1654);
      int int4 = 2;
      basic2DMatrix1.insert((Matrix) cCSMatrix0, int3, int2, int3, int4);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      Basic2DMatrix.randomSymmetric(int3, mockRandom0);
      CCSMatrix.fromMatrixMarket(string2);
      rowMajorSparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(500);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      basic1DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic1DMatrix0.sliceTopLeft(3, 500);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(2);
      basic2DMatrix0.determinant();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      int int0 = (-28);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn(3903, vectorAccumulator0);
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("Y\"'PPs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 790;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 790;
      doubleArray0[1] = (double) 790;
      doubleArray0[2] = (double) 790;
      Matrix matrix0 = Matrix.from1DArray(790, 790, doubleArray0);
      int int1 = (-956);
      double double0 = 1.1102230246251565E-14;
      // Undeclared exception!
      try { 
        matrix0.setColumn((-956), 1.1102230246251565E-14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-956' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = (-4244);
      // Undeclared exception!
      try { 
        basic1DMatrix0.power((-4244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -4244.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom(310L);
      Vector.random(462, mockRandom2);
      MockRandom mockRandom3 = new MockRandom();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 10);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2682, 2682);
      // Undeclared exception!
      basic2DMatrix0.insertRow(501, vector0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(790, 790);
      rowMajorSparseMatrix0.toDenseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(790, mockRandom0);
      mockRandom0.nextInt(50);
      mockRandom0.longs();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      basic2DMatrix0.insertColumn((-1059), vector0);
      rowMajorSparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 22;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(22);
      Locale locale0 = Locale.CANADA;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      locale0.getDisplayVariant(locale0);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(22, 22);
      basic2DMatrix0.removeLastColumn();
      double double0 = 2809.681613000999;
      CCSMatrix.diagonal(22, 2809.681613000999);
      basic2DMatrix0.rank();
      cCSMatrix0.blankOfShape(22, 0);
      cCSMatrix0.toCSV();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, 0, 0, 0, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 22 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.rank();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 8);
      basic1DMatrix0.toColumnMajorSparseMatrix();
      Integer integer0 = new Integer(3057);
      CCSMatrix.diagonal(8, 23);
      sparseMatrix0.toCSV();
      CRSMatrix.diagonal(8, 8);
      CRSMatrix.fromCSV("0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.rank();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      cCSMatrix0.swapColumns(1, 1);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(29, 29);
      basic1DMatrix0.toColumnMajorSparseMatrix();
      Integer integer0 = new Integer(3057);
      CCSMatrix.diagonal(29, 1.0);
      String string0 = sparseMatrix0.toCSV();
      CRSMatrix.diagonal(29, 29);
      CRSMatrix.fromCSV(string0);
      MockRandom mockRandom0 = new MockRandom(9959L);
      mockRandom0.ints();
      CCSMatrix.fromMatrixMarket("Wrong vector length: ");
      int int0 = (-1278);
      int int1 = 4269;
      Matrix.zero(int1, int0);
      String string1 = "%%MatriTarket";
      CRSMatrix.fromCSV(string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayScript();
      locale0.hasExtensions();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom1.nextFloat();
      MockRandom mockRandom2 = new MockRandom(4465L);
      mockRandom1.ints();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
