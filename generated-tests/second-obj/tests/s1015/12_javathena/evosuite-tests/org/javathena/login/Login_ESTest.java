/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:12:18 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.Calendar;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login.login_log("  ______/ __/._\\__/    _ _ __\\ _ _ ____ _ _ __/._  ");
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      Login.showTab(byteArray0);
      Login login0 = new Login();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      int[] intArray0 = new int[5];
      intArray0[0] = 50;
      intArray0[1] = 2;
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromClient0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      login0.setOut((PrintWriter) null);
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Iy_?KrA3/cF)_tgd");
      Login.getDbManagemtType();
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Login login0 = new Login();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      FastMap<Integer, Auth_data> fastMap0 = null;
      try {
        fastMap0 = new FastMap<Integer, Auth_data>("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Identifier  already in use
         //
         verifyException("javolution.context.PersistentContext$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      MySQLConfig.setLogin_server_id("conf/subnet_athena.conf");
      login0.getAuth_num();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      mockPrintStream0.print(86.0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, true, "conf/subnet_athena.conf");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // conf/subnet_athena.conf
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      int int0 = new Integer(2);
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalSocketAddress();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login.display_title();
      System.setCurrentTimeMillis(3244L);
      Login.setPASSWORDENC(476);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-3619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-3619
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      Login.getMd5Data(socket_data0);
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("(>&ODR]9?N", 10);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.setAuth_max(4371);
      login0.getOut();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1249);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      FromChar fromChar0 = new FromChar();
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertEquals(0, login0.getAuth_max());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      login0.do_initXML();
      Login.mmo_auth_syncXML();
      login0.getLog_fp();
      login0.parse_console("");
      login0.getServer_fd();
      Login.login_log("");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      login0.check_ipmask(9, "Q gWH<@'1O");
      Login.getPASSWORDENC();
      Login login1 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getByName("YES");
      login1.check_ip(inetAddress0);
      // Undeclared exception!
      try { 
        login0.parse_admin(9, (Socket_data) null, login1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalSocketAddress();
      mockSocket0.getSoTimeout();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login login0 = new Login();
      Proxy proxy0 = Proxy.NO_PROXY;
      Login.mmo_auth_initTXT();
      Login.mmo_auth_syncXML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket(inetAddress0, 1806, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@74ffda55
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      socket_data0.setEof(2);
      FromClient fromClient0 = new FromClient();
      mockSocket0.close();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data1 = new Socket_data(mockSocket0, fromChar0);
      Login.mmo_auth_initXML();
      Login login1 = new Login();
      login0.parse_admin(31000, socket_data1, login1);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Login login0 = new Login();
      MockInetAddress.getLoopbackAddress();
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login.mmo_auth_syncXML();
      login0.getLog_fp();
      FastMap<Integer, Auth_data> fastMap0 = null;
      try {
        fastMap0 = new FastMap<Integer, Auth_data>("L[+]`-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Identifier L[+]`-8 already in use
         //
         verifyException("javolution.context.PersistentContext$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      login0.do_initTXT();
      int int0 = FromClient.ALIVE_PACKET;
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.setAuth_max(512);
      login0.getOut();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(50);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Login login1 = new Login();
      login1.check_auth_sync();
      Login login2 = new Login();
      login1.yesNoOnOffToBoolean("ON");
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("ON", (byte)41);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5f0441f4
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[9];
      intArray0[0] = 100000000;
      intArray0[1] = 10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      login0.do_initTXT();
      UserManagement.addAccountIdCount(50);
      login0.parse_console("help");
      Login login1 = new Login();
      FromClient fromClient0 = new FromClient();
      Login.mmo_auth_initXML();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      login0.do_initXML();
      UserManagement.addAccountIdCount(2000000);
      MockInetAddress.getLoopbackAddress();
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      Login login1 = new Login();
      login1.getLog_fp();
      login1.do_initTXT();
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      fastMap0.setShared(false);
      UserManagement.setAuth_dats(fastMap0);
      ConfigurationManagement.setAccess_allownum(6);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 30;
      intArray0[2] = 2;
      intArray0[3] = 100000000;
      intArray0[4] = 30;
      intArray0[5] = (-1397);
      intArray0[7] = 50;
      intArray0[8] = 50;
      ConfigurationManagement.setSubneti(intArray0);
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      login0.do_initXML();
      login0.getLog_fp();
      login0.getLog_fp();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      ConfigurationManagement.setAccess_allownum((-981));
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      Integer integer0 = new Integer((-884));
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Integer) null).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      fastMap0.put(integer0, auth_data0);
      UserManagement.setAuth_dats(fastMap0);
      Login.mmo_auth_syncTXT();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Login login1 = new Login();
      login1.check_auth_sync();
      // Undeclared exception!
      login1.do_initXML();
  }
}
