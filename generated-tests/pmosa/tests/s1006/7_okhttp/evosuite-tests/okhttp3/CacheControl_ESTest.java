/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:52:27 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-702), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -702
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(0, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder4.maxAge((-1910), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1910
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-cache, only-if-cached, no-transform", string0);
      
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.maxStale(0, timeUnit0);
      cacheControl_Builder1.noStore();
      cacheControl_Builder4.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noStore();
      cacheControl_Builder3.noTransform();
      cacheControl_Builder0.noStore();
      cacheControl_Builder5.maxStale(31, timeUnit0);
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder2.noCache();
      CacheControl cacheControl1 = cacheControl_Builder6.build();
      cacheControl_Builder0.onlyIfCached();
      cacheControl1.noTransform();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl1.noTransform();
      cacheControl_Builder3.noStore();
      cacheControl_Builder0.noStore();
      cacheControl_Builder2.noTransform();
      cacheControl1.noCache();
      int int0 = cacheControl1.minFreshSeconds();
      int int1 = cacheControl1.sMaxAgeSeconds();
      assertTrue(int1 == int0);
      
      cacheControl0.noTransform();
      cacheControl0.mustRevalidate();
      boolean boolean0 = cacheControl1.mustRevalidate();
      assertEquals(0, cacheControl1.maxStaleSeconds());
      assertTrue(cacheControl1.noStore());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      cacheControl_Builder1.maxAge(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      TimeUnit timeUnit2 = TimeUnit.SECONDS;
      cacheControl_Builder5.maxStale(0, timeUnit2);
      cacheControl0.minFreshSeconds();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("Pragma", "Pragma");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.isPublic();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl1 = cacheControl_Builder0.build();
      cacheControl1.FORCE_CACHE.headerValue = "1}0Z7VY* ~2am1}(`";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        headers_Builder0.set("Headers cannot be null", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 7 in header name: Headers cannot be null
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(2, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder0.maxAge(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(639, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noStore();
      cacheControl_Builder5.noTransform();
      cacheControl_Builder5.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("1}0Z7VY* ~2am1}(`", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cacheControl0.FORCE_CACHE.headerValue = "";
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_NETWORK.headerValue = "S}O0W)({";
      cacheControl0.noStore();
      cacheControl0.noCache();
      cacheControl1.FORCE_NETWORK.toString();
      cacheControl0.onlyIfCached();
      int int0 = cacheControl1.maxStaleSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("K?)[K:WUH^y1>)]e&&/", "K?)[K:WUH^y1>)]e&&/");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("4t7`lw(No/|j,", "K?)[K:WUH^y1>)]e&&/");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      Headers.Builder headers_Builder3 = headers_Builder2.removeAll("Pragma");
      headers_Builder0.set("Pragma", ".inputStream()");
      Headers headers0 = headers_Builder3.build();
      headers0.values(".inputStream()");
      Headers.Builder headers_Builder4 = headers_Builder0.addLenient(".inputStream()", "K?)[K:WUH^y1>)]e&&/");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      Headers headers1 = headers_Builder4.build();
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      cacheControl1.toString();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.maxStale(1261, timeUnit0);
      int int0 = cacheControl2.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("; charset=utf-8", "C_TgL");
      headers_Builder0.removeAll("min-fresh=");
      headers_Builder0.set("Pragma", "=? \"Zvc0fV");
      Headers headers0 = headers_Builder1.build();
      headers0.values("K?)[K:WUH^y1>)]e&&/");
      Headers.Builder headers_Builder2 = headers_Builder0.add("K?)[K:WUH^y1>)]e&&/", "K?)[K:WUH^y1>)]e&&/");
      headers_Builder2.addLenient("=? \"Zvc0fV", ":&mog{>d G14 A4");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.headerValue = "C_TgL";
      cacheControl0.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      assertSame(cacheControl_Builder0, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("cache-control", "cache-control");
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("; charset=utf-8", "C_TgL");
      Headers.Builder headers_Builder2 = headers_Builder0.removeAll("min-fresh=");
      headers_Builder0.set("Pragma", "=? \"Zvc0fV");
      Headers headers0 = headers_Builder1.build();
      headers0.values("K?)[K:WUH^y1>)]e&&/");
      Headers.Builder headers_Builder3 = headers_Builder0.add("K?)[K:WUH^y1>)]e&&/", "K?)[K:WUH^y1>)]e&&/");
      headers_Builder3.addLenient("=? \"Zvc0fV", ":&mog{>d G14 A4");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      Headers headers1 = headers_Builder2.build();
      cacheControl0.toString();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl.parse(headers1);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertFalse(cacheControl2.noStore());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("cache-control", "cache-control");
      headers_Builder1.addLenient(":9*hX[jW?X", "");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      Headers.Builder headers_Builder2 = headers_Builder1.removeAll("Pragma");
      headers_Builder0.set("Pragma", "Z|l,");
      Headers headers0 = new Headers(headers_Builder1);
      headers0.values("max-stale");
      headers_Builder2.addLenient("byteCount > Integer.MAX_VALUE: ");
      CacheControl.parse(headers0);
      headers_Builder0.build();
      CacheControl.parse(headers0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noCache());
      
      CacheControl cacheControl1 = cacheControl_Builder0.build();
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertTrue(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("K?)[K:WUH^y1>)]e&&/", "K?)[K:WUH^y1>)]e&&/");
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("K?)[K:WUH^y1>)]e&&/");
      headers_Builder0.removeAll("min-fresh=");
      headers_Builder0.set("Pragma", "min-fresh=");
      Headers headers0 = headers_Builder1.build();
      headers_Builder0.removeAll("C_TgL");
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      CacheControl.parse(headers0);
      int int0 = cacheControl1.maxStaleSeconds();
      assertEquals(Integer.MAX_VALUE, int0);
  }
}
