/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:03:14 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>(map0, class0);
      Map<Object, Map<Integer, String>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(map1);
      Integer integer0 = new Integer(830);
      Object object0 = new Object();
      doubleKeyMap1.remove(integer0, object0);
      Integer integer1 = new Integer(830);
      doubleKeyMap2.remove((Object) "`", integer1);
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap3 = new DoubleKeyMap<String, Object, String>(hashMap0, class1);
      doubleKeyMap3.get("us.codecraft.webmagic.utils.MultiKeyMapBase");
      DoubleKeyMap<String, String, Object> doubleKeyMap4 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap4.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<String, Map<String, Integer>> hashMap1 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap5 = new DoubleKeyMap<String, String, Integer>(hashMap1);
      doubleKeyMap5.get((String) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap6 = new DoubleKeyMap<Integer, Integer, String>((Map<Integer, Map<Integer, String>>) null, class1);
      Map<String, Map<Object, Object>> map2 = doubleKeyMap6.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap7 = new DoubleKeyMap<String, Object, Object>(map2);
      doubleKeyMap7.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      Integer integer2 = new Integer(830);
      doubleKeyMap7.remove("", (Object) integer2);
      doubleKeyMap7.remove("");
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap8 = new DoubleKeyMap<String, Object, Integer>(class2);
      Map<Object, Integer> map3 = doubleKeyMap8.get("owMr");
      assertNull(map3);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      BiFunction<Object, Object, Map<String, Object>> biFunction0 = (BiFunction<Object, Object, Map<String, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("~pTpan'v@N", hashMap0);
      doubleKeyMap1.remove((Object) hashMap1, (Map<String, Object>) hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(class0);
      String string0 = "";
      // Undeclared exception!
      try { 
        doubleKeyMap2.put("", (Map<String, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(1);
      doubleKeyMap0.remove(integer0, "wrong proto type map ");
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer1, "e", integer1);
      doubleKeyMap0.newMap();
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(integer2, "I<6}q|U:Wt:{]Wl@", integer2);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Integer) null, (Map<Object, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      BiFunction<Object, Object, Map<String, Object>> biFunction0 = (BiFunction<Object, Object, Map<String, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("~pTpan'v@N", hashMap0);
      doubleKeyMap1.remove((Object) hashMap1, (Map<String, Object>) hashMap1);
      HashMap<Object, Map<String, String>> hashMap2 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap2, class0);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap2.put("", hashMap3);
      doubleKeyMap2.remove((Object) "", (String) null);
      DoubleKeyMap<String, Map<String, Object>, Object> doubleKeyMap3 = new DoubleKeyMap<String, Map<String, Object>, Object>(class0);
      doubleKeyMap3.remove((String) null);
      HashMap<String, Map<String, Integer>> hashMap4 = new HashMap<String, Map<String, Integer>>();
      hashMap4.clone();
      Object object0 = new Object();
      hashMap2.put(object0, (Map<String, String>) null);
      DoubleKeyMap<String, String, Integer> doubleKeyMap4 = new DoubleKeyMap<String, String, Integer>(hashMap4, class0);
      doubleKeyMap4.remove("");
      doubleKeyMap0.remove((Object) null);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) hashMap2, "", "5dFk");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-629));
      Object object0 = new Object();
      doubleKeyMap0.put(integer0, (Object) integer0, object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer1 = new Integer((-629));
      Integer integer2 = new Integer(1);
      doubleKeyMap0.remove(integer0, (Object) integer2);
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class1);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.toString();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<String, Map<String, Object>>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, String, Map<String, Object>> doubleKeyMap3 = new DoubleKeyMap<Object, String, Map<String, Object>>(map0, class1);
      DoubleKeyMap<Object, String, Object> doubleKeyMap4 = new DoubleKeyMap<Object, String, Object>();
      Object object3 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, Integer>();
      Integer integer0 = new Integer((-355));
      doubleKeyMap1.put((Object) hashMap0, (Map<String, Object>) hashMap0, integer0);
      Integer integer1 = doubleKeyMap1.get((Object) hashMap0, (Map<String, Object>) hashMap0);
      assertEquals((-355), (int)integer1);
  }
}
