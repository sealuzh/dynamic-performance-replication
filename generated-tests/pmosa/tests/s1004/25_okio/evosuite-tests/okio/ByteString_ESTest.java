/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:28:09 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-11));
      assertEquals(0, int0);
      
      byteString0.EMPTY.substring(0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("Bh");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(48, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)66;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString0.sha256();
      ByteString byteString2 = ByteString.decodeBase64("");
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeUtf8("TJ8V:");
      byteString0.hashCode();
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      Source source0 = null;
      String string0 = "";
      ByteString byteString1 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(328);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("SHA-256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: SHA-256
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString1.hmacSha256(byteString0);
      byteString0.endsWith(byteArray0);
      byteString0.asByteBuffer();
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.base64Url();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "fromIndex < 0";
      ByteString byteString0 = buffer0.sha1();
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("^d!?d8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ^
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("getsockname failed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)26;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString1.rangeEquals((int) (byte) (-66), byteString0, 101, (int) (byte)14);
      assertSame(byteString1, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)81;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.asByteBuffer();
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byte[] byteArray1 = byteString1.toByteArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha1();
      byteString0.utf8();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString2.EMPTY.hmacSha1(byteString0);
      byteString0.rangeEquals(321, byteString1, 15, 321);
      byteString2.base64Url();
      byteString0.indexOf(byteString2, (int) (byte) (-32));
      // Undeclared exception!
      try { 
        byteString3.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.utf8();
      assertNotNull(string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha1(byteString0);
      byteString1.base64Url();
      int int0 = byteString0.indexOf(byteString1, (int) (byte) (-32));
      assertEquals(0, int0);
      
      boolean boolean0 = byteString1.startsWith(byteString0);
      boolean boolean1 = byteString0.rangeEquals(1, byteArray0, (-301), (-1477));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.utf8();
      assertNotNull(string0);
      
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString0.indexOf(byteString1, (int) (byte)99);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString.decodeBase64("\u0000cz ");
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString.codePointIndexToCharIndex("hex == null", 0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString0.equals(realBufferedSource0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString0.equals(realBufferedSource0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.sha512();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)56;
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)83);
      assertEquals((-1), int0);
      
      byteString0.toAsciiUppercase();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-11));
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString0.EMPTY.substring(0);
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-32), 343);
      byteString2.equals(byteArrayInputStream0);
      byteString2.endsWith(byteArray0);
      byteString1.base64Url();
      int int0 = byteString0.indexOf(byteString1, (int) (byte) (-32));
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("\uFFFD", charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString3 = byteString2.toAsciiUppercase();
      byteString3.sha256();
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(105L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertArrayEquals(new byte[] {(byte)115}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-128);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)92;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 49);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertArrayEquals(new byte[] {(byte)48, (byte)27, (byte)112, (byte)101, (byte)58, (byte)37, (byte)92}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = (-1369);
      byteString0.indexOf(byteArray0, (-1369));
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 55, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=55 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-32));
      assertEquals(0, int0);
      
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(",u$}");
      ByteString byteString2 = ByteString.of(byteBuffer0);
      int int1 = byteString2.indexOf(byteString1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      byteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-38);
      byteString0.indexOf(byteArray0, (int) (byte) (-38));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-61);
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.base64();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      byteString1.equals("fromIndex < 0");
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -38
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-32));
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      int int1 = byteString0.EMPTY.indexOf(byteString1, 2820);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = byteString0.equals(object0);
      Charset.defaultCharset();
      boolean boolean1 = byteString0.rangeEquals((int) (byte) (-32), byteArray0, (-1477), (-1477));
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)2;
      int int0 = byteString0.EMPTY.indexOf(byteArray0, (int) (byte)0);
      assertEquals((-1), int0);
      
      byteString0.base64();
      boolean boolean0 = byteString0.equals("");
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean1 = byteString0.startsWith(byteString1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)85;
      byte byte0 = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)56;
      byteString0.lastIndexOf(byteArray0, (-1781));
      byteString0.sha512();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("o!uhN.n@)^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-32), 343);
      byteString2.equals(byteArrayInputStream0);
      byteString2.endsWith(byteArray0);
      byteString1.base64Url();
      byteString0.indexOf(byteString1, (int) (byte) (-32));
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("\uFFFD", charset0);
      byteString0.toString();
      byteString2.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("4A==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-32));
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString2);
      assertTrue(boolean0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString2;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString3 = options0.get(0);
      int int1 = byteString1.lastIndexOf(byteString3);
      assertTrue(int1 == int0);
      
      byteString2.asByteBuffer();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-32));
      assertEquals(0, int0);
      
      byteString0.hex();
      byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString1 = ByteString.decodeHex("00");
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex(".inputStream()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[3];
      byteString0.EMPTY.sha256();
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 343);
      byteString2.equals(byteArrayInputStream0);
      byteString2.endsWith(byteArray0);
      byteString1.base64Url();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("\u0000", charset0);
      byteString0.toString();
      byteString2.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("AA==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-26));
      assertEquals(0, int0);
      
      byteString0.hex();
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString2);
      assertTrue(boolean0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      String string0 = options0.toString();
      assertEquals("[[size=0], [hex=00]]", string0);
      
      ByteString byteString3 = byteString0.md5();
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte) (-32));
      byteString0.hex();
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      byteString0.equals(byteString1);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "endIndex < beginIndex: ");
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.hex();
      Object object0 = new Object();
      byteString0.equals(object0);
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteBuffer0.asReadOnlyBuffer();
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      int int1 = byteString0.lastIndexOf(byteString1, (int) (byte) (-32));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=999999]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-32), 343);
      byteString2.equals(byteArrayInputStream0);
      byteString2.endsWith(byteArray0);
      byteString1.base64Url();
      byteString0.indexOf(byteString1, (int) (byte) (-32));
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("\uFFFD", charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString4 = byteString2.toAsciiUppercase();
      assertNotSame(byteString4, byteString2);
      assertFalse(byteString4.equals((Object)byteString2));
      
      int int0 = byteString1.lastIndexOf(byteArray0, 97);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0, int0);
      
      String string1 = byteString3.toString();
      assertEquals("[text=?]", string1);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte) (-32));
      byteString0.hex();
      byteString0.EMPTY.substring(0);
      Object object0 = new Object();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.sha256();
      ByteString.decodeHex("00");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-32));
      try { 
        ByteString.read(byteArrayInputStream0, 551);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 18);
      byteString0.hex();
      ByteString byteString1 = byteString0.substring(2);
      Object object0 = new Object();
      ByteString byteString2 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte) (-32);
      byteArray1[3] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteString0.equals(byteArrayInputStream0);
      byteString1.base64Url();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString3 = hashingSink0.hash();
      byteString1.lastIndexOf(byteString3);
      // Undeclared exception!
      try { 
        byteString3.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ByteString.read(byteArrayInputStream0, (byte)0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-119);
      int int0 = byteString0.lastIndexOf(byteArray1, 57);
      assertEquals((-1), int0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)28);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)28;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-53);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString2.toString();
      assertEquals("[hex=0000000000000000000000000000000000000000]", string0);
      
      int int1 = byteString1.compareTo(byteString0);
      assertEquals(0, int1);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-53);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000000000]", string0);
      
      int int1 = byteString2.compareTo(byteString1);
      assertEquals((-1), int1);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      byteString2.utf8();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString1.toString();
      assertEquals("[hex=00]", string0);
      
      byteString2.compareTo(byteString0);
      boolean boolean0 = byteString2.startsWith(byteArray0);
      boolean boolean1 = byteString0.startsWith(byteString2);
      assertTrue(boolean1 == boolean0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString2.toString();
      byteString1.startsWith(byteArray0);
      byteString2.utf8();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("okio.Okio");
      ByteString.of(byteBuffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString1.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteString0.write(byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-117);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.hmacSha1(byteString0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000000000]", string0);
      
      int int1 = byteString2.compareTo(byteString0);
      assertEquals((-1), int1);
      assertTrue(byteString0.equals((Object)byteString1));
      
      boolean boolean0 = byteString2.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-117);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString1.string(charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString2 = ByteString.decodeBase64("");
      String string1 = byteString2.utf8();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        byteString1.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      String string0 = byteString0.toString();
      assertEquals("[hex=00000000000000000000000000]", string0);
      
      int int0 = ByteString.codePointIndexToCharIndex("\n", (-160));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-64));
      assertEquals(0, int0);
      
      byteString0.hex();
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.equals(byteString2);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000]", string0);
      
      String string1 = byteString1.toString();
      assertEquals("[size=0]", string1);
      
      ByteString byteString3 = byteString0.substring(0, 0);
      assertTrue(byteString3.equals((Object)byteString1));
  }
}
