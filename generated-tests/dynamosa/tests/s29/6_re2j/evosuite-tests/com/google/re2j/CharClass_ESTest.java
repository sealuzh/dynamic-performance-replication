/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:49:56 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][7];
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1110, 1110);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      intArray0[2] = (-2598);
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      intArray0[3] = (-492);
      intArray0[4] = (-3952);
      int int0 = 2821;
      intArray0[5] = 2821;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 66640, (-2598), (-492), (-3952), 2821, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string1 = charClass0.toString();
      assertNotNull(string1);
      assertEquals("[0x0-0x10450 0xfffff090-0xb05]", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass1);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      intArray0[3] = (-492);
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedRange((-2678), 45);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 45}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      String string0 = charClass3.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 66640}, intArray0);
      assertEquals("[0x0-0x10450 0x0-0xfffffe14 0x0 0xfffff58a-0x10450]", string0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      String string1 = charClass3.toString();
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 66640}, intArray0);
      assertEquals("[0x0-0x10450 0x0-0xfffffe14 0x0 0xfffff58a-0x10450]", string1);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertTrue(string1.equals((Object)string0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass5 = charClass1.appendTableWithSign(intArray1, 66640);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 66640, 0, (-492), 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass3.negateClass();
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-491), (-1), 66641, 1114111, 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass2.appendTable(intArray1);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-491), (-1), 66641, 1114111, 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass4.appendTable(intArray1);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-491), (-1), 66641, 1114111, 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      
      CharClass charClass9 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-491), (-1), 66641, 1114111, 0, 0, (-2678), 66640}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass7));
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass7);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      intArray0[2] = 3380;
      intArray0[3] = (-161);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {32, 91, 3380, (-161)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 8495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(11365, 2345);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2345);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 581);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {32, 91, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals("[0x0 0x20-0x5b]", string0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendFoldedRange(91, 32);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, (-2));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, 724);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 1114111, 0, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass5);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass0.appendClassWithSign(intArray0, (-898));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 1114111, 0, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass2));
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8203;
      intArray0[1] = (-4864);
      intArray0[2] = 0;
      intArray0[3] = 93;
      intArray0[4] = (-4864);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {8203, (-4864), 0, 93, (-4864)}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[0] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 75;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral((-273), (-273));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 326);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass1.appendRange(326, 75);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass3.appendTableWithSign(intArray1, (-273));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass6.appendFoldedClass(intArray0);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      
      CharClass charClass8 = charClass3.appendRange((-1013), (-1013));
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {75, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8203;
      int int0 = (-4864);
      intArray0[1] = (-4864);
      int int1 = (-3836);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-3836));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(1962, 0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      // Undeclared exception!
      charClass3.appendFoldedRange(1522, 128540);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-415);
      int int0 = 2345;
      intArray0[1] = 2345;
      intArray0[2] = 1523;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals("[0xfffffe61-0x929]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(0, 1523);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-415), 1114111, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      
      int int1 = 4694;
      CharClass charClass5 = charClass2.appendClass(intArray0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-415), 1114111, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      
      // Undeclared exception!
      charClass4.appendFoldedRange(4694, 66639);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 66640;
      intArray0[1] = 953;
      intArray0[2] = 0;
      intArray0[3] = 93;
      intArray0[4] = 64;
      intArray0[5] = 0;
      intArray0[6] = (-4873);
      intArray0[7] = 1023;
      intArray0[8] = 10215;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {66640, 953, 0, 93, 64, 0, (-4873), 1023, 10215}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 953);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-415);
      intArray0[1] = 2345;
      intArray0[2] = 1523;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals("[0xfffffe61-0x929]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-415), 2345);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-415), 2345, 8490, 8491}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray2, (-1388));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {(-415), 2345, 8490, 8491}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-415), 2345, 8490, 8491}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 2345);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-415), 2345, 8490, 8491}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass6 = charClass1.appendClassWithSign(intArray0, 66640);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-415), 2345, 8490, 8491}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 0;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals("[]", string0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendRange((-1068), 66640);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendRange((-2), 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1068), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass4 = charClass1.appendFoldedRange((-1068), (-565));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      int[][] intArray2 = new int[7][1];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-1068), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      intArray2[3] = intArray1;
      int[][] intArray3 = new int[0][3];
      assertFalse(intArray3.equals((Object)intArray2));
      
      CharClass charClass6 = charClass4.appendTable(intArray3);
      assertNotNull(charClass6);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray3, intArray2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      
      intArray2[4] = intArray1;
      intArray2[5] = intArray0;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 66640;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = (-565);
      intArray4[4] = (-2);
      intArray4[5] = (-2);
      intArray4[6] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange((-657), (-657));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 119978;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {119978}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1155;
      intArray0[1] = 3702;
      intArray0[2] = 84;
      intArray0[3] = 0;
      int int0 = (-1184);
      intArray0[4] = (-1184);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals("[0x0]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(11365, 2345);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2302));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 581);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, 2);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-612);
      intArray0[1] = 93;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2780;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-612), 93, 0, 1, 2780}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-612), 93, 0, 0, 2780}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(93, (-2));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray2 = charClass0.toArray();
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertArrayEquals(new int[] {(-2), 0, 1, 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 666;
      intArray0[0] = 666;
      intArray0[1] = 1372;
      String string0 = CharClass.charClassToString(intArray0, (-2961));
      assertNotNull(string0);
      assertArrayEquals(new int[] {666, 1372}, intArray0);
      assertEquals("[]", string0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8203;
      intArray0[1] = (-4864);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-3836));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(59, 2405);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = new CharClass(intArray0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass1));
      
      // Undeclared exception!
      try { 
        charClass5.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 2345;
      intArray0[2] = 1479;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals("[0x0-0x929]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass4 = charClass2.appendLiteral(0, 1479);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 2345, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass6 = charClass0.appendTable(intArray1);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      
      int[][] intArray2 = new int[8][8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      int[] intArray3 = charClass5.toArray();
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray3);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray3.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      
      CharClass charClass7 = charClass0.cleanClass();
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      
      CharClass charClass8 = charClass4.cleanClass();
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      
      CharClass charClass9 = charClass3.appendRange(401, 66640);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      
      CharClass charClass10 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {0, 1114111, 1479, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass10);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 661;
      intArray0[1] = (-230);
      intArray0[2] = (-3836);
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 64;
      intArray0[6] = 2396;
      intArray0[7] = (-2723);
      int int0 = 2;
      intArray0[8] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {661, (-230), (-3836), 0, 65, 64, 2396, (-2723), 2}, intArray0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 64);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {661, (-230), (-3836), 0, 65, 64, 2396, (-2723), 2}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int0 = 1110;
      CharClass charClass3 = charClass2.appendFoldedRange(1110, 91);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      
      CharClass charClass6 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass6.appendTable(intArray1);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass7.appendTableWithSign((int[][]) null, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][2];
      int[] intArray1 = new int[9];
      intArray1[0] = 2371;
      intArray1[1] = (-4666);
      intArray1[2] = 0;
      intArray1[3] = (-460);
      intArray1[4] = 811;
      intArray1[5] = 0;
      intArray1[6] = 797;
      intArray1[7] = (-1877);
      intArray1[8] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2371;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 2371;
      intArray3[2] = 91;
      intArray3[3] = (-1877);
      intArray3[4] = 91;
      intArray3[5] = 2371;
      intArray3[6] = 811;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-4666);
      intArray4[1] = 91;
      intArray4[2] = 797;
      intArray4[3] = (-4666);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-4666);
      intArray5[1] = 0;
      intArray5[2] = 797;
      intArray5[3] = (-1877);
      intArray5[4] = 811;
      intArray5[5] = 0;
      intArray5[6] = (-1877);
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1416);
      intArray0[1] = 0;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray1 = charClass2.toArray();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendLiteral(3090, 0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass0.appendRange((-1416), (-1416));
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass3.appendNegatedClass(intArray1);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(4, 4);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[4][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 4;
      intArray1[1] = 4;
      intArray1[2] = 4;
      intArray1[3] = 4;
      intArray1[4] = 0;
      intArray1[5] = 4;
      intArray1[6] = 4;
      intArray1[7] = 4;
      intArray1[8] = 328;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 4;
      intArray2[2] = 328;
      intArray2[3] = 328;
      intArray2[4] = 328;
      intArray2[5] = 328;
      intArray2[6] = 4;
      intArray2[7] = 0;
      intArray2[8] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 0;
      intArray3[1] = 328;
      intArray3[2] = 328;
      intArray3[3] = 0;
      intArray3[4] = 4;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 0;
      intArray4[1] = 4;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8203;
      intArray0[1] = (-4864);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-3836));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange(1962, 0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {8203, (-4864), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      intArray0[2] = (-2598);
      intArray0[3] = (-492);
      intArray0[4] = (-3952);
      intArray0[5] = 2821;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 66640, (-2598), (-492), (-3952), 2821, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[6] = 4;
      int int0 = (-391);
      intArray0[7] = (-391);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int0 = 8160;
      int int1 = 2136;
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      String string0 = CharClass.charClassToString(intArray0, (-3276));
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals("[]", string0);
      assertEquals(5, intArray0.length);
      
      intArray0[0] = 32;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 0;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals("[]", string0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendRange((-1068), 66640);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1068), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass4 = charClass1.appendFoldedRange((-1068), (-565));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      int[][] intArray2 = new int[7][1];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-1068), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[8];
      intArray1[0] = 745;
      int int0 = 0;
      intArray1[1] = 0;
      intArray1[2] = 237;
      intArray1[3] = (-243);
      intArray1[4] = 1738;
      intArray1[5] = 0;
      intArray1[6] = 1020;
      intArray1[7] = (-1950);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 323;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = (-1950);
      intArray2[4] = 0;
      intArray2[5] = 237;
      intArray2[6] = 745;
      intArray2[7] = 1020;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-243);
      intArray3[1] = 745;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8203;
      intArray0[1] = (-4864);
      intArray0[2] = 0;
      intArray0[3] = 93;
      intArray0[4] = 326;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {8203, (-4864), 0, 93, 326}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(3789, (-275));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {8203, (-4864), 0, 93, 326}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 8203);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(93, (-2));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 1840;
      // Undeclared exception!
      charClass1.appendFoldedRange(1840, 68119);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 65;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = 242;
      CharClass charClass1 = charClass0.appendRange(242, 242);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int1 = 749;
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 931;
      intArray0[1] = 2;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 931);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {32, 91, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(64, 608);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals("[0x0 0x20-0x5b 0x61-0x6b 0x212a 0x4c-0x53 0x6c-0x73 0x17f 0x54-0x61 0x74-0x7a 0x41-0x4a 0x62-0x6b 0x212a 0x4b-0x52 0x6c-0x73 0x17f 0x53-0x5a 0x74-0xb5 0x39c 0x3bc 0xb6-0xc5 0xe0-0xe5 0x212b 0xc6-0xd8 0xe6-0xf6 0xf8-0xfe 0xd9-0xe0 0x1e9e 0xc0-0xc4 0xe1-0xe5 0x212b 0xc5-0xd6 0xe6-0xff 0xd8-0xde 0x178 0xff-0x17f 0x53 0x73 0x180-0x181 0x243 0x253-0x254 0x182-0x18e 0x256-0x257 0x1dd 0x18f-0x190 0x259 0x25b 0x191-0x194 0x260 0x263 0x195-0x196 0x1f6 0x268-0x269 0x197-0x19c 0x23d 0x26f 0x19d-0x19e 0x272 0x220 0x19f-0x1a6 0x275 0x280 0x1a7-0x1ae 0x283 0x288 0x1af-0x1b7 0x28a-0x28b 0x292 0x1b8-0x1dd 0x1f7 0x18e 0x1de-0x1f7 0x195 0x1bf 0x1f8-0x23a 0x19e 0x2c65 0x23b-0x23e 0x19a 0x2c66 0x23f-0x243 0x2c7e-0x2c7f 0x180 0x244-0x245 0x289 0x28c 0x246-0x251 0x2c6f 0x2c6d 0x252-0x253 0x2c70 0x181 0x254-0x256 0x186 0x189-0x18a 0x257-0x260 0x18f-0x190 0x193]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(91, 608);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, 64);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass3.cleanClass();
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass7 = charClass5.appendTableWithSign(intArray1, 652);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass5.negateClass();
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      
      CharClass charClass9 = charClass6.appendTable(intArray1);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      
      CharClass charClass10 = charClass4.appendTable(intArray1);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      
      CharClass charClass11 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass11);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      
      CharClass charClass12 = charClass8.appendClass(intArray0);
      assertNotNull(charClass12);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass12);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.appendLiteral(1110, 1110);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass2.appendTableWithSign(intArray1, 1260);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass2.appendNegatedTable(intArray1);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-415);
      intArray0[1] = (-415);
      intArray0[2] = 1523;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-415), (-415), 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-415), (-415), 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-415), (-415), 1523, 0}, intArray0);
      assertEquals("[0xfffffe61 0x5f3-0x0]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-415), (-415));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-415), (-415), 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray2, (-1388));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {(-415), (-415), 0, 1114111}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-415), (-415), 0, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, (-415));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-415), (-415), (-414), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      
      CharClass charClass6 = charClass1.appendClassWithSign(intArray0, 66640);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-415), (-415), (-415), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[5] = 0;
      intArray0[1] = 66640;
      intArray0[2] = (-2598);
      intArray0[3] = (-492);
      intArray0[5] = 2821;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 66640, (-2598), (-492), 0, 2821, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7406;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1586);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray2 = new int[5][3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray2);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 1114111}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 661;
      intArray0[1] = (-230);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {661, (-230), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral((-230), 401);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {661, (-230), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-275);
      intArray2[1] = 93;
      intArray2[2] = 1114111;
      intArray2[3] = (-275);
      intArray2[4] = (-275);
      intArray2[5] = 326;
      intArray2[6] = 0;
      intArray2[7] = 357;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, (-559));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {661, (-230), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {661, (-230), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass0.appendTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {661, (-230), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7406;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1586);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray2 = new int[5][3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      int[][] intArray3 = new int[0][7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      CharClass charClass2 = charClass1.appendTable(intArray3);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {7406, 0, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      intArray2[3] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {32, 91, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(64, 608);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals("[0x0 0x20-0x5b 0x61-0x6b 0x212a 0x4c-0x53 0x6c-0x73 0x17f 0x54-0x61 0x74-0x7a 0x41-0x4a 0x62-0x6b 0x212a 0x4b-0x52 0x6c-0x73 0x17f 0x53-0x5a 0x74-0xb5 0x39c 0x3bc 0xb6-0xc5 0xe0-0xe5 0x212b 0xc6-0xd8 0xe6-0xf6 0xf8-0xfe 0xd9-0xe0 0x1e9e 0xc0-0xc4 0xe1-0xe5 0x212b 0xc5-0xd6 0xe6-0xff 0xd8-0xde 0x178 0xff-0x17f 0x53 0x73 0x180-0x181 0x243 0x253-0x254 0x182-0x18e 0x256-0x257 0x1dd 0x18f-0x190 0x259 0x25b 0x191-0x194 0x260 0x263 0x195-0x196 0x1f6 0x268-0x269 0x197-0x19c 0x23d 0x26f 0x19d-0x19e 0x272 0x220 0x19f-0x1a6 0x275 0x280 0x1a7-0x1ae 0x283 0x288 0x1af-0x1b7 0x28a-0x28b 0x292 0x1b8-0x1dd 0x1f7 0x18e 0x1de-0x1f7 0x195 0x1bf 0x1f8-0x23a 0x19e 0x2c65 0x23b-0x23e 0x19a 0x2c66 0x23f-0x243 0x2c7e-0x2c7f 0x180 0x244-0x245 0x289 0x28c 0x246-0x251 0x2c6f 0x2c6d 0x252-0x253 0x2c70 0x181 0x254-0x256 0x186 0x189-0x18a 0x257-0x260 0x18f-0x190 0x193]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendFoldedRange(91, 608);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, 64);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, (-177));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass6.negateClass();
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass1.appendClassWithSign(intArray0, 3364);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      
      CharClass charClass9 = charClass8.appendClass(intArray0);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      
      int[] intArray1 = charClass6.toArray();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(224, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-415);
      intArray0[1] = 2345;
      int int0 = (-161);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-415), 2345, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-415), 2345, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedRange(1523, (-405));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-415), 2345, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-415), 2345, (-415), 2345}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-415), 2345, (-415), 2345}, intArray0);
      assertEquals("[0xfffffe61-0x929 0xfffffe61-0x929]", string0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-415);
      intArray0[1] = 2345;
      intArray0[2] = 1523;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2345);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, 1442);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      String string0 = CharClass.charClassToString(intArray0, (-712));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass6 = charClass5.appendFoldedRange(91, 1523);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass3.appendClassWithSign(intArray0, (-2139));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      
      CharClass charClass8 = charClass5.cleanClass();
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass9 = charClass4.appendClassWithSign(intArray0, 91);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      
      CharClass charClass10 = charClass5.appendNegatedTable(intArray1);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {(-415), 2345, 1523, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals("[0x0]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(11365, 2345);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2345);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 581);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 956;
      intArray0[1] = 1472;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {956, 1472}, intArray0);
      assertEquals("[]", string0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1416);
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-25959217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.appendTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      String string1 = CharClass.charClassToString(intArray0, (-854));
      assertNotNull(string1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string1);
      assertEquals(0, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      CharClass charClass5 = charClass2.appendLiteral((-854), (-137));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass6);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass5.appendTable(intArray1);
      assertNotNull(charClass7);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass0.appendLiteral(3975, 1489);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      
      int[] intArray2 = charClass2.toArray();
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-854), (-854), 0, 1114111}, intArray2);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray2, intArray0);
      
      CharClass charClass9 = new CharClass(intArray2);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-854), (-854), 0, 1114111}, intArray2);
      assertEquals(4, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      
      CharClass charClass10 = charClass9.cleanClass();
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {(-854), (-854), 0, 1114111}, intArray2);
      assertEquals(4, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass1));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass0));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass8));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass10, charClass5);
      assertNotSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertNotSame(charClass10, charClass3);
      assertNotSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass7);
      assertNotSame(charClass10, charClass0);
      assertNotSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass4);
      assertNotSame(charClass10, charClass8);
      
      CharClass charClass11 = charClass6.appendLiteral((-854), (-3847));
      assertNotNull(charClass11);
      assertEquals(0, intArray1.length);
      assertFalse(charClass11.equals((Object)charClass10));
      assertFalse(charClass11.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(charClass6.equals((Object)charClass10));
      assertFalse(charClass6.equals((Object)charClass9));
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertNotSame(charClass11, charClass10);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertNotSame(charClass11, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass10);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass9);
      assertSame(charClass6, charClass5);
      
      CharClass charClass12 = charClass9.appendNegatedTable(intArray1);
      assertNotNull(charClass12);
      assertArrayEquals(new int[] {(-854), (-854), 0, 1114111}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(charClass12.equals((Object)charClass2));
      assertFalse(charClass12.equals((Object)charClass5));
      assertFalse(charClass12.equals((Object)charClass1));
      assertFalse(charClass12.equals((Object)charClass4));
      assertFalse(charClass12.equals((Object)charClass0));
      assertFalse(charClass12.equals((Object)charClass6));
      assertFalse(charClass12.equals((Object)charClass8));
      assertFalse(charClass12.equals((Object)charClass7));
      assertFalse(charClass12.equals((Object)charClass11));
      assertFalse(charClass12.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass10));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass11));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass12, charClass2);
      assertNotSame(charClass12, charClass5);
      assertNotSame(charClass12, charClass1);
      assertSame(charClass12, charClass9);
      assertNotSame(charClass12, charClass4);
      assertNotSame(charClass12, charClass0);
      assertNotSame(charClass12, charClass6);
      assertNotSame(charClass12, charClass8);
      assertNotSame(charClass12, charClass7);
      assertNotSame(charClass12, charClass11);
      assertSame(charClass12, charClass10);
      assertNotSame(charClass12, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertNotSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass1);
      assertSame(charClass9, charClass12);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass11);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      
      CharClass charClass13 = charClass4.appendFoldedClass(intArray0);
      assertNotNull(charClass13);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass13.equals((Object)charClass9));
      assertFalse(charClass13.equals((Object)charClass10));
      assertFalse(charClass13.equals((Object)charClass12));
      assertFalse(charClass4.equals((Object)charClass12));
      assertFalse(charClass4.equals((Object)charClass9));
      assertFalse(charClass4.equals((Object)charClass10));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass0);
      assertNotSame(charClass13, charClass12);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass3);
      assertNotSame(charClass13, charClass9);
      assertSame(charClass13, charClass1);
      assertNotSame(charClass13, charClass10);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass6);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass12);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertNotSame(charClass4, charClass9);
      
      CharClass charClass14 = charClass13.cleanClass();
      assertNotNull(charClass14);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass13.equals((Object)charClass9));
      assertFalse(charClass13.equals((Object)charClass10));
      assertFalse(charClass13.equals((Object)charClass12));
      assertFalse(charClass14.equals((Object)charClass9));
      assertFalse(charClass14.equals((Object)charClass12));
      assertFalse(charClass14.equals((Object)charClass10));
      assertFalse(charClass4.equals((Object)charClass12));
      assertFalse(charClass4.equals((Object)charClass9));
      assertFalse(charClass4.equals((Object)charClass10));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass14);
      assertNotSame(charClass13, charClass12);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass3);
      assertNotSame(charClass13, charClass9);
      assertSame(charClass13, charClass1);
      assertNotSame(charClass13, charClass10);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass6);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass6);
      assertNotSame(charClass14, charClass10);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass13);
      assertNotSame(charClass14, charClass9);
      assertNotSame(charClass14, charClass12);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass12);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertNotSame(charClass4, charClass9);
      
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 1489;
      intArray3[1] = (-137);
      intArray3[2] = (-3847);
      intArray3[3] = (-127);
      CharClass charClass15 = charClass2.appendClassWithSign(intArray3, (-137));
      assertNotNull(charClass15);
      assertArrayEquals(new int[] {1489, (-137), (-3847), (-127)}, intArray3);
      assertEquals(4, intArray3.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass12));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass9));
      assertFalse(charClass15.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass12));
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertNotSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertNotSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass14);
      assertNotSame(charClass15, charClass12);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass2);
      assertNotSame(charClass15, charClass9);
      assertNotSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      
      CharClass charClass16 = charClass15.appendRange(91, 91);
      assertNotNull(charClass16);
      assertArrayEquals(new int[] {1489, (-137), (-3847), (-127)}, intArray3);
      assertEquals(4, intArray3.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass12));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass9));
      assertFalse(charClass15.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass12));
      assertFalse(charClass16.equals((Object)charClass10));
      assertFalse(charClass16.equals((Object)charClass9));
      assertFalse(charClass16.equals((Object)charClass12));
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass16);
      assertNotSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertNotSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass16);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass14);
      assertNotSame(charClass15, charClass12);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass2);
      assertNotSame(charClass15, charClass9);
      assertNotSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      assertNotSame(charClass16, charClass10);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass7);
      assertNotSame(charClass16, charClass12);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass6);
      assertNotSame(charClass16, charClass9);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass13);
      
      CharClass charClass17 = charClass15.appendNegatedClass(intArray2);
      assertNotNull(charClass17);
      assertArrayEquals(new int[] {1489, (-137), (-3847), (-127)}, intArray3);
      assertArrayEquals(new int[] {(-854), (-854), (-853), 1114111}, intArray2);
      assertEquals(4, intArray3.length);
      assertEquals(4, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(charClass2.equals((Object)charClass12));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass9));
      assertFalse(charClass15.equals((Object)charClass10));
      assertFalse(charClass15.equals((Object)charClass12));
      assertFalse(charClass17.equals((Object)charClass12));
      assertFalse(charClass17.equals((Object)charClass10));
      assertFalse(charClass17.equals((Object)charClass9));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass16);
      assertNotSame(charClass2, charClass10);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertNotSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass17);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass16);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass17);
      assertNotSame(charClass15, charClass12);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass2);
      assertNotSame(charClass15, charClass9);
      assertNotSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      assertSame(charClass17, charClass7);
      assertSame(charClass17, charClass15);
      assertNotSame(charClass17, charClass10);
      assertSame(charClass17, charClass16);
      assertSame(charClass17, charClass14);
      assertSame(charClass17, charClass8);
      assertSame(charClass17, charClass4);
      assertSame(charClass17, charClass3);
      assertSame(charClass17, charClass1);
      assertSame(charClass17, charClass6);
      assertSame(charClass17, charClass11);
      assertNotSame(charClass17, charClass12);
      assertSame(charClass17, charClass13);
      assertSame(charClass17, charClass5);
      assertSame(charClass17, charClass2);
      assertNotSame(charClass17, charClass9);
      assertSame(charClass17, charClass0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      
      CharClass charClass18 = charClass8.appendClassWithSign(intArray0, (-137));
      assertNotNull(charClass18);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass12));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass18.equals((Object)charClass9));
      assertFalse(charClass18.equals((Object)charClass12));
      assertFalse(charClass18.equals((Object)charClass10));
      assertFalse(charClass8.equals((Object)charClass10));
      assertFalse(charClass8.equals((Object)charClass12));
      assertFalse(charClass8.equals((Object)charClass9));
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass18);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass12);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass18, charClass17);
      assertSame(charClass18, charClass7);
      assertSame(charClass18, charClass2);
      assertNotSame(charClass18, charClass9);
      assertNotSame(charClass18, charClass12);
      assertSame(charClass18, charClass0);
      assertSame(charClass18, charClass13);
      assertSame(charClass18, charClass16);
      assertSame(charClass18, charClass11);
      assertSame(charClass18, charClass14);
      assertSame(charClass18, charClass5);
      assertSame(charClass18, charClass1);
      assertNotSame(charClass18, charClass10);
      assertSame(charClass18, charClass3);
      assertSame(charClass18, charClass8);
      assertSame(charClass18, charClass15);
      assertSame(charClass18, charClass6);
      assertSame(charClass18, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass16);
      assertSame(charClass8, charClass18);
      assertSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass9);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass15);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass17);
      assertNotSame(charClass8, charClass10);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass12);
      assertSame(charClass8, charClass14);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1416);
      intArray0[1] = 0;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray1 = charClass2.toArray();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendLiteral(3090, 0);
      assertNotNull(charClass4);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass0.appendRange((-1416), (-1416));
      assertNotNull(charClass6);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass5.appendClassWithSign(intArray1, 2052);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass6));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      
      CharClass charClass8 = charClass3.appendNegatedClass(intArray1);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-1416), 0}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass6));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass6));
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertNotSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass6);
      
      int[][] intArray2 = new int[0][4];
      CharClass charClass9 = charClass6.appendTableWithSign(intArray2, 0);
      assertNotNull(charClass9);
      assertEquals(0, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass7));
      assertFalse(charClass6.equals((Object)charClass8));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass9);
      assertNotSame(charClass6, charClass7);
      assertNotSame(charClass6, charClass8);
      assertSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      
      CharClass charClass10 = charClass5.appendRange(3090, 1682);
      assertNotNull(charClass10);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass9));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass9));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass9));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass0));
      assertFalse(charClass10.equals((Object)charClass9));
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass10);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertNotSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass9);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertNotSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass10);
      assertNotSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass6);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertNotSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1110, 1110);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[0x0-0x455]", string0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, 1110);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass5.negateClass();
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass3.appendTable(intArray1);
      assertNotNull(charClass8);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendLiteral(0, 0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass6 = charClass4.appendClass(intArray0);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass2.appendFoldedRange(0, (-1065));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3779;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = 1499;
      intArray0[4] = 4623;
      intArray0[5] = 0;
      intArray0[6] = (-1377);
      intArray0[7] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 4623);
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 3779);
      CharClass charClass3 = charClass2.appendLiteral((-2), 4623);
      CharClass charClass4 = charClass3.appendClass(intArray0);
      String string0 = charClass4.toString();
      assertEquals("[0xec3-0x0 0xfffffffe-0x5db 0x120f-0x0 0xfffffa9f-0x5db 0xec3-0x0 0x120f-0x0 0xfffffa9f-0x5db 0xec3-0x0 0x120f-0x0 0xfffffa9f-0xffffffff]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      intArray0[2] = 3380;
      intArray0[3] = (-161);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(91, 32);
      charClass1.appendFoldedClass(intArray0);
      charClass0.appendClass(intArray0);
      charClass0.toString();
      int[][] intArray1 = new int[0][5];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.appendTable(intArray1);
      charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass1.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass4.appendFoldedRange(308, 3380);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7406;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      CharClass charClass0 = new CharClass(intArray1);
      CharClass charClass1 = charClass0.appendRange((-2704), (-3531));
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedRange(64, 608);
      charClass2.toString();
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      charClass3.appendFoldedRange(91, 608);
      charClass3.appendClassWithSign(intArray0, 64);
      charClass3.cleanClass();
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, (-177));
      charClass4.negateClass();
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 3364);
      charClass5.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 32, 91}, intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 7406;
      intArray0[0] = 7406;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1584, 0);
      CharClass charClass2 = charClass1.appendRange(0, 7406);
      CharClass charClass3 = charClass2.appendFoldedRange(0, 1);
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      // Undeclared exception!
      try { 
        charClass4.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1416);
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-43);
      intArray0[1] = 0;
      int int0 = (-3060);
      intArray0[2] = (-3060);
      intArray0[3] = (-1870);
      intArray0[4] = 13143;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange((-3060), 0);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[13];
      intArray0[0] = (-1416);
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1377));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      CharClass charClass1 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][3];
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      charClass0.cleanClass();
      intArray2[1] = (-2598);
      intArray2[2] = 1;
      intArray2[3] = 1586;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 66640;
      intArray3[1] = 66640;
      intArray3[2] = (-2598);
      intArray3[3] = 66640;
      intArray3[4] = 1;
      intArray3[5] = 0;
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-2598));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2234;
      intArray0[1] = 0;
      intArray0[2] = 1138;
      intArray0[3] = 1290;
      intArray0[4] = 66639;
      intArray0[5] = 63;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(0, 66639);
      CharClass charClass2 = charClass1.appendFoldedRange(7631, (-136));
      assertSame(charClass0, charClass2);
  }
}
