/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:38:00 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      Spider.Status.fromValue(2474);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("mTi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.mTi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%>7i>J?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("%>7i>J?");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setUUID(" stop success!");
      spider2.sleep(1);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!--.*?-->");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList1);
      LinkedList<SpiderListener> linkedList2 = new LinkedList<SpiderListener>();
      FilePipeline filePipeline0 = new FilePipeline("(?is)<!--.*?-->");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3b7YpnSg}mR~[:3<I", "3b7YpnSg}mR~[:3<I");
      phantomJSDownloader0.setRetryNum(2);
      Page page0 = new Page();
      page0.setSkip(false);
      spider0.extractAndAddRequests(page0, false);
      spider1.start();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("[F,\"ne");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.[F,\"ne
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jz]Q<*0vTG/,x[9Pi");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.thread(86);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("text/xml", "text/xml");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("text/xml");
      requestArray0[0] = request0;
      Request request1 = new Request();
      requestArray0[1] = request1;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider4);
      requestArray0[2] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(?is)<!--.*?-->");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!--.*?-->");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g,!oH[{;Ap,U");
      fileCacheQueueScheduler0.poll(spider0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("g,!oH[{;Ap,U");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.stop();
      Locale locale0 = Locale.CHINA;
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("(?is)<!--.*?-->");
      List<Request> list0 = page2.getTargetRequests();
      spider1.startRequest(list0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(704);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(704);
      Spider spider4 = spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 5);
      Spider spider5 = spider4.setUUID("Spider is already running!");
      spider5.setScheduler((Scheduler) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.getPageCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 149;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(149, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setSpawnUrl(true);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      // Undeclared exception!
      try { 
        spider3.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(86);
      Spider spider5 = spider4.setDownloader(phantomJSDownloader1);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      spider5.extractAndAddRequests(page1, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(?is)<!--.*?-->");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!--.*?-->");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      spider0.setUUID("(?is)<!--.*?-->");
      scheduledThreadPoolExecutor0.getTaskCount();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      Spider spider2 = spider1.clearPipeline();
      spider2.isSpawnUrl();
      spider1.getSite();
      spider0.setEmptySleepTime(368);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x_|6xcz");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.setUUID("UyZ)x");
      // Undeclared exception!
      try { 
        spider3.thread((-565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(ZGU5vOgR]L!]W");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[20];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.setExtras((Map<String, Object>) null);
      requestArray0[1] = request1;
      Request request2 = request0.setMethod("_cycle_tried_times");
      requestArray0[2] = request2;
      Request request3 = request0.addCookie("", "_cycle_tried_times");
      requestArray0[3] = request3;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.isExitWhenComplete();
      spider2.stop();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.Html");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(200, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 200);
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.selector.Html");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      Spider spider4 = spider3.setUUID("/");
      // Undeclared exception!
      try { 
        spider4.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "cMCL+}^B3wOxtMsb\\";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cMCL+}^B3wOxtMsb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      AtomicInteger atomicInteger0 = spider1.stat;
      String string1 = ", retryTimes=";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", retryTimes=", ", retryTimes=");
      phantomJSDownloader0.setRetryNum((-1));
      Spider spider2 = spider0.scheduler((Scheduler) null);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider2.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jz]Q<*0vTG/,x[9Pi");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.thread(86);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("text/xml", "text/xml");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("text/xml");
      requestArray0[0] = request0;
      Request request1 = new Request();
      requestArray0[1] = request0;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider4);
      spider3.runAsync();
      spider1.start();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      // Undeclared exception!
      try { 
        spider4.setPipelines(linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jz]Q<*0vTG/,x[9Pi");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("text/xml", "text/xml");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("text/xml");
      requestArray0[0] = request0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(86, threadPoolExecutor_AbortPolicy0);
      Spider spider5 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      Request request1 = new Request();
      requestArray0[1] = request0;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.getStatus();
      priorityScheduler0.poll(spider4);
      spider4.getPageCount();
      spider5.thread((ExecutorService) scheduledThreadPoolExecutor0, 125);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "Jz]Q<*0vTG/,x[9Pi";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jz]Q<*0vTG/,x[9Pi");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      FilePipeline filePipeline0 = new FilePipeline("Jz]Q<*0vTG/,x[9Pi");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[F,\"ne", "Running");
      phantomJSDownloader0.setRetryNum(9);
      Page page0 = new Page();
      page0.setSkip(false);
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(?is)<!--.*?-->");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!--.*?-->");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider0.setUUID("(?is)<!--.*?-->");
      spider0.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cMCL+}^B3wOxtMsb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      AtomicInteger atomicInteger0 = spider1.stat;
      ForkJoinTask.getPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("cMCL+}^B3wOxtMsb", "cMCL+}^B3wOxtMsb");
      spider0.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.thread(2287);
      Spider spider3 = spider0.scheduler((Scheduler) null);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_plus", "_plus");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(7);
      Spider spider4 = spider0.setDownloader(phantomJSDownloader1);
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      spider3.getStartTime();
      spider2.runAsync();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cMCL+}^B3wOxtMsb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      AtomicInteger atomicInteger0 = spider1.stat;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", retryTimes=", ", retryTimes=");
      phantomJSDownloader0.setRetryNum((-1));
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      spider2.initComponent();
      stringArray0[1] = ", retryTimes=";
      stringArray0[2] = ", retryTimes=";
      stringArray0[3] = "cMCL+}^B3wOxtMsb";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      AtomicInteger atomicInteger0 = spider1.stat;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ForkJoinTask.getPool();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(958);
      String string1 = "Ge;'K903gOaQZK{3Y";
      Request request0 = new Request("");
      Request request1 = request0.setUrl("");
      Request request2 = request1.addHeader("", "(@]&AC5<{rs$");
      request2.setCharset("iyhw@D>~");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(958);
      boolean boolean0 = true;
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      Spider[] spiderArray0 = new Spider[2];
      spiderArray0[0] = spider1;
      spiderArray0[1] = spider1;
      // Undeclared exception!
      try { 
        spiderMonitor0.register(spiderArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Request[] requestArray0 = new Request[0];
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.isExitWhenComplete();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      scheduledThreadPoolExecutor0.getTaskCount();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      spider2.destroyWhenExit = true;
      Spider spider3 = spider1.addRequest(requestArray0);
      spider3.isExitWhenComplete();
      spider3.stop();
      Locale locale0 = Locale.CHINA;
      spider3.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_plus", "}jOY>8eqqT|p{r#I`h_");
      spider3.setDownloader(phantomJSDownloader0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<Request> list0 = spider1.getAll((Collection<String>) set0);
      spider3.startRequest(list0);
      spider3.runAsync();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[1];
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("86>1|!,VKO]d7u-963");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.setScheduler(priorityScheduler0);
      spider3.addPipeline(jsonFilePipeline0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(5, 5, (-433L), timeUnit0, linkedBlockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HV");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("HV");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("cMCL+}^B3wOxtMsb", "cMCL+}^B3wOxtMsb");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider1.scheduler(priorityScheduler0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider4 = spider2.setSpiderListeners(linkedList1);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("Bysu", "W>rtkO' O$8``F|`");
      PhantomJSDownloader phantomJSDownloader2 = new PhantomJSDownloader(";Lm8k", "HV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      priorityScheduler0.poll(spider4);
      phantomJSDownloader2.setRetryNum((-2787));
      spider3.setDownloader(phantomJSDownloader2);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("HV");
      Spider.create(simplePageProcessor1);
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleAttributes();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedBlockingQueue0);
      spider3.startRequest(list0);
      spider4.getScheduler();
  }
}
