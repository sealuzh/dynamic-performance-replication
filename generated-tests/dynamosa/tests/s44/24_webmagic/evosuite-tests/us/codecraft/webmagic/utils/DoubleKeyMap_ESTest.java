/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:11:50 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer0, integer1, "gpw(YNb{2])!N^R~ V");
      String string0 = doubleKeyMap0.remove(integer0, integer1);
      assertEquals("gpw(YNb{2])!N^R~ V", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, hashMap1, "");
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.remove(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Object, String>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap2.remove("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Map<Integer, Integer>, Map<String, Object>>, Integer, Map<Map<Integer, Integer>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Integer, Integer>, Map<String, Object>>, Integer, Map<Map<Integer, Integer>, Map<String, Object>>>((Map<Map<Map<Integer, Integer>, Map<String, Object>>, Map<Integer, Map<Map<Integer, Integer>, Map<String, Object>>>>) null);
      Map<Map<Integer, Integer>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>(map0, class0);
      Map<String, Object> map1 = doubleKeyMap1.remove((Map<Integer, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, Integer>();
      DoubleKeyMap<Object, Map<Integer, Integer>, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Integer>, Map<Object, String>>();
      Map<Map<Integer, Integer>, Map<Object, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = doubleKeyMap0.put((Object) "^W/Vmshv5", hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap0, "4)?o'MS1#", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, Integer>();
      Integer integer0 = new Integer(2115);
      Integer integer1 = doubleKeyMap0.put((Map<Integer, Integer>) null, "WwF7Ig%O>+XdX<", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, HashMap<String, Integer>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<Map<Integer, Integer>, Map<String, Object>>, Integer, Map<Map<Integer, Integer>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Integer, Integer>, Map<String, Object>>, Integer, Map<Map<Integer, Integer>, Map<String, Object>>>((Map<Map<Map<Integer, Integer>, Map<String, Object>>, Map<Integer, Map<Map<Integer, Integer>, Map<String, Object>>>>) null);
      Map<Map<Integer, Integer>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>(map0, class0);
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>();
      String string0 = doubleKeyMap2.get("HcwF\"HPZ/@_b", (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<Integer, Integer>, Map<Object, Map<Object, Object>>> hashMap0 = new HashMap<Map<Integer, Integer>, Map<Object, Map<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Map<Object, Object>>(hashMap0, class0);
      Map<Object, Object> map0 = doubleKeyMap0.get((Map<Integer, Integer>) null, (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<Integer, Integer>>, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Integer, Integer>>, HashMap<String, String>, Object>();
      Map<Map<Integer, Integer>, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, Integer>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Integer>(map0);
      Map<Integer, Integer> map1 = doubleKeyMap1.get((Map<Integer, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>(hashMap0, class0);
      Integer integer0 = new Integer(2476);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (HashMap<String, String>) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Integer, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Integer, Integer>>((Map<Object, Map<Integer, Map<Integer, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer((-1518));
      doubleKeyMap0.put(integer0, integer0, "gpw(YNb{2])!N^R~ V");
      String string0 = doubleKeyMap0.remove(integer0, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap0.remove((String) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(hashMap0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>(0);
      doubleKeyMap0.put(hashMap1, hashMap2, "wrong proto type map ");
      String string0 = doubleKeyMap0.put(hashMap1, hashMap2, "/;OEs(");
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<Object, Object, HashMap<Object, Map<Integer, Integer>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, Map<Integer, Integer>>>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, "", (Object) class0);
      Object object0 = doubleKeyMap0.get(hashMap0, "");
      assertEquals("interface java.util.Map", object0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, String>, Map<Integer, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Map<Integer, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
