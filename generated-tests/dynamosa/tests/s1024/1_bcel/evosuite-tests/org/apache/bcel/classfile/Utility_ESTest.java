/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 19:31:38 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-91);
      Utility.isJavaIdentifierPart('a');
      Utility.convertString("pop");
      try { 
        Utility.typeOfSignature("pop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)122;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((int) (byte)122, false);
      assertEquals("private static final synchronized volatile", string0);
      
      short short0 = Utility.searchOpcode("private static final synchronized volatile");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)20;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%204", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("BootstrapMethods", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A$quQ6Iw*{of3");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("dq)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      assertEquals("Lfdiv;", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("J),ZF>(PpukV", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Integer integer0 = new Integer(86);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, (int) (byte) (-68), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.compactClassName("YKGrq7j8t}n8t{'&");
      assertEquals("YKGrq7j8t}n8t{'&", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      try { 
        Utility.typeOfSignature("M3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-44));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      byteArray0[6] = (byte) (-94);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)0);
      Utility.decode("$A$A$A$A$3c$A$a2", false);
      Utility.decode("monitorenter", false);
      Utility.accessToString((int) (byte)60);
      Utility.compactClassName("$A$A$A$A$3c$A$a2");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-65);
      byteArray0[8] = (byte)110;
      byteArray0[2] = (byte)110;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.convertString("W69i`h");
      try { 
        Utility.typeOfSignature("W69i`h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W69i`h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1470), (-1470));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-128));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("U@'z*SR/%8B40# wo@K");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(193, (byte) (-105));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1470), 140);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "org.apache.commons.io.filefilter.CanWriteFileFilter", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.accessToString(124);
      String string0 = "\nAttribute(s) = ";
      boolean boolean0 = true;
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "protected static final synchronized volatile";
      stringArray0[2] = "BSY*ihP~tffDhanV7";
      stringArray0[3] = "BSY*ihP~tffDhanV7";
      stringArray0[4] = "hAm%LCsI7Jv";
      Utility.methodTypeToSignature("LBSY*ihP~tffDhanV7;", stringArray0);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.DescendingVisitor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.DescendingVisitor'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("BoottrapMethods", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A$quQ6Iw*{of3");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.getSignature("fd!P");
      Utility.accessToString(27);
      Utility.compactClassName("hY m2x.i", "fd!P", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      int int0 = 507;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(873);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(27, 27);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)20, 235);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class");
      byte byte0 = (byte)112;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "nrxI`s";
      String string1 = "Us.Fv[]\"";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("nrxI`s", "_pXy6bWk2QnN!", "Us.Fv[]\"", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nrxI`s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte) (-48), 43);
      Utility.classOrInterface(43);
      Utility.isJavaIdentifierPart('8');
      String string0 = "W69i`h";
      Utility.convertString("class");
      try { 
        Utility.typeOfSignature(",NLeJjNU2FE)}eI,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,NLeJjNU2FE)}eI,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[4] = (byte) (-58);
      try { 
        Utility.typeOfSignature("NE00H @5uu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NE00H @5uu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      Utility.searchOpcode("UNWir@$2=O13^DE$&o");
      String string0 = "CONSTANT_Double";
      boolean boolean0 = false;
      String string1 = "Q";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[3] = (byte)20;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)66;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-78);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(2174.9F);
      Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      Utility.classOrInterface((byte) (-78));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, 95, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "The wildcard must not be null";
      try { 
        Utility.methodSignatureReturnType("The wildcard must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-104);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-62));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("<J~d48-L}$hF`Z^se", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.replace("<J~d48-L}$hF`Z^se", "", "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte)125);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "\"a9";
      Utility.convertString("\"a9");
      try { 
        Utility.typeOfSignature("\"a9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"a9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      try { 
        Utility.methodSignatureReturnType("O+A+>1FEgTq-S/r.z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O+A+>1FEgTq-S/r.z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte) (-18), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.format((-3416), (-2189), true, ',');
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*8k1E0l\"", (String) null, "G58P(vjL-_/`K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *8k1E0l\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.getSignature("LhAm%LCsI7Jv;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      Utility.convertString("LLhAm%LCsI7Jv;V;");
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 187, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-116);
      byte byte0 = (byte) (-66);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)101, 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.replace(">", ">", "instanceof");
      assertEquals("instanceof", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(">", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(119);
      String string0 = Utility.convertString("[AKWi");
      assertEquals("[AKWi", string0);
      
      Utility.decode("gpy.9v=b?j;^", false);
      String string1 = Utility.classOrInterface(86);
      assertEquals("class", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 183, 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.signatureToString("Fp");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("-K%K>;8QTV");
      Utility.isJavaIdentifierPart('v');
      Utility.convertString("Invalid StackMap frame_type");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a6 a6 a6 a6 00 00 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#-22873", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("A$quQ6Iw*{of3", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 5, 5, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 724, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.getSignature("A$quQ6Iw*{of3");
      assertEquals("LA$quQ6Iw*{of3;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-26);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)120, false);
      assertEquals("2:    iconst_m1\n3:    aload_3\n4:    ishl\n5:    aload_3\n6:    sipush\t\t11750\n", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte)45;
      objectArray0[2] = (Object) (byte)2;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{2, 45, 2}", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("02 78 02 2d 78 2d 11 2d e6", string3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      
      Utility.convertString("java.lang.class");
      Utility.typeOfSignature("CS4UB?816Uh6m");
      Utility.decode("org.apache.bcel.classfile.LineNumberTable", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":CL6V)|bVK>!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "java.lang.class";
      mockPrintWriter0.format("v|(", objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantFloat constantFloat0 = new ConstantFloat((-15.615006F));
      byte[] byteArray0 = Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      String string0 = Utility.classOrInterface(90);
      assertEquals("class", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1409), 83, true);
      assertEquals("0:    frem\n1:    dload_3\n2:    fsub\n3:    dstore\t\t%79\n5:    dload_1\n6:    nop\n7:    daload\n8:    aload_0\n9:    baload\n10:   lstore_2\n11:   ineg\n12:   dup_x1\n13:   fstore_3\n14:   lstore_2\n15:   dstore_1\n16:   lload_3\n17:   dstore_3\n", string1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fmul", string2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(169, (-1147), true, 'U');
      try { 
        Utility.typeOfSignature("(3nvgt)*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (3nvgt)*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("java.lang.class");
      assertEquals("java.lang.class", string0);
      
      byte byte0 = Utility.typeOfSignature("CS4UB?816Uh6m");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.LineNumberTable", false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("org$$apache$$bcel$$classfile$$LineNumberTable", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>.?ix;|S#%>=~K=");
      Utility.format(110, 40, true, 'y');
      Utility.format(110, 251, true, 'y');
      Utility.classOrInterface(10);
      Utility.compactClassName("110yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", "110yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      Utility.printArray(objectArray0, true);
      Utility.convertString("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, null, null, null, null, null, null, null, null, null, null}");
      Utility.getSignature("trZ].c ");
      byte[] byteArray0 = new byte[9];
      objectArray0[4] = (Object) (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.searchOpcode("NCyY8r&^F{w,Oq!k");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "short";
      stringArray0[1] = "$+mfxa={St{";
      stringArray0[2] = "short";
      stringArray0[2] = "short";
      try { 
        Utility.typeOfSignature("$+mfxa={St{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $+mfxa={St{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-121);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte) (-121);
      byteArray1[5] = (byte) (-121);
      byteArray1[6] = (byte)125;
      byteArray1[7] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.replace("BSY*ihP~tffDhanV7", "BSY*ihP~tffDhanV7", "BSY*ihP~tffDhanV7");
      Utility.accessToString(124);
      Utility.printArray((Object[]) null, false);
      String string0 = ",uwC\"|lp$";
      Utility.convertString(",uwC\"|lp$");
      try { 
        Utility.methodSignatureArgumentTypes("BSY*ihP~tffDhanV7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BSY*ihP~tffDhanV7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.signatureToString("Fku|kZh;w'2WL", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.getSignature("A$quQ6Iw*{of3");
      assertEquals("LA$quQ6Iw*{of3;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("LA$quQ6Iw*{of3;", false);
      assertEquals(14, byteArray0.length);
      
      String string1 = Utility.classOrInterface((-1658964193));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[2] = (byte)110;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1381), (byte) (-85));
      String string0 = "CONSTANT_Integer";
      MockPrintStream mockPrintStream0 = new MockPrintStream("CONSTANT_Integer");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantFieldref0.dump(dataOutputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(5763.159F);
      Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", false);
      Utility.classOrInterface(1729);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fdfK/:*ZPH\"5\"7/<NSS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fdfK/:*ZPH\"5\"7/<NSS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.accessToString(0, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(`9 .|kdFm/-", "+T20\\19s/[", "(`9 .|kdFm/-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``9 .|kdFm/-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "\\";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.searchOpcode("Q\"e)|j1");
      Utility.classOrInterface((short) (-1));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3568), (-3568), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    athrow
         // 1:    iconst_1
         // 2:    fconst_0
         // 3:    breakpoint
         // 4:    athrow
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("LA$quQ6Iw*{of3;");
      Utility.decode("", false);
      try { 
        Utility.methodSignatureReturnType("A$quQ6Iw*{of3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A$quQ6Iw*{of3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("Invalid signature: ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("PPgi%J.Da^}fjAODuh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PPgi%J.Da^}fjAODuh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      assertEquals("hAm%LCsI7Jv", string0);
      
      short short0 = Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.format((short) (-1), (byte)0, true, '*');
      assertEquals("-1", string1);
      
      String string2 = Utility.getSignature("LhAm%LCsI7Jv;V");
      assertEquals("LLhAm%LCsI7Jv;V;", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      assertEquals("A$quQ6Iw*{of3", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("A$quQ6Iw*{of3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string1);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PPgi%J.Da^}fjAODuh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PPgi%J.Da^}fjAODuh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fku|kZh;w'2J^L", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      String string0 = "\nAttribute(s) = ";
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "LBSY*ihP~tffDhanV7;";
      stringArray0[2] = "BSY*ihP~tffDhanV7";
      Utility.signatureToString("LBSY*ihP~tffDhanV7;", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "(3nvgt)*";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(3nvgt)*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3nvgt)*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("oso}I;qiqv(%");
      Utility.accessToString(255, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte) (-4));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("arraylength", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Z";
      Utility.methodSignatureReturnType("Z");
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Us.Fv[]\"";
      stringArray0[2] = "Z";
      Utility.getSignature("Us.Fv[]\"");
      Utility.methodSignatureReturnType("Z");
      try { 
        Utility.methodSignatureArgumentTypes("Xy.6<1g{pN6'WwK=j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xy.6<1g{pN6'WwK=j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isSet((-1116), (-1116));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(65);
      byteSequence0.mark((-649));
      boolean boolean1 = true;
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      Utility.isJavaIdentifierPart('B');
      Utility.compactClassName("L280;F*(;V", "BSY*ihP~tffDhanV7", true);
      String string0 = "hAm%LCsI7Jv";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LhAm%LCsI7Jv;V";
      stringArray0[1] = "L280;F*(;V";
      Utility.methodTypeToSignature("hAm%LCsI7Jv", stringArray0);
      Utility.methodSignatureReturnType("BSY*ihP~tffDhanV7");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("++NA_[dUBruLq:q_V|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NA_[dUBruLq:q_V|g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-119));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 34, 172, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "LhAm%LCsI7Jv;V";
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      try { 
        Utility.typeOfSignature("Xau6/$<Z$p[xvwrL!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xau6/$<Z$p[xvwrL!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = Utility.searchOpcode("iastore");
      assertEquals((short)79, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a0$a0$a0$a0", string0);
      
      Utility.classOrInterface((byte) (-96));
      String string1 = Utility.classOrInterface((short)79);
      assertEquals("class", string1);
      
      Utility.decode("interface", false);
      byte[] byteArray1 = Utility.decode("$a0$a0$a0$a0", false);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      String string2 = Utility.compactClassName("oh3njRwxs3Y");
      assertEquals("oh3njRwxs3Y", string2);
      
      Utility.compactClassName("", "fload_0", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$a0$a0$a0$a0";
      objectArray0[1] = (Object) "$a0$a0$a0$a0";
      objectArray0[2] = (Object) (byte) (-96);
      objectArray0[3] = (Object) "fload_0";
      objectArray0[4] = (Object) (byte) (-96);
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{$a0$a0$a0$a0, $a0$a0$a0$a0, -96, fload_0, -96}", string3);
      
      int int0 = Utility.setBit(34, (short)79);
      assertEquals(32802, int0);
      
      String string4 = Utility.getSignature("fload_0");
      assertEquals("Lfload_0;", string4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      assertEquals("hAm%LCsI7Jv", string0);
      
      short short0 = Utility.searchOpcode("LhAm%LCsI7Jv;V");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("71 87 87 00 87 87 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("{HNm.p=n@CO]Xowy4");
      try { 
        Utility.typeOfSignature("{\\HNm.p=n@CO]Xowy4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\\HNm.p=n@CO]Xowy4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.accessToString(3020, false);
      Utility.searchOpcode("Q\"e)|j1");
      Utility.compactClassName("Q\"e)|j1", "C}mN:`0Q*T", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      assertEquals("Lfdiv;", string0);
      
      String string1 = Utility.replace("fdiv", "Lfdiv;", "wJ>@pIWxm&}o6;ioQ");
      assertEquals("fdiv", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("_=rj^m'GE*=wfI(w_\"", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("swap", string2);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.searchOpcode("frem");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("A}] 6bS*0Rg{");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.toHexString(byteArray0);
      String string0 = "double";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "double", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(177);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dstore\t\t%220", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)14, (byte)14);
      Utility.classOrInterface((-2202));
      Utility.convertString("interface");
      String string0 = "";
      int int0 = (-2318);
      int int1 = 130;
      int int2 = (-1848);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("interface");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("interface");
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantClass constantClass0 = new ConstantClass((byte)14);
      constantArray0[2] = (Constant) constantClass0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte) (-63), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.isSet((-1116), (-1116));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantFieldref");
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(" ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantFloat constantFloat0 = new ConstantFloat((-15.615006F));
      byte[] byteArray0 = Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      assertEquals(18, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(90);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("frem", string0);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.compactClassName("=", ", ", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=";
      stringArray0[1] = "hAm%LCsI7Jv";
      stringArray0[2] = "java.lang.UnDO>ZVZq>-%yCZyf";
      stringArray0[3] = "=";
      stringArray0[4] = "=";
      stringArray0[5] = ", ";
      Utility.methodTypeToSignature("=", stringArray0);
      try { 
        Utility.methodSignatureReturnType("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)78;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 2138;
      int int1 = (-3043);
      Utility.setBit(2138, (-3043));
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      String string0 = "@";
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.typeOfSignature("Ct9XLN");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.accessToString(1342);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "o0a)]q|]<=[;71#^LN";
      stringArray0[2] = "private protected static final synchronized native abstract";
      stringArray0[3] = "private protected static final synchronized native abstract";
      stringArray0[4] = "\nAttribute(s) = ";
      stringArray0[5] = "private protected static final synchronized native abstract";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("private protected static final synchronized native abstract", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;71#^LN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      Utility.typeOfSignature("LhAm%LCsI7Jv;V");
      String string0 = "Mr\",bP3nMhX";
      try { 
        Utility.methodSignatureReturnType("Qx+JK>!*^%N,2+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qx+JK>!*^%N,2+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.fillup("", 1134, false, 'Z');
      Utility.isSet(1134, (-3526));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)114;
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.accessToString(223, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private protected static final volatile transient";
      objectArray0[1] = (Object) "public private protected static final volatile transient";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public private protected static final volatile transient";
      objectArray0[4] = (Object) "public private protected static final volatile transient";
      objectArray0[5] = (Object) "public private protected static final volatile transient";
      objectArray0[6] = (Object) "public private protected static final volatile transient";
      objectArray0[7] = (Object) "public private protected static final volatile transient";
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("public private protected static final volatile transient, public private protected static final volatile transient, java.lang.Object@4d7a758c, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient");
      Utility.accessToString(223, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ",5j(>MxN}<7O", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[2] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), 1820);
      assertEquals("0:    ldiv\n1:    nop\n2:    ifeq\t\t#2\n5:    nop\n6:    nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("JyMu;m@t>48NY%y6");
      assertEquals("JyMu;m@t>48NY%y6", string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      String string0 = "W69i`h";
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((-1116), (-485));
      Utility.compactClassName("W69i`h", true);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-1116));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 185, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      short short0 = Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)95;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hAm%LCsI7Jv";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "iJhY6'/S,N'ymb.XCM";
      stringArray0[3] = "LhAm%LCsI7Jv;V";
      String string0 = Utility.methodTypeToSignature("invokedynamic", stringArray0);
      assertEquals("(LhAm%LCsI7Jv;Linvokedynamic;LiJhY6'/S,N'ymb/XCM;LLhAm%LCsI7Jv;V;)Linvokedynamic;", string0);
      
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      String string1 = Utility.convertString("iJhY6'/S,N'ymb.XCM");
      assertEquals("iJhY6\\'/S,N\\'ymb.XCM", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{hAm%LCsI7Jv, invokedynamic, iJhY6'/S,N'ymb.XCM, LhAm%LCsI7Jv;V}", string2);
      
      String string3 = Utility.compactClassName("0gAT'v!t(.jkl;r5x", false);
      assertEquals("0gAT'v!t(.jkl;r5x", string3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-87);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      short short0 = Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("hAm%LCsI7Jv", false);
      assertEquals(12, byteArray0.length);
      
      int int0 = Utility.clearBit((byte)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[2] = (byte) (-103);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103), false);
      try { 
        Utility.typeOfSignature("0:    aload_1\n1:    nop\n2:    ifeq\t\t#2\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aload_1
         // 1:    nop
         // 2:    ifeq\t\t#2
         // 5:    nop
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "void";
      objectArray0[1] = (Object) "void";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "void";
      objectArray0[6] = (Object) "void";
      int int0 = Utility.clearBit((-366), (-366));
      assertEquals((-262510), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "SAME";
      Utility.replace("SAME", "SAME", "SAME");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "SAME";
      Utility.printArray(objectArray0);
      Utility.fillup("", 400, false, '.');
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "if_icmplt";
      stringArray0[1] = "if_icmplt";
      String string0 = Utility.methodTypeToSignature("if_icmplt", stringArray0);
      assertEquals("(Lif_icmplt;Lif_icmplt;)Lif_icmplt;", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "LhAm%LCsI7Jv;V";
      Utility.accessToString(2);
      Utility.convertString("A}] 6bS*0Rg{");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(254);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "LhAm%LCsI7Jv;V";
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart(':');
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-468));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(4645);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("m\tH6;Rf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: m\tH6;Rf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.accessToString(124);
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "protected static final synchronized volatile";
      stringArray0[2] = "BSY*ihP~tffDhanV7";
      stringArray0[3] = "BSY*ihP~tffDhanV7";
      stringArray0[4] = "hAm%LCsI7Jv";
      Utility.methodTypeToSignature("LBSY*ihP~tffDhanV7;", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 180, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    iconst_m1
         // 3:    lushr
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      try { 
        Utility.typeOfSignature("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[kc/-\"K:`CB,bM[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [kc/-\"K:`CB,bM[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[2];
      Utility.compactClassName("ireturn", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((short) (-1));
      byteSequence0.mark((short) (-1));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, true);
      // Undeclared exception!
      Utility.replace("boolean", "", "lu,krY,j[");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";r", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.setBit((-1), (-1));
      Utility.setBit((-1), (-1));
      Utility.compactClassName("UnDO>ZVZq>-%yCZyf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 3841, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("interface");
      Utility.isSet((-3300), (byte)75);
      String string0 = Utility.compactClassName("StackMap", true);
      Utility.methodSignatureReturnType("StackMap", false);
      String string1 = Utility.methodSignatureReturnType("StackMap");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.signatureToString("LBSY*ihP~tffDhanV7;", true);
      Utility.accessToString((int) (byte)40);
      Utility.typeOfSignature("BSY*ihP~tffDhanV7");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("LBSY*ihP~tffDhanV7;");
      assertEquals("LBSY*ihP~tffDhanV7;", constantUtf8_0.getBytes());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 79, 57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      Utility.isSet((-4398), 107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)31;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 44, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-99);
      byteArray0[1] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1413, (-1256));
      MockPrintStream mockPrintStream0 = new MockPrintStream("J|}ji;:HJqM&JKiz");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantFieldref0.dump(dataOutputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      byte[] byteArray1 = Utility.decode("arraylength", false);
      String string0 = Utility.classOrInterface(52);
      assertEquals("class", string0);
      
      Utility.signatureToString("StackMap(", false);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)109, false);
      assertEquals("0:    ladd\n1:    frem\n2:    frem\n3:    ladd\n4:    lshl\n5:    idiv\n6:    lsub\n7:    fdiv\n8:    dsub\n9:    ineg\n10:   imul\n", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("U@'z*SR/%8B40# wo@K", stringArray0);
      try { 
        Utility.typeOfSignature("U@'z*SR/%8B40# wo@K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U@'z*SR/%8B40# wo@K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fku|kZh;w'2JWL", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.accessToString(131);
      assertEquals("public private transient", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.searchOpcode("*");
      Utility.getSignature("*");
      Utility.classOrInterface(711);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-96);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 226, (int) (byte)54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(1, 1654, true, 'y');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte)109, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)89);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(507);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("a>p>r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a>p>r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)24;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1303), 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      String string0 = Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)53);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.accessToString((-3257), true);
      assertEquals("public private protected volatile native synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("if_icmpgt", "public private protected volatile native synthetic annotation enum", true);
      assertEquals("if_icmpgt", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class");
      Utility.classOrInterface(213);
      Utility.isJavaIdentifierPart('n');
      String string0 = "W69i`h";
      String string1 = "^ujT$2O!XlX(&j{{}:";
      Utility.convertString("^ujT$2O!XlX(&j{{}:");
      String string2 = "iqG)\"";
      try { 
        Utility.typeOfSignature("iqG)\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iqG)\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.accessToString(92, false);
      Utility.searchOpcode("protected static final volatile");
      boolean boolean0 = true;
      Utility.compactClassName("", "", true);
      String[] stringArray0 = new String[9];
      String string0 = "l'S{t,&<~x6DM@[";
      stringArray0[0] = "l'S{t,&<~x6DM@[";
      stringArray0[1] = "transient";
      stringArray0[2] = "transient";
      stringArray0[3] = "K=j9:E>,eL";
      stringArray0[4] = "K=j9:E>,eL";
      stringArray0[5] = "The magic number must contain at least one byte";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("transient", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("g!#[zG%JOgD>N[\"", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.skipBytes((-2015));
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("g!#[zG%JOgD>N[\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g!#[zG%JOgD>N[\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('D');
      String string0 = null;
      try { 
        Utility.typeOfSignature("6++NA_[dUMuLqLq_|W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6++NA_[dUMuLqLq_|W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)109;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.replace("ifgt", "monitorenter", "ifgt");
      assertEquals("ifgt", string0);
      
      short short0 = Utility.searchOpcode("monitorenter");
      assertEquals((short)194, short0);
      
      String string1 = Utility.methodTypeToSignature("R~{;Lgk@IsEk", (String[]) null);
      assertEquals("()LR~{;Lgk@IsEk;", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      Utility.printArray((Object[]) null);
      boolean boolean0 = Utility.isSet((-250), 1680);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      try { 
        Utility.methodSignatureReturnType("Hgg}VFiLYo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hgg}VFiLYo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-121);
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)3);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "R0W*?TW/&=*<u-";
      Utility.decode("R0W*?TW/&=*<u-", false);
      try { 
        Utility.typeOfSignature("R0W*?TW/&=*<u-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R0W*?TW/&=*<u-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.typeOfSignature("V^1nD_^aX|:;*E~H8");
      Utility.replace("D+5(xWw", "ZwXPRtc0!/Z", "3");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.fillup("sE|w=a", 2121, true, 'B');
      boolean boolean0 = Utility.isSet(2121, 2121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      assertEquals("hAm%LCsI7Jv", string0);
      
      short short0 = Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.format((short) (-1), (byte)0, true, '*');
      assertEquals("-1", string1);
      
      Utility.getSignature("LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
      
      String string2 = Utility.getSignature("bM&o$");
      assertEquals("LbM&o$;", string2);
      
      String string3 = Utility.format((byte)0, (-1133), true, 'z');
      assertEquals("0", string3);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)38;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte) (-98), false);
      assertEquals("0:    ifle\t\t#-24930\n3:    dload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.accessToString(3020, false);
      Utility.searchOpcode("Q\"e)|j1");
      Utility.isSet((short) (-1), 203);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1114, (-610));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      assertEquals("LhAm%LCsI7Jv;V", string0);
      
      String string1 = Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      assertEquals("hAm%LCsI7Jv", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("8e 8e 8e 00 62 2d", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.classOrInterface((byte) (-75));
      try { 
        Utility.typeOfSignature("EyXw=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EyXw=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      Utility.classOrInterface(59);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-92);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, (byte) (-70));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant constant0 = constantInvokeDynamic1.copy();
      constantArray0[0] = constant0;
      ConstantString constantString0 = new ConstantString((-686));
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3087), 95);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 212. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-83);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = 3020;
      Utility.accessToString(3020, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-67));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "The filters must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The filters must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)27;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("4tg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4tg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)14, (byte)14);
      Utility.classOrInterface((-2202));
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("W69i`h");
      try { 
        Utility.typeOfSignature("W69i`h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W69i`h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("bipush\t\t-42", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)72;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.searchOpcode("\t");
      Utility.isJavaIdentifierPart('B');
      Utility.convertString("\t");
      String string0 = ";3_i0SfflNU'xYdR";
      try { 
        Utility.typeOfSignature(";3_i0SfflNU'xYdR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;3_i0SfflNU'xYdR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureToString("vse", "vse", "-?zH{:$c0S_", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vse
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.compactClassName("boolean", "boolean", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("}gedpuKG&TbWbb$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('=');
      Utility.convertString("class");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      String string0 = Utility.accessToString(24);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.convertString("\"*a9");
      assertEquals("\\\"*a9", string0);
      
      try { 
        Utility.typeOfSignature("\"*a9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"*a9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.compactClassName("LBSY*ihP~tffDhanV7;", "BSY*ihP~tffDhanV7", true);
      Utility.accessToString(24);
      Utility.methodSignatureReturnType("BSY*ihP~tffDhanV7");
      try { 
        Utility.methodSignatureArgumentTypes("LBSY*ihP~tffDhanV7;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LBSY*ihP~tffDhanV7;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("trZ].c", "trZ].c", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte)73;
      Utility.equals(byteArray0, byteArray1);
      Utility.isJavaIdentifierPart('m');
      Utility.convertString("getfield");
      Utility.isSet((byte) (-69), (-201));
      Utility.compactClassName("float", true);
      try { 
        Utility.methodSignatureReturnType("@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.replace("2}mD22iq{gbdIRdYI^(", "2}mD22iq{gbdIRdYI^(", (String) null);
      assertEquals("null", string0);
      
      String string1 = Utility.accessToString(374, false);
      assertEquals("private protected final synchronized volatile native", string1);
      
      boolean boolean0 = Utility.isSet(374, 1972);
      assertFalse(boolean0);
      
      String string2 = Utility.getSignature("mI7F:qe-?#VnKqhToKg");
      assertEquals("LmI7F:qe-?#VnKqhToKg;", string2);
      
      int int0 = Utility.clearBit(386, 0);
      assertEquals(386, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("fdiv");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "fdiv";
      stringArray0[2] = "fdiv";
      stringArray0[3] = "fdiv";
      stringArray0[4] = "fdiv";
      stringArray0[5] = "fdiv";
      stringArray0[6] = "Lfdiv;";
      Utility.methodTypeToSignature("", stringArray0);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      Utility.methodSignatureToString("()Lu;", "()Lu;", "()Lu;", false);
      try { 
        Utility.methodSignatureReturnType("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(92, false);
      Utility.searchOpcode("protected static final volatile");
      char char0 = 'J';
      Utility.isJavaIdentifierPart('J');
      Utility.convertString("protected static final volatile");
      try { 
        Utility.typeOfSignature(")Y>Wp29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )Y>Wp29
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "Fku|kZh;w'2JWL";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-82);
      String string1 = "XAE*tdWT137\\Od";
      try { 
        Utility.methodSignatureReturnType("XAE*tdWT137Od", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XAE*tdWT137Od'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("LA$quQ6Iw*{of3;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Integer integer0 = new Integer(86);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte) (-68);
      byteArray1[5] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 76, 2791, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-106));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('J');
      Utility.convertString("CLASSPATH component ");
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.classOrInterface((-587));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      String string0 = "(";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("oso}I;qiqv(%");
      Utility.accessToString(255, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte) (-4));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte byte0 = (byte) (-82);
      Utility.isJavaIdentifierPart('U');
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("(\"");
      try { 
        Utility.typeOfSignature("G4K'!?FJk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G4K'!?FJk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.accessToString(124);
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      stringArray0[1] = "protected static final synchronized volatile";
      stringArray0[2] = "protected static final synchronized volatile";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((byte)31, (byte) (-32), false, 'Y');
      Utility.getSignature("\nAttribute(s) = ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-32);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(78);
      Utility.clearBit((byte)31, 129);
      Utility.compactClassName("wide", false);
      try { 
        Utility.typeOfMethodSignature("Sj%mQ2Tj0|nX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Sj%mQ2Tj0|nX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.typeOfSignature("D+5(xWw");
      Utility.methodSignatureReturnType("D+5(xWw", false);
      try { 
        Utility.methodSignatureReturnType("Mr\",bP3nMhX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mr\",bP3nMhX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('B');
      Utility.compactClassName(";", "", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";";
      Utility.methodTypeToSignature("K=j9:E>,eL", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString(";", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribute(s) = ");
      assertEquals("\\nAttribute(s) = ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#-14403", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("dl3IxYs'rd[[q", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "A$quQ6Iw*{of3";
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1505);
      Utility.isSet((-1505), (-1505));
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        constantPool0.getConstant(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "A$quQ6Iw*{of3";
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("");
      Utility.isJavaIdentifierPart('B');
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-83);
      String string0 = Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("6a.?v`", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      
      String string0 = Utility.compactClassName("istore\t\t%97");
      assertEquals("istore\t\t%97", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-99);
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("@Y_uSra0f%<~m8/", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$40Y_uSra0f$r$3c$7em8$_", string0);
      
      String string1 = Utility.accessToString(76, false);
      assertEquals("protected static volatile", string1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Could not create the directory ", "Could not create the directory ", "Could not create the directory ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Could not create the directory 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.clearBit(3043, 1334);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 2149, false, 'U');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = Utility.clearBit(4032, 4032);
      assertEquals(4032, int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      String string1 = Utility.compactClassName("class");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(254, false);
      assertEquals("private protected static final synchronized volatile transient", string2);
      
      boolean boolean0 = Utility.isSet(1972, 0);
      assertFalse(boolean0);
      
      String string3 = Utility.getSignature("class");
      assertEquals("Lclass;", string3);
      
      int int0 = Utility.clearBit(1972, 1972);
      assertEquals(1972, int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.getSignature("");
      Utility.compactClassName("\nAttribute(s) = ", "", true);
      Utility.isSet((-4398), 107);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("InnerClasses", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.clearBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R0W*?TW/&=*<u-", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5fLxhHl}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5fLxhHl}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1048), (byte)54);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)4, true);
      assertEquals("0:    nop\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(" ", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("()L;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()L;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-78);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-121);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      Utility.convertString("#JN#-;]Z+\"q");
      try { 
        Utility.typeOfSignature("20/#s(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 20/#s(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.convertString("LhAm%LCsI7JvV");
      assertEquals("LhAm%LCsI7JvV", string0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Utility.decode("LhAm%LCsI7JvV", false);
      assertEquals(14, byteArray1.length);
      
      byte byte0 = Utility.typeOfSignature("S'");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.classOrInterface(1596);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(Xl[-]) `l", false);
      assertArrayEquals(new byte[] {(byte)40, (byte)88, (byte)108, (byte)91, (byte)45, (byte)93, (byte)41, (byte)32, (byte)96, (byte)108}, byteArray0);
      
      String string0 = Utility.replace("(Xl[-]) `l", "(Xl[-]) `l", "(Xl[-]) `l");
      assertEquals("(Xl[-]) `l", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto", "goto", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.searchOpcode("frem");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)107;
      byteArray0[4] = (byte)107;
      Utility.convertString("frem");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("frem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `frem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "void";
      boolean boolean0 = true;
      try { 
        Utility.decode("void", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      String string0 = "=5&tvf*P{0 ";
      String string1 = "Warning: Padding byte != 0 in ";
      Utility.compactClassName("=5&tvf*P{0 ", "Warning: Padding byte != 0 in ", true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
      byte byte0 = (byte) (-77);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-26);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1696, (int) (byte)2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1967, false, '/');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-78);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte) (-121);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      byteSequence0.mark(0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("ldiv", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      short short0 = Utility.searchOpcode("\t");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)78;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte)62, false);
      assertEquals("0:    <illegal opcode>\n1:    dcmpg\n2:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(223, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private protected static final volatile transient";
      objectArray0[1] = (Object) "public private protected static final volatile transient";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public private protected static final volatile transient";
      objectArray0[4] = (Object) "public private protected static final volatile transient";
      objectArray0[5] = (Object) "public private protected static final volatile transient";
      objectArray0[6] = (Object) "public private protected static final volatile transient";
      objectArray0[7] = (Object) "public private protected static final volatile transient";
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("public private protected static final volatile transient, public private protected static final volatile transient, java.lang.Object@74ed83f1, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient, public private protected static final volatile transient");
      Utility.accessToString(223, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.convertString("LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, Fku|kZh;w'2JWL, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = Utility.accessToString((-899));
      assertEquals("public protected static final synchronized volatile abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "Q\"e)|j1";
      String string1 = "Dont call getValueDouble() on a non DOUBLE ElementValue";
      Utility.typeOfSignature("Dont call getValueDouble() on a non DOUBLE ElementValue");
      try { 
        Utility.typeOfSignature("Q\"e)|j1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\"e)|j1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.searchOpcode("Q\"e)|j1");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("getfield", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*2T3r|W&5!");
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
      
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
      
      String string1 = Utility.classOrInterface((byte)10);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      Utility.compactClassName("fdiv", true);
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      String string0 = Utility.classOrInterface(90);
      assertEquals("class", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1409), 90, true);
      assertEquals("0:    frem\n1:    dload_3\n2:    fsub\n3:    dstore\t\t%79\n5:    dload_1\n6:    nop\n7:    daload\n8:    aload_0\n9:    baload\n10:   lstore_2\n11:   ineg\n12:   dup_x1\n13:   fstore_3\n14:   lstore_2\n15:   dstore_1\n16:   lload_3\n17:   dstore_3\n", string1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.accessToString((-1409));
      assertEquals("public private protected static final synchronized volatile interface strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('\\');
      Utility.convertString(")");
      Utility.typeOfSignature("S3A[FDH= ,wk\"@K,fk");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      Utility.compactClassName(")", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("S3A[FDH= ,wk\"@K,fk", true);
      Utility.compactClassName(")", "<uW", true);
      MockFile mockFile0 = new MockFile("S3A[FDH= ,wk\"@K,fk");
      MockFile mockFile1 = new MockFile(mockFile0, ")");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "K[s`~7lndf";
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "K[s`~7lndf";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "K[s`~7lndf";
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "K[s`~7lndf";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      Utility.isJavaIdentifierPart('O');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('O');
      String string0 = "ddiv";
      Utility.compactClassName("ddiv", true);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((byte)76);
      byteSequence0.mark((byte)20);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Utility.methodSignatureReturnType("C[%=r", true);
      Utility.methodSignatureReturnType("JusSQELHK@L;vwq<e");
      try { 
        Utility.methodSignatureArgumentTypes("JusSQELHK@L;vwq<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JusSQELHK@L;vwq<e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.replace("'", "'", "'");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("'", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      stringArray0[5] = "boolean";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(156);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("StackMap", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("-K%K>;8QTV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-67);
      Utility.encode(byteArray0, true);
      Utility.fillup("%ovruRgWHM!z`7iPxv", (byte) (-67), true, 'c');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Unrecognized attribute type tag parsed: ", "-bzH{;$c0S_", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte byte0 = (byte)14;
      Utility.accessToString(254, false);
      Utility.isSet(251, 1972);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<J~d48-L}$hF`Z^se", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.methodSignatureReturnType("Fku|kZh;w'2JWL", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      char char0 = '0';
      Utility.format(1, 1, true, '0');
      try { 
        Utility.methodSignatureReturnType("1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.fillup("ifge", 3225, true, 'H');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", "H-B5x8NZXP", "|4@T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fku|kZh;w'2J^L", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.searchOpcode("iJhY6'/S,N'ymb.XBCM");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.searchOpcode("NCyY8r&^F{w,Oq!k");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("NCyY8r&^F{w,Oq!k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NCyY8r&^F{w,Oq!k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifge\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      Utility.isJavaIdentifierPart('i');
      Utility.isSet((-3300), (byte)0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)78, (int) (byte) (-113), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      byte[] byteArray0 = new byte[7];
      Utility.toHexString(byteArray0);
      Utility.getSignature(")\t");
      try { 
        Utility.typeOfMethodSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      short short0 = Utility.searchOpcode("PPgi%J.Da^}fjAODuh");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      Utility.compactClassName("StackMap", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)40);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_2", (String) null, "dload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      assertEquals("Lfdiv;", string0);
      
      Utility.isJavaIdentifierPart('i');
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("fdiv", true);
      assertEquals("fdiv", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string2 = Utility.methodSignatureReturnType("F&DTG>_&M,");
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      try { 
        Utility.decode("\"*a9", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("g!#[zG%JOgD>N[\"", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (-649));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((-3169));
      constantArray0[0] = (Constant) constantInteger0;
      Utility.format((-649), (byte)32, true, 'u');
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      Utility.isJavaIdentifierPart('J');
      String string0 = "R~{;Lgk@IsEk()LR~{;Lgk@IsEk;";
      try { 
        Utility.typeOfSignature("R~{;Lgk@IsEk()LR~{;Lgk@IsEk;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R~{;Lgk@IsEk()LR~{;Lgk@IsEk;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.accessToString(2300, true);
      Utility.searchOpcode("protected static final volatile transient strictfp");
      Utility.isJavaIdentifierPart('y');
      Utility.convertString("goto_w");
      String string0 = ")Y>Wp29";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "PPgi%J.Da^}fjAODuh";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      try { 
        Utility.typeOfSignature("PPgi%J.Da^}fjAODuh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PPgi%J.Da^}fjAODuh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      short short0 = Utility.searchOpcode("LhAm%LCsI7Jv;V");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("hAm%LCsI7Jv");
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      String string0 = "C]ve[n]xSmA";
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3514. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      assertEquals("Lfdiv;", string0);
      
      String string1 = Utility.accessToString(39);
      assertEquals("public private protected synchronized", string1);
      
      Utility.compactClassName("hY mbx.i", "fdiv", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("Lfdiv;");
      assertEquals((byte)14, byte0);
      
      Utility.methodSignatureReturnType("Lfdiv;");
      String string2 = Utility.convertString("hY mbx.i");
      assertEquals("hY mbx.i", string2);
      
      Utility.printArray((Object[]) null);
      String string3 = Utility.classOrInterface(52);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-9);
      byteArray0[6] = (byte) (-70);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readChar();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A$quQ6Iw*{of3");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-41);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3701, (byte)4);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)30, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "U12";
      try { 
        Utility.typeOfSignature("U12");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U12
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = Utility.decode("?dV,\"z*", false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)63, (byte)100, (byte)86, (byte)44, (byte)34, (byte)122, (byte)42}, byteArray0);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char char0 = ')';
      Utility.isJavaIdentifierPart(')');
      byte[] byteArray0 = Utility.decode("ynY>wpV+Q:kfS\"<S1", false);
      int int0 = 92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2654, (-370));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.signatureToString("Fku|kZh;w'2JWL", true);
      Utility.searchOpcode("float");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(`9 |kdFm/-", "c4KtC2qsp'9*zlL5fo?", "(`9 |kdFm/-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``9 |kdFm/-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribute(s) = ");
      assertEquals("\\nAttribute(s) = ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifnonnull\t\t#0", string1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Tk<v>6,-Y\"$El";
      try { 
        Utility.decode("Tk<v>6,-Y\"$El", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = Utility.compactClassName("\\", false);
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format(2629, 2629, true, '');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2629
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.searchOpcode("!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.isSet(1030, (-46));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 92
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      Utility.methodSignatureReturnType("R~{;Lgk@IsEk()LR~{;Lgk@IsEk;", false);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Utility.signatureToString("R~{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R~{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      try { 
        Utility.methodSignatureReturnType(")Y>Wp29", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y>Wp29'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.setBit((-1), (-1));
      Utility.setBit((-1), (-1));
      Utility.compactClassName("UnDO>ZVZq>-%yCZyf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ee!sQ(,\"C<nE*h", "Ku()xZzP", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.accessToString(24);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "static final";
      stringArray0[1] = "static final";
      stringArray0[2] = "static final";
      stringArray0[3] = ";PL";
      stringArray0[4] = "static final";
      stringArray0[5] = "static final";
      stringArray0[6] = "static final";
      stringArray0[7] = "static final";
      stringArray0[8] = "static final";
      Utility.methodTypeToSignature("static final", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(Lstatic;Lstatic;Lstatic;L;PL;Lstatic;Lstatic;Lstatic;Lstatic;Lstatic;)Lstatic;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PL;Lstatic;Lstatic;Lstatic;Lstatic;Lstatic;)Lstatic;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.signatureToString("Deprecated attribute with length > 0", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "Mr\",bP3nMhX";
      try { 
        Utility.methodSignatureReturnType("Mr\",bP3nMhX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mr\",bP3nMhX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("^dqX4f@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^dqX4f@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      boolean boolean1 = Utility.isSet(1360, (byte) (-113));
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1), (-3300));
      assertEquals("0:    iand\n1:    iand\n2:    fload_3\n3:    d2l\n", string0);
      
      Utility.encode(byteArray0, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$7e$7e$r$8f", string1);
      
      String string2 = Utility.convertString("0:    iand\n1:    iand\n2:    fload_3\n3:    d2l\n");
      assertEquals("0:    iand\\n1:    iand\\n2:    fload_3\\n3:    d2l\\n", string2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)50, (-2423), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("LA$quQ6Iw*{of3;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("A$quQ6Iw*{of3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$quQ6Iw*{of3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      Utility.isJavaIdentifierPart('\'');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("-xKQ7[xF>)NHF_|Sg0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-xKQ7[xF>)NHF_|Sg0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("W69i`h");
      // Undeclared exception!
      try { 
        Utility.signatureToString("W69i`h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W69i`h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byte byte0 = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      Utility.replace("fastore", "fastore", "C@Bx3}I[,");
      byte[] byteArray1 = null;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)121;
      byteArray2[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1413, 1413);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fastore");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantFieldref0.dump(dataOutputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Utility.decode("byte", false);
      Utility.classOrInterface(2506);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XiLR@&*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XiLR@&*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = (-3792);
      boolean boolean0 = true;
      Utility.fillup("P}Yb/#z@9", (-3792), true, '8');
      Utility.replace("P}Yb/#z@9", "P}Yb/#z@9", "P}Yb/#z@9");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      assertEquals("LhAm%LCsI7Jv;V", string0);
      
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (-649));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((-3169));
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("u", stringArray0);
      assertEquals("()Lu;", string1);
      
      String string2 = Utility.methodSignatureReturnType("C]ve[n]xSmA");
      assertEquals("char", string2);
      
      String string3 = Utility.convertString("=?y~8DmShAr49azW&8");
      assertEquals("=?y~8DmShAr49azW&8", string3);
      
      String string4 = Utility.methodSignatureToString("()Lu;", "=?y~8DmShAr49azW&8", "(d.yydm>");
      assertEquals("(d.yydm> u =?y~8DmShAr49azW&8()", string4);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.toHexString(byteArray0);
      int int0 = 224;
      Utility.accessToString(224);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LoN|vfU2Ov&?C";
      try { 
        Utility.methodSignatureReturnType("Kk(\"Yx/T2\"qm0B~,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kk(\"Yx/T2\"qm0B~,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.classOrInterface(165);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.decode("Fku|kZh;w'2JWL", false);
      Utility.methodSignatureReturnType("Fku|kZh;w'2JWL", true);
      String string0 = "ZUBJ1%";
      Utility.signatureToString("ZUBJ1%");
      // Undeclared exception!
      Utility.fillup("Fku|kZh;w'2JWL", 20000, false, '^');
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-83);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-83);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte) (-65);
      byteArray1[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("pop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `pop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (byte)32);
      Utility.compactClassName("hAm%LCsI7Jv", "hAm%LCsI7Jv", false);
      byte byte0 = (byte)40;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.compactClassName("if_icmpne");
      assertEquals("if_icmpne", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("p", string2);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte)125);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">\t";
      stringArray0[1] = ",NLeJjNU2FE)}eI,";
      stringArray0[2] = "W69i`h";
      stringArray0[3] = ",NLeJjNU2FE)}eI,";
      stringArray0[4] = "org.apache.bcel.classfile.Utility$1";
      stringArray0[5] = ">\t";
      stringArray0[6] = ">\t";
      Utility.methodTypeToSignature(">\t", stringArray0);
      Utility.typeOfMethodSignature("(L>;L,NLeJjNU2FE)}eI,;LW69i`h;L,NLeJjNU2FE)}eI,;Lorg/apache/bcel/classfile/Utility$1;L>;L>;)L>;");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(">\t", ",NLeJjNU2FE)}eI,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      try { 
        Utility.typeOfSignature(",+$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,+$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.replace("\"*a9", "instanceof", "\"*a9");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("\"*a9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "instanceof", "goto_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-50));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    laload\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.getSignature("A$quQ6Iw*{of3");
      assertEquals("LA$quQ6Iw*{of3;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("LA$quQ6Iw*{of3;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.mark(201);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readShort();
      String string1 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals(14, byteArray0.length);
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-2339));
      ConstantPool constantPool0 = null;
      byteSequence0.mark(187);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("faload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: faload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.getSignature("LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("fdiv");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-8);
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-8));
      byteSequence0.mark(13);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.replace("void", "putfield", "void");
      Utility.compactClassName("fstore_2", "astore_0", true);
      Utility.convertString("fstore_2");
      // Undeclared exception!
      try { 
        constantPool0.getConstant(156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Utility.searchOpcode("Q\"e)|j1");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2720, 21, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (int) (short) (-1), 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.accessToString((int) (byte)40);
      ConstantUtf8.getCachedInstance("LBSY*ihP~tffDhanV7;");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class");
      Utility.accessToString(254, false);
      Utility.isSet(1972, 0);
      String string0 = "#]4L";
      Utility.compactClassName("#]4L", "class", false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "private protected static final synchronized volatile transient", "BcODsyI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      try { 
        Utility.typeOfSignature("=g![1AuT<s/U3qgzV*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =g![1AuT<s/U3qgzV*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte) (-92), false);
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.compactClassName("trZ].c", "ifgt", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantNameAndType";
      stringArray0[1] = "ifgt";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantNameAndType";
      stringArray0[4] = "trZ].c";
      stringArray0[5] = "hAm%LCsI7Jv";
      stringArray0[6] = "trZ].c";
      stringArray0[7] = "org.apache.bcel.classfile.ConstantNameAndType";
      Utility.methodTypeToSignature("ifgt", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)62;
      Utility.methodSignatureReturnType("Z$a[s:", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (byte)32);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((-3169));
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, 1403, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Utility.replace(">", ">", ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.methodSignatureReturnType("?5W!<YL|GNLZ'[ Nz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?5W!<YL|GNLZ'[ Nz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("g!#[zG%JOgD>N[\"", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("g$n$p$5bzG$rJOgD$3eN$5b$o", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = Utility.accessToString(62, true);
      assertEquals("private protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.accessToString(3020, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-60546520));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(5);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("ireturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      Utility.isJavaIdentifierPart('B');
      Utility.format((-2189), 1614, true, 'B');
      Utility.getSignature("trZ].c ");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.getSignature("LhAm%LCsI7Jv;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      Utility.convertString("LLhAm%LCsI7Jv;V;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 187, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.signatureToString("Fku|kZh;w'2JWL", true);
      boolean boolean0 = false;
      Utility.signatureToString("Fku|kZh;w'2JWL", false);
      Utility.getSignature("float");
      Utility.signatureToString("F");
      // Undeclared exception!
      try { 
        Utility.signatureToString("g]B~'MGq)S}J_&N", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g]B~'MGq)S}J_&N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      Utility.isJavaIdentifierPart('g');
      Utility.convertString("pop");
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes(49);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.mark(12);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("return", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte) (-18), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-96);
      Utility.classOrInterface((byte)2);
      Utility.classOrInterface((byte) (-113));
      Utility.fillup("class", (byte) (-113), true, 'G');
      Utility.format(57, 2131, false, '\"');
      try { 
        Utility.methodSignatureToString("h\"", (String) null, "j@[_Hg{(:T2@H.;", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 1559, (-24));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("6a.?v`", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.format(0, 0, false, '}');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "0";
      objectArray0[1] = (Object) (byte) (-73);
      objectArray0[2] = (Object) (byte) (-73);
      objectArray0[3] = (Object) (byte) (-73);
      objectArray0[4] = (Object) "0";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.format(2556, 138, false, '1');
      assertEquals("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112556", string0);
      
      String string1 = Utility.getSignature("invokespecial");
      assertEquals("Linvokespecial;", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("b7 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(114);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface((-21));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaReader");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = null;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("wQ^O", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(0, 0, false, '}');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("oso}I;qiqv(%");
      boolean boolean0 = true;
      Utility.accessToString(255, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)73;
      Utility.format((byte) (-32), (byte)73, true, 'n');
      // Undeclared exception!
      try { 
        Utility.getSignature("-M[aH<ThW$=D7!Ip_Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[aH<ThW$=D7!Ip_Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N@!ZX^d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N@!ZX^d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\nAttribute(s) = ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      short short0 = Utility.searchOpcode("{java.lang.Object@36c482c7, java.lang.Object@674870cf, java.lang.Object@d75f689}");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format(492, (short) (-1), true, 'C');
      assertEquals("492", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("multianewarray");
      Utility.format((short)197, (short)197, false, '2');
      // Undeclared exception!
      try { 
        Utility.signatureToString("ESg0Q').(;.QTFf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ESg0Q').(;.QTFf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("J(hd;Hz");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.getSignature("fdiv");
      assertEquals("Lfdiv;", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("J),ZF>(PpukV", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.accessToString(92, false);
      Utility.format(92, 5239, false, ',');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      Utility.toHexString(byteArray0);
      Utility.getSignature("char");
      try { 
        Utility.typeOfMethodSignature("oso}I;qiqv(%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oso}I;qiqv(%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = "InrxI`s";
      String string1 = "Us.Fv[]\"";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("InrxI`s", "_pXy6bWk2QnN!", "Us.Fv[]\"", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: InrxI`s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.replace("class", "\t", "class");
      Utility.fillup("class", 0, true, '&');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.searchOpcode("iJhY6'/S,N'ymb.XCM");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("hAm%LCsI7Jv", false);
      Utility.classOrInterface((-1658964193));
      Utility.isJavaIdentifierPart('+');
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-50);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)97;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-37);
      byteArray1[7] = (byte) (-123);
      byteArray1[8] = (byte)62;
      Utility.equals(byteArray0, byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "interface", (int) (byte) (-50), 252);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("CNDO76oD2hmL=Y:.I}Q", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, 15, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.replace("class", "\t", "class");
      Utility.fillup("class", 0, true, '&');
      Utility.compactClassName("class", "class", false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.convertString("UtK%_aovnG");
      try { 
        Utility.methodSignatureReturnType("UtK%_aovnG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UtK%_aovnG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte byte0 = (byte)20;
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 1413;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3602), 4300);
      ConstantFloat constantFloat0 = new ConstantFloat(1413);
      // Undeclared exception!
      try { 
        Utility.decode(",:+G}RWN!E72$1Wl<", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      int int0 = Utility.clearBit(3043, 1345);
      assertEquals(3041, int0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("X+5gqSx?AHL9~H6?", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("pop2", string0);
      
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.LineNumberTable");
      assertEquals("org.apache.bcel.classfile.LineNumberTable", string1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[2] = (byte) (-103);
      Utility.methodTypeToSignature("R~{;Lgk@IsEk", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1880, (int) (byte) (-103), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("WD9i`h");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(52);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string1 = Utility.signatureToString("LhAm%LCsI7Jv;V", true);
      assertEquals("hAm%LCsI7Jv", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = Utility.format(0, 0, false, '}');
      assertEquals("0", string0);
      
      byte[] byteArray0 = new byte[4];
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1151), 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-73));
      constantArray0[1] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("0");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-17), (-1151), false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string1);
      
      String string2 = Utility.compactClassName("ay@#h+Q\"C)]", "<", false);
      assertEquals("ay@#h+Q\"C)]", string2);
      
      String string3 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{CONSTANT_NameAndType[12](name_index = -1151, signature_index = 0), CONSTANT_Class[7](name_index = -73), CONSTANT_Class[7](name_index = -73), CONSTANT_Utf8[1](\"0\"), CONSTANT_MethodType[16](descriptor_index = 0)}", string3);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = Utility.format(199, (-770), false, '0');
      assertEquals("199", string0);
      
      String string1 = Utility.getSignature("putstatic");
      assertEquals("Lputstatic;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)80;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)80;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      Utility.printArray(objectArray0, true);
      Utility.convertString("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}");
      String string0 = "trZ].c ";
      Utility.getSignature("trZ].c ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      objectArray0[4] = (Object) (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 2F00182F
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.convertString("java.lang.Object@73e670c3, java.lang.Object@74ac2b0a, java.lang.Object@3e2f2bda");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@73e670c3, java.lang.Object@74ac2b0a, java.lang.Object@3e2f2bda", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@73e670c3, java.lang.Object@74ac2b0a, java.lang.Object@3e2f2bda
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.getSignature("g+R.T8");
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte) (-82);
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("Fku|kZh;w'2JWL");
      Utility.typeOfSignature("Fku|kZh;w'2JWL");
      try { 
        Utility.typeOfSignature("QY&nZ6 /VZm=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QY&nZ6 /VZm=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "TTwH'1J'=`u05@4X";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("TTwH'1J'=`u05@4X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TTwH'1J'=`u05@4X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantFloat constantFloat0 = new ConstantFloat((-15.615006F));
      String string0 = "r)f9O'$]1*3AtZFAH!J";
      byte[] byteArray0 = Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      Utility.classOrInterface(90);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1409), 83, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(83);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)51;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("hrEl.y\"7i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hrEl.y\"7i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.compactClassName("U@'z*SR/%8B40# wo@K", false);
      try { 
        Utility.typeOfSignature("U@'z*SR/%8B40# wo@K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U@'z*SR/%8B40# wo@K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("java.lang.class");
      assertEquals("java.lang.class", string0);
      
      byte byte0 = Utility.typeOfSignature("CS4UB?816Uh6m");
      assertEquals((byte)5, byte0);
      
      Utility.decode("org.apache.bcel.classfile.LineNumberTable", false);
      String string1 = Utility.classOrInterface((-343));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      int int0 = 92;
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      boolean boolean0 = true;
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1287, 1287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("ifnull\t\t#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull\t\t#0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("oso}I;qiqv(%");
      Utility.accessToString(255, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hAm%LCsI7Jv";
      stringArray0[1] = "se?7O}A.Xy%KE/wJ";
      stringArray0[2] = "public private protected static final volatile transient";
      stringArray0[3] = "7;vvA4bftAzZq&";
      stringArray0[4] = "ifeq";
      stringArray0[5] = "{\"~iUmLS'DHaj";
      stringArray0[6] = "oso}I;qiqv(%";
      Utility.methodTypeToSignature("Loso}I;qiqv(%;", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2206), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.accessToString(39);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      Utility.compactClassName("StackMap", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-82));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((byte) (-82));
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("SV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.replace("'", "'", "'");
      Utility.convertString("'");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('\\');
      Utility.convertString(")");
      String string0 = "^6iT)R";
      Utility.typeOfSignature("S3A[FDH= ,wk\"@K,fk");
      // Undeclared exception!
      try { 
        Utility.signatureToString("# .%eVE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `# .%eVE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.decode(" qVO-$5|-@gmJP> O+", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.searchOpcode("\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\t");
      String string0 = "KEdd4vRm;.*n2ERsL|";
      try { 
        Utility.typeOfSignature("KEdd4vRm;.*n2ERsL|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KEdd4vRm;.*n2ERsL|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      short short0 = Utility.searchOpcode("Q\"e)|j1");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("getfield", false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
      assertEquals("0:    dsub\n1:    lsub\n2:    ineg\n3:    fsub\n4:    lmul\n5:    lsub\n6:    idiv\n7:    isub\n", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      Utility.accessToString((-649));
      Utility.methodSignatureToString("()Lu;", "=?y~8DmShAr49azW&8", "(d.yydm>");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      Utility.classOrInterface(43);
      Utility.methodSignatureToString("()Lu;", "(d.yydm>", "(d.yydm>", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)27;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.toHexString(byteArray0);
      Utility.getSignature(")\t");
      try { 
        Utility.typeOfMethodSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.convertString("The offset cannot be negative");
      try { 
        Utility.typeOfSignature("4<k3CS~%R.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4<k3CS~%R.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.searchOpcode("astore_2");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)48, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skipBytes((byte)63);
      byteSequence0.mark((-1970036289));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = "Us.Fv[]\"";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Us.Fv[]\"";
      stringArray0[2] = "Us.Fv[]\"";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Us.Fv[]\"", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[4] = (byte)26;
      byteArray0[2] = (byte)78;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(86);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-22);
      Utility.classOrInterface(2250);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      short short0 = Utility.searchOpcode("ifnonnull");
      assertEquals((short)199, short0);
      
      int int0 = Utility.clearBit(244, (short)199);
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) "void";
      objectArray0[1] = (Object) "void";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "void";
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2444), 2751);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-107);
      constantPool0.copy();
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)36;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-4313), (-4313), true);
      assertEquals("0:    <illegal opcode>\n1:    fcmpl\n2:    istore_1\n3:    <illegal opcode>\n4:    fload_2\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")", (String) null, "goto_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("LhAm%LCsI7Jv;V");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)52;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte) (-26), true);
      assertEquals("0:    <illegal opcode>\n1:    caload\n", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.accessToString(39);
      Utility.compactClassName("hY mbx.i", "fdiv", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('U');
      Utility.convertString("# .%eVE");
      try { 
        Utility.typeOfSignature("# .%eVE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: # .%eVE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)72;
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("O!xchCI3qqC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O!xchCI3qqC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.setBit((-1), (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-96);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((byte)2);
      Utility.classOrInterface((byte)0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = Utility.fillup("ifge", 3225, true, 'H');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.signatureToString("JS'<MF{>0Z(b,6K,1", true);
      Utility.accessToString((int) (byte) (-61));
      Utility.typeOfSignature("JS'<MF{>0Z(b,6K,1");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(string0);
      assertEquals((byte)1, constantUtf8_0.getTag());
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.isSet((-864), (-864));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)77;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("return", "Illegal type: ", "ifgt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)20;
      String string0 = "YeZ";
      try { 
        Utility.typeOfSignature("YeZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YeZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(165);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = Utility.accessToString(3020, false);
      assertEquals("protected static volatile transient native interface strictfp", string0);
      
      Utility.compactClassName("Q\"e)|j1", "C}mN:`0Q*T", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q\"e)|j1";
      stringArray0[1] = "l'S{t,&<~x6DM@[";
      byte byte0 = Utility.typeOfSignature("CONSTANT_MethodHandle");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 00 05 10 05 05", string1);
      
      String string2 = Utility.format((-4645), 11, true, '/');
      assertEquals("-4645//////", string2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)5;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('U');
      String string0 = "W69i`h";
      Utility.convertString("W69i`h");
      String string1 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%e<as");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %e<as
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      byte[] byteArray0 = Utility.decode("Dr,:)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.searchOpcode("\t");
      Utility.isSet(179, (short) (-1));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-82), (-3138), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("88 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 88 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)27;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("17 17 1b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fload\t\t%23", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("A$quQ6Iw*{of3", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-170L));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lor", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.compactClassName("\nAttribute(s) = ", "Lfdiv;", true);
      Utility.isSet(146, (-4398));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\nAttribute(s) = ", "Y", "ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Attribute(s) = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-82);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("Fku|kZh;w'2JWL");
      try { 
        Utility.typeOfSignature("H(~N^Z~~YUVV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H(~N^Z~~YUVV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("J),ZF>(PpukV", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace(")\t", (String) null, "u,8c5j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class");
      Utility.accessToString(254, false);
      Utility.isSet(1972, 0);
      Utility.getSignature("class");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Lclass;";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "Lclass;";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "private protected static final synchronized volatile transient";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("pfS}9f|sq{H~#`F#IT", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pfS}9f|sq{H~#`F#IT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byte[] byteArray1 = new byte[3];
      byteSequence0.read();
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)59;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.mark((-1299));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("castore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)20;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)76;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte)23;
      byteArray2[2] = (byte)76;
      byteArray2[3] = (byte)20;
      Utility.encode(byteArray2, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      byteSequence0.skipBytes((-1970036289));
      byteSequence0.mark(85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", ")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \")\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-99);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-1935385497));
      byteSequence0.mark((byte)121);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("fdiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fdiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = Utility.accessToString(92);
      assertEquals("protected static final volatile", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.searchOpcode("protected static final volatile");
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)16;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-113);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (short) (-1), true);
      assertEquals("0:    jsr_w\t\t#-1532292865\n5:    d2l\n", string1);
      
      boolean boolean0 = Utility.isSet((-1580), 47);
      assertTrue(boolean0);
      
      String string2 = Utility.classOrInterface(403);
      assertEquals("class", string2);
      
      String string3 = Utility.convertString(", stack items={");
      assertEquals(", stack items={", string3);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.decode("}gedpuKG&TbWbb$", false);
      try { 
        Utility.methodSignatureReturnType("}gedpuKG&TbWbb$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}gedpuKG&TbWbb$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = Utility.replace("SAME", "SAME", "SAME");
      assertEquals("SAME", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "SAME";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{SAME, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")'?ff=%[65LA6", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(13, byteArray0.length);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(", high = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = "Fku|kZh;w'2JWL";
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-82);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("Fku|kZh;w'2JWL");
      Utility.typeOfSignature("Fku|kZh;w'2JWL");
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      Utility.printArray(objectArray0, true);
      String string0 = Utility.convertString("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}");
      assertEquals("{Fku|kZh;w\\'2JWL, Fku|kZh;w\\'2JWL, Fku|kZh;w\\'2JWL, Fku|kZh;w\\'2JWL, Fku|kZh;w\\'2JWL, Fku|kZh;w\\'2JWL}", string0);
      
      String string1 = Utility.getSignature("trZ].c ");
      assertEquals("LtrZ]/c;", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      objectArray0[4] = (Object) (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)0;
      Utility.convertString("trZ].c ");
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "LtrZ]/c;";
      objectArray1[1] = (Object) (byte)24;
      objectArray1[2] = (Object) (byte)114;
      objectArray1[3] = (Object) (byte)114;
      String string2 = Utility.printArray(objectArray1);
      assertEquals("{LtrZ]/c;, 24, 114, 114}", string2);
      
      String string3 = Utility.compactClassName("invokestatic", true);
      assertEquals("invokestatic", string3);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      Utility.isSet((-3300), 2155);
      Utility.compactClassName("StackMap", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      Utility.signatureToString("StackMap");
      try { 
        Utility.typeOfSignature("<u#t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <u#t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      byte byte1 = (byte)95;
      byteArray0[1] = (byte)95;
      byte byte2 = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byte byte3 = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(192);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((byte) (-126));
      try { 
        Utility.typeOfSignature("8B7Y)0hGa1`J7kRcvjI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8B7Y)0hGa1`J7kRcvjI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("javalang/Oject");
      assertEquals("javalang.Oject", string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte)72;
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$z$z$zHH$zH", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("-K%K>;8QTV");
      Utility.isJavaIdentifierPart('v');
      Utility.convertString("Invalid StackMap frame_type");
      try { 
        Utility.typeOfSignature("-K%K>;8QTV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -K%K>;8QTV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = "fdiv";
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("fdiv");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byte byte1 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[2] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = (-8);
      byteSequence0.skipBytes((-8));
      int int1 = 13;
      byteSequence0.mark(13);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.replace("void", "putfield", "void");
      Utility.compactClassName("fstore_2", "astore_0", true);
      Utility.convertString("fstore_2");
      String string1 = "n]>D6bfF)=90^Uc";
      String string2 = ";+14/X{:";
      int int2 = 252;
      int int3 = 254;
      Attribute[] attributeArray0 = new Attribute[5];
      AnnotationDefault annotationDefault0 = null;
      try {
        annotationDefault0 = new AnnotationDefault(252, 254, byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected element value kind in annotation: 103
         //
         verifyException("org.apache.bcel.classfile.ElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = "\nAttribute(s) = ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(190);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-106);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("\nAttribute(s) = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Attribute(s) = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byte byte0 = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)27);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("i2c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(859);
      try { 
        Utility.typeOfSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.getSignature("fd!P");
      Utility.accessToString(27);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(27);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes(",a&8<65o;4y>%fs**");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,a&8<65o;4y>%fs**
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("A$quQ6Iw*{of3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("A$quQ6Iw*{of3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$quQ6Iw*{of3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("68 bf 81", string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Utility.compactClassName("CHOP ", "CHOP ", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CHOP ";
      stringArray0[1] = "CHOP ";
      stringArray0[2] = "CHOP ";
      stringArray0[3] = "hAm%LCsI7Jv";
      Utility.methodTypeToSignature("orl.apache.bcel.clatsfile.ConstantNameAndType", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CHOP ", "goto", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = "54";
      boolean boolean0 = false;
      Utility.decode("54", false);
      OutputStream outputStream0 = null;
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "54");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fku|kZh;w'2WL", false);
      Utility.classOrInterface((-1939));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, (-1939), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = "LhAm%LCsI7Jv;V";
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 1287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      String string0 = "\nAttribute(s) = ";
      boolean boolean0 = true;
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      Utility.signatureToString("LBSY*ihP~tffDhanV7;", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-91);
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-7);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("52 f9", string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("N$c7I2$Av$9f$9f$$", string0);
      
      String string1 = Utility.compactClassName("fload_3", false);
      assertEquals("fload_3", string1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      String string0 = "C]ve[n]xSmA";
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-70));
      constantPool0.constantToString((Constant) constantDouble0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 186. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}", string0);
      
      Utility.format(1605, 1605, true, '*');
      String string1 = Utility.getSignature("trZ].c ");
      assertEquals("LtrZ]/c;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("07 07 69 07 07 07 07 07", string2);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (-2352), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      try { 
        Utility.typeOfSignature("#I~+x(NAGkZ1rj4\"L}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #I~+x(NAGkZ1rj4\"L}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Utility.format(0, 0, false, '}');
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.replace("class", "N\t", "class");
      Utility.fillup("class", 0, true, '&');
      Utility.compactClassName("class", "class", false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = Utility.accessToString(3020, false);
      assertEquals("protected static volatile transient native interface strictfp", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("bd 00 00 00 00 00 00", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-93);
      byteArray1[2] = (byte) (-93);
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-67);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#163", string2);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Utility.decode("}gedpuKG&TbWbb$", false);
      Utility.equals(byteArray1, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (-1635));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)109, (int) (byte) (-103), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)90;
      byte byte0 = (byte)50;
      byteArray0[8] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-1971331917));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = "}";
      // Undeclared exception!
      try { 
        Utility.signatureToString("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "void";
      Utility.accessToString(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('K');
      String string0 = "# .%eVE";
      Utility.convertString("void");
      try { 
        Utility.typeOfSignature("{_01{AAdYz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {_01{AAdYz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('i');
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifne\t\t#22459", string0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("vv$$$$", string0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Utility.accessToString(92);
      // Undeclared exception!
      try { 
        Utility.signatureToString("protected static final volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected static final volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(166);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(195);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(92, false);
      Utility.searchOpcode("protected static final volatile");
      Utility.isJavaIdentifierPart('J');
      Utility.convertString("protected static final volatile");
      String string0 = ")Y>Wp29";
      try { 
        Utility.typeOfSignature(")Y>Wp29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )Y>Wp29
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u0087');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "C=V0$0Jl";
      // Undeclared exception!
      try { 
        Utility.decode("C=V0$0Jl", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      Utility.convertString("static");
      Utility.isSet((byte)112, (-3300));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 73", string0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.Method");
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[0] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantMethodType0.setDescriptorIndex(48);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-81));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(103, (byte)59);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.compactClassName("\nAttribute(s) = ", "org.apache.bcel.classfile.Method", true);
      assertEquals("\nAttribute(s) = ", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string1 = Utility.accessToString(48, true);
      assertEquals("final", string1);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("ynY>wpV+Q:kfYS\"<S1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1405), 1820);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("JyMu;m@t>48NY%y6");
      assertEquals("JyMu;m@t>48NY%y6", string0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Utility.isSet((-1116), (-1116));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4559, (-592), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("O`hQ:HV;z?&Zh$VE9", false);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 6:    sastore
         // 7:    istore_0
         // 8:    ishr
         // 9:    lstore_0
         // 10:   dload_0
         // 11:   dup_x1
         // 12:   imul
         // 13:   iload\t\t%69
         // 15:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      Utility.classOrInterface((byte) (-63));
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.methodSignatureToString("getstatic", "", "$l$8b$I$A$A$A$A$A$A$A", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("BoottrapMethods", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = Utility.replace("A$quQ6Iw*{of3", "A$quQ6Iw*{of3", "A$quQ6Iw*{of3");
      assertEquals("A$quQ6Iw*{of3", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("A$quQ6Iw*{of3", false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (-93), true);
      assertEquals("3:    fastore\n4:    istore\t\t%73\n6:    dneg\n7:    aload_0\n8:    lshr\n9:    ddiv\n10:   fsub\n11:   baload\n", string1);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = Utility.replace("breakpoint", "dstore_1", "dstore_1");
      assertEquals("breakpoint", string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      boolean boolean1 = Utility.isSet((-3300), (byte)0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), 90, true);
      assertEquals("0:    nop\n", string0);
      
      int int0 = Utility.setBit(3285, (byte) (-113));
      assertEquals(36053, int0);
      
      String string1 = Utility.compactClassName("invokestatic", "invokestatic", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Utility.accessToString(3020, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-46);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("M3i/hCrV#:mshS3*[sZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M3i/hCrV#:mshS3*[sZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-64);
      Object object1 = new Object();
      objectArray0[1] = (Object) (byte) (-79);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-125);
      byteArray1[4] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.printArray(objectArray0, true, true);
      Utility.methodSignatureReturnType("[LUs/Fv;V", true);
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Us.Fv[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Us.Fv[]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = Utility.replace("d", "d", "d");
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nAttribute(s) = ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)43;
      byte byte0 = (byte)32;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 186. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      Utility.printArray(objectArray0, true);
      Utility.convertString("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}");
      String string0 = "trZ].c ";
      Utility.getSignature("trZ].c ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      objectArray0[4] = (Object) (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("*PAp0s|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PAp0s|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)7;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(435, 156);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), (-3324), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22092. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      Utility.codeToString(byteArray0, constantPool0, (-1570), (-1570));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Utility.setBit((-1), (-1));
      Utility.setBit((-1), (-1));
      Utility.compactClassName("UnDO>ZVZq>-%yCZyf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)89;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Utility.compactClassName("trZ].c", "trZ].c", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)75;
      byteArray1[0] = (byte)73;
      byteArray1[3] = (byte)73;
      Utility.equals(byteArray0, byteArray1);
      Utility.isJavaIdentifierPart('m');
      Utility.convertString("getfield");
      Utility.isSet((byte) (-69), (-201));
      String string0 = "float";
      Utility.compactClassName("float", true);
      try { 
        Utility.methodSignatureReturnType("@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Utility.accessToString(3, false);
      Utility.searchOpcode("");
      Utility.isJavaIdentifierPart('y');
      Utility.convertString("{9&7qlRcw4uUldb%Z'");
      String string0 = ")Y>Wp29";
      try { 
        Utility.typeOfSignature("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "if_icmple";
      Utility.setBit((-1760), 174);
      Utility.compactClassName("if_icmple");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1925, 174, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("++NA_[dUBruLq:q_V|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NA_[dUBruLq:q_V|g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Integer integer0 = new Integer(86);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, 2791, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      Utility.compactClassName("{null}", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dmup";
      stringArray0[1] = "{null}";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("{null}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = "LhAm%LCsI7Jv;V";
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("hAm%LCsI7Jv");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)3;
      byte byte0 = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byte byte1 = (byte)23;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)88;
      byte byte2 = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1570), (-3800));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6++NA_[dUBuLq:q_V|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6++NA_[dUBuLq:q_V|g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Utility.replace("LhAdm%LCsI7Jv;V", "LhAdm%LCsI7Jv;V", "LhAdm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAdm%LCsI7Jv;V", true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (-649));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("x*K'kzl3", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)27;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_2", "dload_2", "dload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      String string0 = "MD 532.;di]ew>[=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MD 532.;di]ew>[=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MD 532.;di]ew>[='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)109);
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.Utility$JavaReader", "org.apache.bcel.classfile.Utility$JavaReader");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.apache.bcel.classfile.Utility$JavaReader";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "org.apache.bcel.classfile.Utility$JavaReader";
      objectArray0[4] = (Object) byteSequence0;
      PrintStream printStream0 = mockPrintStream0.printf("org.apache.bcel.classfile.Utility$JavaReader", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(printStream0, objectArray1);
      assertEquals(47L, mockFile0.length());
      
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaReader");
      Utility.decode("AN-lVUZ? S6.FgRp,", false);
      Utility.classOrInterface((byte)109);
      String string0 = Utility.printArray(objectArray1, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Utility.convertString("LhAm%LCsI7Jv;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byte[] byteArray1 = Utility.decode("LhAm%LCsI7Jv;V", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)94, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Utility.isSet(146, (-4398));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(201);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = "(";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "\"", "\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")'?ff=%[65LA6", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(13, byteArray0.length);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte) (-113);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("g!#[zG%JOgD>N[\"", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dsub", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      Utility.getSignature("U~cal6EMw*-");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[3] = (byte)86;
      byteArray1[1] = (byte) (-107);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      int int0 = new Integer(2);
      String string0 = Utility.codeToString(byteArray1, constantPool0, 2, 103, true);
      assertEquals("2:    nop\n3:    sastore\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Utility.classOrInterface(181);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "class", "class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = "7;vvA4bftAzZq&";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "7;vvA4bftAzZq&";
      objectArray0[1] = (Object) "7;vvA4bftAzZq&";
      objectArray0[2] = (Object) "7;vvA4bftAzZq&";
      objectArray0[3] = (Object) "7;vvA4bftAzZq&";
      objectArray0[4] = (Object) "7;vvA4bftAzZq&";
      objectArray0[5] = (Object) "7;vvA4bftAzZq&";
      objectArray0[6] = (Object) "7;vvA4bftAzZq&";
      objectArray0[7] = (Object) "7;vvA4bftAzZq&";
      Utility.printArray(objectArray0);
      Utility.fillup("", 400, false, '.');
      try { 
        Utility.methodSignatureArgumentTypes("{7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&, 7;vvA4bftAzZq&}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = null;
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.isJavaIdentifierPart('`');
      Utility.isJavaIdentifierPart('-');
      Utility.convertString("ypS");
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)10;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b0 7d 89 0a", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("wide", "areturn", true);
      String string1 = Utility.compactClassName("wide");
      assertEquals("wide", string1);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-121);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      byteSequence0.mark(0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("a>p>r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a>p>r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      String string0 = "CONSTANT_Double";
      boolean boolean0 = false;
      Utility.signatureToString("CONSTANT_Double", false);
      try { 
        Utility.methodSignatureReturnType("Hgg}VFiLYo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hgg}VFiLYo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes(49);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1631, 52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Utility.getSignature("tV]sJZu8W C3Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("o|(!az)SPNG|A1W-cA", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(86);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence1);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readFloat();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes(",}9aK_ImUfSdG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,}9aK_ImUfSdG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4559, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object1 = new Object();
      objectArray0[1] = object1;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-125);
      byteArray1[4] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("[LUs/Fv;V", false);
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Us.Fv[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Us.Fv[]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = Utility.getSignature("LhAm%LCsI7Jv;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("LhAm%LCsI7Jv;V");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.convertString("LLhAm%LCsI7Jv;V;");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)11;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("52 c1 c1 c1 c1 c1 c1 0b", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string3 = Utility.methodSignatureReturnType("LLhAm%LCsI7Jv;V;");
      assertEquals("LhAm%LCsI7Jv", string3);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Utility.classOrInterface(4);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      Utility.isJavaIdentifierPart(']');
      Utility.isJavaIdentifierPart('g');
      Utility.convertString("pop");
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      Utility.isSet(172, 94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-87);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-16);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-2);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("E}Okl_s4b5Dq?", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.fillup("iflt\t\t#-21504", (byte) (-84), false, 'm');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("44 44 81", string0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.isJavaIdentifierPart('i');
      Utility.convertString(">");
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.accessToString(124);
      Utility.searchOpcode("BSY*ihP~tffDhanV7");
      Utility.isJavaIdentifierPart('I');
      Utility.convertString("hAm%LCsI7Jv");
      Utility.typeOfSignature("TlkNz'q\"=?");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2194, 116);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<J~d48-L}$hF`Z^se");
      mockPrintStream0.print(2194);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.close();
      dataOutputStream0.writeChar(116);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte)114);
      assertEquals("0:    fadd\n1:    iconst_4\n2:    iflt\t\t#4212\n5:    ifne\t\t#15393\n8:    dstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Utility.accessToString((-1959));
      Utility.convertString("&W<U|");
      int int0 = 255;
      int int1 = 0;
      Utility.setBit(255, 0);
      try { 
        Utility.methodSignatureArgumentTypes("&W<U|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &W<U|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(";r", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("1#-D. os-N',G:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1#-D. os-N',G:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Utility.printArray(objectArray0);
      Utility.convertString(",");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("6++NA_[dUBuLq:q_V|g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6++NA_[dUBuLq:q_V|g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-73);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = Utility.replace("Za.1_", "Za.1_", "instanceof");
      assertEquals("instanceof", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("Za.1_", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('_');
      Utility.convertString("f9fcZ,POQ;}(hi+wO5");
      int int0 = 249;
      Utility.isSet((-1711), 249);
      Utility.compactClassName("f9fcZ,POQ;}(hi+wO5", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-3300), 140);
      // Undeclared exception!
      try { 
        Utility.compactClassName("m4 ^Z/'", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("Illegal type: ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Fku|kZh;w'2J^L", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(82);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Utility.accessToString((-608), true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-84));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("putfield", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", ", AE*cUw{kmLIckSgV:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Utility.getSignature("q*%1lifu|ByZ2$- p ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2068));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      int int0 = 0;
      int int1 = 2222;
      Utility.setBit(0, 2222);
      String string0 = "I\"`/u .eiu";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$<QVzzrk~c<D`S!IH", "I\"`/u .eiu", "2Q*^9(_]y?~+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $<QVzzrk~c<D`S!IH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = "rv\"Bey*J3";
      Utility.searchOpcode("rv\"Bey*J3");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte) (-128), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Utility.searchOpcode("Q\"e)|j1");
      Utility.compactClassName("C}mN:`0Q*T", "w %3?", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "918de)v1+Ds\\6Co";
      try { 
        Utility.typeOfSignature("918de)v1+Ds\u0006Co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 918de)v1+Ds\u0006Co
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{Fku|kZh;w'2JWL, null, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}", string0);
      
      Utility.format(1605, 1605, true, '*');
      String string1 = Utility.getSignature("trZ].c ");
      assertEquals("LtrZ]/c;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[4] = (byte)105;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      int int0 = Utility.clearBit((-139), 1045);
      assertEquals((-2097291), int0);
      
      String string2 = Utility.compactClassName("", false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte) (-121), true);
      assertEquals("3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 1287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = Utility.getSignature("BSY*ihP~tffDhanV7");
      Utility.compactClassName("\nAttribute(s) = ", "BSY*ihP~tffDhanV7", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)40;
      byteArray0[8] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.signatureToString("LBSY*ihP~tffDhanV7;", true);
      assertEquals("BSY*ihP~tffDhanV7", string1);
      
      String string2 = Utility.compactClassName("LBSY*ihP~tffDhanV7;");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString((int) (byte)40);
      assertEquals("static synchronized", string3);
      
      String string4 = Utility.classOrInterface((byte) (-36));
      assertEquals("interface", string4);
      
      Utility.typeOfSignature("BSY*ihP~tffDhanV7");
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("LBSY*ihP~tffDhanV7;");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string5 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Utility.getSignature("fdiv");
      try { 
        Utility.typeOfSignature(".cEu~NvY$RH~J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .cEu~NvY$RH~J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("}Fy%BIJ.`EodIOv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}Fy%BIJ.`EodIOv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("WD9i`h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WD9i`h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte)110);
      assertEquals("0:    athrow\n1:    fdiv\n2:    lreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      Utility.isJavaIdentifierPart('J');
      Utility.convertString("CLASSPATH component ");
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Constant$1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Constant$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      short short0 = Utility.searchOpcode("iastore");
      assertEquals((short)79, short0);
      
      byte[] byteArray0 = Utility.decode("<J~d48-L}$hF`Z^se", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_1", string0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = "Fku|kZh;w'2JWL";
      Utility.signatureToString("Fku|kZh;w'2JWL", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Utility.searchOpcode("UH20RxVmQ]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = "ifgt";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 56
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      String string0 = ">\t";
      String string1 = "Dz#.{";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = "F[5+LTI@0";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">\t", "Dz#.{", "F[5+LTI@0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('u');
      Utility.convertString("java.lang.class");
      String string0 = "%e<as";
      try { 
        Utility.typeOfSignature("%e<as");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %e<as
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      Utility.accessToString((-649));
      Utility.methodSignatureToString("()Lu;", "=?y~8DmShAr49azW&8", "(d.yydm>");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 675. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("interface");
      Utility.isJavaIdentifierPart('i');
      Utility.compactClassName("StackMap", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-3300));
      byteSequence0.mark(179);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-63);
      byteArray1[2] = (byte)75;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.replace("StackMap", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Utility.searchOpcode("frem");
      Utility.convertString("A}] 6bS*0Rg{");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((short)114);
      byteSequence0.mark((-1832));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.replace("%UrsL$t?p^oM{3", "A}] 6bS*0Rg{", "dup2_x2");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Utility.signatureToString("LhAm%LCsI7Jv;V");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantFloat constantFloat0 = new ConstantFloat((-15.615006F));
      byte[] byteArray0 = Utility.decode("r)f9O'$]1*3AtZFAH!J", false);
      Utility.classOrInterface(90);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1409), 83, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)45;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "r)f9O'$]1*3AtZFAH!J";
      stringArray0[4] = "r)f9O'$]1*3AtZFAH!J";
      stringArray0[5] = "class";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("x:G&Ag9[<a/`fhsx[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[<a/`fhsx[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)90;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)90;
      byteArray1[6] = (byte)90;
      byteArray1[7] = (byte)10;
      byteArray1[8] = (byte)23;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("fdiv", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fdiv");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((-2600));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 51, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Utility.clearBit(4032, (-1791867101));
      Utility.convertString("\"c:;:%+mjs=?{");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "iconst_3", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-262);
      Utility.format((-262), 2977, false, 'O');
      byte byte0 = (byte) (-73);
      byte byte1 = (byte)69;
      byte byte2 = (byte)0;
      byte byte3 = (byte) (-65);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?%$";
      try { 
        Utility.typeOfSignature("?%$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?%$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ynjd{!@.6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ynjd{!@.6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("f2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)66;
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 16384, 148, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribute(s) = ");
      assertEquals("\\nAttribute(s) = ", string0);
      
      String string1 = Utility.methodSignatureReturnType("FULL");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('9');
      String string0 = "W69i`h";
      Utility.convertString("W69i`h");
      String string1 = "pj'+&vN~^9^0%qC{/B";
      try { 
        Utility.typeOfSignature("pj'+&vN~^9^0%qC{/B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pj'+&vN~^9^0%qC{/B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)4;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte) (-106);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = Utility.compactClassName("trZ].c", "trZ].c", false);
      assertEquals("trZ].c", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "trZ].c";
      stringArray0[1] = "trZ].c";
      stringArray0[2] = "trZ].c";
      stringArray0[3] = "hAm%LCsI7Jv";
      String string1 = Utility.methodTypeToSignature("hAm%LCsI7Jv", stringArray0);
      assertEquals("(LtrZ]/c;LtrZ]/c;LtrZ]/c;LhAm%LCsI7Jv;)LhAm%LCsI7Jv;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)2;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60), false);
      assertEquals("0:    <illegal opcode>\n1:    wide\t(wide)\n2:    aload_3\n3:    <illegal opcode>\n4:    iconst_m1\n", string2);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("=`}ma~8mzL!_|@", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("istore_2", string0);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)90;
      byte byte0 = (byte)50;
      byteArray0[8] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-1971331917));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "H'yr,0?%K";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H'yr,0?%K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'yr,0?%K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = Utility.replace("LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V", "LhAm%LCsI7Jv;V");
      assertEquals("LhAm%LCsI7Jv;V", string0);
      
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V", true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1182), (-649));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((-3169));
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("u", stringArray0);
      assertEquals("()Lu;", string1);
      
      Utility.methodSignatureReturnType("C]ve[n]xSmA");
      String string2 = Utility.convertString("=?y~8DmShAr49azW&8");
      assertEquals("=?y~8DmShAr49azW&8", string2);
      
      String string3 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Integer[3](bytes = -3169), CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1182, name_and_type_index = -649), null, null, null, null, null, null, null}", string3);
      
      String string4 = Utility.accessToString((-649));
      assertEquals("public private protected final synchronized volatile native abstract strictfp synthetic annotation enum", string4);
      
      boolean boolean0 = Utility.isSet(86, (-649));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Utility.fillup("double", (-813), true, 'S');
      try { 
        Utility.methodSignatureArgumentTypes("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Utility.getSignature("fdiv");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte) (-26);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-26));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)126;
      byte byte0 = (byte) (-68);
      byteArray1[1] = (byte) (-68);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.mark((byte) (-26));
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("fdiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fdiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-124), (byte) (-124), byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("nop", "nop", "lcmp", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[2] = (byte) (-103);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103), false);
      try { 
        Utility.typeOfSignature("0:    ldiv\n1:    nop\n2:    ifeq\t\t#2\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ldiv
         // 1:    nop
         // 2:    ifeq\t\t#2
         // 5:    nop
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("ynY>wpV+Q:kfS\"<S1", false);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("79 6e 59 3e 77 70 56 2b 51 3a 6b 66 53 22 3c 53 31");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 79 6e 59 3e 77 70 56 2b 51 3a 6b 66 53 22 3c 53 31
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      Utility.convertString("@z");
      try { 
        Utility.typeOfSignature("@z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = "~D.;6j`9Bk";
      try { 
        Utility.methodSignatureArgumentTypes("~D.;6j`9Bk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~D.;6j`9Bk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Utility.methodSignatureReturnType("LhAm%LCsI7Jv;V");
      Utility.searchOpcode("LhAm%LCsI7Jv;V");
      String string0 = "CONSTANT_Double";
      boolean boolean0 = false;
      Utility.signatureToString("CONSTANT_Double", false);
      String string1 = "LSqBY%oW_F{Owj1";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LSqBY%oW_F{Owj1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LSqBY%oW_F{Owj1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Utility.accessToString(92);
      Utility.searchOpcode("protected static final volatile");
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-2339));
      byteSequence0.mark(187);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Utility.getSignature("fdiv");
      String string0 = Utility.replace("fdiv", "swap", "swap");
      assertEquals("fdiv", string0);
      
      Utility.searchOpcode("fdiv");
      String string1 = Utility.methodTypeToSignature("H0\"", (String[]) null);
      assertEquals("()LH0\";", string1);
      
      byte byte0 = Utility.typeOfSignature("ZV");
      assertEquals((byte)4, byte0);
      
      short short0 = Utility.searchOpcode("freturn");
      assertEquals((short)174, short0);
      
      String string2 = Utility.compactClassName("java.lang.", "fdiv", false);
      assertEquals("java.lang.", string2);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString(", locals={");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      Utility.signatureToString("D.F X$LtD;", true);
      String string0 = "S[seqp21t^VEukNX \"_";
      Utility.methodSignatureReturnType("S[seqp21t^VEukNX \"_", true);
      try { 
        Utility.methodSignatureReturnType(">8gux");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>8gux'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " arg";
      stringArray0[1] = "fdiv";
      stringArray0[2] = "putstatic";
      String string0 = Utility.methodTypeToSignature(" arg", stringArray0);
      assertEquals("(Larg;Lfdiv;Lputstatic;)Larg;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_0", string1);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("96 96 96 96 00 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpg", string1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[1] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[2] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[3] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[4] = (Object) "Fku|kZh;w'2JWL";
      objectArray0[5] = (Object) "Fku|kZh;w'2JWL";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL, Fku|kZh;w'2JWL}", string0);
      
      Utility.format(1640, 1640, true, '*');
      String string1 = Utility.getSignature("trZ].c ");
      assertEquals("LtrZ]/c;", string1);
      
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1413, (-1256));
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Utility.decode("arraylength", false);
      Utility.classOrInterface(52);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(3ngt)*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3ngt)*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = Utility.getSignature("q*%1lifu|ByZ2$- p ");
      assertEquals("Lq*%1lifu|ByZ2$-;", string0);
      
      int int0 = Utility.setBit(188, (-511));
      assertEquals(190, int0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Utility.getSignature("fdiv");
      Utility.compactClassName("\nAttribute(s) = ", "Lfdiv;", true);
      Utility.isSet(146, (-4398));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(201);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Utility.accessToString(3020, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-46);
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "NC\\yYO8r&^F{,Oq!k";
      Utility.searchOpcode("NCyYO8r&^F{,Oq!k");
      Utility.compactClassName("NCyYO8r&^F{,Oq!k", "$+mfxa={St{", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "short";
      stringArray0[1] = "$+mfxa={St{";
      String string1 = "zH'24b-|QN";
      stringArray0[2] = "zH'24b-|QN";
      stringArray0[3] = "short";
      stringArray0[4] = "NCyYO8r&^F{,Oq!k";
      stringArray0[5] = "$+mfxa={St{";
      stringArray0[6] = " q*H";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("short", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.isJavaIdentifierPart('B');
      Utility.searchOpcode("\t");
      Utility.isJavaIdentifierPart('B');
      Utility.convertString("mQ$}8{++c_J: 'yDN6%");
      try { 
        Utility.typeOfSignature(";3_i0SfflNU'xYdR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;3_i0SfflNU'xYdR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = Utility.convertString("L$+mfxa={St{;V");
      assertEquals("L$+mfxa={St{;V", string0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Utility.getSignature("fdiv");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("fdiv", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fdiv");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("Gw_s9c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gw_s9c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      int int0 = (-442);
      Utility.accessToString((-442), false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private protected volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "private protected volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "private protected volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "private protected volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "private protected volatile interface abstract strictfp synthetic annotation enum";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      boolean boolean1 = true;
      int int1 = (-3130);
      MockFile mockFile0 = new MockFile("private protected volatile interface abstract strictfp synthetic annotation enum");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "private protected volatile interface abstract strictfp synthetic annotation enum");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"private protected volatile interface abstract strictfp synthetic annotation enum\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("LA$quQ6Iw*{of3;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      float float0 = new Integer(86);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("A$quQ6Iw*{of3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$quQ6Iw*{of3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(116);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", false);
      Utility.classOrInterface(157);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("invokespecial", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Fku|kZh;w'2JWL";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-82);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('i');
      Utility.convertString("Fku|kZh;w'2JWL");
      Utility.isSet((-3300), (byte) (-82));
      Utility.compactClassName("Fku|kZh;w'2JWL", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-10), (int) (byte) (-82));
      Utility.compactClassName("Fku|kZh;w'2JWL", "access flags\t\t", false);
      Utility.accessToString(81);
      // Undeclared exception!
      try { 
        Utility.signatureToString("t@ZVTf@BW]uEe", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t@ZVTf@BW]uEe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      String string0 = Utility.compactClassName("=5hrUpv");
      assertEquals("=5hrUpv", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ifgt";
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1916), (int) (byte)45, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = "f~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("f~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("?T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-99);
      byteArray0[1] = (byte)121;
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1413, (-1256));
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Utility.decode("arraylength", false);
      Utility.classOrInterface(52);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte) (-121);
      byteArray1[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.skipBytes((-1811));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 994, (int) (byte) (-121), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      boolean boolean1 = Utility.isSet((byte) (-92), 162);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-92), (-3300));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[2] = (byte)44;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("8c 00 2c 00", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("6a.?v`", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("f_oa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f_oa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("918de)vN+Ds(6Co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 918de)vN+Ds(6Co
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(78, 97);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, 9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Utility.replace("ifgt", "monitorenter", "ifgt");
      Utility.searchOpcode("monitorenter");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)65, (-1116));
      Utility.compactClassName("ifgt", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (int) (short)194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Utility.replace("Illegally nested brackets:", "LhAm%LCsI7Jv;V", "Illegally nested brackets:");
      Utility.searchOpcode("ifne");
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-54), (int) (byte) (-54));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Us.Fv[]\"";
      stringArray0[1] = "Us.Fv[]\"";
      stringArray0[2] = " ";
      Utility.methodTypeToSignature(" ", stringArray0);
      try { 
        Utility.methodSignatureReturnType("nrxI`s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nrxI`s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)59);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(507);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("a>p>r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a>p>r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String string0 = Utility.classOrInterface(92);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("class");
      assertEquals("Lclass;", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("Lclass;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)76, (byte)99, (byte)108, (byte)97, (byte)115, (byte)115, (byte)59}, byteArray0);
      assertEquals("dadd", string2);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bastore", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Utility.getSignature("ifne");
      Utility.accessToString(16);
      Utility.compactClassName("`T81hzKr", "ifne", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)20;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte)20;
      byteArray1[6] = (byte)20;
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mhww(QA.Hibx~NJWTJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mhww(QA.Hibx~NJWTJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("VDfgwg1=*gmWvOks/h", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'i';
      Utility.isJavaIdentifierPart('i');
      Utility.isSet((-3300), 2155);
      String string0 = "StackMap";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Utility.getSignature("A$quQ6Iw*{of3");
      Utility.isJavaIdentifierPart('v');
      Utility.isJavaIdentifierPart('2');
      Utility.convertString("!Wr");
      Utility.typeOfSignature("T.1 F]YL/G;jdF");
      try { 
        Utility.methodSignatureReturnType("A$quQ6Iw*{of3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A$quQ6Iw*{of3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
