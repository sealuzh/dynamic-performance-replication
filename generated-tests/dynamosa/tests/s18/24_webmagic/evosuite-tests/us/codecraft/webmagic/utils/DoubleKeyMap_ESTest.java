/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:41:18 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<Object, Integer>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<Object, Integer>>();
      DoubleKeyMap<HashMap<Integer, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, Integer>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Object, Integer> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      doubleKeyMap1.put(":", (Object) map0, ":");
      Map<Object, String> map1 = doubleKeyMap1.remove(":");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.put((Object) integer0, (Object) ":", (Object) class0);
      Map<Object, Object> map1 = doubleKeyMap1.get((Object) integer0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>();
      DoubleKeyMap<HashMap<Integer, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2928);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Object>(class0);
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Object object0 = doubleKeyMap1.remove((Object) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer((-1214));
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Map<Object, Object> map1 = doubleKeyMap1.remove((Object) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap0.put((Object) null, (Object) class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, Object>(class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((HashMap<String, String>) null, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap2 = new DoubleKeyMap<String, String, Integer>((Map<String, Map<String, Integer>>) null);
      Map<Object, Map<Object, HashMap<Object, String>>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap3 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(map0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = doubleKeyMap3.put((Object) doubleKeyMap0, (Object) doubleKeyMap1, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap0.get("rDPS.pD4a6/Sa\"ZYAc", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      doubleKeyMap1.put((Object) doubleKeyMap0, (Object) "", (Object) map0);
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put(":", (Object) map0, ":");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<Object, Map<Integer, HashMap<Integer, String>>>> hashMap0 = new HashMap<String, Map<Object, Map<Integer, HashMap<Integer, String>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Integer, HashMap<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, HashMap<Integer, String>>>(hashMap0, class0);
      HashMap<Integer, HashMap<Integer, String>> hashMap1 = new HashMap<Integer, HashMap<Integer, String>>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Object) class0, (Map<Integer, HashMap<Integer, String>>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>((Map<String, Map<Integer, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<String, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Integer>(map0, class0);
      Map<Integer, Integer> map1 = doubleKeyMap1.get((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      doubleKeyMap1.put("O1!g%.Lh", (Object) map0, "O1!g%.Lh");
      String string0 = doubleKeyMap1.remove("O1!g%.Lh", (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Integer integer0 = new Integer((-2666));
      doubleKeyMap0.put(integer0, integer0, "Ej ~mYM?t,l^x9");
      String string0 = doubleKeyMap0.put(integer0, integer0, "");
      assertEquals("Ej ~mYM?t,l^x9", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      doubleKeyMap0.put((Object) null, "", "zsVJe");
      String string0 = doubleKeyMap0.get((Object) null, "");
      assertNotNull(string0);
      assertEquals("zsVJe", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      doubleKeyMap0.put("ENUjHM\"[p", (Object) null, "'9a(pQZCSAV])PuT");
      String string0 = doubleKeyMap0.remove("ENUjHM\"[p", (Object) null);
      assertEquals("'9a(pQZCSAV])PuT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Map<String, String> map1 = doubleKeyMap0.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }
}
