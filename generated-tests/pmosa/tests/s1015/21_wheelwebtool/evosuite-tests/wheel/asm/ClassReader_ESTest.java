/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:44:34 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 1111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68677
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 8);
      int int0 = classReader1.getItem(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      classReader0.getClassName();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      int int0 = 4096;
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(289);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 1);
      assertEquals(3025, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, (-1521));
      ClassWriter classWriter2 = new ClassWriter((-1364));
      ClassReader classReader2 = new ClassReader("wheel.asm.Frame");
      classReader0.getClassName();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = 'Y';
      charArray0[2] = 'B';
      charArray0[3] = 'n';
      charArray0[4] = 'z';
      charArray0[5] = 'o';
      charArray0[6] = '9';
      charArray0[7] = '';
      // Undeclared exception!
      try { 
        classReader0.readClass(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47806
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, (-1521));
      ClassWriter classWriter2 = new ClassWriter((-1364));
      classReader1.accept((ClassVisitor) classWriter2, attributeArray0, (-469));
      ClassReader classReader2 = new ClassReader("wheel.asm.ClassWriter");
      assertEquals(7316, classReader2.header);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 1);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      String string0 = classReader0.getClassName();
      assertEquals(927, classReader0.header);
      assertEquals("java/lang/Object", string0);
      
      ClassWriter classWriter0 = new ClassWriter(16777215);
      classReader0.accept((ClassVisitor) classWriter0, (-24));
      String string1 = classReader0.getClassName();
      assertEquals("java/lang/Object", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(1112);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      ClassReader classReader1 = new ClassReader("e##Cct#O+QGnCO^p");
      classReader1.readInt(classReader0.header);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 906);
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, (-1521));
      classReader1.accept((ClassVisitor) classWriter1, 205);
      ClassReader classReader2 = new ClassReader("^1\"}d][");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'J';
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(125);
      classReader0.accept((ClassVisitor) classWriter0, 286);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 906);
      classReader0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      assertEquals(3025, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassWriter classWriter2 = new ClassWriter(classReader0, 3025);
      Item[] itemArray0 = new Item[0];
      classWriter2.typeTable = itemArray0;
      classReader0.accept((ClassVisitor) classWriter2, attributeArray0, (-469));
      int int0 = classReader0.readByte(10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 1022);
      ClassWriter classWriter2 = new ClassWriter(classReader0, 4049);
      ClassWriter classWriter3 = new ClassWriter(classReader1, (-3343));
      classReader0.accept((ClassVisitor) classWriter3, attributeArray0, 1643);
      classReader0.getSuperName();
      ClassReader classReader2 = new ClassReader(classReader0.b);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(927);
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.getItem(299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 299
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(10);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 4);
      ClassReader classReader2 = new ClassReader("a||&_o~4q`utz$+Kec");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(72);
      classReader0.accept((ClassVisitor) classWriter0, 4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute[] attributeArray0 = new Attribute[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      Label label0 = new Label();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 906);
      ClassReader classReader2 = new ClassReader("wheel.asm.Frame");
      classReader0.readLong(2320);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'J';
      charArray0[2] = '!';
      charArray0[3] = 'L';
      charArray0[4] = '@';
      charArray0[5] = '.';
      charArray0[6] = '!';
      charArray0[7] = '~';
      charArray0[8] = '@';
      // Undeclared exception!
      try { 
        classReader0.readConst(125, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      classReader0.getClassName();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      int int0 = classReader1.getAccess();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "wheel.asm.Frame";
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '!';
      charArray0[2] = '~';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      // Undeclared exception!
      try { 
        classReader0.readConst(280, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(11659);
      classReader0.accept((ClassVisitor) classWriter0, 11659);
      String string0 = classReader0.getClassName();
      assertEquals("java/lang/Object", string0);
  }
}
