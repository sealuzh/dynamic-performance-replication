/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 16:22:30 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.get("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<String, HashMap<Map<Integer, Object>, Object>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<String, HashMap<Map<Integer, Object>, Object>>>();
      DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Map<Integer, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Map<Integer, Object>, Object>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(1715);
      HashMap<Map<Integer, Object>, Object> hashMap2 = doubleKeyMap0.remove(hashMap1, (String) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>(hashMap0);
      Object object0 = new Object();
      HashMap<String, String> hashMap1 = doubleKeyMap0.remove((String) null, object0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, String>(hashMap0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) "/(Z]9LWA5B4");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(hashMap0);
      Map<String, HashMap<Object, Object>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, HashMap<Integer, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-1926));
      HashMap<Integer, Integer> hashMap1 = doubleKeyMap0.put(hashMap0, integer0, (HashMap<Integer, Integer>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap1.put("", (Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap1.put("$c.'=Q.jCSB|JroVlX", (Object) doubleKeyMap0, (Object) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(4581);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer1 = doubleKeyMap0.put((Object) null, "y+h<`M(mrh", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.get("{R^nu%J", (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Object object0 = doubleKeyMap0.get((Integer) null, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<String, Map<Integer, Object>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Integer, Object>>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap1, "fi7f|8`D^yR!", (Map<Integer, Object>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Object, Map<Integer, Object>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Map<Integer, Object>>>((Map<Object, Map<String, HashMap<Object, Map<Integer, Object>>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, String>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Object>>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      DoubleKeyMap<Object, HashMap<Object, Map<Integer, Object>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Map<Integer, Object>>, Object>();
      Map<HashMap<Object, Map<Integer, Object>>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put("z", (Object) "z", hashMap0);
      HashMap<String, String> hashMap1 = doubleKeyMap0.remove("z", (Object) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put("|YMT", (Object) hashMap0, hashMap1);
      HashMap<String, String> hashMap2 = doubleKeyMap0.put("|YMT", (Object) hashMap1, hashMap1);
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Object>, Map<String, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put("", (Map<Integer, Object>) hashMap0, (Map<String, Object>) hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.get("", (Map<Integer, Object>) hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Map<Integer, Object>, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Map<Integer, Object>, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put("|YMT", (Object) hashMap0, hashMap1);
      HashMap<String, String> hashMap2 = doubleKeyMap0.remove("|YMT", (Object) hashMap1);
      assertNotNull(hashMap2);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Map<String, Object>, Map<Map<Object, String>, Map<Integer, Object>>> hashMap0 = new HashMap<Map<String, Object>, Map<Map<Object, String>, Map<Integer, Object>>>();
      DoubleKeyMap<Map<String, Object>, Map<Object, String>, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Map<Object, String>, Map<Integer, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      doubleKeyMap0.put((Map<String, Object>) hashMap1, (Map<Object, String>) null, (Map<Integer, Object>) hashMap2);
      Map<Map<Object, String>, Map<Integer, Object>> map0 = doubleKeyMap0.remove((Map<String, Object>) hashMap1);
      assertFalse(map0.isEmpty());
  }
}
