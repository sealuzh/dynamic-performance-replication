/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 16:49:11 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0, class0);
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap1 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap1, class0);
      Map<String, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      Map<String, String> map1 = doubleKeyMap0.remove(integer0);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<Integer, Integer>, String>();
      String string0 = doubleKeyMap0.remove((Map<Object, Integer>) null, (Map<Integer, Integer>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<HashMap<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Integer>(hashMap0, class0);
      HashMap<Map<Object, Integer>, Map<Object, Integer>> hashMap1 = new HashMap<Map<Object, Integer>, Map<Object, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Object, Integer>(hashMap1);
      Integer integer0 = doubleKeyMap1.remove((Map<Object, Integer>) null, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) "x 7yg'0vLcEj");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Map<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Map<Object, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Object, Object>();
      Map<Map<Object, Integer>, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Map<Object, Integer>, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Integer>, Integer, Object>(map0);
      Object object0 = doubleKeyMap2.put((Map<Object, Integer>) null, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Map<Object, Integer>, Object> hashMap0 = new HashMap<Map<Object, Integer>, Object>();
      HashMap<Integer, Map<Object, HashMap<Map<Object, Integer>, Object>>> hashMap1 = new HashMap<Integer, Map<Object, HashMap<Map<Object, Integer>, Object>>>();
      DoubleKeyMap<Integer, Object, HashMap<Map<Object, Integer>, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Map<Object, Integer>, Object>>(hashMap1);
      Integer integer0 = new Integer((-425));
      HashMap<Map<Object, Integer>, Object> hashMap2 = doubleKeyMap0.put(integer0, (Object) null, hashMap0);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put((String) null, hashMap0, (String) null);
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.remove((String) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Integer, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = doubleKeyMap0.put(object0, integer0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<Object, Map<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>(hashMap0, class0);
      Map<Object, Integer> map0 = doubleKeyMap0.get((Object) "", (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      Integer integer0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.get(object0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Map<Map<Object, Integer>, HashMap<String, Object>>> hashMap0 = new HashMap<Integer, Map<Map<Object, Integer>, HashMap<String, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Integer>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Integer>, HashMap<String, Object>>(hashMap0, class0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Object, Map<Object, Map<Object, Integer>>> hashMap2 = new HashMap<Object, Map<Object, Map<Object, Integer>>>();
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>(hashMap2);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap2, (Object) doubleKeyMap0, (Map<Object, Integer>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<String, Integer>>> hashMap0 = new HashMap<Object, Map<String, HashMap<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<String, Integer>>(hashMap0, class0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, "&iLenX9|_S;Hs`", hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Map<Object, Integer>, Integer>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Map<Object, Integer>, Integer>, Object>((Map<Integer, Map<Map<Map<Object, Integer>, Integer>, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, Map<Object, Integer>>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Map<Object, Integer>>, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put("1Y+TO_", hashMap0, "1Y+TO_");
      Integer integer0 = new Integer((-1182));
      hashMap0.put((Object) null, integer0);
      String string0 = doubleKeyMap0.remove("1Y+TO_", hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put("1Y+TO_", hashMap0, "");
      String string0 = doubleKeyMap0.remove("1Y+TO_", hashMap0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put("1Y+TO_", hashMap0, "");
      String string0 = doubleKeyMap0.put("1Y+TO_", hashMap0, "1Y+TO_");
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
