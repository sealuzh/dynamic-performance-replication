/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:19:29 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("writeEnum");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sBynta rror,");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-87));
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.parseKey();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sBynta rror,");
      defaultJSONParser0.getObject("sBynta rror,");
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 45, parserConfig0, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "[:K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".!");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sBynta rror,");
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sKA|E1oVnb");
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name");
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([Cz[M");
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K");
      Object object0 = new Object();
      Object object1 = new Object();
      defaultJSONParser0.setContext(object0, (Object) "[:K");
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.GuavaCodec");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "1.2.46";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      HashSet<ThrowableDeserializer> hashSet0 = new HashSet<ThrowableDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("192.46");
      defaultJSONParser0.setResolveStatus(1161);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 6, json : 192.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("V<dGD^{-{5M");
      Hashtable<Point, JobAttributes> hashtable0 = new Hashtable<Point, JobAttributes>();
      defaultJSONParser0.setDateFormat("unterminated json string, ");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("V<dGD^{-{5M");
      Hashtable<Point, JobAttributes> hashtable0 = new Hashtable<Point, JobAttributes>();
      defaultJSONParser0.checkMapResolve(hashtable0, hashtable0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+NY|UlQ uxOduOR2!");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sZ8");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[I");
      Class<MockCalendar> class0 = MockCalendar.class;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "([C)[I", (Object) class0);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("([C)[I");
      defaultJSONParser0.getObject("DG*\"oP)SqmXTcw>`");
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1..6");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      defaultJSONParser0.setContext((Object) "1..6", (Object) decimalFormatSymbols0);
      defaultJSONParser0.popContext();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6<", 2);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "6<");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K");
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "124";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("124");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : 124
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "!+nLyF3@dQq53XHUw";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!+nLyF3@dQq53XHUw");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "!+nLyF3@dQq53XHUw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("192.46", 2904);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("192.46", jSONScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 6, json : 192.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(|.>", parserConfig0);
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" -> ", parserConfig0);
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 2, json :  -> 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F:9lru4ip+<BQ\"UR", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "F:9lru4ip+<BQ\"UR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.ParserConfig@95", parserConfig0, 1347);
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.{}.45", parserConfig0, (-967));
      defaultJSONParser0.popContext();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",8Ux\"SPVopUlOdz", parserConfig0, (-645));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) localDate0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      List<ExtraProcessor> list0 = new Vector<ExtraProcessor>();
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1o2.q6");
      // Undeclared exception!
      try { 
        JSON.parseObject("1o2.q6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`YOX8mzDuc}U#a", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(2009, 2009);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".!");
      defaultJSONParser0.getResolveTaskList();
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(".!", parserConfig0, 2);
      defaultJSONParser1.getExtraTypeProviders();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Object object1 = defaultJSONParser0.resolveReference((String) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name");
      // Undeclared exception!
      try { 
        JSON.parseObject(", name");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , name
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{UEbz:");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{xUEb;z:", parserConfig0);
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(CLjava/lang/String;Ljava/lang/String;)V");
      // Undeclared exception!
      try { 
        JSON.parseObject("(CLjava/lang/String;Ljava/lang/String;)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (CLjava/lang/String;Ljava/lang/String;)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{<Y|=", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : <pos 1, json : {<Y|=
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{<Y|=", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : <pos 1, json : {<Y|=
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N [BUNjcu\"{SQ^", parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("N", object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".2`");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      Object object0 = defaultJSONParser0.resolveReference("1.2.46");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DateFormat.getTimeInstance();
      defaultJSONParser0.getInput();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.checkListResolve(list0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(133);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wa");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Wa
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K");
      defaultJSONParser0.resolveReference("[:K");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Class<MockCalendar>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("192.46");
      defaultJSONParser0.accept(3);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("192.46", "192.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 192.46
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F:9lru4ip+<BQ\"UR", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      defaultJSONParser0.parseExtra("[", "fastjson.parser.autoTypeAccept");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Set");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("r[1yOirX0\"+&xzjI(^$");
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ParseContext parseContext0 = defaultJSONParser1.context;
      TreeSet<Field> treeSet0 = new TreeSet<Field>();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Class<?>) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 2, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".!");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("([C)[I", 0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
      defaultJSONParser0.getExtraTypeProviders();
      DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser("#DZs%:Ry f5}Exc~", parserConfig0, 0);
      defaultJSONParser3.checkListResolve(list0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 2, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      Class<Insets> class0 = Insets.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("InitStringFieldAsEmpty", parserConfig0, 2);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getResolveTaskList();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.parseKey();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 2, 2);
      String string0 = "]`";
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("]`", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",8Ux\"SPVopUlOdz", parserConfig0, (-645));
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) localDate0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ",8Ux\"SPVopUlOdz");
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) period0);
      defaultJSONParser_ResolveTask0.ownerContext = null;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getContext();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("r[1yOirX0\"+&xzjI(^$");
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : r[1yOirX0\"+&xzjI(^$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("rs^)4U;!,$h6t U&u", parserConfig0);
      BigDecimal bigDecimal0 = new BigDecimal((-1759));
      defaultJSONParser1.checkMapResolve(linkedHashMap0, bigDecimal0);
      HashSet<Double> hashSet0 = new HashSet<Double>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("[", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse((Object) defaultJSONParser1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{xUEb;z:", parserConfig0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Object object0 = new Object();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 2, 2);
      defaultJSONParser0.setContext((Object) mockGregorianCalendar0, object0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(mockGregorianCalendar0);
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.parseKey();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 2, 2);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "|DAFbk");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getObject("");
      defaultJSONParser0.getContext();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.handleResovleTask(gridBagConstraints0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.clearAssertionStatus();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$+^", parserConfig0, 0);
      defaultJSONParser0.setConfig(parserConfig0);
      Object object0 = new Object();
      defaultJSONParser0.close();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{[|o=", parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : {[|o=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
      parserConfig0.clearDeserializers();
      Feature feature0 = Feature.UseObjectArray;
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.parseKey();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 2, 2);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockGregorianCalendar0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "bNT4p}nt0K");
      ParseContext parseContext1 = defaultJSONParser0.context;
      defaultJSONParser_ResolveTask0.ownerContext = parseContext1;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getObject("");
      defaultJSONParser0.getContext();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.handleResovleTask(gridBagConstraints0);
      assertEquals(0, gridBagConstraints0.ipadx);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("F:9lru4ip+<BQ\"UR", parserConfig0);
      Double double0 = new Double(2907.03171990169);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.accept(1, 1838);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      parserConfig0.clearDeserializers();
      Integer integer0 = new Integer(1);
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) feature0);
      Type[] typeArray0 = new Type[6];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "1.2.46";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/reflect/Type;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockMinguoDate0, (Object) "[:K");
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) linkedHashMap0);
      ParserConfig parserConfig1 = new ParserConfig();
      parserConfig1.clearDeserializers();
      Integer integer0 = new Integer(1);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("G05N>Tvf#\"2T9v", parserConfig0);
      defaultJSONParser1.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getObject("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      defaultJSONParser0.getContext();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser1.handleResovleTask("OXn?");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parseObject();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("syntax error, expect ");
      // Undeclared exception!
      try { 
        defaultJSONParser1.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ParserConfig parserConfig0 = new ParserConfig(true);
          DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
          LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
          parserConfig0.clearDeserializers();
          Feature feature0 = Feature.UseObjectArray;
          defaultJSONParser0.setContext((Object) parserConfig0, (Object) feature0);
          Type[] typeArray0 = new Type[0];
          // Undeclared exception!
          try { 
            defaultJSONParser0.parseArray(typeArray0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // syntax error
             //
             verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Tr]eeSet", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : Tr]eeSet
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TxpeNt ':' at ", parserConfig0);
      Object object0 = new Object();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.setContext((Object) gridBagConstraints0, (Object) mockThaiBuddhistDate0);
      DecimalFormatSymbols.getInstance();
      defaultJSONParser0.resolveReference("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("@");
      List<ExtraProcessor> list1 = defaultJSONParser0.getExtraProcessors();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$[1]", parserConfig0);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      defaultJSONParser0.setDateFormat(", name");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.parse((Object) null);
      DefaultJSONParser defaultJSONParser2 = null;
      try {
        defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet", parserConfig0);
      Object object0 = new Object();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 923, 2, 109);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("TreeSet", parserConfig0, 0);
      Time time0 = new Time(2);
      defaultJSONParser1.setContext((Object) "TreeSet", (Object) time0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      defaultJSONParser1.getObject("$.java.text.DecimalFormatSymbols@1073a");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser1.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Type) null, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : TreeSet
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")Z");
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      parserConfig0.clearDeserializers();
      Integer integer0 = new Integer(0);
      Feature feature0 = Feature.UseObjectArray;
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext((Object) feature0, (Object) properties0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("L,5");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      DateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      DateFormat dateFormat1 = defaultJSONParser0.getDateFormat();
      assertTrue(dateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.setContext((Object) mockMinguoDate0, (Object) "[:K");
      defaultJSONParser0.getContext();
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.clearDeserializers();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.setContext((Object) null, (Object) feature0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:K", parserConfig0);
      LinkedHashMap<BigInteger, HttpCookie> linkedHashMap0 = new LinkedHashMap<BigInteger, HttpCookie>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockMinguoDate0, (Object) "[:K");
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) linkedHashMap0);
      ParserConfig parserConfig1 = new ParserConfig();
      parserConfig1.clearDeserializers();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) mockJapaneseDate0);
      Class<String> class0 = String.class;
      ArrayDeque<Feature> arrayDeque0 = new ArrayDeque<Feature>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:K
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ", parserConfig0, 18);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
