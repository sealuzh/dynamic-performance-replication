/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:24:50 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("3G&{[HMw+76<7", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[10];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lexical error at line ";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      Token token0 = jVCParser0.getToken((-1983765120));
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.ReInit((Reader) pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      Token token0 = jVCParser0.getToken((byte)23);
      Token token1 = jVCParser0.getToken(34);
      assertNotSame(token1, token0);
      
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals("_sb.append(\"\u0017\");", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.ReInit((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, pipedInputStream0.available());
      
      jVCParser0.enable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, pipedInputStream0.available());
      
      Token token0 = jVCParser0.getToken(16);
      assertNotNull(token0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token0.toString());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(4, byteArrayInputStream0.available());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\u0000\u0000\u0000\u0000\");", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)0}, byteArray0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(3, byteArrayInputStream0.available());
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced end tag in null, line: 1
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArrayInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(14, byteArrayInputStream0.available());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\n\");\n_sb.append(\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)13}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)13}, byteArray0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(2, byteArrayInputStream0.available());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\uFFFD\\r\");\r", string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)13}, byteArray0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[+");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("[[==");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ch}(katSnyP[P$hv`");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"Ch}(katSnyP[P$hv`\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("after : \"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"after : \\\"\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/13_javaviewcontrol/akAKnr");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "`LKjZS");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "akAKnr";
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      Token token0 = jVCParser0.getToken(4);
      assertNotNull(token0);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals("", token0.toString());
      
      Token token1 = jVCParser0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParser0.ReInit(jVCParserTokenManager0);
      assertEquals(100, jVCParser0.debugColumn);
  }
}
