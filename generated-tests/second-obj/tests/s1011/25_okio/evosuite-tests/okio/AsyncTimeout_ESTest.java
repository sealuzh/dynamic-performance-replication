/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:22:23 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.HashingSink;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.exit(true);
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      assertTrue(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink0.writeDecimalLong(2160L);
      asyncTimeout0.sink(bufferedSink1);
      asyncTimeout0.deadlineNanoTime((-717L));
      asyncTimeout0.exit();
      Buffer buffer1 = new Buffer();
      asyncTimeout0.source(buffer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException(iOException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.exit();
      asyncTimeout0.clearTimeout();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AsyncTimeout.head.deadline(2666L, timeUnit0);
      AsyncTimeout.head.enter();
      AsyncTimeout.head.exit();
      AsyncTimeout.head.timedOut();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      FileSystemHandling.shouldAllThrowIOExceptions();
      asyncTimeout0.deadlineNanoTime(1677L);
      System.setCurrentTimeMillis(1268L);
      asyncTimeout0.enter();
      asyncTimeout0.exit();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-18L));
      asyncTimeout0.clearDeadline();
      mockIOException1.getMessage();
      AsyncTimeout.head.deadlineNanoTime(0L);
      asyncTimeout1.exit((IOException) mockIOException1);
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      asyncTimeout0.source((Source) null);
      asyncTimeout1.deadlineNanoTime();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.newTimeoutException(mockIOException1);
      asyncTimeout0.deadlineNanoTime(0L);
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      mockIOException0.fillInStackTrace();
      asyncTimeout0.timedOut();
      AsyncTimeout.head.deadlineNanoTime(0L);
      asyncTimeout0.newTimeoutException(iOException0);
      AsyncTimeout.head.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.timedOut();
      FileSystemHandling.shouldAllThrowIOExceptions();
      asyncTimeout0.deadlineNanoTime(1677L);
      System.setCurrentTimeMillis(1268L);
      asyncTimeout0.enter();
      asyncTimeout0.exit();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearDeadline();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      mockIOException0.fillInStackTrace();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime(0L);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(iOException0);
      AsyncTimeout.head.enter();
      AsyncTimeout.head.newTimeoutException(interruptedIOException0);
      try { 
        asyncTimeout1.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException0.toString();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.deadlineNanoTime(0L);
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      MockIOException mockIOException2 = new MockIOException();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime(0L);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(iOException0);
      AsyncTimeout.head.enter();
      AsyncTimeout.head.newTimeoutException(interruptedIOException0);
      asyncTimeout1.exit(false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearDeadline();
      Timeout timeout0 = asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head.enter();
      asyncTimeout1.source((Source) null);
      timeout0.deadlineNanoTime();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.deadlineNanoTime(0L);
      MockIOException mockIOException2 = (MockIOException)asyncTimeout0.exit((IOException) mockIOException1);
      mockIOException0.fillInStackTrace();
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException2);
      AsyncTimeout.head.enter();
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)AsyncTimeout.head.newTimeoutException(interruptedIOException0);
      asyncTimeout1.exit((IOException) interruptedIOException1);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        asyncTimeout0.deadline(0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException();
      MockIOException mockIOException2 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearDeadline();
      mockIOException2.getMessage();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout1.deadline(1665L, timeUnit0);
      asyncTimeout0.exit((IOException) mockIOException2);
      mockIOException0.fillInStackTrace();
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      AsyncTimeout.head.enter();
      asyncTimeout2.source((Source) null);
      asyncTimeout2.newTimeoutException(mockIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
