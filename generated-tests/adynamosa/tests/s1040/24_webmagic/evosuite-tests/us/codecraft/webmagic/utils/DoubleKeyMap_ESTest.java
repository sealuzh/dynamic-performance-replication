/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 18:22:14 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Map<String, Object>, String>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Map<String, Object>, String>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Map<String, Object>, String> hashMap2 = new HashMap<Map<String, Object>, String>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Object, String>, Map<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<String, Object>, String>(hashMap0);
      Map<Map<String, Object>, String> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "", "");
      Map<String, String> map0 = doubleKeyMap0.remove(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, HashMap<String, Object>, HashMap<Map<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, HashMap<String, Object>, HashMap<Map<String, Object>, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Map<String, Object>, Object> hashMap2 = new HashMap<Map<String, Object>, Object>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, hashMap1, hashMap2);
      Map<HashMap<String, Object>, HashMap<Map<String, Object>, Object>> map0 = doubleKeyMap0.get((Map<Integer, String>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>(1, 1);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      Integer integer0 = doubleKeyMap0.remove((Object) null, (Object) class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<HashMap<String, String>, String>> hashMap0 = new HashMap<String, Map<HashMap<String, String>, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, String, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap0.remove((HashMap<Object, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      Map<String, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      String string0 = doubleKeyMap0.put(integer0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<HashMap<String, Object>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, String>(map0, class0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer((-2617));
      Integer integer1 = doubleKeyMap2.put((String) null, (Object) doubleKeyMap1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, Object>(class0);
      Map<Object, Map<String, HashMap<String, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Object>>(map0, class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = doubleKeyMap1.put((Object) doubleKeyMap0, "+-Bus", hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Map<String, Object>, Map<String, Object>>, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<HashMap<Map<String, Object>, Map<String, Object>>, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<HashMap<Map<String, Object>, Map<String, Object>>, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<String, Object>, Map<String, Object>>, Object, HashMap<String, String>>(hashMap0);
      HashMap<Map<String, Object>, Map<String, Object>> hashMap1 = new HashMap<Map<String, Object>, Map<String, Object>>();
      HashMap<String, String> hashMap2 = doubleKeyMap0.get(hashMap1, (Object) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<HashMap<Map<String, Object>, Map<String, Object>>, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<HashMap<Map<String, Object>, Map<String, Object>>, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<HashMap<Map<String, Object>, Map<String, Object>>, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<String, Object>, Map<String, Object>>, Object, HashMap<String, String>>(hashMap0);
      HashMap<Map<String, Object>, Map<String, Object>> hashMap1 = new HashMap<Map<String, Object>, Map<String, Object>>();
      HashMap<String, String> hashMap2 = doubleKeyMap1.get(hashMap1, (Object) doubleKeyMap0);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Object object0 = doubleKeyMap0.get((String) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = new Object();
      Map<Object, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Object) hashMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>(0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("E><", "r.", (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>();
      doubleKeyMap0.put(hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase", "Z5dH}uH-u4HP,q_");
      String string0 = doubleKeyMap0.remove(hashMap0, "Z5dH}uH-u4HP,q_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Map<String, Object>, Map<Object, Object>>, Map<Map<String, Object>, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Map<String, Object>, Map<Object, Object>>, Map<Map<String, Object>, Map<Object, Object>>>();
      Map<Map<String, Object>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<String, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, Object, Object>(map0, class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap1.remove((Map<String, Object>) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Object) "wrong proto type map ", integer0, "wrong proto type map ");
      String string0 = doubleKeyMap0.put((Object) "wrong proto type map ", integer0, "");
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Object>();
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(doubleKeyMap0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase", "");
      String string0 = doubleKeyMap0.remove(hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
