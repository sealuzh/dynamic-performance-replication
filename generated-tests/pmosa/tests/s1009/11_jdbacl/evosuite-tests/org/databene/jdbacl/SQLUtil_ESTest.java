/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:04:43 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.constraint.Constraint;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("4hMBxqUwz/B%M!]&L'");
      assertNull(boolean0);
      
      SQLUtil.mutatesStructure("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "constraint";
      stringArray0[1] = null;
      stringArray0[2] = "constraint";
      stringArray0[3] = null;
      stringArray0[4] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[5] = null;
      stringArray0[6] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[7] = "4hMBxqUwz/B%M!]&L'";
      stringArray0[8] = "constraint";
      defaultDBTable0.setSchema((DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (constraint, , constraint, , 4hMBxqUwz/B%M!]&L', , 4hMBxqUwz/B%M!]&L', 4hMBxqUwz/B%M!]&L', constraint)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("constraint = 'constraint' AND null = null AND constraint = 'constraint' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND null = null AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND 4hMBxqUwz/B%M!]&L' = '4hMBxqUwz/B%M!]&L'' AND constraint = 'constraint'", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}Kk>\"kvx/(c";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("}Kk>\"kvx/(c = '}Kk>\"kvx/(c'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      String string0 = SQLUtil.substituteMarkers(" join ", "H]_2Ze/$kL", mockThaiBuddhistDate0);
      assertEquals(" join ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectxzv8(lr`[3an~");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertq) @ g * s) tv -");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("SwBli2#QJ|SC");
      boolean boolean0 = SQLUtil.isProcedureCall("SwBli2#QJ|SC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("inner");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Aa%Z72Op)I@xR/l:2");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("np_", (DBSchema) null);
      boolean boolean0 = SQLUtil.isDDL("create unique index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery("4\"UF,%n!C4[\"n0m_]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A#C5E", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT A#C5E ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("()");
      SQLUtil.normalize("()", false);
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, stringArray0);
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      int int0 = 205;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 205, "rE2H59g%vD");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.removeComments("callq)@g*s)tv-k`");
      String string0 = SQLUtil.normalize("'<[pTZ", false);
      assertEquals("'<[pTZ'", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  UNIQUE (, )", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments("DIvDu#<~jX");
      SQLUtil.parseColumnTypeAndSize("DIvDu#<~jX");
      String string0 = SQLUtil.normalize("create table", true);
      assertEquals("create table", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.removeComments("exec|bstekx;");
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("{fO", stringArray0, "{fO", "create materialized viewhuz'z", stringArray0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.substituteMarkers("4Dd8`BiZ{iV7{u7,", "PRIMARY KEY ", "PRIMARY KEY ");
      SQLUtil.substituteMarkers("PRIMARY KEY ", "4Dd8`BiZ{iV7{u7,", "PRIMARY KEY ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4Dd8`BiZ{iV7{u7,";
      stringArray0[1] = "4Dd8`BiZ{iV7{u7,";
      stringArray0[2] = "PRIMARY KEY ";
      stringArray0[3] = "4Dd8`BiZ{iV7{u7,";
      stringArray0[4] = "4Dd8`BiZ{iV7{u7,";
      stringArray0[5] = "4Dd8`BiZ{iV7{u7,";
      stringArray0[6] = "I\"6rY tJ [dXTLi";
      SQLUtil.leftJoin("4Dd8`BiZ{iV7{u7,", stringArray0, "2K(3k[=", "PRIMARY KEY ", stringArray0);
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.removeComments("callq)@g*s)tv-k`");
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "callq)@g*s)tv-k`", (String[]) null, "callq)@g*s)tv-k`", "callq)@g*s)tv-k`", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog("org.firebirdsql.gds.impl.jni.LocalGDSFactoryPlugin");
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("()");
      SQLUtil.normalize("()", false);
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, stringArray0);
      dBUniqueConstraint0.toString();
      int int0 = 205;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 205, "f_/");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("Jpw7Dq=");
      SQLUtil.innerJoin("()", stringArray0, "", "column null", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.addOptionalCondition("Illegal column type format: ", stringBuilder0);
      SQLUtil.ownerDotComponent(dBSchema0);
      String string0 = "Pq2!XC}ow:cp`p";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(143);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("R2B", stringBuilder0);
      SQLUtil.addOptionalCondition("R2B", stringBuilder1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("R2B");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.removeComments("insertq)@g*s)tv-k`");
      System.setCurrentTimeMillis(0L);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.substituteMarkers("", "", "");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      DBSchema dBSchema0 = new DBSchema("''");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BigDecimal", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
      
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getSchema();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "''";
      String string1 = SQLUtil.renderColumnListWithTableName("&6kPM`\"Z@i6e^", stringArray0);
      assertEquals("&6kPM`\"Z@i6e^.''", string1);
      
      System.setCurrentTimeMillis((-1L));
      String string2 = SQLUtil.normalize(".TW0?:L'j2)FyA", true);
      assertEquals(".TW0 ? : L 'j2)FyA'", string2);
      
      String string3 = SQLUtil.leftJoin("", stringArray0, "", ".TW0?:L'j2)FyA", stringArray0);
      assertEquals("left join  as .TW0?:L'j2)FyA on .'' = .TW0?:L'j2)FyA.''", string3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("<");
      dBCatalog0.setName(">'3x");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      dBCatalog0.getSchema("XSDB3.D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("OJ=<LUC|5E^");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OJ=<LUC|5E^", defaultDBTable0, 10, "XSDB3.D");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("XSDB3.D", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("exec", true, defaultDBTable1, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      dBForeignKeyConstraint0.toString();
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 10);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("CONSTRAINT exec 10XSDB3.D", stringBuilder1.toString());
      assertEquals("CONSTRAINT exec 10XSDB3.D", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.removeComments("DIvDu#<~jX");
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.parseColumnTypeAndSize("truncate>'3x");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1468720190), "truncate>'3x");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("'@nP;s", defaultDBTable0, (-1468720190), "insert>'3x");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBCatalog0.getTable("inner", false);
      Integer integer1 = new Integer((-1468720190));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("R`m<", (DBTable) null, dBDataType0, integer1, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("3^t|(_Ar`_", defaultDBTable0, dBDataType0, integer2, integer1);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , '@nP;s, R`m<, 3^t|(_Ar`_", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("eM3-[\"=1EHy{|5/", true);
      assertEquals("eM3 - [ \"=1EHy{|5/\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("*9ImB~oAx", true);
      assertEquals("* 9ImB ~ oAx", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("<");
      dBCatalog0.setName(">'3x");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      dBCatalog0.getSchema("XSDB3.D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("OJ=<LUC|5E^");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OJ=<LUC|5E^", defaultDBTable0, 10, "XSDB3.D");
      TableContainer tableContainer0 = new TableContainer("<", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      defaultDBColumn0.isIdentical((DBObject) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">'3x";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.innerJoin(">'3x", stringArray0, "XSDB3.D", "XSDB3.D", stringArray0);
      Object object0 = new Object();
      String string1 = SQLUtil.substituteMarkers(">'3x", "select into", object0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "update";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "Comparation only supported for two arguments, found: ";
      stringArray0[4] = "create tablealter tableconstraint";
      stringArray0[5] = "drop materialized view+t&\t)";
      stringArray0[6] = "Comparation only supported for two arguments, found: ";
      stringArray0[7] = null;
      String string0 = SQLUtil.join((String) null, "update", stringArray0, "update", "P,OI=", stringArray0);
      assertEquals("update as P,OI= on update.update = P,OI=.update and update.null = P,OI=.null and update.null = P,OI=.null and update.Comparation only supported for two arguments, found:  = P,OI=.Comparation only supported for two arguments, found:  and update.create tablealter tableconstraint = P,OI=.create tablealter tableconstraint and update.drop materialized view+t&\t) = P,OI=.drop materialized view+t&\t) and update.Comparation only supported for two arguments, found:  = P,OI=.Comparation only supported for two arguments, found:  and update.null = P,OI=.null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "E|Ck<F9,&lKz";
      SQLUtil.parseColumnTypeAndSize("E|Ck<F9,&lKz");
      DBCatalog dBCatalog0 = new DBCatalog("E|Ck<F9,&lKz");
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("E|Ck<F9,&lKz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'E|Ck<F9,&lKz'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("XzvQ8(lr`l[3AN~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: XzvQ8(lr`l[3AN~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("M]bCu#");
      String string0 = SQLUtil.normalize("org.apache.derby.impl.sql.compile.ResultSetNode", false);
      assertEquals("org.apache.derby.impl.sql.compile.ResultSetNode", string0);
      
      String string1 = SQLUtil.normalize("M]bCu#", false);
      assertEquals("M ] bCu #", string1);
      
      boolean boolean1 = SQLUtil.isDDL(">XU2)~,A ZH|ZYo}~");
      assertTrue(boolean1 == boolean0);
      
      String string2 = SQLUtil.renderValue("M ] bCu #");
      assertEquals("'M ] bCu #'", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("select into");
      jdbcClob jdbcClob1 = new jdbcClob("select into");
      Reader reader0 = jdbcClob1.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = RawStoreFactory.PAGE_SIZE_STRING;
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.normalize("XzvQ8(lr`l[3AN~", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XzvQ8 (lr ` l [ 3AN ~";
      stringArray0[1] = "c1";
      stringArray0[2] = "XzvQ8(lr`l[3AN~";
      stringArray0[3] = "XzvQ8(lr`l[3AN~";
      stringArray0[4] = "XzvQ8(lr`l[3AN~";
      stringArray0[5] = "XzvQ8 (lr ` l [ 3AN ~";
      stringArray0[6] = "XzvQ8(lr`l[3AN~";
      stringArray0[7] = "XzvQ8(lr`l[3AN~";
      stringArray0[8] = "XzvQ8 (lr ` l [ 3AN ~";
      SQLUtil.renderColumnListWithTableName("XzvQ8(lr`l[3AN~", stringArray0);
      System.setCurrentTimeMillis((-9));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "XzvQ8(lr`l[3AN~";
      stringArray0[1] = "XzvQ8(lr`l[3AN~";
      stringArray0[2] = "XzvQ8(lr`l[3AN~";
      stringArray0[3] = "XzvQ8(lr`l[3AN~";
      stringArray0[4] = "XzvQ8(lr`l[3AN~";
      stringArray0[5] = "XzvQ8(lr`l[3AN~";
      stringArray0[6] = "XzvQ8(lr`l[3AN~";
      stringArray0[7] = "XzvQ8(lr`l[3AN~";
      stringArray0[8] = "XzvQ8(lr`l[3AN~";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~' AND XzvQ8(lr`l[3AN~ = 'XzvQ8(lr`l[3AN~'", string0);
      
      String string1 = SQLUtil.normalize("rz=dl[0E\"d/7W", false);
      assertEquals("rz = dl [ 0E \"d/7W\"", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "?CSwFb";
      jdbcClob jdbcClob0 = new jdbcClob("?CSwFb");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string1 = "~54i*>#d\\Re";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~54i*>#dRe");
      defaultDBTable0.setName("create table");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~54i*>#dRe";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(143);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("X!h9DXy*ggVwMPL", stringBuilder0);
      SQLUtil.addRequiredCondition("X!h9DXy*ggVwMPL", stringBuilder1);
      SQLUtil.addOptionalCondition("X!h9DXy*ggVwMPL", stringBuilder0);
      assertEquals("X!h9DXy*ggVwMPL and X!h9DXy*ggVwMPL or X!h9DXy*ggVwMPL", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(~r>w=)975\"";
      stringArray0[1] = "(~r>w=)975\"";
      stringArray0[2] = "(~r>w=)975\"";
      stringArray0[3] = "(~r>w=)975\"";
      String string0 = "execute";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(~r>w=)975\"");
      SQLUtil.innerJoin("(~r>w=)975\"", stringArray0, "(~r>w=)975\"", "execute", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = "xCY%N)mDN'ccoi~";
      String string2 = "call(create table )";
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("A5HdCh[f}I9>G/($7", "xCY%N)mDN'ccoi~", "call(create table )");
      jdbcConnectionPool0.dispose();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(11, "5rV|$/}L^Gnj");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unknown constraint type: ", defaultDBTable0, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String string0 = SQLUtil.removeComments("uc$k]@");
      assertEquals("uc$k]@", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NestedRawReadOnlyUserTransaction");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"/T-thrX_Q:";
      stringArray0[1] = "NestedRawReadOnlyUserTransaction";
      stringArray0[2] = "NestedRawReadOnlyUserTransaction";
      stringArray0[3] = "NestedRawReadOnlyUserTransaction";
      stringArray0[4] = "drop materialized view";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NestedRawReadOnlyUserTransaction");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLUtil0;
      PrintWriter printWriter0 = mockPrintWriter0.format("1O", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("43Y10.U");
      PrintWriter printWriter0 = mockPrintWriter0.format("43Y10.U", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("A#C5E", false, (DBTable) null, (String[]) null, (DBTable) null, (String[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" - ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "executenp_", true, (String[]) null);
      String string0 = Constraint.UNIQUE;
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT executenp_ ", string1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      String string2 = SQLUtil.normalize(" does not start with ", true);
      assertEquals("does not start with", string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("gtObjct(String,Map)", defaultDBTable0, (-379820788), "gtObjct(String,Map)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("getObject(String,Map)", false);
      assertEquals("getObject (String, Map)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableconstrant", defaultDBTable0, 10, "rADg IbUr!");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("RADG IBUR!(2)", string0);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "create unique indexconstraint", true, "alter tableconstrant");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("alter tableconstrant NOT NULL", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("#P[/'DmAne", true);
      assertEquals("# P [  / 'DmAne'", string0);
      
      boolean boolean0 = SQLUtil.isQuery(">v_[v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C000", defaultDBTable0, 1231, "C000");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C000");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[1] = (Object) "C000";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("C000", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.removeComments("-,s/cQ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-,s/cQ", true, "-iOL", "-iOL");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK -iOL", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop index", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3), "");
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("C0 0", defaultDBTable0, dBDataType0);
      defaultDBColumn1.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("DATE", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("--", false);
      String string0 = TypeId.BIT_NAME;
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.removeComments("insert");
      TableContainer tableContainer0 = new TableContainer("d3", dBCatalog0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("pSB\"`bF}LU`cJ)i", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
