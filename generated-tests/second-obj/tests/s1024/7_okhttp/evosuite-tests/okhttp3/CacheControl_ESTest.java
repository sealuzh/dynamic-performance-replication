/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:31:59 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(31, timeUnit0);
      assertSame(cacheControl_Builder2, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(1536, timeUnit0);
      assertSame(cacheControl_Builder2, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(29, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      assertSame(cacheControl_Builder1, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.noCache();
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.onlyIfCached();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      boolean boolean0 = cacheControl0.isPublic();
      boolean boolean1 = cacheControl0.isPrivate();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1318), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1318
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noStore();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.noTransform();
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "name";
      stringArray0[1] = "j]q^jv]";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(boolean0);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), int0);
      
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-cache", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(65533, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder0.maxAge(56312, timeUnit0);
      Headers headers0 = new Headers(headers_Builder0);
      boolean boolean0 = cacheControl_Builder0.noStore;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(31, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("min-fresh=31", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(702, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(2147483645, timeUnit1);
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertTrue(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      String string0 = cacheControl0.toString();
      assertEquals("no-transform", string0);
      assertNotNull(string0);
      
      cacheControl0.onlyIfCached();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "cache-control");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("cache-control", "cache-control");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers_Builder0.set("cache-control", "=$,7");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("=$,7", string0);
      
      boolean boolean0 = cacheControl0.isPrivate();
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(boolean0);
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("cache-control");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("cache-control", "cache-control");
      Headers.Builder headers_Builder3 = headers_Builder2.add("cache-control", "[text=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder4 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder3);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.headerValue = "[text=";
      cacheControl0.FORCE_CACHE.toString();
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl_Builder0.noCache();
      headers_Builder0.add("cache-control", "only-if-cached");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_CACHE.toString();
      boolean boolean0 = cacheControl0.noCache();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.noCache();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "public");
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "no-cache");
      Headers.Builder headers_Builder2 = headers_Builder1.set("chunked", "chunked");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.minFreshSeconds();
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(31, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-age=31", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "no-transform");
      Headers headers1 = headers_Builder1.build();
      Headers headers2 = headers_Builder1.build();
      headers1.names();
      headers_Builder0.build();
      headers_Builder1.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cacheControl0.noTransform();
      headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers2);
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertTrue(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "pragma";
      stringArray0[2] = "Gfkes=zhEJ*5";
      stringArray0[3] = "<a1";
      stringArray0[4] = "<a1";
      stringArray0[5] = "\u2026";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      cacheControl0.isPrivate();
      String string0 = cacheControl0.headerValue;
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.onlyIfCached();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control: 0b1j@a");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("cache-control: 0b1j@a");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "private, ");
      headers_Builder1.add("ch.unked", "ch.unked");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = cacheControl0.sMaxAgeSeconds();
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(boolean0);
      
      int int1 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertTrue(int1 == int0);
      assertFalse(cacheControl0.noTransform());
      assertTrue(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("max-stale=", "kxuywbuk");
      headers_Builder0.set("cache-control", "max-stale=");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.headerValue = "\"R.";
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(39, timeUnit0);
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-2386), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -2386
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      cacheControl0.FORCE_NETWORK.headerValue = "^BR\"Rc;U%3";
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
      
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("no-store");
      headers_Builder1.add("Cache-Control", "no-store");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertFalse(cacheControl2.isPublic());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertFalse(cacheControl2.mustRevalidate());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertTrue(cacheControl2.noStore());
      assertFalse(cacheControl2.noTransform());
      
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "max-age");
      headers_Builder0.set("max-age", "cache-control");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      int int0 = MockThread.MAX_PRIORITY;
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.minFresh((-1457745506), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1457745506
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "cache-control");
      headers_Builder0.addLenient("cache-control", "cache-control");
      Headers.Builder headers_Builder2 = headers_Builder1.set("cache-control", "=,;");
      Headers headers0 = new Headers(headers_Builder2);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl0.maxStaleSeconds();
      cacheControl_Builder0.build();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("cache-control", "s-maxage");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers_Builder0.build();
      headers_Builder0.build();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers0 = new Headers(headers_Builder0);
      Headers headers1 = headers_Builder0.build();
      CacheControl.parse(headers1);
      headers1.toString();
      headers_Builder1.build();
      headers_Builder0.addLenient("cache-con?wol");
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "cache-control");
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      Headers.Builder headers_Builder2 = headers_Builder0.addLenient("cache-control", "must-revalidate");
      headers_Builder0.addLenient("jtr##]h#G\"v$%!R|yX", "must-revalidate");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers1 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      headers0.names();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      headers_Builder2.set("must-revalidate", "must-revalidate");
      Headers.of((Map<String, String>) hashMap1);
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      headers_Builder0.build();
      Headers headers2 = new Headers(headers_Builder1);
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      cacheControl1.toString();
      cacheControl1.toString();
      // Undeclared exception!
      try { 
        headers_Builder0.add("must-revalidate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: must-revalidate
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("cache-control", "cache-control");
      Headers.Builder headers_Builder1 = new Headers.Builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.Builder headers_Builder2 = headers_Builder0.addLenient("cache-control", "private");
      Headers headers0 = headers_Builder2.build();
      Headers headers1 = headers_Builder0.build();
      Headers headers2 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      cacheControl0.toString();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      CacheControl.parse(headers1);
      headers_Builder2.addLenient("cache-control", "private");
      cacheControl2.noTransform();
      String string0 = cacheControl1.toString();
      assertEquals("\"R.", string0);
      
      cacheControl2.sMaxAgeSeconds();
      cacheControl2.minFreshSeconds();
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("cache-control", "cache-control");
      Headers.Builder headers_Builder2 = headers_Builder0.set("cache-control", "min-fresh");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers_Builder1.set("cache-control", "min-fresh");
      Headers.Builder headers_Builder3 = headers_Builder2.add("min-fresh", "min-fresh");
      Headers.Builder headers_Builder4 = headers_Builder0.addLenient("cache-control", "0b1j@a");
      Headers headers0 = new Headers(headers_Builder4);
      Headers headers1 = new Headers(headers_Builder3);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      headers0.toMultimap();
      headers_Builder3.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl1.noTransform());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("cache-control", "cache-control");
      Headers.Builder headers_Builder2 = headers_Builder1.add("=$,7", "=$,7");
      Headers.Builder headers_Builder3 = headers_Builder0.addLenient("cache-control", "public");
      Headers headers0 = new Headers(headers_Builder3);
      Headers headers1 = new Headers(headers_Builder2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers1.toMultimap();
      headers1.newBuilder();
      Headers headers2 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers2);
      String string0 = cacheControl0.toString();
      assertEquals("public", string0);
      assertNotNull(string0);
      
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      cacheControl1.headerValue = "maxstale < 0";
      cacheControl1.onlyIfCached();
      int int1 = cacheControl1.minFreshSeconds();
      assertEquals((-1), int1);
  }
}
