/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:07:29 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2084L);
      assertEquals(2084.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2084, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0012360817763692467);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0012360718F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2680.7049);
      int int0 = rationalNumber0.intValue();
      assertEquals(26807049, rationalNumber0.numerator);
      assertEquals(2680, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2084L, 2084L);
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-4683.53958705168));
      assertEquals((-4683.539587059015), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2570.44841822238);
      assertEquals(47938863, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2084L, 2084L);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      assertEquals(1, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2559.7823830729867);
      String string0 = rationalNumber0.toString();
      assertEquals("37488013/14645 (2,559.782)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(315.663141963);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("315.663", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(986.06640129);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 2147483661L);
      assertEquals((-4.656612901266649E-10), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      String string0 = rationalNumber3.toDisplayString();
      assertEquals((-11642486), rationalNumber1.numerator);
      assertEquals("986.066", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483683L), (-2147483683L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1901.993589264);
      assertEquals(1901.990099009901, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483661L, 2147483661L);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1, rationalNumber0.intValue());
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2147483661L);
      assertEquals(2147483647L, rationalNumber1.longValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483661L, 1L);
      assertEquals((-2.147483635E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(18650L, (-2147483670L));
      assertEquals((-8.684582919319709E-6), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.001236081776);
      RationalNumber.valueOf((-2300.76794));
      rationalNumber0.toDisplayString();
      rationalNumber0.negate();
      RationalNumber rationalNumber1 = new RationalNumber((-29753531), (-29753531));
      rationalNumber1.negate();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483670L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483670, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836372399082E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483637", string0);
      assertEquals((-2.147483637E9), rationalNumber0.doubleValue(), 0.01);
  }
}
