/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:40:47 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mn/gaiagpfs+uers/homedirs/apanichella/evosuite_perfoHmance/dataset/gordon_scbipt_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNotNull(httpUrl0);
      assertEquals("http://mn/gaiagpfs+uers/homedirs/apanichella/evosuite_perfoHmance/dataset/gordon_scbipt_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "/";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-2588), "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("~QtxJ]{mg%8H!");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("%7C$$]fkr_%7B");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("~QtxJ]{mg%8H!");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("~QtxJ]{mg%8H!");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ~QtxJ]{mg%8H!
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(3397);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername(".%R");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked(".%R");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for .%R
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "<3S-#";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1015, "<3S-#");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1015, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{");
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.redact();
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(" > ");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("=#8J&pNzr#?g6$~BHD", "=#8J&pNzr#?g6$~BHD");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("9mnt", uRI0.getHost());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p%5Dfkr_%7B", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertEquals("9mnt", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p%5Dfkr_%7B", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("yeg,]");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("yeg,]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: yeg,]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("q\"SSO'o]Tm9m4kR/+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("Ds|X%;XkMm+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("Ds|X%;XkMm+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Ds|X%;XkMm+
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("HG'g'O 65i{:ci+8");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("HG'g'O 65i{:ci+8");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("D");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("5+VVB(o2)m6M1kO@`");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "out == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_script_mosa%2Fprojects%2F7_okhttp%2F-%2F%7C$p]fkr_%7B");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:2fmnt%2fgaiagpfs%2fusers%2fhomedirs%2fapanichella%2fevosuite_performance%2fdataset%2fgordon_script_mosa%2fprojects%2f7_okhttp%2f-%2f%7c$p]fkr_%7b");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:2fmnt%2fgaiagpfs%2fusers%2fhomedirs%2fapanichella%2fevosuite_performance%2fdataset%2fgordon_script_mosa%2fprojects%2f7_okhttp%2f-%2f%7c$p]fkr_%7b
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("\n", "\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("\n");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("F");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("F");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for F
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("[]", "[]");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\u2026]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        HttpUrl.getChecked("q\"SSO'o]Tm9m4kR/");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for q\"SSO'o]Tm9m4kR/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("okio.Buffer");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        HttpUrl.getChecked("P~J(|4KoEI");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for P~J(|4KoEI
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("puG^Q(cQ?o");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("yE[yH.X)dm\"&J?xz");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("yE[yH.X)dm\"&J?xz");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1655);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("Vv");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("Vv");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("Vv");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("Vv");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("encodedPassword == null");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ".%R";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(".%R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .%R
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("y");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("y");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("y", "y");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("3!n3J4(Rkh", "3!n3J4(Rkh");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("\n", "\n");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter(".%2e", ".%2e");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters(".%2e");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked(".%2e");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for .%2e
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("/kB-RHevkd)+\"Ir[?xg&");
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        HttpUrl.getChecked("eU4");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for eU4
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("gaiagpfs");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:%2Fmnt%2Fgaiagpfs%Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_script_msa%2Fprojects%2F7_okhttp%2F-%2F%7C$p]fkr_%7B");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%2Fmnt%2Fgaiagpfs%Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_script_msa%2Fprojects%2F7_okhttp%2F-%2F%7C$p]fkr_%7B
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("\n", "[https:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("L+[vNY,{Dq7=");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse(":");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("L50]+_5_+%L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: L50]+_5_+%L
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = HttpUrl.percentDecode("q3SO'o]m9mskR/+", true);
      assertEquals("q3SO'o]m9mskR/ ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("NDF<R+Su_En@");
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(11, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/NDF%3CR+Su_En@", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals("http", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http://mnt/gaiagpfs/users/hmedirs/apanichella/evosuite_perormance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(httpUrl0, httpUrl1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("c?=5");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("source == this", (String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("::");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("homedirs", (String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("okhttp3.internal.Util");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/panchella/evsuite_perfo5mance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/pan%7Fchella/evsuite_perfo5mance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/pan%7Fchella/evsuite_perfo5mance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\u2026]");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("\u2026]");
      assertNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("$?", "$?");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("{(", "{(");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("{(");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for {(
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/Kaiagpfs/ueershomdirs/apanichella/evosui^e_performance/dataset/gordon_scriptmosa/pr#jects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("jects/7_okhttp/-/|$p]fkr_{", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("jects/7_okhttp/-/|$p]fkr_{", httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/Kaiagpfs/ueershomdirs/apanichella/evosui%5Ee_performance/dataset/gordon_scriptmosa/pr#jects/7_okhttp/-/|$p]fkr_{", httpUrl0.toString());
      assertEquals(7, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("jects/7_okhttp/-/|$p]fkr_{", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("jects/7_okhttp/-/|$p]fkr_{", httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/Kaiagpfs/ueershomdirs/apanichella/evosui%5Ee_performance/dataset/gordon_scriptmosa/pr#jects/7_okhttp/-/|$p]fkr_{", httpUrl0.toString());
      assertEquals(7, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals((-1), uRI0.getPort());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("/Kaiagpfs/ueershomdirs/apanichella/evosui%5Ee_performance/dataset/gordon_scriptmosa/pr", uRI0.getRawPath());
      assertEquals("jects/7_okhttp/-/%7C$p]fkr_%7B", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://mnt/Kaiagpfs/ueershomdirs/apanichella/evosui%5Ee_performance/dataset/gordon_scriptmosa/pr#jects/7_okhttp/-/%7C$p]fkr_%7B", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "out == n:Cl");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("out == n:Cl");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for out == n:Cl
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter(".%2e", ".%2e");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("%DT])}B!2DRxI");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "out == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("g3zv_^");
      assertNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(46, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs$useMs/homedirs/apanichella/evo?uite_prformance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs$useMs/homedirs/apanichella/evo?uite_prformance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(4, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p%5Dfkr_%7B", uRI0.toString());
      assertEquals("mnt", uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p%5Dfkr_%7B", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      StringBuilder stringBuilder0 = new StringBuilder(13);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertFalse(list0.isEmpty());
      assertEquals(11, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("Z(", "Z(");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("Z(", "Z(");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("unexpected scheme: ");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(37);
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("Z(");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:2fmnt%2fgaiagpfs%fusers%Wfhomedirs%2fapanichella%2fevosuite_performance%2fdataset%2gordon_script_mosa%2fprojecs%2f7_okhttp%2f-%2f%7c$p]fkr_%7b");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_pQrfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{", "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_pQrfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(53);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername(".");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_pQrfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{", ".");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiag~fs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\u2026");
      assertEquals("https://mnt/gaiag~fs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/%E2%80%A6", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("..");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("f%7b");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for f%7b
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("l=p-S) ?TL");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("l=p-S) ?TL", ";V$~PuJ/c`E");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("::");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedUsername("NHn7q>EaE6#>Mt:");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      String string0 = "/S1zE6V8];{";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addQueryParameter("/S1zE6V8];{", "..");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.removeAllEncodedQueryParameters("WF%2mAo5CYI+&l");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addQueryParameter("l=p-S) ?TL", "~_UbF@");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.encodedQuery("NHn7q>EaE6#>Mt:");
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment(401, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "yGqF(&j!(=|tJ@k$";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("yGqF(&j!(=|tJ@k$");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("yGqF(&j!(=|tJ@k$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: yGqF(&j!(=|tJ@k$
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("B7/:]ovS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: B7/:]ovS
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        HttpUrl.getChecked("htps:2fmnt%2fgaiagfs%2fusers%2fhomedirs2fapanichella%2fevosuite_performance%2fdataset%2gordon_script_mosa%2fprojects%2f7_okhttp%2f-%2f%7c$p]fkr_%7b");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for htps:2fmnt%2fgaiagfs%2fusers%2fhomedirs2fapanichella%2fevosuite_performance%2fdataset%2gordon_script_mosa%2fprojects%2f7_okhttp%2f-%2f%7c$p]fkr_%7b
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(11, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      
      HttpUrl httpUrl2 = httpUrl1.resolve("%2e.");
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(11, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl1.toString());
      assertEquals("mnt", httpUrl1.host());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.password());
      assertEquals("mnt", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.username());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/", httpUrl2.toString());
      assertEquals(10, httpUrl2.pathSize());
      assertEquals("", httpUrl2.encodedPassword());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertNotNull(httpUrl2);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("]");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("http:/mnt/Kaiagpfs/ueers/homedirs/apanichella/evosui^e_performance/dataset/gordon_script_mosa/pr#jects/7_okhttp/-/|$p]fkr_{");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("http:/mnt/Kaiagpfs/ueers/homedirs/apanichella/evosui^e_performance/dataset/gordon_script_mosa/pr#jects/7_okhttp/-/|$p]fkr_{");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("\u2026]", "gordon_script_mosa");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedPathSegment(".%2e");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment(".");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setEncodedPathSegment(0, "out == n:Cl");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("e!NiARL");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("68p(L]Z^}:J%x^pKn");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("68p(L]Z^}:J%x^pKn");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("68p(L]Z^}:J%x^pKn");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 68p(L]Z^}:J%x^pKn
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("https:2fmnt%2fgaiagpfs%fusers%Wfhomedirs%2fapanichella%2fevosuite_performance%2fdataet%2gordon_script_mosa%2fprojecs%2w7_okhttp%2f%2f%7c$p]fr_%7b");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("https:2fmnt%2fgaiagpfs%fusers%Wfhomedirs%2fapanichella%2fevosuite_performance%2fdataet%2gordon_script_mosa%2fprojecs%2w7_okhttp%2f%2f%7c$p]fr_%7b");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(1016, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:Vmnt/gaiagpf#/users/homedirs/apanich2lla/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{");
      assertEquals(0, httpUrl0.querySize());
      assertEquals("/users/homedirs/apanich2lla/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{", httpUrl0.encodedFragment());
      assertEquals("http://vmnt/gaiagpf#/users/homedirs/apanich2lla/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{", httpUrl0.toString());
      assertEquals("/users/homedirs/apanich2lla/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("vmnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("getsockname failed", 43, 43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        HttpUrl.getChecked("q8-4BRODBa%9:%4=@4+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for q8-4BRODBa%9:%4=@4+
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "[Invalid URL: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[Invalid URL: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [Invalid URL: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:m");
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://m/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("m", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://m/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("m", httpUrl0.host());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okttp/-/|$p]fkr_{");
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{");
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/%7C$$]fkr_%7B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/home!irs/apanichella/evosuite_performance/dataset/gordon_script_mosapjojects/71okhttp/-/|$$]fkr_{");
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://mnt/gaiagpfs/users/home!irs/apanichella/evosuite_performance/dataset/gordon_script_mosapjojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertEquals(10, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      URL uRL0 = httpUrl0.url();
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://mnt/gaiagpfs/users/home!irs/apanichella/evosuite_performance/dataset/gordon_script_mosapjojects/71okhttp/-/%7C$$]fkr_%7B", httpUrl0.toString());
      assertEquals(10, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("mnt", uRL0.getHost());
      assertEquals("http://mnt/gaiagpfs/users/home!irs/apanichella/evosuite_performance/dataset/gordon_script_mosapjojects/71okhttp/-/%7C$$]fkr_%7B", uRL0.toString());
      assertEquals("http://mnt/gaiagpfs/users/home!irs/apanichella/evosuite_performance/dataset/gordon_script_mosapjojects/71okhttp/-/%7C$$]fkr_%7B", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("mnt", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(2227);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:9mnt/gai]gpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("http://9mnt/gai]gpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals("http://9mnt/gai]gpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://9mnt/gai]gpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedir/apanichellaevosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedir/apanichellaevosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("http:/mnt/gaiagpfs/users/homedir/apanichellaevosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("http://mnt/gaiagpfs/users/homedir/apanichellaevosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(10, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("http:9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl0.toString());
      assertEquals("9mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("http://9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/%7C$p]fkr_%7B", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals(22, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("9mnt", httpUrl1.host());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/Kaiagpfs/ueers/homedirs/apanichella/evosui^e_performance/dataset/gordon_script_mosa/pr#jects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs+users/homedirs/apanichella/evosuite_perfoHmance/dataset/gordon_scbipt_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "SHA-1";
      httpUrl0.resolve("SHA-1");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      String string1 = "k2?1~!7op.%Zh19yy";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("k2?1~!7op.%Zh19yy");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("SHA-1");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment((-1705), "k2?1~!7op.%Zh19yy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.scheme("http");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      HttpUrl httpUrl1 = httpUrl0.resolve("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_perfrmance/dataset/gordon_sript_moa/projects/7_okhttq/-/|$p]fkr_{");
      HttpUrl httpUrl2 = httpUrl1.resolve("^`{|");
      httpUrl2.querySize();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:9mnt/gai]gpfs#users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.pathSegments();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("#mb&o.1c)");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "B7:]ovS";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("B7:]ovS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: B7:]ovS
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/71okhttp/-/|$p]fkr_{");
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[Invalid URL: ]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("[Invalid URL: ]");
      String string1 = "fooexample";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("fooexample", "fooexample");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("[Invalid URL: ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [Invalid URL: ]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mntGKaiagpfs/ueers/homedirs/apanichella/evosui^e_performance/dataset9gordon_script_mosa/pr#jects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.host();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.query();
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 2147483645
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter(".%2e", ".%2e");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "{<=6+UDI2vt=M_", 793, 0, true);
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projcts/7_okhttp/-/|$p]fkr_{");
      httpUrl0.password();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.getChecked("https:mnt/gaiag~fs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\u2026");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%2e%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedQueryParameter((String) null, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]f$r_{");
      httpUrl0.equals("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]f$r_{");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/71okhttp/-/|$p]fkr_{");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.removePathSegment(4);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.port();
      httpUrl0.equals("http:9mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":::.')A:]l$j]i";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":::.')A:]l$j]i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :::.')A:]l$j]i
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("\u2026]");
      try { 
        HttpUrl.getChecked("\u2026]");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \u2026]
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:9mnt/gai]gpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.pathSize();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.isHttps();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.newBuilder("Hu:j\"h/4Lgp:r!");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("\r");
      try { 
        HttpUrl.getChecked("::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(1036);
      buffer1.readUtf8Line();
      httpUrl_Builder0.addEncodedPathSegments("\f");
      HttpUrl.parse("\f");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosaprojects/71okhttp/-/|$$]fkr_{");
      httpUrl0.resolve("c:~ Wr~!");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.queryParameterValues("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl0.newBuilder("https:/www.somefakebutwellformedurl.org/fooexample");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      HttpUrl httpUrl1 = httpUrl0.resolve("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
      httpUrl1.encodedPathSegments();
      httpUrl1.equals(httpUrl0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:Ymntsgai]gpfs#users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:Ymntsgai]gpfs#users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/-/|$p]fkr_{
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:7nt/gaiag~fs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\u2026");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gordon_script_mosa");
      HttpUrl.canonicalize("https:7nt/gaiag~fs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\u2026", "Dk.XL\u0004KRW", true, true, false, false);
      httpUrl0.query();
  }
}
