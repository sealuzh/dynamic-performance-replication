/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:17:20 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.sql.compile.NodeFactory;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.constraint.Constraint;
import org.h2.engine.SessionRemote;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = NodeFactory.MODULE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String string1 = Dependable.PERM;
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable2);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Kw#g-D6IY6?a~+?");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("1ipWYfIG+Q", stringBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.addOptionalCondition("Kw#g-D6IY6?a~+?", stringBuilder1);
      assertEquals("Kw#g-D6IY6?a~+? and 1ipWYfIG+Q or Kw#g-D6IY6?a~+?", stringBuilder1.toString());
      assertEquals("Kw#g-D6IY6?a~+? and 1ipWYfIG+Q or Kw#g-D6IY6?a~+?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments("`G/p&6TN");
      DBSchema dBSchema0 = new DBSchema("`G/p&6TN");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("`G/p&6TN", (String) null, dBSchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop table\u012D";
      stringArray0[1] = "drop table\u012D";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#ij0.l";
      stringArray0[1] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[2] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[3] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[4] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[5] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[6] = "rk0{DrWiE$(6r7Cmy=";
      stringArray0[7] = "rk0{DrWiE$(6r7Cmy=";
      String string0 = SQLUtil.innerJoin("rk0{DrWiE$(6r7Cmy=", stringArray0, "org.apache.derby.diag.ErrorLogReader", "update", stringArray0);
      assertEquals("org.apache.derby.diag.ErrorLogReader as update on rk0{DrWiE$(6r7Cmy=.#ij0.l = update.#ij0.l and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy= and rk0{DrWiE$(6r7Cmy=.rk0{DrWiE$(6r7Cmy= = update.rk0{DrWiE$(6r7Cmy=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("selectderby.storage.pageperallocate", 17);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.isQuery(")QGg/U");
      // Undeclared exception!
      try { 
        SQLUtil.join("d<3ti+HqR", "d<3ti+HqR", (String[]) null, "execderby.storage.pageperallocate", ")QGg/U", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "<=[RiN~_sc*U4Y6f#";
      stringArray0[2] = "";
      String string0 = SQLUtil.join("", "<=[RiN~_sc*U4Y6f#", stringArray0, "<=[RiN~_sc*U4Y6f#", ":_ JUGnEI~ d+1yqm^;", stringArray0);
      assertEquals("<=[RiN~_sc*U4Y6f# as :_ JUGnEI~ d+1yqm^; on <=[RiN~_sc*U4Y6f#.null = :_ JUGnEI~ d+1yqm^;.null and <=[RiN~_sc*U4Y6f#.<=[RiN~_sc*U4Y6f# = :_ JUGnEI~ d+1yqm^;.<=[RiN~_sc*U4Y6f# and <=[RiN~_sc*U4Y6f#. = :_ JUGnEI~ d+1yqm^;.", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("S)-D.S6YBJFW>ao\"");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S)-D.S6YBJFW>ao\"", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("rela");
      SQLUtil.addRequiredCondition("rela", stringBuilder0);
      assertEquals("rela and rela", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(1279L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7Y>btdaNgkNpuOALQ##";
      stringArray0[1] = "7Y>btdaNgkNpuOALQ##";
      stringArray0[2] = "7Y>btdaNgkNpuOALQ##";
      stringArray0[3] = ".";
      stringArray0[4] = "7Y>btdaNgkNpuOALQ##";
      String string0 = SQLUtil.renderColumnListWithTableName("7Y>btdaNgkNpuOALQ##", stringArray0);
      assertEquals("7Y>btdaNgkNpuOALQ##.7Y>btdaNgkNpuOALQ##, 7Y>btdaNgkNpuOALQ##.7Y>btdaNgkNpuOALQ##, 7Y>btdaNgkNpuOALQ##.7Y>btdaNgkNpuOALQ##, 7Y>btdaNgkNpuOALQ##.., 7Y>btdaNgkNpuOALQ##.7Y>btdaNgkNpuOALQ##", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[5];
      SQLUtil.normalize("6", true);
      DBDataType.getInstance(7, "call0-6=tbo5mj");
      SQLUtil.leftJoin("/2m;((Np3:g", stringArray0, "6", "6", stringArray0);
      Random.setNextRandom(7);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = FBConnectionProperties.SOCKET_BUFFER_SIZE_PROPERTY;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string1);
      assertNotNull(string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(714, "catalog null");
      Integer integer0 = new Integer((-219878049));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("socketBufferSize", defaultDBTable1, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("socketBufferSize CATALOG NULL(-219878049) NULL", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.normalize("table null", true);
      assertTrue(string1.equals((Object)string0));
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "table null";
      stringArray0[1] = "table null";
      Random.setNextRandom(209);
      Random.setNextRandom(209);
      TableContainer tableContainer0 = new TableContainer("alter index");
      tableContainer0.getTable("BjP1*L");
      DBDataType dBDataType0 = DBDataType.getInstance(209, "create unique index'maxextents'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", (DBTable) null, dBDataType0);
      Integer integer0 = new Integer(2217);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("rename", defaultDBTable1, dBDataType0, integer0, integer1);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("CREATE UNIQUE INDEX'MAXEXTENTS'(2217,1)", string2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("G.iEX7h9HKY", true);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop indexrelation_name");
      DBSchema dBSchema0 = new DBSchema("insert", dBCatalog0);
      dBSchema0.getTable("k\"#=8Y(WZs{UW96j> -");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("insert", (DBTable) null, (-742), "k\"#=8Y(WZs{UW96j> -");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: k\"#=8Y(WZs{UW96j> -
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = AliasInfo.ALIAS_TYPE_SYNONYM_AS_STRING;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "derby.stor", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      String string1 = SQLUtil.renderColumnListWithTableName("UNIQUE ()", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Bs()R>");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Bs()R>";
      stringArray0[1] = "Bs()R>";
      stringArray0[2] = "Bs()R>";
      stringArray0[3] = "[=`K!&4f+Do";
      stringArray0[4] = "!}ex";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Bs()R>", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Bs()R>, Bs()R>, Bs()R>, [=`K!&4f+Do, !}ex)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("G.iEX7h9HY", false);
      assertEquals("G.iEX7h9HY", string0);
      
      boolean boolean0 = SQLUtil.isDDL("k%tFpjDR[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("D", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = SchemaDescriptor.SQLJ_SCHEMA_UUID;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("c013800d-00fb-2648-07ec-000000134f30", stringBuilder0);
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.removeComments("eo");
      String string0 = LogToFile.TEST_LOG_PARTIAL_LOG_WRITE_NUM_BYTES;
      String string1 = SchemaDescriptor.SQLJ_SCHEMA_UUID;
      SQLUtil.normalize("c013800d-00fb-2648-07ec-000000134f30", false);
      StringBuilder stringBuilder0 = new StringBuilder("eo");
      assertEquals("eo", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6";
      stringArray0[1] = "foreig";
      stringArray0[2] = "6";
      stringArray0[3] = "- ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "foreig", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT foreig UNIQUE (6, foreig, 6, - , )", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("}[(GD48P4", stringBuilder0);
      assertEquals("}[(GD48P4", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      ArrayInputStream arrayInputStream0 = new ArrayInputStream();
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLob valueLob0 = ValueLob.createBlob(arrayInputStream0, 571L, sessionRemote0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder(" ADD ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamederby.s");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String string0 = DataDictionary.CREATE_DATA_DICTIONARY_VERSION;
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string1 = SQLUtil.removeComments("^c(];7c");
      assertEquals("^c(];7c", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "- ";
      stringArray0[1] = "- ";
      stringArray0[2] = "6";
      stringArray0[3] = "- ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "- ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"- \" UNIQUE (- , - , 6, - )", string0);
      
      String string1 = SQLUtil.normalize("/2m;((Np3:g", true);
      assertEquals("/ 2m ; ((Np3 : g", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SA%L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "delete", true, stringArray0);
      String string0 = SQLUtil.normalize("delete", false);
      assertEquals("delete", string0);
      
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("UNIQUE (SA%L)", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.normalize("d/{zB+Mc*'F3>", true);
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.typeAndName(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("d / { zB + Mc * 'F3>'", true, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("xF!*~.ND=8XX2hYAGz!");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "foreig", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" null", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("foreig", dBTable0, 1651, "insert");
      boolean boolean0 = SQLUtil.isDDL("XSDF8.S");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("foreig, foreig, foreig, foreig, foreig", string0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT foreig ", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.normalize("table null", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String[] stringArray0 = new String[7];
      String string0 = SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME;
      StringBuilder stringBuilder0 = new StringBuilder("table null");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "table null", false, stringArray0);
      String string1 = LogToFile.TEST_LOG_PARTIAL_LOG_WRITE_NUM_BYTES;
      SQLUtil.constraintName(dBUniqueConstraint0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "- ";
      stringArray0[1] = "6";
      stringArray0[2] = "6";
      stringArray0[3] = "- ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "- ", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/INSERT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LuQ2@{kh*Xt");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LuQ2@{kh*Xt", defaultDBTable0, 13, "insert");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("NEs:q#qJ]7B3g8yX{", true);
      assertEquals("NEs : q # qJ ] 7B3g8yX {", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("6.LuQ2@{kh*Xt", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F]`g%Yr vne1#Zz", defaultDBTable0, (-3847), "6");
      boolean boolean0 = SQLUtil.isDDL("org.apache.derby.iapi.store.raw.FetchDescriptor");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("alter materialized viewalter table", "F]`g%Yr vne1#Zz");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("F]`g%Yr vne1#Zz 6 NULL", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.removeComments("eo");
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_RECOVERY_UNDO_REVERTING_KEY;
      SQLUtil.mutatesStructure("call");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insert";
      stringArray0[1] = null;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("))4c>CS:#_m ~0", defaultDBTable0, (-3847), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?J:)vO=9xf]_6");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("6");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String string0 = DataDictionary.CREATE_DATA_DICTIONARY_VERSION;
      SQLUtil.normalize("?J:)vO=9xf]_6", true);
      SQLUtil.typeAndName(defaultDBTable2);
      DefaultDBTable defaultDBTable3 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = RawStoreFactory.PRE_ALLOCATE_PAGE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("derby.storage.pagePerAllocate");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("}>!452?");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("derby.storage.pagePerAllocate", true, "derby.storage.pagePerAllocate", "6");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT derby.storage.pagePerAllocate CHECK 6", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("8-~_e:hr/!yW8)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8-~_e:hr/!yW8)", dBSchema0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8-~_e:hr/!yW8)";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8-~_e:hr/!yW8)");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8-~_e:hr/!yW8)", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("CONSTRAINT 8-~_e:hr/!yW8) FOREIGN KEY (8-~_e:hr/!yW8)) REFERENCES 8-~_e:hr/!yW8)(8-~_e:hr/!yW8))");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("foreig");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("dZl,3,", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = Dependable.STORED_PREPARED_STATEMENT;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("dZl,3,", true, (String) null, "V.nP=lI]tt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("G.iEX7h9HKY");
      DBSchema dBSchema0 = new DBSchema("G.iEX7h9HKY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("G.iEX7h9HKY", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2942), "G.iEX7h9HKY");
      defaultDBTable0.toString();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.valueOf((-1885134400));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G.iEX7h9HKY", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      VersionNumber.valueOf("G.iEX7h9HKY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G.iEX7h9HKY");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNull(dBCatalog0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = new Integer(1946);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      VersionNumber.valueOf("SET ROLE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d/{zA+Mc*'F37");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("derby.stor", dBCatalog0);
      dBCatalog0.removeSchema(dBSchema0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("create unique index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create unique index'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6";
      stringArray0[1] = "foreig";
      stringArray0[2] = "6";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6";
      stringArray0[2] = "6";
      stringArray0[3] = "6";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/INSERT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LuQ2@{kh*Xt");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LuQ2@{kh*Xt", defaultDBTable0, 17, "insert");
      defaultDBColumn0.isUnique();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      VersionNumber.valueOf("vqPNfvBU?]D}y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("INSERT");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "create tablederby.storage.pageperallocate";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("create tablederby.storage.pageperallocate = 'create tablederby.storage.pageperallocate' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tablederby.storage.pageperallocate", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = LogToFile.TEST_LOG_PARTIAL_LOG_WRITE_NUM_BYTES;
      SQLUtil.constraintName(dBUniqueConstraint0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      defaultDBTable0.getUniqueConstraints(false);
      Character character0 = new Character('=');
      String string2 = SchemaDescriptor.SYSTEM_SCHEMA_UUID;
      String string3 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string3);
      
      String string4 = SQLUtil.removeComments("");
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.valueOf((-1885134400));
      VersionNumber.valueOf("drop materialized viewderby.storage.pageperallocate");
      DBCatalog dBCatalog0 = new DBCatalog();
      Character character0 = Character.valueOf('b');
      String string0 = SQLUtil.substituteMarkers("drop materialized viewderby.storage.pageperallocate", "drop materialized viewderby.storage.pageperallocate", character0);
      assertEquals("'b'", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6";
      stringArray0[1] = "6";
      stringArray0[2] = "6";
      stringArray0[3] = "6";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "6", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/INSERT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LuQ2@{kh*Xt");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LuQ2@{kh*Xt", defaultDBTable0, 17, "insert");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDML("INSERT");
      SQLUtil.removeComments("`B8{/?9>EA4b*ya2}4");
      String string0 = FBConnectionProperties.ROLE_NAME_PROPERTY;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("!#q?HZ~*7}!E:c", true);
      SQLUtil.mutatesDataOrStructure("insert");
      TableContainer tableContainer0 = new TableContainer("\u0001\u00C2");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("s/SU", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = DataDictionary.CREATE_DATA_DICTIONARY_VERSION;
      SQLUtil.normalize("insert", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileDescriptor fileDescriptor1 = mockFileInputStream0.getFD();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      String string1 = NoPutResultSet.RELATIVE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("d/{zA+Mc*'F37", false);
      assertEquals("d / { zA + Mc * 'F37'", string0);
      
      defaultDBTable0.toString();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.valueOf((-1885134400));
      SQLUtil.removeComments("updatederby.storage.pageperallocate");
      String string1 = LogToFile.TEST_LOG_PARTIAL_LOG_WRITE_NUM_BYTES;
      String string2 = SQLUtil.normalize(";z{12\"<cLJ}SJWb_", true);
      assertEquals("; z { 12 \"<cLJ}SJWb_\"", string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("^=wNM0n&~3z");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      dBSchema0.getTables(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewderby.storage.pageperallocate", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2934), " join ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1fqyto", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBColumn0.setDefaultValue("0 38.S");
      dBDataType0.isNumber();
      defaultDBColumn0.setType(dBDataType0);
      boolean boolean1 = SQLUtil.isQuery("8F48q2/");
      assertFalse(boolean1);
      
      SQLUtil.parseColumnTypeAndSize(" JOIN (3)");
      String string0 = Constraint.UNIQUE;
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("1fqyto  JOIN (3) DEFAULT 0 38.S NULL", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)117;
      byteArray0[3] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[5] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[7] = (byte)10;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "selectrelatiJon_2ame";
      stringArray0[1] = "selectrelatiJon_2ame";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("getSubString(", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      String string0 = Dependable.PREPARED_STATEMENT;
      String string1 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint getSubString(", string1);
      assertNotNull(string1);
      
      boolean boolean0 = SQLUtil.isQuery("Illegal column type format: ");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("selectrelatiJon_2ame");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = new Integer(1946);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string0);
      
      String string1 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = SQLUtil.innerJoin(" DEFAULT ", stringArray0, "create materialized viewderby.storage.pageperallocate", "derby.storage.pagep", stringArray0);
      assertEquals("create materialized viewderby.storage.pageperallocate as derby.storage.pagep on ", string2);
      
      String string3 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.create unique index", string3);
      
      boolean boolean1 = SQLUtil.isProcedureCall("*/");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.removeComments("G.iEX7h9HKY");
      PipedReader pipedReader0 = new PipedReader();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      Boolean boolean0 = new Boolean("inner");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Dz.`&SAk?qhy^CD2|");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      VersionNumber.valueOf((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create tablederby.storage.pageperallocate");
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "T +", true, stringArray1);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }
}
