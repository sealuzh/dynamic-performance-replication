/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:49:17 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uM5D";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: YL~T@B*G`D X\\uM5D
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0b]", string0);
      
      byteString0.base64();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.EMPTY.hashCode();
      boolean boolean0 = byteString1.rangeEquals((-1913), byteString0, (-1913), (-2622));
      assertSame(byteString1, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      options0.toArray();
      ByteString byteString1 = options0.get(0);
      byteString0.endsWith(byteString1);
      ByteString.encodeUtf8(" text=");
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)39;
      byteArray1[5] = (byte)0;
      byteString1.lastIndexOf(byteArray1, (int) (byte)0);
      Object object0 = new Object();
      byteString1.EMPTY.equals(object0);
      byteString1.toAsciiUppercase();
      ByteString.encodeUtf8(" > ");
      ByteString byteString2 = byteString0.EMPTY.md5();
      byteString0.rangeEquals(1045, byteArray0, 0, (int) (byte)39);
      byteString1.indexOf(byteString2, 0);
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(0, (byte[]) null, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "M*|0_x{rrnB!0~";
      ByteString byteString0 = ByteString.encodeUtf8("M*|0_x{rrnB!0~");
      Pipe pipe0 = new Pipe(32L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.hmacSha512(byteString1);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pipe pipe0 = new Pipe(4691L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.timeout();
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      byteString0.equals(object0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("wC6qI;~", charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteString1, 530);
      assertEquals((-1), int0);
      
      byteString1.size();
      int int1 = ByteString.codePointIndexToCharIndex("wC6qI;~", (byte)0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = byteString0.toString();
      assertEquals("[hex=bb]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      byteString0.EMPTY.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("_LW@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: _
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)110;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toString();
      boolean boolean0 = byteString0.equals(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha1();
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("(^fRZ=(|(+&a{", charset0);
      ByteBuffer byteBuffer0 = charset0.encode("[size=0]");
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteString0.base64();
      byteString0.lastIndexOf(byteArray0, (-1554));
      boolean boolean1 = byteString2.startsWith(byteString3);
      assertTrue(boolean1 == boolean0);
      
      byteString0.lastIndexOf(byteArray0, (-1));
      String string0 = byteString0.hex();
      assertEquals("3b313b", string0);
      
      byteString2.string(charset0);
      byteString1.string(charset1);
      byteString0.hashCode();
      int int0 = byteString3.indexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int0 = byteString0.indexOf(byteArray0, (-1579));
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      byteString0.EMPTY.base64Url();
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, 4335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[9];
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      byteStringArray0[0] = byteString1;
      ByteString byteString2 = hashingSink0.hash();
      byteStringArray0[1] = byteString2;
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString1);
      Source source0 = hashingSource0.delegate();
      HashingSource hashingSource1 = HashingSource.sha256(source0);
      ByteString byteString3 = hashingSource1.hash();
      byteStringArray0[2] = byteString3;
      Source source1 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source1);
      ByteString byteString4 = realBufferedSource0.readByteString();
      byteStringArray0[3] = byteString4;
      ByteString byteString5 = new ByteString((byte[]) null);
      byteStringArray0[4] = byteString5;
      ByteString byteString6 = hashingSource0.hash();
      byteStringArray0[5] = byteString6;
      ByteString byteString7 = hashingSink0.hash();
      byteStringArray0[6] = byteString7;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)39;
      ByteString byteString8 = new ByteString(byteArray1);
      byteStringArray0[7] = byteString8;
      ByteString byteString9 = realBufferedSource0.readByteString();
      byteStringArray0[8] = byteString9;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString10 = options0.get((byte)0);
      // Undeclared exception!
      try { 
        byteString10.hmacSha256(byteString9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 122, 122);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)80);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      Object object0 = new Object();
      byteString1.equals(object0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = byteString1.sha1();
      Charset charset1 = Charset.defaultCharset();
      ByteString.encodeString("DO3evU>wa", charset0);
      ByteBuffer byteBuffer0 = charset1.encode("");
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteString2.base64();
      byteString3.lastIndexOf(byteArray0, 55);
      byteString2.startsWith(byteString3);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString4.lastIndexOf(byteArray0, (int) (byte) (-1));
      byteString3.hex();
      byteString0.string(charset0);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha256(buffer0, byteString3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)110;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha1();
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("(^fRZ=(|(+&a{", charset0);
      ByteBuffer byteBuffer0 = charset0.encode("[size=0]");
      byteBuffer0.getShort();
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteString0.base64();
      byteString0.lastIndexOf(byteArray0, (-1554));
      boolean boolean1 = byteString2.startsWith(byteString3);
      assertTrue(boolean1 == boolean0);
      
      int int0 = byteString0.lastIndexOf(byteArray0, (-1));
      String string1 = byteString0.hex();
      assertEquals("3bbb3b", string1);
      
      byteString2.string(charset0);
      byteString1.string(charset1);
      byteString0.hashCode();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer1, byteString2);
      ByteString byteString4 = hashingSource1.hash();
      int int1 = byteString2.indexOf(byteString4);
      assertTrue(int1 == int0);
      
      byteString1.asByteBuffer();
      assertFalse(byteString1.equals((Object)byteString4));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)110;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha1();
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("(^fRZ=(|(+&a{", charset0);
      byteString0.base64();
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)49);
      assertEquals(0, int0);
      
      String string0 = byteString0.hex();
      assertEquals("3bbb3b", string0);
      
      byteString2.string(charset0);
      byteString1.string(charset1);
      int int1 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ByteString byteString3 = byteString1.sha512();
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("wC6qI;~", charset0);
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      Object object0 = new Object();
      byteString0.equals(object0);
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString2 = byteString1.sha1();
      Charset charset2 = Charset.defaultCharset();
      Charset charset3 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("", charset3);
      ByteBuffer byteBuffer0 = charset1.encode("");
      ByteString.of(byteBuffer0);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString4.base64();
      byteString4.lastIndexOf(byteArray0, (-47));
      byteString2.startsWith(byteString4);
      byteString1.lastIndexOf(byteArray0, (-4743));
      byteString4.hex();
      byteString3.string(charset2);
      byteString0.string(charset2);
      byteString2.hashCode();
      byteString2.indexOf(byteString4);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1), (-4743));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-1 byteCount=-4743
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("(^fRZ=(|(+&a{", charset0);
      byteString0.string(charset0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)83;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
      
      byteString0.sha1();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.utf8 = "";
      byteString0.toString();
      byteString0.asByteBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 51, 2066);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=51 byteCount=2066
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("(^fRZ=(|+&a{", charset0);
      byteString0.string(charset0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=(^fRZ=(|+&a{]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      String string0 = "";
      ByteString.codePointIndexToCharIndex("", (byte)82);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString1.substring(1600, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.substring(72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("wC6qI;~", charset0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.lastIndexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("tB.Y^.Yy/v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)106;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      String string0 = byteString0.utf8();
      assertEquals("\u001Cv\"Xj", string0);
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("(^fRZ=(|+&a{", charset0);
      byteString0.string(charset0);
      byteString0.hashCode();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
      
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      byteString0.equals(byteArray0);
      byteString0.EMPTY.toAsciiUppercase();
      byteString0.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)5, (byte)5);
      byteArrayInputStream0.close();
      try { 
        ByteString.read(byteArrayInputStream0, 6);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.EMPTY.hashCode();
      byteString1.asByteBuffer();
      Object object0 = new Object();
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      ByteString byteString2 = hashingSink0.hash();
      boolean boolean0 = byteString1.equals(byteString2);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" (to read code point prefixed 0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byteString1.write(dataOutputStream0);
      byteString0.lastIndexOf(byteArray0, 98);
      // Undeclared exception!
      try { 
        Charset.forName("0YyX}O");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0YyX}O
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)5, (byte)5);
      byteArrayInputStream0.close();
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.base64();
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pipe pipe0 = new Pipe(923L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Pipe pipe0 = new Pipe(4691L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.timeout();
      ByteString byteString0 = hashingSource0.hash();
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteString byteString1 = byteString0.md5();
      ByteString.codePointIndexToCharIndex("", 437);
      boolean boolean1 = byteString1.startsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ByteString.codePointIndexToCharIndex("e,]}~", 437);
      assertEquals(5, int0);
      
      ByteString byteString2 = hashingSource0.hash();
      int int1 = byteString0.compareTo(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteArray0, (int) (byte)72);
      int int1 = byteString0.EMPTY.hashCode();
      assertFalse(int1 == int0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteString1.EMPTY.utf8 = "";
      int int2 = ByteString.codePointIndexToCharIndex("Unexpected hex string: ", 4);
      assertEquals(4, int2);
      
      Pipe pipe0 = new Pipe(687L);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(gzipSource0, byteString0);
      ByteString byteString2 = hashingSource0.hash();
      int int3 = byteString0.compareTo(byteString2);
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1156);
      HashingSink hashingSink1 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pipe pipe0 = new Pipe(617L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      pipe_PipeSink0.flush();
      ByteString byteString0 = hashingSource0.hash();
      byteString0.base64Url();
      hashingSource0.timeout();
      byteString0.EMPTY.equals(hashingSource0);
      buffer0.clone();
      realBufferedSink0.write(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.hashCode();
      assertSame(byteString0, byteString1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Pipe pipe0 = new Pipe(4);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString byteString3 = byteString2.substring(4);
      ByteString byteString4 = byteString3.toAsciiLowercase();
      assertEquals(16, byteString4.size());
      assertNotSame(byteString4, byteString3);
      assertFalse(byteString4.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.lastIndexOf(byteArray0, 110);
      byteString1.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.codePointIndexToCharIndex("", (byte)72);
      Pipe pipe0 = new Pipe(110);
      Source source0 = pipe0.source();
      GzipSource gzipSource0 = new GzipSource(source0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(source0, byteString1);
      ByteString byteString2 = hashingSource0.hash();
      byteString2.compareTo(byteString0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("", charset0);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.EMPTY.endsWith(byteString0);
      byteString0.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.codePointIndexToCharIndex(" hex=", 113);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString0.sha1();
      byteString2.substring(5, 5);
      byteString0.md5();
      int int1 = ByteString.codePointIndexToCharIndex(" hex=", 9);
      assertEquals(5, int1);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertTrue(boolean0);
      
      int int2 = ByteString.codePointIndexToCharIndex("", 113);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=bbbbbbb737bbbbbb3bbbbbb7333bb37b73bbbbbb3b3b3bbbbb3733bb3777b777]", string0);
      
      Object object0 = new Object();
      byteString0.md5();
      int int0 = ByteString.codePointIndexToCharIndex("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]", (byte)59);
      assertEquals(59, int0);
      
      ByteString.codePointIndexToCharIndex(",XX?]CW6#kc!", (-177));
      hashingSource0.hash();
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int1 = byteString1.compareTo(byteString0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=bbbbbbb777bbbbbb7bbbbbb7773bb77b77bbbbbb3b7b7bbbbb7b77bb77b7b7bb]", string0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource1.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=bbbbbbb7]", string0);
      
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("[hex=4c0d0057]", charset0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }
}
