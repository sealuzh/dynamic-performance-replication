/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 08:33:09 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<String, Map<String, Object>>> hashMap0 = new HashMap<String, Map<String, Map<String, Object>>>(2476);
      DoubleKeyMap<String, String, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Object>>(hashMap0);
      doubleKeyMap0.put("", "", (Map<String, Object>) null);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<String, Map<Object, Integer>>, Map<Object, Map<Object, Integer>>> hashMap0 = new HashMap<Map<String, Map<Object, Integer>>, Map<Object, Map<Object, Integer>>>();
      DoubleKeyMap<Map<String, Map<Object, Integer>>, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Map<Object, Integer>>, Object, Map<Object, Integer>>(hashMap0);
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Map<String, Map<Object, Integer>>) hashMap1, (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = doubleKeyMap1.remove("", (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, Map<Map<Object, Integer>, Object>>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Map<Map<Object, Integer>, Object>>, HashMap<Object, Object>>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>();
      HashMap<Integer, Map<Map<Object, Integer>, Object>> hashMap0 = new HashMap<Integer, Map<Map<Object, Integer>, Object>>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap0.remove((Object) doubleKeyMap1, (Map<Integer, Map<Map<Object, Integer>, Object>>) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Integer>, Map<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Map<Object, Integer>, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Integer>, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Integer>, Map<Object, Integer>>(hashMap0, class0);
      Map<Map<Object, Integer>, Map<Object, Integer>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, Object>();
      DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Object>, Object>();
      Map<HashMap<Map<Object, Integer>, Object>, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(map0);
      HashMap<Map<Object, Integer>, Map<String, Object>> hashMap1 = new HashMap<Map<Object, Integer>, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Integer>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, String, Object>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<Object, Integer>) hashMap0, (String) null, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Object>();
      Object object0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Map<Object, Integer>) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put((String) null, (Map<Object, Integer>) hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<Map<Object, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, Object>();
      HashMap<Object, Map<Object, Map<Object, Integer>>> hashMap1 = new HashMap<Object, Map<Object, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>(hashMap1, class0);
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<HashMap<Map<Object, Integer>, Integer>, HashMap<Integer, Map<Object, Integer>>>> hashMap0 = new HashMap<Object, Map<HashMap<Map<Object, Integer>, Integer>, HashMap<Integer, Map<Object, Integer>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Integer>, HashMap<Integer, Map<Object, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Integer>, HashMap<Integer, Map<Object, Integer>>>(hashMap0, class0);
      Object object0 = new Object();
      HashMap<Map<Object, Integer>, Integer> hashMap1 = new HashMap<Map<Object, Integer>, Integer>();
      HashMap<Integer, Map<Object, Integer>> hashMap2 = doubleKeyMap0.get(object0, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<Integer, String>> hashMap0 = new HashMap<Map<Object, Integer>, Map<Integer, String>>(2142);
      DoubleKeyMap<Map<Object, Integer>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, String>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap0.get((Map<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, Integer>, Object>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Integer>, Object>, Map<Object, Integer>, String>();
      Map<Object, Map<Object, HashMap<Object, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>(map0);
      Map<Object, HashMap<Object, Integer>> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, Map<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, Map<Object, Integer>>>();
      DoubleKeyMap<Object, Map<String, Object>, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Map<Object, Integer>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(1, 1);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<String, Object>) hashMap1, (Map<Object, Integer>) hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, Map<Map<Object, Integer>, Object>>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Map<Map<Object, Integer>, Object>>, HashMap<Object, Object>>();
      HashMap<Object, Map<Object, Map<Object, Integer>>> hashMap0 = new HashMap<Object, Map<Object, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>(hashMap0, class0);
      HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>> hashMap1 = new HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>(hashMap1);
      Map<Object, Integer> map0 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, (Object) class0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>((Map<Integer, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, String>, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, HashMap<Object, Object>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<HashMap<String, Integer>, Map<Object, Object>> hashMap2 = new HashMap<HashMap<String, Integer>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer(1409);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      hashMap1.compute(hashMap0, biFunction0);
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      hashMap2.put(hashMap3, hashMap1);
      DoubleKeyMap<HashMap<String, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, Object>(hashMap2, class0);
      doubleKeyMap0.remove(hashMap3, (Object) class0);
      assertFalse(hashMap2.isEmpty());
      assertEquals(1, hashMap2.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap0.remove((String) null, "^|");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>(hashMap1);
      hashMap0.put(hashMap2, hashMap1);
      doubleKeyMap0.put(hashMap2, "wrong proto type map ", "");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Map<Object, Integer>>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Map<Object, Integer>>, Integer>();
      Integer integer0 = doubleKeyMap0.get((String) null, (Map<Object, Map<Object, Integer>>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(hashMap0, "", "");
      String string0 = doubleKeyMap0.get(hashMap0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      HashMap<HashMap<Integer, Integer>, Map<Map<Object, Integer>, String>> hashMap1 = new HashMap<HashMap<Integer, Integer>, Map<Map<Object, Integer>, String>>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap1.put(hashMap2, hashMap0);
      HashMap<Object, Integer> hashMap3 = new HashMap<Object, Integer>();
      DoubleKeyMap<HashMap<Integer, Integer>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Map<Object, Integer>, String>(hashMap1);
      doubleKeyMap0.remove(hashMap2, (Map<Object, Integer>) hashMap3);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }
}
