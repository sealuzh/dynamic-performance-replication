/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:24:47 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeforeFilter;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.chrono.Chronology;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\u0002`?X{?lX}FDJ0=^}");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "\u0002`?X{?lX}FDJ0=^}", (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Byte byte0 = new Byte((byte) (-74));
      Class<Byte> class0 = Byte.TYPE;
      dateCodec0.instance.write(jSONSerializer0, byte0, jSONSerializer0, class0, 4414);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("MZQsIN\"NSz`iI");
      DateCodec dateCodec0 = new DateCodec();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) null);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.BASIC_ISO_DATE;
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.write(jSONSerializer0, (Object) null, jSONSerializer0, (Type) null, 15);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("val", parserConfig0, (-517));
      Class<Float> class0 = Float.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) classLoader0, (Object) "val");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"val\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F-Ku;Y:<y#=tU#J2>$9", 42);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DateCodec dateCodec0 = DateCodec.instance;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("F-Ku;Y:<y#=tU#J2>$9");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Double double0 = new Double(1);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) double0, (Object) "F-Ku;Y:<y#=tU#J2>$9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F-Ku;Y:<y#=tU#J2>$9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONSerializer0.getLabelFilters();
      MockZonedDateTime.now();
      Byte byte0 = new Byte((byte) (-74));
      Class<Byte> class1 = Byte.TYPE;
      DateCodec dateCodec0 = new DateCodec();
      MockDate mockDate0 = new MockDate();
      dateCodec0.write(jSONSerializer0, mockDate0, (Object) null, class0, 4414);
      dateCodec0.getFastMatchToken();
      System.setCurrentTimeMillis((byte) (-74));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+FM^C");
      DateCodec dateCodec0 = DateCodec.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateCodec0.getFastMatchToken();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "/Date(2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      DateCodec dateCodec0 = DateCodec.instance;
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35, '\u0081');
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanDecimal('\u0081');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, (-1621), 2, (-1621));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "fastjson.parser.autoTypeAccept", (Object) date0);
      assertSame(object0, date0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      DateCodec dateCodec0 = DateCodec.instance;
      char[] charArray0 = new char[14];
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Float float0 = new Float((double) 25);
      Float.isFinite(25);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      jSONSerializer0.toString();
      dateCodec0.write(jSONSerializer0, float0, serializeConfig0, class0, 25);
      charArray0[8] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25, '\u0000');
      jSONReaderScanner0.scanFloat('\u0000');
      List<BeforeFilter> list0 = jSONSerializer0.beforeFilters;
      MockMinguoDate.now();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00.000");
      Short short0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Date(2", (Object) "");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      char[] charArray0 = new char[30];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1421, (-807));
      boolean boolean0 = jSONSerializer0.out.browserSecure;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), 0, (-807), (-807), 1);
      mockGregorianCalendar0.add(0, 188);
      jSONReaderScanner0.tokenName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeAccept");
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) "0000-00-00T00:00:00");
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      List<BeforeFilter> list0 = jSONSerializer0.getBeforeFilters();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      boolean boolean0 = jSONSerializer0.out.quoteFieldNames;
      int int0 = Calendar.DAY_OF_WEEK_IN_MONTH;
      MockMinguoDate.now();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TimeZone.getDefault();
      DateCodec dateCodec0 = new DateCodec();
      Byte.toUnsignedLong((byte)31);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      Long long0 = new Long(8);
      TypeUtils.castToDate(long0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("0000-00-00", true);
      classLoader0.getParent();
      int int1 = Opcodes.BIPUSH;
      jSONSerializer0.beforeFilters = list0;
      JSON.setDefaultTypeKey("0000-00-00");
      Integer integer0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "0000-00-00");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      DateCodec dateCodec0 = new DateCodec();
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35, 'm');
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Locale locale0 = Locale.ENGLISH;
      JSON.defaultLocale = locale0;
      Locale locale1 = Locale.JAPANESE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSON.DEFFAULT_DATE_FORMAT = "fastjson.parser.autoTypeSupport";
      parserConfig0.global = parserConfig0;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockMinguoDate0, (Object) "/_ate(FHKu;Y<y#=tUJ2>$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/_ate(FHKu;Y<y#=tUJ2>$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      DateCodec dateCodec1 = new DateCodec();
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateCodec1.getFastMatchToken();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00");
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) dateCodec1, (Object) "0001-01-01T00:00:00+08:00");
      MockThaiBuddhistDate.now();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Long.getLong("TQK-J6rEzEi_", (long) 0);
      Short short0 = new Short((short)1774);
      assertEquals((short)1774, (short)short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-871L));
      DateCodec dateCodec0 = DateCodec.instance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Integer integer0 = new Integer(792);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, integer0, (Object) null, (Type) null, 792);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      DateCodec dateCodec0 = new DateCodec();
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Integer integer0 = new Integer(792);
      Long long0 = new Long(792);
      dateCodec0.write(jSONSerializer0, long0, (Object) null, class0, 792);
      assertEquals(26, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate();
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature1;
      JSON.DEFAULT_TYPE_KEY = "0000-0";
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double(0.0);
      dateCodec0.write(jSONSerializer0, double0, (Object) null, (Type) null, (-1313504139));
      boolean boolean0 = serializeWriter0.beanToArray;
      boolean boolean1 = serializeWriter0.useSingleQuotes;
      SerializeConfig.getGlobalInstance();
      Byte byte0 = new Byte((byte) (-44));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      DateCodec dateCodec0 = new DateCodec();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeWriter serializeWriter1 = new SerializeWriter(serializeWriter0, 2210, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1);
      Integer integer0 = new Integer(803);
      Integer integer1 = new Integer((-2329));
      jSONSerializer0.config(serializerFeature0, true);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONSerializer.write((Writer) serializeWriter1, (Object) mockMinguoDate0);
      System.setCurrentTimeMillis(2210);
      DateCodec dateCodec1 = DateCodec.instance;
      Float float0 = new Float((float) (byte)74);
      jSONSerializer0.write("yf>^c+?&?i)C");
      Long long0 = new Long(2210);
      dateCodec0.write(jSONSerializer0, long0, serializerFeature0, class0, (-1994091956));
      System.setCurrentTimeMillis(2210);
  }
}
