/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:07:13 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-1447);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      regexp1.reinit();
      regexp1.max = (-1447);
      Simplify.simplify(regexp1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.min = (-1);
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexp0.subs = regexpArray0;
      Simplify.simplify(regexp0);
      Regexp regexp1 = new Regexp(regexp_Op0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      Simplify.simplify(regexp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp[] regexpArray0 = new Regexp[3];
      regexp1.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexp2.min = (-1113);
      Regexp regexp5 = Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp5.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp1);
      regexp2.cap = 7;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp3);
      Regexp regexp5 = Simplify.simplify(regexp1);
      regexp0.cap = 1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp5.op = regexp_Op1;
      regexp5.max = 1;
      Regexp regexp6 = Simplify.simplify(regexp5);
      Regexp regexp7 = Simplify.simplify(regexp0);
      assertNotSame(regexp7, regexp6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp1);
      regexp3.cap = 7;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp3;
      regexp1.max = (-1144);
      regexp4.runes = null;
      regexpArray0[2] = regexp4;
      regexp1.subs = regexpArray0;
      regexp1.name = null;
      regexp1.toString();
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      regexp0.subs = regexp1.subs;
      Simplify.simplify(regexp0);
      Regexp regexp5 = Simplify.simplify(regexp1);
      regexp5.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp5.op = regexp_Op1;
      regexp1.toString();
      regexp0.flags = 7;
      Regexp regexp6 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp6);
      Regexp regexp7 = Simplify.simplify(regexp5);
      assertNotSame(regexp5, regexp7);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp1.max = 4;
      regexp1.reinit();
      Regexp[] regexpArray0 = new Regexp[3];
      regexp1.subs = regexpArray0;
      regexp2.toString();
      regexp1.toString();
      Simplify.simplify(regexp1);
      regexp2.min = (-1059);
      Regexp regexp4 = Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp4.max = (-1059);
      regexp4.flags = (-842);
      regexp4.op = regexp_Op1;
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertNotSame(regexp5, regexp0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp1);
      regexp2.equals(regexp4);
      regexp3.cap = 7;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp3;
      regexp4.runes = null;
      regexpArray0[2] = regexp4;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      Regexp regexp5 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexp3.equals(regexp6);
      Simplify.simplify(regexp0);
      Regexp regexp7 = Simplify.simplify(regexp1);
      regexp7.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      regexp7.op = regexp_Op2;
      regexp0.flags = 7;
      regexp7.max = 7;
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp7);
      Simplify.simplify(regexp2);
      Regexp regexp8 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp5);
      Regexp regexp9 = Simplify.simplify(regexp8);
      assertSame(regexp8, regexp9);
      
      Regexp regexp10 = Simplify.simplify(regexp1);
      assertTrue(regexp10.equals((Object)regexp9));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp1);
      regexp3.reinit();
      regexp3.cap = 7;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp3;
      regexp4.runes = null;
      regexpArray0[2] = regexp4;
      regexp4.flags = 7;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      regexp3.max = (-1085);
      Regexp regexp5 = Simplify.simplify(regexp1);
      regexp5.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp5.op = regexp_Op1;
      regexp4.min = 7;
      regexp0.flags = 7;
      regexp5.max = 7;
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp2);
      Regexp regexp6 = Simplify.simplify(regexp1);
      Regexp regexp7 = Simplify.simplify(regexp0);
      Regexp regexp8 = Simplify.simplify(regexp7);
      assertNotSame(regexp8, regexp6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp[] regexpArray0 = new Regexp[3];
      regexp1.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp2.min = (-1113);
      Regexp regexp4 = Simplify.simplify(regexp1);
      regexp4.subs = regexp1.subs;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Simplify.simplify(regexp3);
      regexp1.min = 3;
      regexp4.op = regexp_Op1;
      Regexp regexp5 = Simplify.simplify(regexp1);
      assertNotSame(regexp5, regexp0);
  }
}
