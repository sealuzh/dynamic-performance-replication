/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:04:49 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", pos ", 145);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('B');
      assertEquals(145, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '}';
      charArray0[2] = '|';
      charArray0[3] = '\"';
      charArray0[4] = 'F';
      int int0 = 1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      int int1 = 50900;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 50900);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArray0;
      objectArray0[2] = (Object) charArrayReader0;
      objectArray0[3] = (Object) charArray0;
      objectArray0[4] = (Object) jSONScanner0;
      jSONScanner0.lexError("error parse null", objectArray0);
      jSONScanner0.scanLong('Y');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.indexOf('X', 47);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.", 46);
      jSONScanner0.scanFloat(')');
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "utf8 decode error, ";
      JSONScanner jSONScanner0 = new JSONScanner("utf8 decode error, ");
      int int0 = 0;
      jSONScanner0.sp = 0;
      jSONScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "undefined";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 2214);
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '=';
      charArray0[3] = '3';
      charArray0[4] = '4';
      jSONReaderScanner0.scanFieldString(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArray0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError((String) null, objectArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.longValue();
      int int0 = 1966;
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 1966);
      jSONScanner0.scanLong('3');
      jSONScanner0.matchStat = 2214;
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 83);
      JSONScanner jSONScanner0 = new JSONScanner("null", 918);
      jSONScanner0.scanFloat('(');
      jSONScanner0.resetStringPosition();
      assertEquals(918, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      float float0 = jSONScanner0.scanFloat('B');
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.resetStringPosition();
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q'.#6vj6._n}Z;", 34);
      jSONScanner0.scanFloat('K');
      jSONScanner0.scanUUID('R');
      long long0 = jSONScanner0.longValue();
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r", (-1));
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('x');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get", 46);
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      String string0 = jSONScanner0.scanString('@');
      assertNull(string0);
      assertEquals(46, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = '&';
      charArray0[2] = 'V';
      charArray0[3] = 'h';
      charArray0[4] = 'c';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      jSONReaderScanner0.scanString('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      jSONScanner0.scanType("MF)wqs+x@r*2p^j<.y");
      jSONScanner0.nextIdent();
      jSONScanner0.indexOf('', 2256);
      assertEquals(')', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanNumber();
      jSONScanner0.isRef();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - M, info : pos 0, json : MF)wqs+x@r*2p^j<.y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 47);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      jSONScanner0.np = 47;
      charArray0[1] = 'T';
      charArray0[2] = 'O';
      jSONScanner0.close();
      charArray0[3] = '0';
      jSONScanner0.setToken((-861));
      jSONScanner0.features = (-4099);
      charArray0[4] = 'Z';
      charArray0[5] = 'B';
      char char0 = '~';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ; - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get");
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('p');
      jSONScanner0.scanDecimal('Z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<-", (-1));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.nextToken(0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) inputStreamReader0;
      byteArrayInputStream0.mark(138);
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) "";
      jSONReaderScanner0.lexError("", objectArray0);
      jSONReaderScanner0.nextToken((int) (byte)80);
      JSONScanner jSONScanner0 = new JSONScanner("ps4:X_~4Qj]wp1g0", (byte)23);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, (char[]) null, (-318), 1243);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCo]de");
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanDouble('7');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get", 46);
      jSONScanner0.bp = 46;
      jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('@');
      assertEquals(46, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      charArray0[3] = 'J';
      charArray0[4] = 'U';
      charArray0[5] = ')';
      charArray0[6] = 'y';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1954);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 17);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'q';
      charArray0[2] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2879);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanUUID('q');
      jSONReaderScanner0.putChar('P');
      String string0 = jSONReaderScanner0.scanString('6');
      assertEquals(2879, jSONReaderScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^07 w.");
      jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('@');
      jSONScanner0.scanDecimal('/');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 23;
      JSONScanner jSONScanner0 = new JSONScanner("Hf97M!,\"eMy", 23);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      jSONScanner0.scanDecimal('S');
      charArray0[1] = ' ';
      charArray0[2] = 'S';
      charArray0[3] = 'e';
      charArray0[4] = 'k';
      charArray0[5] = 'I';
      jSONScanner0.scanFieldBoolean(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      char char0 = '';
      jSONScanner0.indexOf(char0, int0);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      jSONScanner0.scanNumber();
      jSONScanner0.isRef();
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      char[] charArray1 = new char[8];
      charArray1[0] = '*';
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = '9';
      charArray1[4] = 'q';
      charArray1[5] = 'q';
      charArray1[6] = 'q';
      charArray1[7] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 120, 120);
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.scanFieldInt(charArray1);
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.getTimeZone();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('9');
      assertEquals(120, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<hY#C-DSE", 256);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('H');
      assertEquals(256, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
      
      int int0 = jSONReaderScanner0.scanType("7YO'_5@RD\"s(.9V\"g3");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(58);
      String string0 = "!WbBMQwO!m7ld/-";
      JSONScanner jSONScanner0 = new JSONScanner("!WbBMQwO!m7ld/-", 58);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.skipWhitespace();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'F';
      charArray0[2] = 'Z';
      charArray0[3] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '}';
      charArray0[2] = '|';
      charArray0[3] = '\"';
      charArray0[4] = 'F';
      int int0 = 1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 50900);
      int int1 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArray0;
      objectArray0[2] = (Object) charArrayReader0;
      objectArray0[3] = (Object) charArray0;
      jSONReaderScanner0.scanString('G');
      jSONScanner0.next();
      jSONScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextTokenWithChar('}');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1233));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-997);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-997));
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[6];
      SymbolTable symbolTable0 = new SymbolTable(18);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 855, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\u001F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowSingleQuotes", 127);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(3270, 92, 0, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^07 w.", 26);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, 'z');
      int int0 = Calendar.DECEMBER;
      jSONReaderScanner0.nextToken((-1));
      assertEquals('0', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"v");
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      jSONReaderScanner1.isEnabled(105, 105);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 43);
      char[] charArray1 = new char[9];
      charArray1[0] = '\\';
      charArray1[1] = '\\';
      charArray1[2] = 'y';
      charArray1[3] = 'J';
      charArray1[4] = 'V';
      charArray1[5] = '0';
      charArray1[6] = '!';
      charArray1[7] = '7';
      charArray1[8] = 'n';
      jSONScanner0.scanFieldInt(charArray1);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray2 = new char[9];
      charArray2[0] = 'V';
      charArray2[1] = 'n';
      charArray2[2] = '\\';
      charArray2[3] = 'n';
      charArray2[4] = '!';
      charArray2[5] = 'J';
      charArray2[6] = 'V';
      charArray2[7] = 'I';
      charArray2[8] = '\\';
      jSONScanner0.scanFieldSymbol(charArray2);
      assertEquals(43, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      int int0 = jSONScanner0.scanType("MF)wqs+x@r*2p^j<.y");
      assertEquals((-2), int0);
      
      jSONScanner0.resetStringPosition();
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"v");
      SymbolTable symbolTable0 = new SymbolTable(41);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONScanner jSONScanner0 = new JSONScanner("A1.");
      SymbolTable symbolTable0 = new SymbolTable(4562);
      jSONScanner0.scanSymbol(symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(4562);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - , info : pos 2, json : A1.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s6oswiE%7I5iwAqTNP", 23);
      SymbolTable symbolTable0 = new SymbolTable(70);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('%', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '';
      charArray0[3] = '<';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      charArray0[7] = 'h';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 23, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '?';
      charArray0[1] = '?';
      charArray0[2] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 2879);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<-");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#rotOpvfNl{W]=8H?");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanNumber();
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Hf97M!,\"eMy", 23);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^07 ;w.", 17);
      float float0 = jSONScanner0.scanFloat('(');
      assertEquals(3.0F, float0, 0.01F);
      
      jSONScanner0.resetStringPosition();
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(17, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("allows5nglequotes");
      boolean boolean0 = jSONScanner0.isRef();
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1538, (-283));
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '2';
      charArray0[2] = 'J';
      jSONScanner0.scanFieldFloatArray(charArray0);
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'v';
      charArray0[2] = 'n';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 89);
      jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=u^x?e(xRb>vl: }");
      TimeZone timeZone0 = TimeZone.getTimeZone("undefined");
      jSONReaderScanner0.setTimeZone(timeZone0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Hf97M!,\"eMy", 23);
      int int0 = 34;
      jSONScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : !pos 5, json : Hf97M!,\"eMy
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(34);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = 'u';
      charArray0[4] = '';
      charArray0[5] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      jSONReaderScanner0.nextTokenWithChar('');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^", (-327));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('3');
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      assertEquals((-327), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r", (-1));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(1, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated json string, ", (-2872));
      jSONReaderScanner0.scanUUID('t');
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 't';
      charArray0[4] = 'A';
      charArray0[5] = 't';
      charArray0[6] = 'A';
      charArray0[7] = 't';
      charArray0[8] = 't';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.matchStat = (-2872);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('A', (-2872));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hIu0q<Y#CDSE");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[2] = '\\';
      jSONScanner0.scanUUID('o');
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<-", 34);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'u');
      assertEquals(34, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<}-", (-1836));
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.isRef();
      assertEquals((-1836), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.", 26);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanUUID('M');
      float float0 = jSONScanner0.scanFloat('(');
      assertEquals(3.0F, float0, 0.01F);
      
      jSONScanner0.resetStringPosition();
      assertEquals(26, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Hf97M!,\"eMy", 68);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isRef();
      jSONScanner0.scanString();
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      jSONScanner0.skipWhitespace();
      charArray0[1] = '|';
      charArray0[2] = ' ';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-96), 94, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+oBdhz`F^");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", (-28));
      int int0 = jSONScanner0.scanType("MF)wqs+x@r*2p^j<.y");
      assertEquals((-2), int0);
      
      jSONScanner0.resetStringPosition();
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      int int1 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-28), int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Hf97M!,\"eMy");
      jSONScanner0.nextToken(83);
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.indexOf('', 23);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-32));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('C');
      jSONReaderScanner0.getLocale();
      assertEquals((-32), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".hUmjN+6z0=!JG1O(0'");
      jSONScanner0.scanType(".hUmjN+6z0=!JG1O(0'");
      jSONScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(512);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MF)wqs+x@r*2p^j<.y", 0);
      jSONScanner0.scanType("MF)wqs+x@r*2p^j<.y");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('z');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">)ll");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('u');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">)ll", 4);
      jSONReaderScanner0.scanLong('X');
      int int0 = jSONReaderScanner0.scanType(",1zD1av,7V9");
      assertEquals((-2), int0);
      
      jSONReaderScanner0.putChar('X');
      assertEquals(4, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("allowsinglequotes", (-2528));
      JSONScanner jSONScanner1 = new JSONScanner("! ");
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanFloat('?');
      String string0 = "<}6bg@ToVBK\\ufo";
      JSONScanner jSONScanner2 = new JSONScanner(string0, (-2528));
      jSONScanner2.resetStringPosition();
      assertEquals((-2528), jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^07 w.");
      jSONScanner0.scanType("^07 w.");
      jSONScanner0.features = (-2);
      SymbolTable symbolTable0 = new SymbolTable(163);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ^pos 0, json : ^07 w.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(2056);
      JSONScanner jSONScanner0 = new JSONScanner("@h,.Q:3J)", (-3324));
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : @pos 0, json : @h,.Q:3J)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^07 w.");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = ':';
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[2] = 'g';
      charArray0[3] = '4';
      charArray0[4] = '(';
      charArray0[5] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.subString(110, 110);
      jSONReaderScanner0.scanType("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      jSONReaderScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q.#6vjZ6._n}Z;");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanDate('h');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(522);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'Q');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ", 4096);
      char char0 = 'm';
      jSONReaderScanner0.scanLong('m');
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1667, 102);
      jSONReaderScanner1.scanType("allowsinglequotes");
      char char1 = 'C';
      jSONReaderScanner1.putChar('C');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1667);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[", 659);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONReaderScanner0.scanStringArray(set0, 'U');
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'x';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 121, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<-", 4);
      jSONReaderScanner0.scanLong('i');
      jSONReaderScanner0.scanType(",1zD1av,7V9");
      jSONReaderScanner0.putChar('i');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q.#6vjZ6._n}Z;");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S7+=x~IB~[^xW:$*;");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.putChar('v');
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      int int0 = jSONReaderScanner0.pos();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("723", 225);
      float float0 = jSONScanner0.scanFloat('(');
      assertEquals(723.0F, float0, 0.01F);
      
      jSONScanner0.resetStringPosition();
      assertEquals(225, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" Fc", 644);
      jSONScanner0.scanDecimal('V');
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, ':');
      char char0 = 'e';
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'S';
      jSONScanner0.scanString('e');
      charArray0[2] = 'S';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      jSONScanner0.scanFieldBoolean(charArray0);
      int int0 = 34;
      SymbolTable symbolTable0 = new SymbolTable(56);
      JSONScanner jSONScanner1 = new JSONScanner(" Fc");
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  pos 0, json :  Fc
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 55232);
      char[] charArray0 = new char[0];
      jSONScanner0.scanType("error parse false");
      jSONScanner0.scanFieldDouble(charArray0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get", 46);
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = 'l';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1795);
      jSONReaderScanner0.scanDouble('(');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanBoolean('Q');
      jSONReaderScanner0.scanInt('a');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("allowsinglequotes");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanInt('$');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "-hTNi,_o^~%PMB";
      JSONScanner jSONScanner0 = new JSONScanner("-hTNi,_o^~%PMB");
      jSONScanner0.scanType("-hTNi,_o^~%PMB");
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<hY#C-DSE", 256);
      jSONReaderScanner0.eofPos = 192;
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('b');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("allowsinglequotes");
      jSONReaderScanner0.scanDate('0');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 88);
      jSONReaderScanner0.scanDate('X');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1538, (-283));
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("allowsinglequotes");
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('l', 'C', '%', '`', 'U');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      jSONScanner0.intValue();
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals('r', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q'.#6vj6._n}Z;", 47);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ", 101);
      jSONReaderScanner0.matchStat = 47;
      jSONReaderScanner0.scanNumber();
      assertEquals('x', jSONReaderScanner0.getCurrent());
      
      jSONScanner0.scanUUID('B');
      assertEquals(47, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanDate('h');
      jSONReaderScanner0.scanLong('_');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.", 46);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanLong('\'');
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2726, 57);
      jSONReaderScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('y');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^jl7;w.");
      jSONScanner0.hasSpecial = false;
      float float0 = jSONScanner0.scanFloat(' ');
      assertEquals(3.0F, float0, 0.01F);
      
      jSONScanner0.isRef();
      jSONScanner0.scanDecimal(' ');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      jSONScanner0.scanNumber();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.decimalValue();
      jSONScanner0.integerValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.", 46);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanLong('\'');
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2726, 57);
      jSONReaderScanner1.sp = 46;
      jSONReaderScanner1.scanNumber();
      char char0 = 'y';
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get", 46);
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(46, jSONScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 12);
      jSONScanner0.scanNullOrNew();
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "E]4Yz%`uyMHR";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E]4Yz%`uyMHR");
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'O';
      charArray0[2] = '(';
      charArray0[3] = 'D';
      charArray0[4] = 'K';
      charArray0[5] = 'X';
      charArray0[6] = 'D';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[0];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanDate('?');
      jSONReaderScanner0.scanLong('W');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.nextToken(3331);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 45);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'm';
      charArray0[2] = '=';
      charArray0[3] = 'C';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.nextToken(45);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lloI%5+lequ<tes", 91);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFloat('K');
      char[] charArray1 = new char[20];
      charArray1[0] = 'K';
      charArray1[1] = 'K';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K'");
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = ',';
      charArray0[2] = 'E';
      charArray0[3] = 'G';
      charArray0[4] = 'F';
      charArray0[5] = 'B';
      charArray0[6] = 'N';
      charArray0[7] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanDate('V');
      jSONReaderScanner0.scanDouble('!');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanDate('h');
      double double0 = jSONReaderScanner0.scanDouble(' ');
      assertEquals(3.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('o');
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 12);
      JSONScanner jSONScanner1 = new JSONScanner("null", 1677);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '7';
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner1.scanUUID('*');
      assertEquals(1677, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.scanString('U');
      charArray0[0] = 'M';
      jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('S');
      assertEquals(8, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(78);
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanNullOrNew();
      assertEquals(8, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 12);
      double double0 = jSONReaderScanner0.scanDouble('F');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken((-829));
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 12);
      jSONScanner0.nextToken();
      jSONScanner0.setToken(12);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'i';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.features = 23;
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("0D10@P,-t", 94);
      jSONScanner0.scanDecimal('y');
      SymbolTable symbolTable0 = new SymbolTable(94);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, ',');
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '<';
      charArray0[0] = '<';
      char char1 = 'H';
      charArray0[1] = 'H';
      char char2 = 'p';
      charArray0[2] = 'p';
      char char3 = '7';
      charArray0[3] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<-", (-1));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jSONScanner0.scanNumber();
      jSONScanner0.scanType("3");
      JSONScanner jSONScanner1 = new JSONScanner("Set", 9);
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'I';
      charArray0[2] = 'R';
      charArray0[3] = 'J';
      jSONScanner1.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner1.bytesValue();
      jSONScanner1.nextToken(4);
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<-", (-1));
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      jSONScanner0.nextToken(4);
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      JSONScanner jSONScanner0 = new JSONScanner("xo4", 0);
      jSONScanner0.scanUUID('W');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. o
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      jSONReaderScanner0.tokenName();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = new SymbolTable(32);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";3bz", 256);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanLong('H');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.nextToken(256);
      assertEquals('3', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanBoolean('{');
      jSONReaderScanner0.scanInt('y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 708);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ", 708);
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(708);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 708);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ", 708);
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("get");
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '+';
      charArray0[2] = 'D';
      charArray0[3] = '$';
      char[] charArray1 = new char[4];
      charArray1[0] = '$';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      charArray1[1] = '+';
      charArray1[2] = 'd';
      charArray1[3] = '.';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      charArray0[4] = 'd';
      charArray0[5] = '/';
      charArray0[6] = 'f';
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray2 = new char[4];
      charArray2[0] = 'f';
      charArray2[1] = 'D';
      charArray2[2] = 'I';
      charArray2[3] = 'I';
      jSONScanner0.scanFieldDouble(charArray2);
      jSONScanner0.scanDecimal('d');
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      jSONScanner0.nextToken(4);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.scanString('U');
      charArray0[0] = 'M';
      charArray0[1] = 'E';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanNullOrNew();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      SymbolTable symbolTable0 = new SymbolTable(8);
      jSONScanner0.scanEnum(class0, symbolTable0, 'c');
      assertEquals(8, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      jSONReaderScanner0.scanDate('h');
      SymbolTable symbolTable0 = new SymbolTable(522);
      int int0 = jSONReaderScanner0.scanInt('6');
      assertEquals(3, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H");
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanUUID('W');
      jSONReaderScanner0.scanLong('H');
      int int0 = Calendar.DAY_OF_YEAR;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("hmIu0H");
      jSONReaderScanner1.scanFieldInt(charArray0);
      jSONReaderScanner0.scanLong('W');
      int int1 = Calendar.SHORT;
      jSONReaderScanner1.nextToken(6);
      jSONReaderScanner1.setToken(6);
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("allowsinglequotes", 2277);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDate('%');
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      jSONReaderScanner1.scanDouble('~');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      StringReader stringReader0 = new StringReader("net.sf.json.JSONNull");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.scanBoolean('Q');
      jSONReaderScanner0.scanInt('&');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")>$y:");
      jSONReaderScanner0.scanNumber();
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanLong('e');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.nextToken(52429);
      assertEquals(4195293, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "hmIu0H<[hY#C-DSE";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<[hY#C-DSE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("^[5C3B", 0);
      int int0 = 1594;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'V';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "hmIu0H<[hY#C-DSE";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<[hY#C-DSE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("^x5C3B", 0);
      int int0 = 1594;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.intValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 16);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charsetDecoder0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, (-534));
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanLong('<');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.nextToken(824);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      char char0 = ' ';
      char char1 = 'h';
      JSONScanner jSONScanner0 = new JSONScanner("fBn4g9&h", 0);
      jSONScanner0.bytesValue();
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fBn4g9&h");
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("get");
      int int0 = Calendar.DECEMBER;
      jSONReaderScanner0.nextToken(11);
      assertEquals('e', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDate(' ');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 41);
      jSONReaderScanner1.scanDouble(' ');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('H', 'H', 'x', 'x', 'H', 'D');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Instant", 84);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('1');
      jSONReaderScanner0.scanDate('6');
      jSONReaderScanner0.scanDouble('~');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      char[] charArray0 = new char[7];
      charArray0[1] = '[';
      charArray0[2] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'WC=x-!#k44l2_*c", 123);
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 9);
      jSONReaderScanner1.scanFieldInt(charArray0);
      jSONReaderScanner0.scanLong('|');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      char[] charArray0 = new char[7];
      charArray0[2] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'WC=x-!#k44l2_*c", 123);
      int int0 = Calendar.SHORT;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.scanString('U');
      charArray0[0] = 'M';
      charArray0[1] = 'E';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanNullOrNew();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6443, 838);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanLong('<');
      assertEquals(838, jSONReaderScanner0.getFeatures());
      
      int int0 = Calendar.SHORT;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8);
      jSONReaderScanner1.nextToken(8);
      assertEquals(0, jSONReaderScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 708);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ", 708);
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      jSONScanner0.scanDecimal('j');
      assertEquals(708, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%Na@z:[Zw(;Pj9d");
      JSONScanner jSONScanner1 = new JSONScanner("(gbV", 0);
      jSONScanner1.bytesValue();
      jSONScanner1.nextToken(102);
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'P';
      charArray0[2] = 'D';
      // Undeclared exception!
      try { 
        jSONScanner1.arrayCopy((-1162), charArray0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("get");
      jSONScanner0.intValue();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)93);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0, charsetDecoder0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, (-534));
      Feature feature0 = Feature.CustomMapDeserializer;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0, 0);
      jSONReaderScanner1.config(feature0, true);
      jSONReaderScanner0.scanLong('>');
      int int0 = Calendar.SHORT;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(inputStreamReader0);
      jSONReaderScanner2.nextToken(16);
      jSONReaderScanner1.nextToken(32);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 24);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Calendar.JANUARY;
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'v');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.intValue();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'h';
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = Calendar.JANUARY;
      jSONReaderScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'W';
      charArray1[1] = ' ';
      charArray1[2] = 'h';
      charArray1[3] = ' ';
      charArray1[4] = 'h';
      charArray1[5] = '[';
      charArray1[6] = 'W';
      charArray1[7] = 'W';
      charArray1[8] = 'W';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("al1e", 84);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('P');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kfp.", 44);
      jSONReaderScanner0.scanString('<');
      jSONReaderScanner0.scanStringArray(linkedList0, '<');
      int int0 = Calendar.DECEMBER;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      jSONReaderScanner1.nextToken(1243);
      jSONReaderScanner0.setToken(11);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N6J", 12);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanDate('`');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N6J", 12);
      jSONReaderScanner0.scanDouble('`');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      JSONScanner jSONScanner0 = new JSONScanner("N6J`L\"gGrGc`mZ`U");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("N6J`L\"gGrGc`mZ`U", 14);
      jSONScanner1.scanUUID('&');
      assertEquals(14, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.", 0);
      jSONReaderScanner0.scanDate('.');
      StringReader stringReader0 = new StringReader("3^l7;w.");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 13);
      jSONReaderScanner1.scanLong('.');
      int int0 = Calendar.SHORT;
      jSONReaderScanner0.nextToken(13);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[1];
      char char0 = 'F';
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDate('F');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken((-91));
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.scanString('U');
      charArray0[0] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 58);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, ' ');
      int int0 = Calendar.DECEMBER;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[8];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = Calendar.SHORT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature.AllowSingleQuotes is false", 1);
      jSONReaderScanner0.nextToken(2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(19, 2073, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 84);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = Calendar.LONG;
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<-", (-1));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.stringDefaultValue = "<-";
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.matchField2(charArray0);
      Class<Locale> class0 = Locale.class;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanEnum(class0, symbolTable0, '<');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6!i1W-]>,n;z7Sa");
      jSONReaderScanner0.scanDouble('@');
      jSONReaderScanner0.isBlankInput();
      jSONScanner0.indexOf('N', (-1));
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("s@QiEj");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("java.util.OptionalDouble");
      jSONReaderScanner2.scanStringArray(linkedList0, '#');
      int int0 = Calendar.DECEMBER;
      jSONReaderScanner1.nextToken(7);
      assertEquals('@', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&alPe");
      char[] charArray0 = new char[7];
      charArray0[1] = '[';
      charArray0[2] = '|';
      StringReader stringReader0 = new StringReader("illegal identifier : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-872));
      jSONReaderScanner0.scanLong('h');
      int int0 = Calendar.SHORT;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Feature.AllowSingleQuotes is false", 13);
      jSONReaderScanner1.nextToken(19);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(1606, 31, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<hY#C-DSE", 256);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<hY#C-DSE", 256);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanDate('%');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("hmIu0H<hY#C-DSE");
      jSONReaderScanner1.scanDouble('V');
      jSONReaderScanner1.scanFieldUUID(charArray0);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = 'q';
      SymbolTable symbolTable0 = new SymbolTable(69);
      String string0 = ":F|,f1VgN yb0J{\\>>";
      JSONScanner jSONScanner0 = new JSONScanner(":F|,f1VgN yb0J{>>", 1743);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SymbolTable symbolTable0 = new SymbolTable(69);
      JSONScanner jSONScanner0 = new JSONScanner(":F|,f1VgN yb0J{>>", 1743);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^07 w.");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldBigInteger(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowSingleQuotes", 83);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("^07 w.");
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.WEDNESDAY;
      jSONScanner1.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match \" - w, info : pos 4, json : ^07 w.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'w';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner1.eofPos = (-1045);
      jSONReaderScanner1.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("true", 18);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = Calendar.LONG;
      jSONReaderScanner1.nextToken(2);
      jSONReaderScanner1.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("true", (-2));
      jSONScanner0.scanFieldLong(charArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'B';
      char char0 = '(';
      charArray0[2] = '(';
      charArray0[3] = '>';
      charArray0[4] = '`';
      char char1 = 'n';
      charArray0[5] = 'n';
      char char2 = '1';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31, 117);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match n - ], info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      jSONScanner0.scanNumber();
      jSONScanner0.isRef();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WoH9.;>+vXWfQ^S]7");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanUUID('M');
      jSONReaderScanner0.scanDouble('M');
      JSONScanner jSONScanner0 = new JSONScanner("kCZT8&b9Cfn#{");
      int int0 = Calendar.WEDNESDAY;
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - k, info : pos 0, json : kCZT8&b9Cfn#{
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("q.#6vjZ6._n}Z;");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("q.#6vjZ6._n}Z;", (-1));
      jSONReaderScanner1.isEnabled(3340, 2624);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '\u0018';
      charArray0[2] = '\u0018';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 67, 67);
      jSONReaderScanner0.scanDate('\u0018');
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'r';
      charArray0[2] = '/';
      charArray0[3] = 'i';
      charArray0[4] = 'S';
      charArray0[5] = 'g';
      jSONScanner0.scanFieldFloat(charArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      jSONScanner0.nextToken();
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"w");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('=');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{P+~#>I?Bd$tRA");
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanDouble(':');
      jSONReaderScanner0.getLocale();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("setter not found, class ", 57);
      jSONReaderScanner0.nextToken(57);
      jSONReaderScanner0.intValue();
      jSONReaderScanner1.scanDouble(':');
      jSONReaderScanner0.scanDate(':');
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[3];
      BigDecimal bigDecimal0 = new BigDecimal(697);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 697);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-927));
      jSONScanner0.nextToken();
      jSONScanner0.eofPos = 20;
      jSONScanner0.scanBoolean('O');
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloat(charArray1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1172);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1172);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanLong('1');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.", 700);
      jSONReaderScanner0.nextToken(5431);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanDouble('|');
      jSONReaderScanner1.scanDate('|');
      jSONReaderScanner0.copyTo(5431, 3, charArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QK", 1295);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '`';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("QK", 1713);
      jSONReaderScanner0.nextToken(10);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$ref");
      jSONReaderScanner1.intValue();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner1.lexError("QK", objectArray0);
      char char0 = ' ';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"3");
      jSONReaderScanner0.pos = 1410;
      JSONScanner jSONScanner0 = new JSONScanner("\"3", 1410);
      jSONScanner0.scanFloat('9');
      jSONScanner0.close();
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"w");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('e');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3^l7;w.", 45);
      jSONReaderScanner0.scanDate(' ');
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner1.nextToken((int) ' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.sp = 8;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanLong('L');
      int int0 = Calendar.SHORT;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.parser.autoTypeAccept", 8);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanType("scan true error");
      int int0 = Calendar.MONDAY;
      jSONReaderScanner0.scanLong('}');
      jSONReaderScanner0.scanType("scan true error");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      char[] charArray1 = new char[8];
      charArray1[0] = '*';
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101);
      jSONReaderScanner0.scanDate('{');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(":/|k9", 5);
      jSONReaderScanner1.putChar('5');
      jSONReaderScanner1.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.info();
      jSONReaderScanner1.skipComment();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.TypeReference");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanLong('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set", (-1));
      jSONReaderScanner1.nextToken((-1558));
      jSONReaderScanner1.intValue();
      jSONReaderScanner1.scanDouble('2');
      jSONReaderScanner0.scanDate('.');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(4098, (-2544), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hmIu0H<hY#C-DSE", 256);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(451);
      BigDecimal bigDecimal1 = new BigDecimal(32);
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = 'N';
      charArray0[3] = 'i';
      charArray0[4] = 'B';
      charArray0[5] = '8';
      charArray0[6] = 'r';
      charArray0[7] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      jSONReaderScanner0.scanDate('N');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("(u;:cm&2ZnN\"S4P3rVG", 127);
      jSONScanner1.intValue();
      jSONReaderScanner0.scanDate('p');
      jSONReaderScanner0.scanDouble('p');
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"3");
      jSONReaderScanner0.pos = (int) '9';
      JSONScanner jSONScanner0 = new JSONScanner("\"3", 18);
      jSONScanner0.intValue();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '[';
      charArray0[8] = '9';
      jSONScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDouble('9');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(649);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference");
      JSONScanner jSONScanner1 = new JSONScanner("scan false error");
      jSONScanner1.nextIdent();
      jSONScanner0.scanNumber();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed");
      JSONScanner jSONScanner2 = new JSONScanner("E~mtU", (-193));
      jSONScanner2.isRef();
      jSONScanner1.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 2578);
      jSONReaderScanner0.scanLong('p');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("K0E9W5q", 1825);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("com.google.common.collect.HashMultimap");
      jSONReaderScanner1.nextToken(48);
      jSONReaderScanner2.intValue();
      jSONReaderScanner1.scanDouble('p');
      jSONReaderScanner2.scanDate('O');
      char[] charArray0 = new char[3];
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(92, 92, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("null", 8);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 2578);
      jSONReaderScanner0.scanLong('p');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("K0E9W5q", 1825);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("com.google.common.collect.HashMultimap");
      jSONReaderScanner1.nextToken(48);
      jSONReaderScanner2.intValue();
      jSONReaderScanner1.scanDouble('p');
      jSONReaderScanner2.scanDate('O');
      PipedReader pipedReader0 = new PipedReader();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"3");
      jSONReaderScanner0.scanLong('-');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"3", 57);
      JSONScanner jSONScanner0 = new JSONScanner("h");
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '0';
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("DisableSpecialKeyDetect", 127);
      jSONScanner0.intValue();
      JSONScanner jSONScanner2 = new JSONScanner("(u;:cm&2ZnN\"S4P3rVG", (-1321));
      jSONScanner2.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1172);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1172);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("6@!Nc\"bD0|&FzgAi");
      JSONLexerBase.readString(charArray0, 6);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFloat('K');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(20);
      jSONReaderScanner0.scanDouble('1');
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char char0 = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ", 48);
      char char1 = '4';
      jSONReaderScanner0.scanLong('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("K0E9W5q", (-2214));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("set");
      jSONReaderScanner1.nextToken((-3096));
      Reader reader0 = null;
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((Reader) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Duration");
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      SymbolTable symbolTable0 = new SymbolTable(1172);
      JSONScanner jSONScanner1 = new JSONScanner("o}dKn");
      jSONScanner0.scanSymbol(symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.Duration");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.Duration", 700);
      SymbolTable symbolTable1 = new SymbolTable(268);
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 0, json : o}dKn
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1172);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1172);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanLong('1');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.DefaultJSONParser", 1095);
      SymbolTable symbolTable0 = new SymbolTable(1095);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.longValue();
      jSONScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r", (-1));
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '<';
      JSONScanner jSONScanner1 = new JSONScanner("r", (-1));
      jSONScanner1.scanUUID('<');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, (-1));
      jSONReaderScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(66);
      jSONReaderScanner0.scanSymbol(symbolTable0, '<');
      jSONReaderScanner0.scanDouble('K');
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference");
      JSONScanner jSONScanner1 = new JSONScanner("Z_#s~b");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'K';
      charArray0[2] = '>';
      charArray0[3] = ']';
      charArray0[4] = '%';
      charArray0[5] = '.';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 66, 123);
      jSONReaderScanner0.nextToken(67);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("nuuRll", 8);
      char[] charArray0 = new char[2];
      jSONScanner0.sp = 8;
      JSONScanner jSONScanner1 = new JSONScanner("@1R#(U5", (-112));
      jSONScanner0.scanUUID('<');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-3113), 99999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[3];
      BigDecimal bigDecimal0 = new BigDecimal(697);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h=n+/qxQhMCf");
      jSONReaderScanner0.scanFieldString(charArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("h=n+/qxQhMCf", objectArray0);
      jSONReaderScanner0.next();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 697, 2884);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.scanFloat('4');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.sub_chars(697, 2884);
      jSONReaderScanner0.nextToken(66);
      jSONReaderScanner1.scanDouble(' ');
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.isEnabled(feature0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, ' ');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3^l7;w.");
      JSONScanner jSONScanner1 = new JSONScanner("3^l7;w.", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner1.scanFloat('e');
      jSONScanner0.scanUUID(')');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bySEG},fw%B", 1051);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("bySEG},fw%B");
      jSONReaderScanner0.next();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFloat('m');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner1 = new JSONScanner("toString", (-1));
      jSONScanner1.scanBoolean('g');
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pos ");
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("pos ", 0);
      jSONScanner0.scanUUID('L');
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '<';
      charArray0[2] = 'L';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      jSONReaderScanner0.nextToken(14);
      jSONReaderScanner0.scanDouble('#');
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.properties", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("UpG;aj<-+T(nX1", 127);
      jSONScanner1.intValue();
      char[] charArray1 = new char[0];
      jSONScanner1.matchField(charArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }
}
