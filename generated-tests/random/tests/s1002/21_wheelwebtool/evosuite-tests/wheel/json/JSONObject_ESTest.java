/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:06:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "i#d!M";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      JSONObject jSONObject1 = jSONObject0.put("i#d!M", (Collection) linkedList0);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("spl", (Collection) linkedList0);
      jSONObject2.append("i#d!M", jSONObject0);
      JSONObject.valueToString(linkedList0);
      jSONObject0.keys();
      JSONObject.testValidity(jSONObject0);
      jSONObject1.optInt("6%('<h9a`w/");
      try { 
        jSONObject2.put((String) null, (Object) "i#d!M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "{m':7";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{m':7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 5 of {m':7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float(1.0);
      Float.min((-1.0F), 52.9F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "not";
      boolean boolean0 = false;
      jSONObject0.put("not", false);
      String string1 = "8";
      try { 
        jSONObject0.getBoolean("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(1768.7232484803, 0.0);
      Double.sum(0.0, 172.146409);
      Double.max(0.0, (-178.27191));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Double.sum(172.146409, (-178.27191));
      String string0 = "OeJE^*zzx8 W*~lcj";
      jSONObject0.optString("OeJE^*zzx8 W*~lcj", "OeJE^*zzx8 W*~lcj");
      try { 
        Short.decode("OeJE^*zzx8 W*~lcj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"OeJE^*zzx8 W*~lcj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0wV");
      JSONObject jSONObject1 = jSONObject0.put("0wV", (Object) "0wV");
      jSONObject1.names();
      JSONObject.valueToString(jSONObject0);
      jSONObject1.keys();
      jSONObject1.optInt("M#", (-3012));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject1.put("M#", (Map) hashMap0);
      jSONObject0.optJSONObject("M#");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONObject0.put("rM&>z #]3t4*]2'", (Map) hashMap0);
      jSONObject0.getJSONObject("rM&>z #]3t4*]2'");
      jSONObject0.isNull("getgetClass");
      try { 
        jSONObject0.getJSONObject("JJ}qUY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JJ}qUY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      Byte.toUnsignedLong((byte)33);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optLong("iscompare", 33L);
      String string0 = jSONObject0.toString(0);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      String string1 = JSONObject.valueToString(jSONObject1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      Byte.toUnsignedLong((byte)18);
      String[] stringArray0 = new String[4];
      Byte.compare((byte)108, (byte) (-104));
      stringArray0[0] = "h3b%pd";
      Byte.toUnsignedInt((byte)45);
      stringArray0[1] = "Gm@,vFA5aOlq#3jz";
      stringArray0[2] = "istoBinaryString";
      stringArray0[3] = "Ig\"kgZ+~Bq3I";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.compare((byte)45, (byte)45);
      try { 
        jSONObject0.getInt("gTH6W|[qLr#<K~X</O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gTH6W|[qLr#<K~X<\\/O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.optInt(",\n");
      JSONObject jSONObject1 = jSONObject0.put(",\n", (long) 0);
      jSONObject0.toString((-254));
      jSONObject1.isNull("{\"java.lang.String@0000000004\": java.lang.Long@0000000005}");
      jSONObject0.optDouble(",\n", (-5544.499546));
      jSONObject1.getInt(",\n");
      JSONObject.getNames(jSONObject0);
      jSONObject1.names();
      jSONObject1.put("{}", true);
      jSONObject1.optBoolean("Missing value", false);
      JSONObject.doubleToString(1216.72922881);
      try { 
        jSONObject1.getDouble("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Float, Object> hashMap1 = new HashMap<Float, Object>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float(0.0);
      hashMap0.put(float0, "?nCR8");
      jSONObject0.optLong("' and instead saw '");
      JSONObject jSONObject1 = jSONObject0.put("co", false);
      jSONObject1.optBoolean("b)TqY`Pz&uMR", false);
      jSONObject0.optBoolean("co", false);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      jSONObject1.optInt("co");
      JSONObject jSONObject2 = jSONObject1.putOpt("getvalueOf", "b)TqY`Pz&uMR");
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" at character ", 0L);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.accumulate("%{{", "%{{");
      JSONObject.quote("%{{");
      jSONObject2.toString((-329));
      jSONObject0.put("getvalues", true);
      jSONObject0.optBoolean("getvalues", true);
      JSONObject.doubleToString((-1428.3126178894152));
      String string0 = "iscomputeIfPresent";
      try { 
        jSONObject1.getDouble("iscomputeIfPresent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscomputeIfPresent\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put(",", (Map) hashMap0);
      jSONObject1.optDouble("aMpUf%_Ql/(Hyx");
      jSONObject1.toString(4937);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Boolean boolean0 = new Boolean("u4?_DdOt=2");
      hashMap0.put(jSONObject0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = 777;
      jSONObject1.put("getrotateLeft", 777);
      jSONObject1.names();
      try { 
        jSONObject1.getJSONArray("getrotateLeft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getrotateLeft\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(738.43733293649);
      Double.isFinite(779.5941380088796);
      Double.max(779.5941380088796, 738.43733293649);
      Double.sum((-1.0), 779.5941380088796);
      Double.isFinite(779.5941380088796);
      Double.max(738.43733293649, (-1.0));
      JSONObject.valueToString(double0);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      Double.sum((-1.0), 779.5941380088796);
      String string0 = "{FSc`J\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{FSc`J\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {FSc`J\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.quote("t");
      Float float0 = new Float(131.24997F);
      Float.min((-3233.7583F), (-3233.7583F));
      Float.sum(131.24997F, 131.24997F);
      JSONObject.testValidity(float0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"t\"";
      stringArray0[1] = "t";
      stringArray0[2] = "t";
      stringArray0[3] = "\"t\"";
      stringArray0[4] = "t";
      stringArray0[5] = "t";
      stringArray0[6] = "\"t\"";
      String string0 = "}m\\{\"95JZ*7$beBo";
      stringArray0[7] = "}m{\"95JZ*7$beBo";
      stringArray0[8] = "\"t\"";
      JSONObject jSONObject0 = new JSONObject("t", stringArray0);
      jSONObject0.optBoolean(" /RVMU1@xjt-", false);
      jSONObject0.put("t", (Object) "\"t\"");
      jSONObject0.optBoolean("j>2W`TN^1S@a{vxl}", false);
      jSONObject0.optBoolean("t");
      jSONObject0.optLong("getlowestOneBit", 3000L);
      try { 
        jSONObject0.getBoolean("uuC^}oxP5$oj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uuC^}oxP5$oj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z-'v~B";
      jSONObject0.put("Z-'v~B", (Object) "Z-'v~B");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short) (-235));
      Short.toUnsignedInt((short)79);
      JSONObject jSONObject2 = jSONObject0.putOpt("Z-'v~B", short0);
      jSONObject2.toString();
      jSONObject1.toString(16);
      jSONObject0.put("Z-'v~B", 0.0);
      Boolean boolean0 = Boolean.valueOf("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject3 = jSONObject0.accumulate("isparseFloat", boolean0);
      jSONObject3.optInt("JSONArray initial value should be a string or collection or array.");
      try { 
        jSONObject0.getDouble("{\"java.lang.String@0000000008\": \"java.lang.String@0000000008\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000008\\\": \\\"java.lang.String@0000000008\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long((-688L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Long.divideUnsigned((-688L), (-4942L));
      JSONArray jSONArray0 = new JSONArray();
      Long.compareUnsigned((-688L), 1L);
      int int0 = 175;
      String string0 = "A,0b=u&pT\\( bFR\\";
      jSONObject0.accumulate("A,0b=u&pT( bFR", jSONArray0);
      jSONArray0.optInt(175);
      StringWriter stringWriter0 = new StringWriter(2147483645);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)83);
      JSONObject.getNames((Object) byte0);
      jSONObject0.append("wheel.json.JSONTokener", "wheel.json.JSONTokener");
      jSONObject0.getJSONArray("wheel.json.JSONTokener");
      String string0 = "iscompare";
      try { 
        jSONObject0.getInt("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      float float0 = 1307.8F;
      Float float1 = new Float(1307.8F);
      Float.min(1307.8F, 2022.7509F);
      String string1 = "gethashCode";
      try { 
        jSONObject0.getString("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      String string0 = "false";
      try { 
        jSONArray1.put(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{", (Object) null);
      String string0 = jSONObject1.toString(9, 9);
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
      
      Float float0 = new Float((float) 9);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      String string0 = "com";
      stringArray0[0] = "com";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("com", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("com", (Object) null);
      jSONObject2.put("com", (Object) jSONObject1);
      JSONObject jSONObject3 = jSONObject0.put("com", (Collection) linkedList0);
      Double double0 = new Double((-876.7089595256));
      Double.max((-876.7089595256), 1923.0);
      JSONObject jSONObject4 = jSONObject3.accumulate("com", double0);
      Integer integer0 = new Integer(60);
      jSONObject4.putOpt("com", integer0);
      JSONObject.valueToString((Object) null, 60, 43);
      String string1 = "iscompare";
      try { 
        jSONObject0.getJSONObject("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "1caHas2;E`Zqo";
      jSONObject0.remove("1caHas2;E`Zqo");
      JSONObject jSONObject1 = jSONObject0.putOpt("1caHas2;E`Zqo", (Object) null);
      JSONObject jSONObject2 = jSONObject0.putOpt("lM ", "lM ");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject2.append("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", "lM ");
      jSONObject0.toString();
      Object object0 = new Object();
      jSONObject2.optLong("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", 0L);
      JSONObject.testValidity(object0);
      jSONObject1.optDouble("", (-4368.57));
      StringWriter stringWriter0 = new StringWriter(92);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject3.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "{:#/zE@&<G";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{:#/zE@&<G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {:#/zE@&<G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "{>'\"WY ry<)J.oec";
      Float.isFinite((-1.0F));
      Float.min(2683.0215F, 2683.0215F);
      jSONObject0.optInt("{>'\"WY ry<)J.oec");
      Float.sum(1244.0F, 2683.0215F);
      Float.min(1244.0F, 0.0F);
      Float.max(0.0F, (-687.84F));
      JSONObject jSONObject1 = jSONObject0.put("{>'\"WY ry<)J.oec", (-131));
      jSONObject1.optBoolean("{>'\"WY ry<)J.oec", false);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.getInt("{>'\"WY ry<)J.oec");
      Float.sum(0, 0.0F);
      Float.min(2683.0215F, 2683.0215F);
      jSONObject0.getInt("{>'\"WY ry<)J.oec");
      jSONObject0.isNull("{>'\"WY ry<)J.oec");
      JSONObject.quote("{>'\"WY ry<)J.oec");
      jSONObject0.toString();
      jSONArray0.optJSONObject(3836);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.append("{>'\"WY ry<)J.oec", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{>'\"WY ry<)J.oec] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 1336.8497737;
      Double double1 = Double.valueOf(1336.8497737);
      double double2 = 476.2;
      Double.max(1336.8497737, 476.2);
      JSONObject jSONObject1 = jSONObject0.put("]iit8bVGO[(b_>lAJ", (Object) double1);
      Double.max(1336.8497737, 0.0);
      jSONObject1.toString(118, 118);
      try { 
        jSONObject1.getJSONObject("]iit8bVGO[(b_>lAJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]iit8bVGO[(b_>lAJ\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optBoolean("{}");
      int int0 = (-1407);
      JSONObject.valueToString(hashMap0, (-1071), (-1407));
      try { 
        jSONObject0.get("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "!6";
      stringArray0[1] = "0";
      stringArray0[2] = "!6";
      stringArray0[3] = "!6";
      stringArray0[4] = "Missing value";
      stringArray0[5] = "!6";
      stringArray0[6] = "!6";
      stringArray0[7] = "!6";
      stringArray0[8] = "!6";
      JSONObject jSONObject0 = new JSONObject("!6", stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("!6", (Collection) linkedList0);
      jSONObject0.optJSONArray("!6");
      Object object0 = JSONObject.NULL;
      String[] stringArray1 = JSONObject.getNames(object0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Float float0 = new Float((-2000.8788F));
      Float.sum(0.0F, (-2000.8788F));
      JSONObject.numberToString(float0);
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("java.lang.Float@0000000001", 0.0);
      int int0 = 47;
      Integer integer0 = new Integer(47);
      JSONObject.getNames((Object) integer0);
      jSONObject0.optDouble("java.lang.Float@0000000001");
      String string0 = " of ";
      try { 
        jSONObject0.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("false");
      Integer integer0 = new Integer(97);
      Integer.compare(469, 469);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", integer0);
      jSONObject1.getDouble("false");
      jSONObject1.put("false", (-2779.146466));
      String string0 = jSONObject0.optString("false");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "i#d!M";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      JSONObject jSONObject1 = jSONObject0.put("i#d!M", (Collection) linkedList0);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optString((String) null);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("spl", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.append("i#d!M", jSONObject0);
      // Undeclared exception!
      jSONObject3.toString(13);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.isFinite((-1.0F));
      Float.min(2683.0215F, 2683.0215F);
      jSONObject0.optInt("{>'\"WY ry<)J.oec");
      Float.sum(1244.0F, 2683.0215F);
      Float.min(1244.0F, 0.0F);
      Float.max(0.0F, (-687.84F));
      JSONObject jSONObject1 = jSONObject0.put("{>'\"WY ry<)J.oec", (-131));
      jSONObject1.optBoolean("{>'\"WY ry<)J.oec", false);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.getInt("{>'\"WY ry<)J.oec");
      Float.sum(0, 0.0F);
      Float.min(2683.0215F, 2683.0215F);
      String string0 = "1";
      try { 
        jSONObject0.getInt("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("is");
      String string0 = "null";
      Short short0 = new Short((short)61);
      Short.toUnsignedLong((short)49);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", short0);
      Short.toUnsignedInt((short)61);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 88, 88);
      jSONObject1.optLong("null", 2963L);
      try { 
        jSONObject0.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject(":G2bK6``P}#+");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("null");
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject.doubleToString(2020.736167490764);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "QS<";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "QS<");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string1 = "";
      int int0 = (-4177984);
      jSONObject0.optInt("", (-4177984));
      try { 
        jSONObject0.getJSONObject("QS<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QS<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Number number0 = null;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(false);
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      hashMap0.put(boolean0, float0);
      jSONObject0.optInt("x;u(/k");
      Boolean boolean1 = Boolean.valueOf("[U]ac;y(MnfuJY;FeD");
      Float float1 = new Float((-1175.8329F));
      hashMap0.put(boolean1, float1);
      jSONObject0.keys();
      jSONObject0.optDouble("x;u(/k", (double) 0);
      JSONObject jSONObject1 = jSONObject0.append("x;u(/k", hashMap0);
      jSONObject1.optInt("x;u(/k");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject.valueToString((Object) null, 44, 48);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~J|5/a@cmS6!6Q'";
      stringArray0[1] = "null";
      stringArray0[2] = "java.lang.Float@00000000010";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("false");
      Integer integer0 = new Integer(97);
      Integer.compare(469, 469);
      jSONObject0.putOpt("false", integer0);
      jSONObject0.optString("false");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "1caHas2;E`Zqo";
      jSONObject0.remove("1caHas2;E`Zqo");
      JSONObject jSONObject1 = jSONObject0.putOpt("1caHas2;E`Zqo", (Object) null);
      JSONObject jSONObject2 = jSONObject0.putOpt("lM ", "lM ");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject2.append("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", "lM ");
      jSONObject0.toString();
      Object object0 = new Object();
      jSONObject2.optLong("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", (-5794L));
      JSONObject.testValidity(object0);
      jSONObject1.optDouble("", (-4368.57));
      try { 
        jSONObject3.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Float float0 = new Float((-814.0F));
      Float.min(0.0F, (-1576.179F));
      Float.max((-814.0F), (-814.0F));
      Float.sum(1688.1245F, (-2399.591F));
      Float.isFinite((-2314.4F));
      Float.sum((-814.0F), (-814.0F));
      JSONObject.valueToString(float0);
      JSONObject.valueToString("1551.38155278.", 32, 32);
      JSONObject.quote("rot");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("\"java.lang.String@0000000002\"", "\"java.lang.String@0000000002\"");
      jSONObject0.toString(12);
      jSONObject1.toString((-3484));
      jSONObject1.remove("GbnCg");
      jSONObject1.optLong("issum", (-2472L));
      jSONObject0.keys();
      String string0 = JSONObject.valueToString(jSONObject1);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject2 = jSONObject1.put("issum", (Map) hashMap0);
      jSONObject2.put("I96n~9C$2", 12);
      String string1 = jSONObject0.getString("\"java.lang.String@0000000002\"");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "d]u1\"+L<@7Jv";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[7] = "\b";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      jSONObject0.length();
      JSONObject.quote("YqrY]GTj+J6f5");
      JSONObject.testValidity("d]u1\"+L<@7Jv");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("\"q|oWI^G%!,a~");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Collection) linkedList0);
      linkedList0.remove((Object) "0");
      try { 
        jSONObject1.getBoolean("gV8X{;N.WH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gV8X{;N.WH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Long long0 = new Long((-2851L));
      Long.compareUnsigned((-5669L), 0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) hashMap0);
      jSONObject0.remove((String) null);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 1, (-4005));
      jSONObject1.put("{}", true);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "true";
      jSONObject0.put("Keeums2ub+sy5k<[h`", false);
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.optInt(1216);
      jSONArray0.put(1216, (Object) jSONObject0);
      jSONArray1.put((Collection) linkedList0);
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray1);
      String string0 = "toS";
      jSONObject1.has("toS");
      StringWriter stringWriter0 = new StringWriter(83);
      stringWriter0.close();
      jSONObject1.write(stringWriter0);
      jSONObject0.optDouble("toS");
      try { 
        jSONObject0.getString("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-3594);
      jSONObject0.toString((-3594));
      String string0 = "q(dPm4kAU=?s[Znp";
      String string1 = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      jSONObject1.names();
      try { 
        jSONObject0.getJSONArray("q(dPm4kAU=?s[Znp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q(dPm4kAU=?s[Znp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-96);
      jSONArray0.optJSONObject((-96));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("' and instead saw '", (long) (-96));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^[tzvZ7S{lifS.&+U", (-728.1516913));
      jSONObject0.put("^[tzvZ7S{lifS.&+U", 1.0);
      jSONObject0.toString((-1583));
      JSONObject.quote("^[tzvZ7S{lifS.&+U");
      jSONObject0.optInt("f_!l+\"Rr5]qn#`T");
      String string0 = "";
      jSONObject0.optString("");
      jSONObject0.optJSONArray("^[tzvZ7S{lifS.&+U");
      Double double0 = new Double((-1.0));
      Double.max(Double.NaN, 1.0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) double0);
      jSONObject1.accumulate("", "f_!l+\"Rr5]qn#`T");
      JSONObject.getNames(jSONObject1);
      jSONObject1.names();
      jSONObject0.length();
      jSONObject1.put("p,[;NE.ViK`%RQI", false);
      try { 
        jSONObject0.getJSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(76);
      JSONObject.doubleToString((-2419.77664072));
      Long long0 = new Long(0L);
      jSONObject0.accumulate("-2419.77664072", long0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-2419.77664072", 76, (-1291));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "ErB`d/&7EmQ4:h]^5{N";
      try { 
        jSONObject0.get("ErB`d/&7EmQ4:h]^5{N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ErB`d/&7EmQ4:h]^5{N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "1eX<@XQ]`F|-2C";
      jSONObject0.put("1eX<@XQ]`F|-2C", (-79));
      String string1 = "";
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "9:<aYhe?r";
      try { 
        jSONObject0.getJSONArray("9:<aYhe?r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9:<aYhe?r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Unterminated string");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Unterminated string
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "1caHas2;E`Zqo";
      jSONObject0.remove("1caHas2;E`Zqo");
      JSONObject jSONObject1 = jSONObject0.putOpt("1caHas2;E`Zqo", (Object) null);
      jSONObject1.optDouble((String) null, Double.NaN);
      JSONObject jSONObject2 = jSONObject0.putOpt("lM ", "lM ");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject2.append("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", "lM ");
      jSONObject0.toString();
      Object object0 = new Object();
      jSONObject2.optLong("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", (-5794L));
      JSONObject.testValidity(object0);
      jSONObject3.accumulate("", jSONObject0);
      jSONObject1.optDouble("", (-4368.57));
      jSONObject3.get("");
      jSONObject1.opt("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}");
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Integer.divideUnsigned(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = null;
      Double.max(0.0, 0.0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      Float.min(1.0F, 1.0F);
      jSONObject0.append("false", "false");
      JSONObject.getNames((Object) null);
      JSONObject.quote("java.lang.Float@0000000001");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("EHn3rpbns ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of EHn3rpbns 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PZjM";
      stringArray0[1] = "istoOctalString";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.quote("false");
      JSONObject jSONObject2 = jSONObject0.put("false", false);
      JSONObject.valueToString(jSONObject0, 60, 342);
      jSONObject2.accumulate("false", jSONObject1);
      jSONObject1.keys();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.valueToString("istoOctalString", 64, 64);
      jSONObject0.toString(64, 64);
      try { 
        jSONObject1.getString("\"NVp7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"NVp7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      String string0 = "getwait";
      stringArray0[0] = "getwait";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optBoolean("getwait");
      JSONObject jSONObject1 = jSONObject0.put("7bEP]", (Object) "getwait");
      jSONObject1.optInt("getwait");
      int int0 = 7;
      jSONObject1.toString(7);
      jSONObject0.names();
      int int1 = 9;
      jSONObject0.toString(9, (-40));
      jSONObject0.optJSONArray("XT__p");
      jSONObject0.isNull("N|'|?vVQ% 1Jo2[");
      JSONObject.quote((String) null);
      try { 
        jSONObject0.getBoolean("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getgetClass";
      jSONObject0.remove((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("getgetClass", (Collection) linkedList0);
      linkedList0.removeFirstOccurrence(jSONObject0);
      JSONObject.getNames(jSONObject0);
      linkedList0.add("getgetClass");
      int int0 = 1482;
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList0.removeAll(linkedList1);
      jSONObject0.put("Omi7Wdh~(=]-Ir.oV", (Object) linkedList0);
      JSONObject.getNames((Object) "getgetClass");
      linkedList0.add("getgetClass");
      // Undeclared exception!
      jSONObject0.toString(1482, 3167);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.remove("");
      jSONObject0.optLong("|UG%z*", 0L);
      jSONObject0.optDouble("|UG%z*");
      jSONObject0.optDouble("");
      jSONObject0.optInt((String) null, 2191);
      jSONObject0.has((String) null);
      Float float0 = new Float((float) 0L);
      Float.min(0L, 1.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("000", float0);
      jSONObject1.toString((-220));
      jSONObject1.optLong("}oU*ywZ[]", (-1L));
      jSONObject0.optDouble("\f", (double) 2191);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "g#5``fuu");
      jSONObject0.toString();
      jSONObject0.optString("isreverseBytes", "{\"java.lang.String@0000000004\":[java.lang.Byte@0000000026,java.lang.Byte@0000000027,java.lang.Byte@0000000028,java.lang.Byte@0000000029,java.lang.Byte@0000000030,java.lang.Byte@0000000031,java.lang.Byte@0000000032,java.lang.Byte@0000000033],\"java.lang.String@0000000023\":\"java.lang.Class@0000000024\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      StringWriter stringWriter0 = new StringWriter(125);
      stringWriter0.append((CharSequence) "g#5``fuu");
      jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString((-1525), 491);
      JSONObject jSONObject1 = jSONObject0.put("X~|*4;XK9^^h/u=", false);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject0.append(")_thk1Wro7;|l[sIb", "{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000044,\njava.lang.Byte@0000000045,\njava.lang.Byte@0000000046,\njava.lang.Byte@0000000047,\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051\n],\n\"java.lang.String@0000000023\": \"java.lang.Class@0000000024\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           }");
      String string0 = "wheel.json.JSONObject$Null";
      jSONObject0.optInt("wheel.json.JSONObject$Null", (-1525));
      Long long0 = new Long(491);
      jSONObject0.append("isreverseBytes", long0);
      try { 
        jSONObject0.getInt("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000044,\njava.lang.Byte@0000000045,\njava.lang.Byte@0000000046,\njava.lang.Byte@0000000047,\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051\n],\n\"java.lang.String@0000000023\": \"java.lang.Class@0000000024\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000004\\\": [\\njava.lang.Byte@0000000044,\\njava.lang.Byte@0000000045,\\njava.lang.Byte@0000000046,\\njava.lang.Byte@0000000047,\\njava.lang.Byte@0000000048,\\njava.lang.Byte@0000000049,\\njava.lang.Byte@0000000050,\\njava.lang.Byte@0000000051\\n],\\n\\\"java.lang.String@0000000023\\\": \\\"java.lang.Class@0000000024\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Double double0 = new Double((-1086.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("&Mf(Mb%yf\"z", true);
      assertEquals(4, jSONObject0.length());
  }
}
