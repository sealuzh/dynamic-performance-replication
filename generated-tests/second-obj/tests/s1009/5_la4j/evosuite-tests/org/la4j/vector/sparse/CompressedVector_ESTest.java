/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:08:56 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("3");
      compressedVector0.iterator();
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(3410);
      Float float0 = new Float((double) 3410);
      hashMap0.put(integer0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-947));
      Float float0 = new Float(0.0F);
      hashMap0.put(integer0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 520);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      Vector vector0 = compressedVector0.blankOfLength(13);
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, vector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 1062;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(166, 1062);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1062.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      String string0 = compressedVector0.toString();
      assertEquals("0.000", string0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(3659, (-999.1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1129);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1129;
      doubleArray0[1] = (double) 1129;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3489, 3489);
      compressedVector0.setAll((-1.0));
      compressedVector0.toBinary();
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3469, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)166).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(166, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(37, 1920);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(166, vectorFunction1);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5844.335757350569);
      CompressedVector compressedVector0 = CompressedVector.zero(3489, 3489);
      compressedVector0.setAll((-1.0));
      compressedVector0.swapElements(3489, 3489);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5844.335757350569);
      CompressedVector compressedVector0 = CompressedVector.zero(3489, 3489);
      compressedVector0.setAll((-1.0));
      org.evosuite.runtime.Random.setNextRandom(3489);
      compressedVector0.toBinary();
      compressedVector0.nonZeroIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3469, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1140);
      compressedVector0.setAll(1140);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      compressedVector0.sum();
      compressedVector0.nonZeroAt(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.iterator();
      compressedVector0.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)191).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(191, vectorFunction0);
      compressedVector0.euclideanNorm();
      sparseVector0.add((double) 191);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1206);
      doubleArray0[1] = (double) 182;
      doubleArray0[2] = (double) 182;
      doubleArray0[3] = (double) (-1206);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      CompressedVector compressedVector0 = new CompressedVector(182, (-1206), doubleArray0, intArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(37, (double) 37, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(6);
      CompressedVector compressedVector0 = CompressedVector.zero(1874);
      compressedVector0.euclideanNorm();
      compressedVector0.set(6, (-126.4550006));
      compressedVector0.swapElements(1894, (-455));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5844.335757350569);
      doubleArray0[1] = (-2547.10753);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-156), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(166, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(37, 1920);
      compressedVector0.swapElements(2, 2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1920;
      int int1 = 2;
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)191).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.iterator();
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction0);
      compressedVector0.euclideanNorm();
      ((CompressedVector) sparseVector0).set(0, (-504.682850074));
      ((CompressedVector) sparseVector0).swapElements((-1), 154);
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      hashMap0.put(integer0, float0);
      CompressedVector.fromMap(hashMap0, 32);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0);
      linkedList0.add(long0);
      CompressedVector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.shuffle();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      compressedVector0.max();
      org.evosuite.runtime.Random.setNextRandom(2);
      compressedVector0.swapElements(1920, (byte) (-13));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 1920);
      compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(2, 2);
      compressedVector0.swapElements(2, 989);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)153).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(3485, vectorFunction0);
      compressedVector0.set(1705, 1902.2563222866906);
      ((CompressedVector) sparseVector0).swapElements(2, 3485);
      byte[] byteArray0 = new byte[7];
      compressedVector0.iterator();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = new CompressedVector(27, 27);
      compressedVector0.copyOfLength(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3217.711575182892).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-3458), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1899;
      int[] intArray0 = new int[2];
      intArray0[0] = 1899;
      intArray0[1] = 3;
      CompressedVector compressedVector0 = new CompressedVector(1899, 1899, doubleArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.nonZeroAt(398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1898
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)166).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(3485, vectorFunction0);
      compressedVector0.euclideanNorm();
      int int0 = 1705;
      int int1 = 1919;
      sparseVector0.isZeroAt(1919);
      // Undeclared exception!
      try { 
        ((CompressedVector) sparseVector0).set(3485, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3485' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(166, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(37, 1920);
      sparseVector0.sum();
      String string0 = "u+|4=~x9o:O.}";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("u+|4=~x9o:O.}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2;
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.euclideanNorm();
      ((CompressedVector) sparseVector0).set(166, 1705);
      compressedVector0.swapElements(3428, 166);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-378), 100.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)166).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(3485, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(0, 1920);
      ((CompressedVector) sparseVector0).swapElements(3485, 1705);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      linkedList0.parallelStream();
      LinkedList<CompressedVector> linkedList1 = new LinkedList<CompressedVector>();
      linkedList1.spliterator();
      linkedList0.containsAll(linkedList1);
      linkedList0.add((Long) null);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.setAll(1.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1000, vectorFunction0);
      org.evosuite.runtime.Random.setNextRandom(1000);
      compressedVector0.eachNonZero((VectorProcedure) null);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1000);
      compressedVector1.getOrElse(9, (-85.286685725));
      compressedVector0.nonZeroAt(1213);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 430.0;
      doubleArray0[1] = (double) 1705;
      doubleArray0[2] = (double) 2;
      CompressedVector.fromArray(doubleArray0);
      compressedVector0.set(1705, 1902.2563222866906);
      ((CompressedVector) sparseVector0).swapElements(2, 3485);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      sparseVector0.getOrElse(2, (-4511.830615045213));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction1);
      sparseVector0.euclideanNorm();
      int int0 = 1435;
      compressedVector0.set(1435, 1920.0);
      ((CompressedVector) sparseVector0).swapElements(4264, 1435);
      byte byte0 = (byte)13;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte) (-94);
      sparseVector0.sliceLeft(9);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("This vector can't grow up.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(462, (-1344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1344.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1920;
      CompressedVector compressedVector0 = new CompressedVector(1920, 1920);
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1920).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(25, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(1744, 1744);
      compressedVector0.swapElements(1744, (-1));
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1519.942673803496);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      compressedVector0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5.667440529441311E7;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5844.335757350569);
      CompressedVector compressedVector0 = new CompressedVector(3489, 3489);
      compressedVector0.setAll((-1.0));
      org.evosuite.runtime.Random.setNextRandom(3489);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-2303), vectorFunction0);
      CompressedVector.zero(0);
      compressedVector0.set(1550, 0);
      compressedVector0.swapElements(1550, (-2134));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-288), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1912, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      ((CompressedVector) sparseVector0).set(2, 2);
      // Undeclared exception!
      try { 
        sparseVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 191;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.zero(2);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      sparseVector0.update(vectorFunction1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(" ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)166).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(3485, vectorFunction0);
      compressedVector0.euclideanNorm();
      sparseVector0.isZeroAt(3485);
      compressedVector0.set(1705, 1920.0);
      ((CompressedVector) sparseVector0).swapElements(2, 3485);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      int int0 = 166;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)166).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      int int1 = 3485;
      compressedVector0.updateAt(3485, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.add((Vector) compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3485' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5844.335757350569);
      CompressedVector compressedVector0 = new CompressedVector(3489, 3489);
      org.evosuite.runtime.Random.setNextRandom(3489);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1510.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-2303), vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2303
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9, 9);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      CompressedVector compressedVector1 = CompressedVector.zero(16);
      compressedVector1.add((-263.3301572));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(16);
      Integer.toUnsignedLong(9);
      linkedList0.offerFirst(integer0);
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(584.291).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction0);
      CompressedVector compressedVector3 = CompressedVector.zero(16, 9);
      compressedVector3.toRowMatrix();
      compressedVector0.copyOfLength(16);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9, 9);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      Vector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      CompressedVector compressedVector1 = CompressedVector.zero(16);
      compressedVector1.add((-263.3301572));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(16);
      Integer.toUnsignedLong(9);
      linkedList0.offerFirst(integer0);
      Integer integer1 = new Integer(9);
      linkedList0.offerFirst(integer1);
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction0);
      CompressedVector.zero(16, 9);
      org.evosuite.runtime.Random.setNextRandom(7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1941, 2);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(166, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(37, 1941);
      compressedVector0.swapElements(2, 37);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-222.057342115224)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction1);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)4;
      ((CompressedVector) sparseVector0).set((byte)4, 166);
      ((CompressedVector) sparseVector0).swapElements(2, (byte)4);
      ((CompressedVector) sparseVector0).toBinary();
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      compressedVector0.spliterator();
      compressedVector0.non(vectorPredicate0);
      compressedVector0.norm();
      org.evosuite.runtime.Random.setNextRandom((-330));
      compressedVector0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(0, 0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1920, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(161.25256213679884).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.euclideanNorm();
      compressedVector0.set(0, (-801.60525));
      compressedVector0.swapElements(2146770571, 214);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("%%MatrixMarket");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.longs();
      mockRandom0.doubles((double) 1, Double.POSITIVE_INFINITY);
      mockRandom0.ints();
      CompressedVector.random(1, (double) 1, (Random) mockRandom0);
  }
}
