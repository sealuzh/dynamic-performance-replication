/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:26:18 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1192, 892);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(15);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1888.61822), (-1888.61822), (double)15, (double)15, (-1888.61822)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1883.5872405521463), (-1883.5872405521463), (double)3, (double)3, (-1883.5872405521463)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      assertEquals((-1883.5872405521463), matrix0.min(), 0.01);
      assertEquals(3.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.4873152441931816E-15, 1.4873152441931816E-15, (double)3, (double)3, 1.4873152441931816E-15).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, (double)3, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (double)3, (double)3, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, (double)3, (double)3, 2.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.4873152441931816E-15, 1.4873152441931816E-15, (double)3, (double)3, 1.4873152441931816E-15).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(eigenDecompositor0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(471, 3);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(471, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      eigenDecompositor0.matrix = (Matrix) cCSMatrix0;
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(9, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(471, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(471, eigenDecompositor0.matrix.rows());
      assertEquals(3, eigenDecompositor0.matrix.columns());
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2437L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(7, 7, 0.964, (Random) mockRandom0);
      assertEquals(0.9591836734693877, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.7, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(47, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.9591836734693877, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.7, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(47, columnMajorSparseMatrix0.cardinality());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(0.9591836734693877, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.7, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(47, columnMajorSparseMatrix0.cardinality());
      assertNotNull(matrixArray0);
  }
}
