/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:03:30 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-848), vectorFunction0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertFalse(boolean0);
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(48);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = compressedVector0.transform(vectorFunction0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(compressedVector0.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toString();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("y3'VDv/zh2n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(4799, (double) 4799, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      Vector vector0 = compressedVector0.add((Vector) sparseVector0);
      assertEquals(8, vector0.length());
      assertSame(sparseVector0, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(16, 614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 614.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-6), (double) (-6), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(236);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(3090, (-5921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -5921.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(17);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.each((VectorProcedure) null);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 37);
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll((-2469.9166));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3326);
      compressedVector0.setAll(3326);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(260);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(260, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(260, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(260);
      assertNotNull(integer0);
      assertEquals(260, (int)integer0);
      
      Float float0 = new Float((double) 260);
      assertNotNull(float0);
      assertEquals(260.0F, (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1000, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(12);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1000, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(12, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      
      double double0 = compressedVector0.getOrElse(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 4073;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 4073.0}, doubleArray0, 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 4073.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(6, 0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      compressedVector0.setAll(6);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4077;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {4077.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(4077);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '6' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[15] = (double) (-523);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(21, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(21, compressedVector0.length());
      assertEquals(21, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.047619047619047616, compressedVector1.density(), 0.01);
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(21, compressedVector0.length());
      assertEquals(21, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.047619047619047616, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 4073;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-2008), 4073);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      doubleArray0[15] = (double) (-608);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertNotNull(string0);
      assertEquals("0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -608.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", string0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.037037037037037035, compressedVector1.density(), 0.01);
      assertEquals(27, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-848)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-848), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-1083));
      assertNotNull(integer0);
      assertEquals((-1083), (int)integer0);
      
      Float float0 = new Float((float) (-1083));
      assertNotNull(float0);
      assertEquals((-1083.0F), (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2411, 2411);
      assertNotNull(compressedVector0);
      assertEquals(2411, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(2411, (-908));
      assertEquals(2411, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[15] = (double) (-523);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(21, compressedVector0.length());
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(21, compressedVector0.length());
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.047619047619047616, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(21, compressedVector1.length());
      
      boolean boolean0 = compressedVector1.nonZeroAt((-523));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(boolean0);
      assertEquals(21, compressedVector0.length());
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.047619047619047616, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(21, compressedVector1.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-523.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-523), vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(21, compressedVector0.length());
      assertEquals(0.047619047619047616, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.09523809523809523, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(21, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>(32);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap1, 32);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(compressedVector0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(32, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set(13, 32);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.03125, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[4] = (double) (-8);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(12, compressedVector0.length());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-8));
      assertEquals(12, compressedVector0.cardinality());
      assertEquals(12, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-8), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1185);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1185, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1185, compressedVector0.length());
      assertEquals(1185, compressedVector0.cardinality());
      
      double double0 = compressedVector0.max();
      assertEquals(0.9, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1185, compressedVector0.length());
      assertEquals(1185, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(1184, compressedVector0.cardinality());
      assertEquals(1185, compressedVector0.length());
      assertEquals(0.99915611814346, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1020;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1185);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1185, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1185, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1185, compressedVector0.length());
      
      double double0 = compressedVector0.max();
      assertEquals(0.9, double0, 0.01);
      assertEquals(1185, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1185, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(1185, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1185, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1020;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(132.353711).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertArrayEquals(new double[] {1020.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2634);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2634, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2634, compressedVector0.length());
      
      double double0 = compressedVector0.getOrElse(9, (-417.4345));
      assertEquals((-417.4345), double0, 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2634, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 13;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotNull(vectorIterator0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1656, 1656);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)6, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1656, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      compressedVector0.swapElements(1656, 1656);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CompressedVector) sparseVector0).setAll(1656);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(1656, compressedVector0.cardinality());
      assertEquals(1656, sparseVector0.length());
      assertEquals(1656, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(1656, compressedVector0.cardinality());
      
      Byte byte0 = new Byte((byte)80);
      assertNotNull(byte0);
      assertEquals((byte)80, (byte)byte0);
      
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      Byte byte1 = sparseVector0.apply(vectorOperation0);
      assertNotNull(byte1);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals((byte)80, (byte)byte1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(1656, compressedVector0.cardinality());
      assertEquals(1656, sparseVector0.length());
      assertEquals(1656, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1656, compressedVector0.length());
      assertEquals(1656, compressedVector0.cardinality());
      assertEquals(1656, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1656, compressedVector1.cardinality());
      
      compressedVector0.nonZeroIterator();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector.fromCollection(linkedList0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector1.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 4080;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(4080, 0);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[15] = (double) 20;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.045454545454545456, compressedVector0.density(), 0.01);
      assertEquals(22, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(20);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.045454545454545456, compressedVector0.density(), 0.01);
      assertEquals(22, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(20, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.05, compressedVector1.density(), 0.01);
      
      compressedVector0.swapElements((-2012), 20);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0.045454545454545456, compressedVector0.density(), 0.01);
      assertEquals(22, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 13;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      
      compressedVector0.swapElements(13, (-1969));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 4080;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(0, 4080);
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (-8);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-8), 2);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-8);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(2, (-8));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 425;
      doubleArray0[1] = (double) 425;
      doubleArray0[2] = (double) 425;
      doubleArray0[3] = (double) 425;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertArrayEquals(new double[] {425.0, 425.0, 425.0, 425.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(0, 1);
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertArrayEquals(new double[] {425.0, 425.0, 425.0, 425.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 4073;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply((double) 4073);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.07692307692307693, compressedVector1.density(), 0.01);
      assertEquals(13, compressedVector1.length());
      
      compressedVector0.set(0, 0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(0, 0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-515), (-224));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.add((Vector) compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.07692307692307693, compressedVector1.density(), 0.01);
      assertEquals(13, compressedVector1.length());
      assertEquals(13, compressedVector2.length());
      assertEquals(0.07692307692307693, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.cardinality());
      
      CompressedVector compressedVector3 = CompressedVector.fromArray(doubleArray0);
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertEquals(0.07692307692307693, compressedVector3.density(), 0.01);
      assertEquals(13, compressedVector3.length());
      assertEquals(1, compressedVector3.cardinality());
      
      CompressedVector compressedVector4 = CompressedVector.fromCSV("");
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertNotNull(compressedVector4);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      doubleArray0[15] = (double) (-608);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(27, compressedVector0.length());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      assertEquals(27, compressedVector0.length());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(27, compressedVector0.length());
      assertEquals(0.037037037037037035, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(27, compressedVector1.length());
      assertEquals(0.037037037037037035, compressedVector1.density(), 0.01);
      
      compressedVector0.set(3, (-608.0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(27, compressedVector0.length());
      assertEquals(0.07407407407407407, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-8);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.setAll((-2230.4));
      assertEquals(8, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-8.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
