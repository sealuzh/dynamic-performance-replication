/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:56:51 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(":mbae64 == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: :mbae64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("zc(hh=2G@", 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=o]", string0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.EMPTY.base64();
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha512(byteString0);
      boolean boolean0 = byteString2.EMPTY.endsWith(byteArray0);
      assertFalse(boolean0);
      
      int int0 = byteString2.EMPTY.indexOf(byteString1);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("xs\"5Cd", 47);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      String string1 = byteString0.utf8();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000000000]", string0);
      
      int int0 = byteString0.indexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.toString();
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteString0, 371);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      String string0 = byteString0.toString();
      assertEquals("[text=o]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1878), (-1878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-1878 byteCount=-1878
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.equals(byteString0);
      boolean boolean1 = byteString1.rangeEquals(22, byteArray0, 22, 22);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("[text=", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.substring(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(505, 505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      ByteString byteString2 = byteString1.sha1();
      assertEquals(20, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring((-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("not acquired");
      assertNotNull(byteString0);
      
      Pipe pipe0 = new Pipe(10000000000000L);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 59);
      try { 
        ByteString.read(pushbackInputStream0, 59);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.asByteBuffer();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.lastIndexOf(byteString0);
      String string0 = byteString1.utf8();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      int int0 = byteString0.indexOf(byteString1, 17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString0.sha512();
      String string0 = byteString2.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.sha512();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString1.EMPTY.endsWith(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      String string0 = byteString1.utf8;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString3 = ByteString.of(byteArray0);
      assertTrue(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      String string0 = byteString0.base64();
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("652L-<#w)S.LPr", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString1.EMPTY.startsWith(byteString0);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.rangeEquals(394, byteArray0, (-232), (-232));
      assertFalse(boolean0);
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      ByteString byteString3 = byteString2.substring((int) (byte)40);
      byteString1.equals(byteString0);
      byteString1.compareTo(byteString3);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      boolean boolean0 = byteString2.EMPTY.equals(byteString1);
      assertFalse(boolean0);
      
      int int0 = byteString1.indexOf(byteString0);
      assertEquals((-1), int0);
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.getByte(1912);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString1.hmacSha512(byteString0);
      ByteString byteString4 = byteString2.hmacSha1(byteString2);
      ByteString byteString5 = byteString0.hmacSha512(byteString3);
      int int0 = byteString4.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      byteString1.utf8();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int2 = byteString4.compareTo(byteString0);
      assertEquals(1, int2);
      
      int int3 = byteString5.hashCode();
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.sha512();
      ByteString byteString3 = byteString0.hmacSha512(byteString2);
      ByteString byteString4 = byteString2.hmacSha1(byteString0);
      ByteString byteString5 = byteString4.hmacSha512(byteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString3.utf8();
      int int1 = byteString4.indexOf(byteArray0);
      int int2 = byteString0.compareTo(byteString5);
      assertTrue(int2 == int1);
      
      ByteString byteString6 = byteString2.substring((int) (byte)0);
      assertSame(byteString6, byteString2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      Pipe pipe0 = new Pipe(10000000000000L);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000000000]", string0);
      
      byteString0.asByteBuffer();
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.substring(6);
      assertEquals(2, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ONj{");
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("ONj{", charset0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      String string0 = byteString0.utf8;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2), (-2));
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      MockFile mockFile0 = new MockFile((File) null, "#3O/SwZKWlsLzbg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byteString0.write(mockFileOutputStream0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("l8w/}s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("base64 == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("_XvwUpc0{a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: _
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = "\r";
      byteString0.toString();
      String string0 = byteString0.utf8();
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.encodeUtf8("s.limit == s.pos");
      int int0 = byteString0.lastIndexOf(byteArray0, 50);
      assertEquals((-1), int0);
      
      byteString0.sha1();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=t]", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      ByteString byteString3 = byteString2.hmacSha1(byteString1);
      ByteString byteString4 = byteString2.hmacSha512(byteString1);
      byte[] byteArray1 = new byte[0];
      byteString3.indexOf(byteArray1);
      byteString4.utf8();
      ByteString byteString5 = new ByteString(byteArray1);
      byteString5.indexOf(byteArray1);
      byteString0.compareTo(byteString5);
      ByteString byteString6 = byteString0.substring(0);
      assertSame(byteString6, byteString0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      ByteString byteString3 = byteString2.hmacSha1(byteString1);
      ByteString byteString4 = byteString2.hmacSha512(byteString1);
      byte[] byteArray1 = new byte[0];
      byteString3.indexOf(byteArray1);
      byteString4.utf8();
      ByteString byteString5 = new ByteString(byteArray1);
      byteString5.indexOf(byteArray1);
      byteString0.compareTo(byteString5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString.read(pipedInputStream0, 0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)116);
      try { 
        ByteString.read(byteArrayInputStream0, 4054);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteString1.hmacSha512(byteString0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.equals(byteString0);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.indexOf(byteString0);
      byteString3.substring(0, 0);
      byteString2.hashCode();
      byteString0.sha1();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$+QMNsfF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: $+QMNsfF
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-2948), (-2948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("6@a8FYS>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: @
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("BMCY.M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }
}
