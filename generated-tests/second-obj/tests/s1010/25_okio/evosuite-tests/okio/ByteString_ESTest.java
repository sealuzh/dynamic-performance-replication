/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:26:23 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteString0.startsWith(byteArray0);
      byteString0.base64Url();
      int int0 = byteString0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte)120);
      ByteString byteString1 = ByteString.decodeBase64("YYF63M!Ph|a{OYa\"");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-18);
      int int0 = byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString0.indexOf(byteString1);
      assertEquals(50, byteString0.size());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.internalArray();
      // Undeclared exception!
      try { 
        byteString0.substring((-3273), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.internalArray();
      int int0 = byteString0.indexOf(byteArray0, 1);
      assertEquals((-1), int0);
      
      int int1 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("WKyI]{", charset0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)118;
      byteString0.EMPTY.hashCode();
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)64;
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)114;
      byte byte0 = (byte)51;
      byteArray0[3] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.indexOf(byteArray0, 0);
      ByteString byteString2 = byteString0.EMPTY.hmacSha1(byteString1);
      byteString1.EMPTY.toAsciiLowercase();
      byteString2.EMPTY.base64();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("^M|KD;<Fg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: ^M|KD;<Fg
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex  (ength");
      // Undeclared exception!
      try { 
        byteString0.getByte((-332));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-3);
      byteArray0[0] = (byte)0;
      byteString0.endsWith(byteArray0);
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = "f[Io";
      ByteBuffer byteBuffer0 = charset0.encode("f[Io");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)58;
      byteString0.endsWith(byteArray0);
      byteString0.toString();
      byteString0.indexOf(byteArray0);
      byteString0.indexOf(byteArray0, (int) (byte) (-52));
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-105);
      byteArray0[1] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha256();
      byteString0.string(charset0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.lastIndexOf(byteString2, (int) (byte) (-122));
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\u0000&\u0018\uFFFD\u0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \u0000&\u0018\uFFFD\u0000
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.startsWith(byteString0);
      byte[] byteArray1 = byteString1.toByteArray();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("nGCGOpl");
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      byteString0.base64();
      Pipe pipe0 = new Pipe(1);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      byteString0.endsWith(byteString1);
      // Undeclared exception!
      try { 
        byteString1.getByte((-3260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toByteArray();
      Object object0 = new Object();
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString2 = hashingSink1.hash();
      byteString2.base64();
      byteString1.endsWith(byteString2);
      // Undeclared exception!
      try { 
        byteString1.getByte(55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("WKyI]{", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-28);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-14);
      byte byte0 = (byte)48;
      byteArray0[4] = (byte)48;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pipe pipe0 = new Pipe(1709L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toAsciiLowercase();
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(13, (ByteString) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.writeLongLe(643L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 0);
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArrayInputStream0.reset();
      ByteString byteString0 = ByteString.read(dataInputStream0, 0);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(1390L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)110;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteString byteString1 = new ByteString(byteArray1);
      byteString0.startsWith(byteArray1);
      ByteString byteString2 = ByteString.of(byteArray1);
      ByteString byteString3 = byteString0.sha256();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteString2.lastIndexOf(byteString0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("okio.Timeout");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        byteString3.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1191), (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1191 byteCount=-40
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 2409);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("enIndex  (enth");
      byteString0.sha256();
      // Undeclared exception!
      try { 
        byteString0.substring(24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("WKyI]{", charset0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteString0.EMPTY.hashCode();
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)64;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.startsWith(byteArray0);
      byteString1.lastIndexOf(byteArray0);
      byteString0.substring(0, 0);
      byteString1.compareTo(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.codePointIndexToCharIndex("", (byte)0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.startsWith(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)36;
      byteArray0[1] = (byte)11;
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentedByteString", charset0);
      byteString0.base64();
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 3329, (int) (byte) (-44));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      // Undeclared exception!
      try { 
        ByteString.encodeString("\n", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((-2789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      try { 
        ByteString.read(sequenceInputStream1, 55);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.decodeBase64("V]JTE.r");
      ByteString byteString0 = ByteString.encodeUtf8("V]JTE.r");
      assertEquals(7, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      // Undeclared exception!
      try { 
        byteString0.substring(54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.EMPTY.toAsciiLowercase();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(1390L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteString0.base64();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.compareTo(byteString0);
      ByteString.codePointIndexToCharIndex("@>qV@&", 73);
      byteString1.write(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byteString1.write(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[6] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 55, (byte)7);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-1958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1958
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)21, (int) (byte)24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(2)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      hashingSink0.hash();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      int int0 = ByteString.codePointIndexToCharIndex("i", (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString.decodeBase64("V]JTE.r");
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toAsciiUppercase();
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.substring(97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Cp!H0gS}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Cp!H0gS}
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "(.tHmg:U%c2i77";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("(.tHmg:U%c2i77");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: (
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.rangeEquals((-482), byteString1, (-291), 980);
      Pipe pipe0 = new Pipe(2045L);
      Buffer buffer1 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = null;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = null;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      byteString0.write(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toByteArray();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString(0L);
      byteStringArray0[3] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      byteString2.equals(byteString0);
      // Undeclared exception!
      try { 
        options0.get(1883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1883
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Expected leading [0-9] or '-' character but was 0x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteString0.EMPTY.utf8();
      byteArray0[1] = (byte) (-18);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      assertEquals(50, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("5b>x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: >
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteString0.equals(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("endIndex > length(");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byteString1.write(realBufferedSource0.buffer);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[31];
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=77737737777777777777777773377777737777777777777773777b7773377b7777777737777777777773777777777777337b377777777777773737777b777737]", string0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(hashingSink0, byteString0);
      hashingSink1.delegate();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      byte[] byteArray1 = byteString0.toByteArray();
      Object object1 = new Object();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString2 = hashingSource0.hash();
      byteString1.equals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      byteString2.startsWith(byteArray0);
      ByteString byteString3 = ByteString.of(byteArray0);
      ByteString byteString4 = hashingSink0.hash();
      ByteString byteString5 = new ByteString(byteArray1);
      Object object2 = new Object();
      byteString5.equals(object2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      int int0 = byteString3.indexOf(byteString4, (-1204));
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString6 = ByteString.encodeString("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", charset0);
      String string1 = byteString6.toString();
      assertEquals("[size=134 text=[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36\u2026]", string1);
      
      byteString4.sha512();
      assertTrue(byteString4.equals((Object)byteString5));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("f[Io");
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 5409);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.encodeUtf8("]");
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.substring(0);
      byteString1.lastIndexOf(byteArray0);
      byteString0.substring(0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString.codePointIndexToCharIndex("i", (byte) (-11));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.internalArray();
      byteString0.indexOf(byteArray0, 1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteString0.startsWith(byteArray1);
      ByteString byteString1 = ByteString.of(byteArray1);
      ByteString byteString2 = byteString1.sha256();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size=%s offset=%s byteCount=%s");
      byteString1.lastIndexOf(byteString0);
      byteString0.toString();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      byteString1.equals(byteArray1);
      byteString1.sha512();
      byteString1.hashCode();
      byteString3.asByteBuffer();
      byteString1.equals(byteString0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toByteArray();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString2 = hashingSource0.hash();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hex=da39a3ee5e6b4b0d3255bfef95601890afd80709]");
      ByteString byteString3 = hashingSink1.hash();
      ByteString byteString4 = byteString3.hmacSha512(byteString0);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      Object object0 = new Object();
      byteString1.equals(object0);
      byteString2.startsWith(byteArray0);
      ByteString byteString5 = ByteString.of(byteArray0);
      ByteString byteString6 = byteString4.sha256();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hex=da39a3ee5e6b4b0d3255bfef95601890afd80709]");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      ByteString byteString7 = realBufferedSource1.readByteString();
      byteString7.hashCode = 42;
      byteString1.lastIndexOf(byteString7);
      byteString6.toString();
      byteString5.indexOf(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[hex=0d17971194f14a127127721d22204475f0b5c0d3437b51fb155a02a3a17833de]");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byteString2.compareTo(byteString1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString.of(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[17];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Object object0 = new Object();
      ByteString byteString1 = ByteString.of(byteArray1);
      ByteString byteString2 = byteString0.sha256();
      byteString2.EMPTY.endsWith(byteArray0);
      byteString2.toString();
      byteString1.indexOf(byteArray1);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
