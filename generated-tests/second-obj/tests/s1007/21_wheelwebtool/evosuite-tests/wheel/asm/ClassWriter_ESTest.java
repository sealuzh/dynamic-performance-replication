/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:26:54 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newLong(35);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Short short0 = new Short((short)7);
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      ClassWriter classWriter0 = new ClassWriter(1);
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, (String) null, "Label offset position has not been resolved yet", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-32768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-48));
      int int0 = classWriter0.newNameType("%xS;?", "%xS;?");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      int int0 = classWriter0.newField("JU c>Go'UBGgd{h8Z", "JU c>Go'UBGgd{h8Z", "JU c>Go'UBGgd{h8Z");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(529);
      int int0 = classWriter0.addUninitializedType("", 529);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", 529);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Double double0 = new Double(0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "hs>mM", "hs>mM", "hs>mM", double0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-638));
      classWriter0.visitOuterClass("^-[BlF:o!!<C", "^-[BlF:o!!<C", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-665));
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Double double0 = new Double(0.0);
      classWriter0.newConst(double0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(81, 166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1190);
      classWriter0.visitInnerClass("Synthetic", "Synthetic", "Synthetic", 1190);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3038));
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("value ", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(1856L);
      int int0 = Character.MAX_RADIX;
      ClassWriter classWriter0 = new ClassWriter(36);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("Synthetic", (String) null, "System", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2043);
      Type type0 = Type.BYTE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      classWriter0.visit(420, (-2570), "", "", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      classWriter0.visit(0, 0, "", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 16777226);
      Item item0 = classWriter0.newFieldItem("CO\"C7=$(`WhOk][", "CO\"C7=$(`WhOk][", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3814));
      Boolean boolean0 = new Boolean("");
      Boolean.compare(true, true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("", false);
      Item item0 = classWriter0.newDouble(255);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "Qby9a)Q}d;(LM{";
      // Undeclared exception!
      try { 
        classWriter0.newMethod("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", (String) null, "Qby9a)Q}d;(LM{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-177));
      Item item0 = classWriter0.newFloat((-1.0F));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(46);
      classWriter0.visitInnerClass("SourceDebugExtension", "CBX^Lg^Xf)rP8yf$o:", "", 46);
      classWriter0.newClass("SourceFile");
      classWriter0.visitInnerClass("SourceFile", "f`+,d<`", "tTeW%}7", 1794);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.visit(0, 0, "", "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-91));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newLong(0L);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f~goJG5=D6#<|BA";
      classWriter0.visit(13, (-1448), "iw>&Kh,vY5Rfr", "f~goJG5=D6#<|BA", "f~goJG5=D6#<|BA", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-990));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("oXFnK", (String) null, "", (-990));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("oXFnK", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4878));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.threshold = (-4878);
      classWriter0.visitInnerClass((String) null, "xVt[(Vwffl-u1yq", "Invalid IOCase name: ", (-4878));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2861);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "i\\y!rI_@";
      int int0 = classWriter0.newUTF8("iy!rI_@");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = 38;
      int int2 = classWriter0.addUninitializedType("iy!rI_@", 38);
      assertEquals(1, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Double double0 = new Double(0.75);
      assertNotNull(double0);
      assertEquals(0.75, (double)double0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("iy!rI_@");
      assertFalse(boolean1);
      
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(boolean0.equals((Object)boolean1));
      
      Item item1 = classWriter0.newDouble(1);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item1.equals((Object)item0));
      
      int int3 = Character.MAX_RADIX;
      assertEquals(36, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      classWriter0.visitSource("iy!rI_@", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("iy!rI_@", "iy!rI_@", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Long long0 = new Long(1856L);
      assertNotNull(long0);
      assertEquals(1856L, (long)long0);
      
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "w!sZ";
      String string1 = "float";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass(".class", ".class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: /class
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      ClassWriter classWriter0 = new ClassWriter(272);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Byte byte0 = new Byte((byte)38);
      assertNotNull(byte0);
      assertEquals((byte)38, (byte)byte0);
      
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      int int1 = Character.SIZE;
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      ClassWriter classWriter0 = new ClassWriter(16);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newLong(16777216);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("=T[v+");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      classWriter0.visitOuterClass("=T[v+", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(614);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "";
      int int0 = classWriter0.newNameType("", "");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.firstField = null;
      Item item0 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      System.setCurrentTimeMillis(337L);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(614, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      ClassWriter classWriter1 = new ClassWriter(19);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("S/AaQvj&^YwA.?8xe ", false);
      assertNotNull(annotationVisitor0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      String string0 = "z";
      int int1 = classWriter0.addType("z");
      assertEquals(1, int1);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        classWriter1.getMergedType(2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFloat(1008.20386F);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      
      String string0 = type0.toString();
      assertNotNull(string0);
      assertEquals("Ljava/lang/Object;", string0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Item item1 = classWriter0.newConstItem(type0);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertFalse(item1.equals((Object)item0));
      
      Item item2 = classWriter0.newInteger(90);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      Item item3 = classWriter0.newDouble((-103.10997773969508));
      assertNotNull(item3);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-2143));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2143), "", "", "wheel.asm.ClassWriter", character0);
      assertNotNull(fieldVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newClass("");
      assertEquals(4, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 49);
      assertNotNull(classWriter0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Frame.CHAR;
      assertEquals(16777227, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int2 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      classWriter0.visit(49, 16, "$:T!t3/.nX", "Synthetic", (String) null, (String[]) null);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3843);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Float float0 = new Float((double) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1853);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Double double0 = new Double((-815.0875576739802));
      assertNotNull(double0);
      assertEquals((-815.0875576739802), (double)double0, 0.01);
      
      Item item0 = classWriter0.newConstItem(double0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Long long0 = new Long(220L);
      assertNotNull(long0);
      assertEquals(220L, (long)long0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Item item1 = classWriter0.newConstItem(double0);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("S&_3e{ln'%zvzO");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "S&_3e{ln'%zvzO", "S&_3e{ln'%zvzO", ".Q:I", "S&_3e{ln'%zvzO");
      assertNotNull(fieldWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter1 = fieldWriter0.next;
      assertNull(fieldWriter1);
      
      classWriter0.firstField = fieldWriter0;
      int int1 = Character.SIZE;
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      int int2 = classWriter0.newConst("S&_3e{ln'%zvzO");
      assertEquals(3, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Item item0 = classWriter0.newDouble(16);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      ClassWriter classWriter1 = new ClassWriter(19);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("S/AaQvj&^YwA.?8xe ", true);
      assertNotNull(annotationVisitor0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      String string0 = "z";
      int int1 = classWriter0.addType("z");
      assertEquals(1, int1);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      
      Attribute attribute0 = new Attribute("8");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter1.visitAttribute(attribute0);
      assertNotSame(classWriter1, classWriter0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      String string1 = null;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-425));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newConstItem(2);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addType("k0?{!u#");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3011));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("SourceFile", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1853);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Double double0 = new Double((-815.0875576739802));
      assertNotNull(double0);
      assertEquals((-815.0875576739802), (double)double0, 0.01);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classWriter0.firstMethod = null;
      classWriter0.visitSource("F{@dhVV", "F{@dhVV");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("F{@dhVV", "F{@dhVV");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = new Item(1853);
      assertNotNull(item0);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, "F{@dhVV", "F{@dhVV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5217);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("AnnotationDefault", 5217);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFloat(1);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Byte.SIZE;
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      classWriter0.visitOuterClass("6`m j8@", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = classWriter0.addUninitializedType("boolean", 5);
      assertEquals(2, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-48);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)74, (byte) (-48)}, byteArray0);
      
      Item item0 = classWriter0.newInteger((byte) (-48));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      classWriter0.visitSource("[cy_0Sm;r0", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)74, (byte) (-48)}, byteArray0);
      
      classWriter0.visitInnerClass("", "", (String) null, 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newInteger((byte) (-48));
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertSame(item2, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item2.equals((Object)item1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.CHAR;
      assertEquals(16777227, int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int1);
      assertFalse(int1 == int0);
      
      Short short0 = new Short((short)54);
      assertNotNull(short0);
      assertEquals((short)54, (short)short0);
      
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visit(49, 16, "$:T!t3/.nX", "Synthetic", (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.key2;
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1333);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.visit(1333, 1333, "", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "2|g)0u}Bh!S";
      int int0 = classWriter0.addType("2|g)0u}Bh!S");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addType("2|g)0u}Bh!S");
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(int1 == int0);
      
      int int2 = 51;
      int int3 = 2562;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2562, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2562
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1853);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double((-815.0875576739802));
      assertNotNull(double0);
      assertEquals((-815.0875576739802), (double)double0, 0.01);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classWriter0.firstMethod = null;
      classWriter0.visitSource("F{@dhVV", "F{@dhVV");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("Ld\"L{p_H:R)`B", "P]G|pEtRWB+vl6zO");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newFloat(1.0F);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newFloat(1.0F);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("U<&D`M", (-163));
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      classWriter0.thisName = "Q=K_`2Ua";
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("floM%", "The list of suffixes must not be null");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "-Fc=f\\q";
      int int0 = classWriter0.newClass("floM%");
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Float.BYTES;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      String string1 = "VTS8\\Ty.FkHQgOW}";
      int int2 = classWriter0.addType("VTS8Ty.FkHQgOW}");
      assertEquals(1, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((byte)40);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("", "", "The size must be non-negative", (-1678));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@eX;$X:^J\"{N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-17);
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.newField("The strngsmust not be null", "The strngsmust not be null", "The strngsmust not be null");
      assertEquals(4, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit((-17), (-17), "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((byte)44, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "S/AaQvj&^YwA.?8xe ";
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertNotNull(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      String string1 = "z";
      int int1 = classWriter0.addType("z");
      assertEquals(1, int1);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      
      String string2 = "8";
      Attribute attribute0 = new Attribute("8");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.visitAttribute(attribute0);
      assertNotSame(classWriter0, classWriter1);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.BOOLEAN;
      assertEquals(16777225, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "H*nOAF&\"e$I&";
      stringArray0[1] = "H*nOAF&\"e$I&";
      stringArray0[2] = "The list of suffixes must not be null";
      stringArray0[3] = "RuntimeInvisibleAnnotations";
      stringArray0[4] = "The list of suffixes must not be null";
      stringArray0[5] = "RuntimeInvisibleAnnotations";
      stringArray0[6] = "H*nOAF&\"e$I&";
      stringArray0[7] = "H*nOAF&\"e$I&";
      stringArray0[8] = "H*nOAF&\"e$I&";
      classWriter0.visit(16777225, (-234), "The list of suffixes must not be null", "H*nOAF&\"e$I&", "H*nOAF&\"e$I&", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(227);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitOuterClass("java/lang/String", "r'B}", "java/lang/String");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double double0 = Double.max(227, 215.5799106503557);
      assertEquals(227.0, double0, 0.01);
      
      Float float0 = new Float(215.5799106503557);
      assertNotNull(float0);
      assertEquals(215.57991F, (float)float0, 0.01F);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@2831d469
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Item item0 = classWriter0.newClassItem("fgSxW/o!3Lz{.pSk9");
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newLong(36);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item1.equals((Object)item0));
      
      Item item2 = classWriter0.newLong(36);
      assertNotNull(item2);
      assertNotSame(item2, item0);
      assertSame(item2, item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item2.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "vB]Bh)#'S3mF";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "vB]Bh)#'S3mF";
      stringArray0[4] = "vB]Bh)#'S3mF";
      // Undeclared exception!
      try { 
        classWriter0.visit(1, 205, "vB]Bh)#'S3mF", (String) null, "vB]Bh)#'S3mF", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2;
      ClassWriter classWriter0 = new ClassWriter(2);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.FLOAT;
      assertEquals(6, int0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      Item item0 = classWriter0.newFloat(3128.26F);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      classWriter0.thisName = "";
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      int int1 = classWriter0.addType("<~Ii8W'7=5QZ!'LE6f0");
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      int int2 = classWriter0.addType("");
      assertEquals(2, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = classWriter0.addUninitializedType("", 1);
      assertEquals(3, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      Item item1 = classWriter0.newInteger(3);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item1.equals((Object)item0));
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(6541, "", "", "", stringArray0);
      assertNotNull(methodVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newFloat(2);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      System.setCurrentTimeMillis(3648L);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte)24;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-3038));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Short short0 = new Short((short)4096);
      assertNotNull(short0);
      assertEquals((short)4096, (short)short0);
      
      long long0 = Short.toUnsignedLong((short)708);
      assertEquals(708L, long0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(251658240, "", "StackMap", "jE(wy;kbJLk", short0);
      assertNotNull(fieldVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.newClass("");
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int1 == int0);
      
      int int2 = Float.BYTES;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Item[] itemArray0 = new Item[9];
      itemArray0[0] = item0;
      item0.hashCode = (-542);
      int int3 = classWriter0.addUninitializedType("", 49);
      assertEquals(1, int3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string1 = classWriter0.thisName;
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(49, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = Long.SIZE;
      assertEquals(64, int0);
      
      int int1 = Long.BYTES;
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.BYTES;
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ClassWriter classWriter0 = new ClassWriter(7);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.getCommonSuperClass("java/lang/Class", "java/lang/Class");
      assertNotNull(string0);
      assertEquals("java/lang/Class", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int3 = classWriter0.newUTF8("_O-");
      assertEquals(1, int3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Item item0 = classWriter0.newFieldItem("java/lang/Class", "java/lang/Class", "java/lang/Class");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newField("java/lang/Class", "java/lang/Class", "java/lang/Class");
      assertEquals(4, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      Item item1 = new Item(2);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      item1.strVal1 = "SourceDebugExtension";
      int int2 = classWriter0.newUTF8("");
      assertEquals(5, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Item item2 = classWriter0.newClassItem("java/lang/Class");
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-35);
      byteArray0[4] = (byte) (-21);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-35), (byte)0, (byte)0, (byte) (-21), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      item1.index = (-867);
      item2.strVal2 = "java/lang/Class";
      int int3 = classWriter0.addType("java/lang/Class");
      assertEquals(1, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Item[] itemArray0 = new Item[5];
      itemArray0[0] = item2;
      Byte byte0 = new Byte((byte) (-65));
      assertNotNull(byte0);
      assertEquals((byte) (-65), (byte)byte0);
      
      int int5 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int5);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Item item3 = classWriter0.key2;
      assertNotNull(item3);
      assertNotSame(item3, item1);
      assertNotSame(item3, item2);
      assertNotSame(item3, item0);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
      
      int int6 = Frame.VALUE;
      assertEquals(16777215, int6);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      
      classWriter0.visitSource("", "java/lang/Class");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item4 = classWriter0.newClassItem("SourceDebugExtension");
      assertNotNull(item4);
      assertNotSame(item4, item0);
      assertNotSame(item4, item1);
      assertNotSame(item4, item2);
      assertNotSame(item4, item3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item4.equals((Object)item0));
      assertFalse(item4.equals((Object)item1));
      assertFalse(item4.equals((Object)item2));
      assertFalse(item4.equals((Object)item3));
      
      classWriter0.visitSource("mVcRa @", "7PvaB\"i");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("java/lang/Class", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.DOUBLE;
      assertEquals(8, int0);
      
      String string0 = "<init>";
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Item item0 = classWriter0.newInteger(205);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = Frame.SHORT;
      assertEquals(16777228, int1);
      assertFalse(int1 == int0);
      
      Item item1 = new Item(2);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      Item item2 = classWriter0.newClassItem("java/lang/Class");
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      int int2 = classWriter0.addType("java/lang/Class");
      assertEquals(1, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      Item item3 = classWriter0.key2;
      assertNotNull(item3);
      assertNotSame(item3, item2);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      
      int int5 = Character.SIZE;
      assertEquals(16, int5);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      
      String string1 = "";
      int int6 = Character.MIN_CODE_POINT;
      assertEquals(0, int6);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(205);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Long.SIZE;
      assertEquals(64, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.invalidFrames = true;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = Long.BYTES;
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.visitSource("_-", "_-");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = Float.BYTES;
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassReader", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, "StackMap");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
