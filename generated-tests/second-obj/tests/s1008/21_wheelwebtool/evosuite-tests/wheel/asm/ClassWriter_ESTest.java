/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:15:29 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.time.DateTimeException;
import java.time.chrono.JapaneseEra;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1407));
      Item item0 = classWriter0.newLong((-1407));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1603));
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-1603), "Ckp7?\"Jv~%J|'yYa@6N", "Ckp7?\"Jv~%J|'yYa@6N", (String) null, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2635));
      Item item0 = classWriter0.newFloat((-2635));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(317);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = classWriter0.newMethod("Signature", "Signature", "Signature", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter((-2635));
      Item item0 = classWriter0.key3;
      classWriter0.visitSource("*zmuvRB^~G@{", "o3Ewd$");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777208);
      Item item0 = classWriter0.newFieldItem("=.!c50gGT2:41JFYPjx", "=.!c50gGT2:41JFYPjx", "=.!c50gGT2:41JFYPjx");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4320);
      classWriter0.newDouble((-217.16));
      classWriter0.visit(4320, 4320, "boolean", "{$dc/xj'{\n=#mx`xQt", "boolean", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(520);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(520, 267386880, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@52e8fa2d
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3729);
      classWriter0.threshold = 2741;
      int int0 = Byte.SIZE;
      Item item0 = classWriter0.newInteger(8);
      Item item1 = classWriter0.newMethodItem("Mio;", "Mio;", "Mio;", true);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.version = 1055;
      classWriter0.newUTF8("U&u(g-[V<");
      Float float0 = new Float(1876.22F);
      Float.min(2, 0.0F);
      classWriter0.addUninitializedType("U&u(g-[V<", 0);
      Float.sum(2, 1055);
      int int0 = Character.MAX_RADIX;
      Long.min(1, 2);
      Long long0 = new Long(29L);
      Long.divideUnsigned(1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.newFloat((-1.0F));
      classWriter0.newConst("U&u(g-[V<");
      String[] stringArray0 = new String[0];
      classWriter0.visit(1, 383, "U&u(g-[V<", "U&u(g-[V<", "U&u(g-[V<", stringArray0);
      classWriter0.toByteArray();
      int int1 = Frame.SHORT;
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("U&u(g-[V<", "U&u(g-[V<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: U&u(g-[V<
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      classWriter0.visit((-494), (-494), "C5", (String) null, "EnclosingMethod", (String[]) null);
      classWriter0.addType("EnclosingMethod");
      classWriter0.thisName = "value ";
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2567);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Item item0 = classWriter0.newConstItem(float0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      JapaneseEra japaneseEra0 = JapaneseEra.SHOWA;
      assertNotNull(japaneseEra0);
      
      // Undeclared exception!
      try { 
        MockMinguoDate.from(japaneseEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: Showa of type java.time.chrono.JapaneseEra
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      float float0 = Float.min(1, 1876.22F);
      assertEquals(1.0F, float0, 0.01F);
      
      float float1 = Float.min(2, 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = Float.sum(2, 1876.22F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1878.22F, float2, 0.01F);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      Long long0 = new Long((-3176L));
      assertNotNull(long0);
      assertEquals((-3176L), (long)long0);
      
      Long long1 = new Long((-3176L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3176L), (long)long1);
      
      int int1 = Long.compareUnsigned(0L, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Item item0 = classWriter0.newConstItem(long0);
      assertTrue(long0.equals((Object)long1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat((-3176L));
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newDouble(1);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      int int2 = Type.DOUBLE;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, int2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      // Undeclared exception!
      try { 
        classWriter0.newField("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 57);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3729);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.index = 3729;
      classWriter0.threshold = 2746;
      int int0 = Frame.ARRAY_OF;
      assertEquals(268435456, int0);
      
      int int1 = classWriter0.addType("n\" 5OSyQ\"");
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      int int2 = 16777220;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(268435456, 16777220);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 268435456
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(139);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newClassItem("r U-C");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.key3;
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      classWriter0.index = 3309;
      int int0 = classWriter0.addType("");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "9724hzNT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-486));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.version = 19;
      Item item0 = classWriter0.newFloat((-486));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(13, 16777220, "xK/y", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(73);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        classWriter0.visitField((-1791), "ESF<Q&pFdo_4z )H/~", "ESF<Q&pFdo_4z )H/~", "ESF<Q&pFdo_4z )H/~", mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@1ed067a2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("UB 0/XCb6Y\"BY.3UJC4", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Short short0 = new Short((short)585);
      assertNotNull(short0);
      assertEquals((short)585, (short)short0);
      
      long long0 = Short.toUnsignedLong((short)17);
      assertEquals(17L, long0);
      
      long long1 = Short.toUnsignedLong((short)585);
      assertFalse(long1 == long0);
      assertEquals(585L, long1);
      
      Item item0 = classWriter0.newConstItem(short0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 39;
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-496));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item[] itemArray0 = new Item[0];
      classWriter0.visitOuterClass("<", "<", "<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1398));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble((-1398));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newMethod("hjCLR %s*Q", (String) null, "hjCLR %s*Q", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "8L-*Csh`=0=VO%";
      String string1 = "";
      int int0 = classWriter0.newConst("");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      int int1 = classWriter0.newConst("");
      assertTrue(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int1);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "8L-*Csh`=0=VO%", "8L-*Csh`=0=VO%", "8L-*Csh`=0=VO%", (Object) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(fieldVisitor0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "U&u(g-[V<";
      Item item0 = classWriter0.newInteger(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      int int0 = classWriter0.newUTF8("U&u(g-[V<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      float float0 = Float.min(998.9F, 1876.22F);
      assertEquals(998.9F, float0, 0.01F);
      
      float float1 = Float.sum(2, 2);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(4.0F, float1, 0.01F);
      
      int int1 = Character.MAX_RADIX;
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int2 = classWriter0.newConst(boolean0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U&u(g-[V<";
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass("L@*8/^T@5&", "L@*8/^T@5&", "?xI4", 616);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Item item0 = classWriter0.newConstItem(double0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addType("}f?<\"`BA");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("}f?<\"`BA", 33);
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(202);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "W`N[P7-^i";
      stringArray0[1] = "";
      stringArray0[2] = "OBgEOHb|/<J:1";
      stringArray0[3] = "W`N[P7-^i";
      stringArray0[4] = "W`N[P7-^i";
      stringArray0[5] = "";
      int int0 = classWriter0.addUninitializedType("", 248);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      classWriter0.visit(202, 202, "OBgEOHb|/<J:1", "W`N[P7-^i", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newLong(4L);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3117));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newClass(">^[XIFF4vY");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = classWriter0.newNameType(">^[XIFF4vY", ">^[XIFF4vY");
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, int1);
      
      int int2 = classWriter0.addUninitializedType("", (-3117));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      
      classWriter0.visitOuterClass("", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass((String) null, "", (String) null, (-3117));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("", (String) null, "", 3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = Edge.EXCEPTION;
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = 0;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "|6}Z&-?+}uu", "", (String) null, "|6}Z&-?+}uu");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(fieldVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int2 = classWriter0.addUninitializedType("<(C!_u7V80", 18);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(14, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1963);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Character character0 = Character.valueOf('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ClassWriter classWriter0 = new ClassWriter((-2305));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "ywFKVl";
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("ywFKVl", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(7, 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-479));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item[] itemArray0 = new Item[0];
      classWriter0.typeTable = itemArray0;
      classWriter0.visitOuterClass("<", (String) null, "<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.version = 64;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      String string0 = "RuntimeInvisibleParameterAnnotations";
      int int0 = classWriter0.addType("RuntimeInvisibleParameterAnnotations");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("RuntimeInvisibleParameterAnnotations");
      assertTrue(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int0 = Integer.compare(2, 36);
      assertEquals((-1), int0);
      
      int int1 = classWriter0.newConst(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      classWriter0.version = 11;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oO2");
      assertFalse(boolean0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = Type.INT;
      assertEquals(5, int0);
      
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      String string0 = "@%?$oBA9@t`|*]L\"8";
      int int1 = classWriter0.addUninitializedType("@%?$oBA9@t`|*]L\"8", 0);
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = Long.SIZE;
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(64, int3);
      
      classWriter0.visitOuterClass("", "U&u(g-[V<", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(5);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      MockFile mockFile0 = new MockFile("oF$|fQ8B._3h90I");
      assertNotNull(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("oF$|fQ8B._3h90I", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("oF$|fQ8B._3h90I", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-59));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertNotNull(type0);
      assertEquals(5, type0.getSort());
      assertEquals(1, type0.getSize());
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(8, "tj.9", "eo,ug%eIz/Qk<R%", "e<Luk:&^Z", type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertNotNull(fieldVisitor0);
      assertEquals(5, type0.getSort());
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = Character.MIN_CODE_POINT;
      assertEquals(0, int0);
      
      String string0 = "A#D@x/$Dfl*)V+";
      String string1 = "java/lang/Object";
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string2 = "ywFKl";
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("ywFKl", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newUTF8("U&u(g-[V<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      float float0 = Float.min(998.9F, 1876.22F);
      assertEquals(998.9F, float0, 0.01F);
      
      float float1 = Float.min(2, 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = Float.sum(2, 1898.5552F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1900.5552F, float2, 0.01F);
      
      int int1 = Character.MAX_RADIX;
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      long long0 = Long.min(1, 2);
      assertEquals(1L, long0);
      
      Long long1 = new Long((-3176L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3176L), (long)long1);
      
      long long2 = Long.divideUnsigned(1, 1);
      assertTrue(long2 == long0);
      assertEquals(1L, long2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Item item0 = classWriter0.newFloat((-1.0F));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      int int2 = classWriter0.newConst("U&u(g-[V<");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, int2);
      
      Item item1 = classWriter0.newDouble(0.0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit(1, (-418), "U&u(g-[V<", "U&u(g-[V<", "U&u(g-[V<", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int3 = Frame.SHORT;
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(16777228, int3);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("U&u(g-[V<", "U&u(g-[V<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: U&u(g-[V<
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newUTF8("U&u(g-[V<");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      float float0 = Float.sum((-2578.768F), 1);
      assertEquals((-2577.768F), float0, 0.01F);
      
      float float1 = Float.sum(2, 1898.5552F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1900.5552F, float1, 0.01F);
      
      String string0 = "";
      int int1 = classWriter0.addType("");
      assertTrue(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      float float2 = Float.sum(1, 0);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      int int2 = classWriter0.newConst("U&u(g-[V<");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, int2);
      
      float float3 = Float.min(0.0F, 1);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      Type type0 = Type.LONG_TYPE;
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertNotNull(type0);
      assertEquals(2, type0.getSize());
      assertEquals(7, type0.getSort());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Type type1 = Type.getType(class0);
      assertFalse(type1.equals((Object)type0));
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertNotNull(type1);
      assertNotSame(type1, type0);
      assertEquals(1, type1.getDimensions());
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getSize());
      
      int int3 = classWriter0.newConst(type1);
      assertFalse(type1.equals((Object)type0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertNotSame(type1, type0);
      assertEquals(1, type1.getDimensions());
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getSize());
      assertEquals(4, int3);
      
      ClassWriter classWriter1 = new ClassWriter(4096);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      int int4 = classWriter1.addType("");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(1, int4);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-441);
      ClassWriter classWriter0 = new ClassWriter((-441));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      String string0 = "boD";
      String string1 = "ESvL;gb\">+gBqW%A&uo";
      String string2 = "";
      Item item0 = classWriter0.newFloat((-441));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int1 = classWriter0.addUninitializedType("java/lang/Object", 1764);
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      Item item1 = classWriter0.newFloat((-441));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertSame(item1, item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-441), 1764);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -441
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addUninitializedType("U&u(g-[V<", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      float float0 = Float.min(1, 1);
      assertEquals(1.0F, float0, 0.01F);
      
      float float1 = Float.sum((-2578.768F), 1.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2577.768F), float1, 0.01F);
      
      int int1 = classWriter0.addType("");
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int1);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      long long1 = Long.min(1, 0L);
      assertEquals(0L, long1);
      
      Long long2 = new Long(2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(2L, (long)long2);
      
      long long3 = Long.divideUnsigned(0, 1);
      assertTrue(long3 == long1);
      assertEquals(0L, long3);
      
      long long4 = Long.divideUnsigned(0L, 1);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertEquals(0L, long4);
      
      String string0 = Long.toUnsignedString(3032L);
      assertNotNull(string0);
      assertEquals("3032", string0);
      
      Item item0 = classWriter0.newInteger(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      item0.strVal3 = "3032";
      Item item1 = classWriter0.newFloat((-1.0F));
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item[] itemArray0 = new Item[3];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      Item item2 = new Item(2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotNull(item2);
      
      itemArray0[2] = item2;
      classWriter0.typeTable = itemArray0;
      int int2 = classWriter0.newConst("U&u(g-[V<");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, int2);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int3 = classWriter0.addType("3032");
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, int3);
      
      int int4 = classWriter0.addType("Z<U#J'1>&hu?U_0.F");
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, int4);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("U&u(g-[V<", "3032");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: U&u(g-[V<
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "scF\"T:N2mat2%0";
      ClassWriter classWriter0 = new ClassWriter(285212673);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("ywFKVl", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("Ljava/lang/Synthetic;", "Ljava/lang/Synthetic;");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int0 = classWriter0.newUTF8("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, int0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(139);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble(139);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble(139);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertSame(item1, item0);
      
      classWriter0.index = 139;
      int int0 = classWriter0.addType("");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      int int1 = classWriter0.newNameType("", "");
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(140, int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-494));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item[] itemArray0 = new Item[0];
      classWriter0.visitOuterClass("<", "<", "<");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newMethod("<", "<", "<", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      float float0 = Float.min(0, 1);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Long long0 = new Long((-3176L));
      assertNotNull(long0);
      assertEquals((-3176L), (long)long0);
      
      long long1 = Long.max((-3176L), 0L);
      assertEquals(0L, long1);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Long long2 = new Long((-3176L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-3176L), (long)long2);
      
      Item[] itemArray0 = new Item[3];
      Item item0 = classWriter0.newLong(0L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      itemArray0[1] = item0;
      item0.hashCode = 1364;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Item item1 = new Item(1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      
      item1.strVal2 = "";
      itemArray0[2] = item1;
      classWriter0.typeTable = itemArray0;
      int int1 = classWriter0.addType("|UmNH]rn{AU5V!PH");
      assertTrue(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int1);
      
      String string0 = Character.getName(1);
      assertNotNull(string0);
      assertEquals("START OF HEADING", string0);
      
      classWriter0.visitSource("", "xVxA(]m4S9GP* 1G");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newLong(0L);
      assertFalse(item2.equals((Object)item1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 139;
      ClassWriter classWriter0 = new ClassWriter(139);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "r U-C";
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFieldItem("r U-C", "r U-C", "r U-C");
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newFieldItem("r U-C", "r U-C", "r U-C");
      assertFalse(item2.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      
      classWriter0.index = 139;
      int int1 = Type.ARRAY;
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      int int2 = classWriter0.addType("r U-C");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int3 = Type.BOOLEAN;
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, (-1186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1186
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "GdJ,TUr:!!lTw4";
      int int0 = classWriter0.newUTF8("U&u(g-[V<");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      float float0 = Float.min(998.9F, 998.9F);
      assertEquals(998.9F, float0, 0.01F);
      
      float float1 = Float.sum(2, 2);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(4.0F, float1, 0.01F);
      
      int int1 = Character.MAX_RADIX;
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int2 = Short.BYTES;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      String string1 = "fA";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U&u(g-[V<";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "fA", "GdJ,TUr:!!lTw4", "@;kwXn", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      int int3 = 256;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-441));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.version = 2;
      int int0 = classWriter0.newUTF8("Synthetic");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("LocalVariableTable", (-441));
      assertTrue(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int1);
      
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      
      Item item0 = classWriter0.newConstItem("LocalVariableTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      classWriter0.visitInnerClass("scF\"T:N2mat2%0", (String) null, "", 12);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int3 = classWriter0.newConst(boolean0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(7, int3);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "ECF4O{X(()ss6Cxkd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-441));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newUTF8("Synthetic");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("LocalVariableTable", (-441));
      assertTrue(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int1);
      
      String string0 = "scF\"T:N2mat2%0";
      int int2 = classWriter0.addUninitializedType("LocalVariableTable", (-441));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      
      String string1 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Item item0 = classWriter0.newDouble(167);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(167, 1859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 167
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "GdJ,TUr:!!lTw4";
      int int1 = classWriter0.newUTF8("U&u(g-[V<");
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      
      float float0 = Float.min(998.9F, 1876.22F);
      assertEquals(998.9F, float0, 0.01F);
      
      int int2 = Character.MAX_RADIX;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(36, int2);
      
      Attribute attribute0 = new Attribute((String) null);
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      classWriter0.invalidFrames = true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassReader.WRITER;
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int3 = Short.BYTES;
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2, int3);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
