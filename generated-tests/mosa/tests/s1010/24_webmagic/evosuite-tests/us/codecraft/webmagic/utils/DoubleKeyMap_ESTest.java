/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:55:03 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap0.remove(integer0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Integer integer0 = new Integer((-662));
      BiFunction<Integer, Object, Map<Object, String>> biFunction0 = (BiFunction<Integer, Object, Map<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Map<Object, String>) null).when(biFunction0).apply(anyInt() , any());
      hashMap0.compute(integer0, biFunction0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      String string0 = doubleKeyMap0.get((Integer) null, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer0 = new Integer((-2723));
      doubleKeyMap0.put("", integer0, integer0);
      doubleKeyMap0.put("", integer0, integer0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.remove("", integer1);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Map<Object, String>, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, String, Integer>(map0, class0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Integer>();
      Integer integer1 = new Integer(1018);
      Integer integer2 = new Integer(0);
      doubleKeyMap2.put("", integer1, integer2);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1018);
      doubleKeyMap2.remove("", integer4);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Map<Object, String>, Map<String, Integer>> map1 = doubleKeyMap3.newMap();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Map<Object, String>, String, Integer> doubleKeyMap4 = new DoubleKeyMap<Map<Object, String>, String, Integer>(map1, class1);
      Class<Map> class2 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null, class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      doubleKeyMap0.put((Object) null, (Object) ";", (Object) ";");
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put((Integer) null, hashMap1);
      Integer integer0 = new Integer((-662));
      BiFunction<Integer, Object, Map<Object, String>> biFunction0 = (BiFunction<Integer, Object, Map<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Map<Object, String>) null).when(biFunction0).apply(anyInt() , any());
      hashMap0.compute(integer0, biFunction0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      String string0 = doubleKeyMap1.get((Integer) null, (Object) null);
      assertNull(string0);
  }
}
