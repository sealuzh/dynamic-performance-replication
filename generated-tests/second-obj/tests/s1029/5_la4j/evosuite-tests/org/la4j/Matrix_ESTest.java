/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:30:59 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-966.0));
      double[] doubleArray0 = new double[7];
      Matrix matrix0 = Matrix.from1DArray(979, 979, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInRow(979, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '979' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(695);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        basic1DMatrix0.getColumn(695);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '695' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 972;
      doubleArray0[1] = (double) 972;
      doubleArray0[2] = (double) 972;
      doubleArray0[3] = (double) 972;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(972, 972, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = denseVector0.blank();
      matrix0.setRow(4274, (Vector) denseVector0);
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.setAll((-3222.705670781538));
      MockRandom mockRandom0 = new MockRandom(4274);
      DenseVector.random(4274, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(4274, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 201;
      int int1 = 953;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(953);
      // Undeclared exception!
      basic2DMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-2028), (-2028));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2028x-2028
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(0, (-5067), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-5067
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.determinant();
      cRSMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2680L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      cRSMatrix1.shuffle();
      cRSMatrix1.setAll(0);
      MockRandom mockRandom1 = new MockRandom();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(0, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 72;
      int int1 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4299, 6);
      cCSMatrix0.toColumnVector();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      // Undeclared exception!
      try { 
        cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4299, 6);
      cCSMatrix0.rank();
      Matrix.identity(int0);
      int int1 = 3295;
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(int1, vectorProcedure0);
      int int2 = 2001;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom(int2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4388, 4388);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, (-95), 2, 2961, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -95, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2184.521668732044);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(0, 912);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][912..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      Locale locale0 = Locale.JAPANESE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0, "Cannot have negative rows or columns: ", ",I#P0");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 0 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(979, 979, 979);
      cCSMatrix0.iterator();
      Matrix matrix0 = cCSMatrix0.divide((-81.9569802607198));
      matrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("][");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom(9963L);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Matrix matrix0 = cRSMatrix0.power(0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnMajorSparseMatrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.add(0.0);
      sparseMatrix0.toRowMajorSparseMatrix();
      sparseMatrix0.determinant();
      sparseMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2680L);
      DenseVector.random(0, mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("        ");
      Matrix matrix0 = denseMatrix0.multiplyByItsTranspose();
      matrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(844, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.ints((long) 4274);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.identity((-836));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DenseMatrix.fromCSV("        ");
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1130L);
      int int0 = 10;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom((-225L));
          mockRandom0.nextBoolean();
          DenseVector.random(32, mockRandom0);
          DenseVector denseVector0 = DenseVector.random(32, mockRandom0);
          Matrix matrix0 = denseVector0.toRowMatrix();
          matrix0.blankOfRows(32);
          matrix0.toSparseMatrix();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 979;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(979);
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.max();
      int int1 = 13;
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(979, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 980
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4388, 4388);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(matrix0, matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      sparseMatrix0.multiplyByItsTranspose();
      sparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      int int0 = 0;
      Vector vector0 = denseMatrix0.getColumn(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      vector0.hadamardProduct(denseVector0);
      matrix0.setRow(0, vector0);
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInColumn(43, vectorProcedure0);
      int int1 = 111;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 0, 0, 0, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 111 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      int int0 = 4274;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      Vector vector0 = denseMatrix0.getColumn(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      vector0.hadamardProduct(denseVector0);
      vector0.blank();
      matrix0.setRow(4274, vector0);
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate1);
      matrix0.insert((Matrix) denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 4274, 0, 4274, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4274, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix.identity(370);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.minInColumn(3);
      cRSMatrix0.setAll(503.786481576557);
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.add(0.0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = sparseMatrix0.toRowMajorSparseMatrix();
      sparseMatrix0.determinant();
      sparseMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2680L);
      DenseVector.random(0, mockRandom0);
      sparseMatrix0.hadamardProduct(matrix0);
      rowMajorSparseMatrix0.swapRows(240, 240);
      sparseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = 2504;
      rowMajorSparseMatrix0.kroneckerProduct(sparseMatrix0);
      sparseMatrix0.swapColumns(0, 2504);
      sparseMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 4388);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$SolverFactory$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      sparseMatrix0.swapColumns(0, (-3541));
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(8, mockRandom0);
      Object object0 = new Object();
      rowMajorSparseMatrix0.equals(object0);
      denseMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      denseMatrix0.getColumn(0);
      matrix0.equals((Matrix) denseMatrix0, (double) 0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$SolverFactory$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 4388;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4388, 4388);
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateAt(Integer.MAX_VALUE, 8, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      Vector vector0 = denseMatrix0.getColumn(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      vector0.hadamardProduct(denseVector0);
      vector0.blank();
      matrix0.setRow(4274, vector0);
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate1);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 4274, 0, 4274, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4274, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      MockRandom mockRandom0 = new MockRandom((-1248));
      int int0 = (-836);
      sparseMatrix0.diagonalProduct();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextGaussian();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInRow(8, vectorAccumulator0);
      int int1 = 72;
      // Undeclared exception!
      try { 
        mockRandom1.ints((long) (-836), 72, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 979;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(979, 979);
      columnMajorSparseMatrix0.nonZeroIterator();
      columnMajorSparseMatrix0.diagonalProduct();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInRow(979, vectorAccumulator0);
      int int1 = 878;
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) (-836), 3, 878);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 979;
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(979);
          cCSMatrix0.nonZeroIterator();
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn((double)879).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.updateAt(979, 879, matrixFunction0);
          cCSMatrix0.toMatrixMarket();
          MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn(1733.35589).when(matrixAccumulator0).accumulate();
          cCSMatrix0.foldNonZero(matrixAccumulator0);
          cCSMatrix0.max();
          LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
          SparseVector sparseVector0 = SparseVector.zero(979);
          cCSMatrix0.multiply((Vector) sparseVector0);
          // Undeclared exception!
          cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(979, 100.0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2271);
      int int0 = (-3541);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.rank();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.toColumnVector();
      cCSMatrix0.removeFirstRow();
      int int1 = 2969;
      int int2 = 1034;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int1, int2, int0);
      int int3 = 2147481405;
      cCSMatrix1.swapColumns(int3, int1);
      int int4 = 1121;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(int4);
      SparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix1, cCSMatrix1);
      int int5 = 32;
      int int6 = (-150);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int5, int6);
      cRSMatrix0.product();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      Matrix.identity(int6);
      int int7 = (-593);
      int int8 = (-1767);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int0, int8);
      int int9 = 194;
      matrix0.removeColumn(int9);
      columnMajorSparseMatrix0.removeFirstRow();
      matrix0.removeColumn(int7);
      cRSMatrix1.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix.constant(0, 0, (-2237.564012759));
      Matrix.constant(973, 973, 0.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("3*w7\"!y[z%UW~O/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(979, 979);
      columnMajorSparseMatrix0.nonZeroIterator();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-966.0));
      columnMajorSparseMatrix0.max();
      columnMajorSparseMatrix0.toMatrixMarket();
      columnMajorSparseMatrix0.swapColumns(979, 979);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 979.0;
      Matrix.from1DArray(979, 979, doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(979);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..978
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getInstance(locale0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformRow(3312, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInRows(vectorAccumulator0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) basic2DMatrix0);
      CCSMatrix.identity(0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.add((double) 9);
      basic2DMatrix1.ensureDimensionsAreCorrect(1, 9);
      CRSMatrix cRSMatrix1 = (CRSMatrix)matrix0.blankOfShape(1, 1075);
      // Undeclared exception!
      try { 
        sparseMatrix0.hadamardProduct(cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 1x1075.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7);
      cCSMatrix0.nonZeroIterator();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow(37, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 979;
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(979);
          cCSMatrix0.nonZeroIterator();
          cCSMatrix0.rowMajorIterator();
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          doReturn((double)37, (double)37, (-4.2674994493254665), 1168.0, (double)37).when(vectorFunction0).evaluate(anyInt() , anyDouble());
          // Undeclared exception!
          cCSMatrix0.transformRow(37, vectorFunction0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4299, 6);
      int int0 = Double.BYTES;
      Matrix.identity(6);
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(3295, vectorProcedure0);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom(2001);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      int int0 = (-1266);
      MockRandom mockRandom0 = new MockRandom((-1266));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      int int1 = (-737);
      sparseMatrix0.maxInRow((-737));
      sparseMatrix0.setAll(100.0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("FORWARD_BACK_SUBSTITUTION");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 879;
      int int1 = 1107;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(1107, 879);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1107..0][879..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      int int0 = 0;
      Vector vector0 = denseMatrix0.getColumn(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      vector0.hadamardProduct(denseVector0);
      matrix0.setRow(4274, vector0);
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInColumn(60, vectorProcedure0);
      matrix0.rank();
      int int1 = 111;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 4274, 0, 4274, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4274, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      int int0 = (-1266);
      MockRandom mockRandom0 = new MockRandom((-1266));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      int int1 = (-737);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInRow((-737));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-737' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      Matrix matrix0 = Matrix.identity(76);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.sliceBottomRight((-836), 32);
      sparseMatrix0.toColumnVector();
      sparseMatrix0.columns();
      int int1 = (-373);
      double double0 = 2.0;
      Matrix.constant(int1, int0, double0);
      MockRandom mockRandom1 = new MockRandom();
      String string0 = "3*w7\"!\\y[z%UW~O/";
      Basic2DMatrix.fromCSV(string0);
      Matrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 10;
      Matrix matrix0 = Matrix.zero(10, 10);
      matrix0.removeFirstRow();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(10, 10, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1.0));
      Vector vector0 = denseMatrix0.getColumn(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      vector0.hadamardProduct(denseVector0);
      vector0.blank();
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      denseMatrix0.is(advancedMatrixPredicate1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInColumn(0, vectorProcedure0);
      int int1 = 111;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 111, 0, (-2781), 296);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2781x296
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2184.521668732044);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2184.521668732044;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 912, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      Matrix.diagonal(0, 1892.16590259954);
      // Undeclared exception!
      try { 
        Matrix.constant(5, (-2171), 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 8;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom((-1248));
      sparseMatrix0.norm();
      sparseMatrix0.spliterator();
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) (-1248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      Matrix matrix0 = sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom((-1248));
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      DenseVector.constant(32, (-3959.74912));
      matrix0.toDenseMatrix();
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-836), (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -836x-836
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1079;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(296, 296);
      rowMajorSparseMatrix0.columnMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1079, (double)1079, 0.0, (double)1079, (double)296).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 975;
      int int1 = 72;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(975, 72);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)975).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(975, 72);
      cRSMatrix0.transformColumn(72, (VectorFunction) null);
      int int2 = 9;
      int int3 = 199;
      cRSMatrix0.swapColumns(int1, int3);
      cRSMatrix0.equals((Matrix) cCSMatrix0, (double) int2);
      MockRandom mockRandom0 = new MockRandom(int3);
      DenseMatrix.randomSymmetric(int0, mockRandom0);
      Object object0 = new Object();
      int int4 = (-2378);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int2, int4);
      MatrixFunction matrixFunction0 = null;
      cRSMatrix0.update(matrixFunction0);
      int int5 = 8;
      int int6 = 4040;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int5, int6);
      cRSMatrix0.removeColumn(int0);
      cRSMatrix1.removeFirstRow();
      int int7 = 166;
      cRSMatrix2.removeColumn(int7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 975;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(975, 72);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1001.0)).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int int1 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 72);
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(13, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 4);
      RowMajorSparseMatrix.diagonal(4, 4);
      Matrix matrix0 = cRSMatrix0.subtract((double) 4);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixMatrixOperation0, (Matrix) cRSMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 4, 4);
      int int0 = 949;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      int int1 = 10;
      Matrix.zero(10, 949);
      matrix0.copyOfRows(4);
      int int2 = 9;
      matrix1.insert(matrix0, 4, 949, 9, 9);
      int int3 = matrix0.rank();
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation1 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.apply(matrixOperation1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int2;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      Matrix.from1DArray(int1, int3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      double[][] doubleArray0 = new double[0][4];
      Matrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.trace();
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("iVQj)E;c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 37;
      double double0 = (-2086.12073633);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(37, (-2086.12073633));
      basic2DMatrix0.blankOfColumns(8);
      int int1 = 5;
      Matrix.constant(5, 0, (-2086.12073633));
      int int2 = (-294);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      // Undeclared exception!
      try { 
        DenseVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2184.521668732044);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.sliceBottomRight(0, 0);
      int int0 = 4274;
      int int1 = (-836);
      int[] intArray0 = new int[7];
      intArray0[0] = 4274;
      intArray0[1] = (-836);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 4274;
      intArray0[6] = (-836);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4274' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(979, 979, 979);
      cCSMatrix0.nonZeroIterator();
      Double double0 = new Double((-966.0));
      cCSMatrix0.max();
      cCSMatrix0.swapColumns(979, 979);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      Matrix matrix0 = Matrix.from1DArray(979, 979, doubleArray0);
      int int0 = (-602);
      // Undeclared exception!
      try { 
        matrix0.infinityNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 201;
      int int1 = 953;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(953);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      basic2DMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(8, 2184.521668732044);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      int int0 = (-836);
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextDouble();
      mockRandom0.ints((long) 912);
      matrix0.trace();
      // Undeclared exception!
      try { 
        SparseMatrix.random(912, 3, (double) 1470, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.KOREAN;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[6];
      DecimalFormat decimalFormat1 = new DecimalFormat();
      Vector vector0 = cRSMatrix0.toColumnVector();
      vector0.toSparseVector();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      sparseMatrix0.swapColumns(0, (-3541));
      matrix0.equals((Matrix) sparseMatrix0, (double) 0);
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseMatrix.randomSymmetric(8, mockRandom0);
      Object object0 = new Object();
      rowMajorSparseMatrix0.equals(object0);
      Matrix.block(sparseMatrix0, sparseMatrix0, matrix0, rowMajorSparseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(813);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 986;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(986, 986);
      columnMajorSparseMatrix0.nonZeroIterator();
      Double double0 = new Double((-966.0));
      columnMajorSparseMatrix0.swapColumns(986, 986);
      int int1 = (-602);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn((-602));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..985
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 57;
      Matrix matrix0 = Matrix.identity(57);
      matrix0.setColumn(3, 2770.5009665530274);
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toString();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix.unit(5, 3429);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("Ul0$\"q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 979;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(979, 979);
      columnMajorSparseMatrix0.nonZeroIterator();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(979, Integer.MAX_VALUE, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Matrix matrix0 = sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, sparseMatrix0);
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getInstance(locale0);
      int int0 = 1006;
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 1006, 1006);
      Matrix matrix1 = cRSMatrix0.insert((Matrix) basic2DMatrix0);
      matrix1.toColumnMajorSparseMatrix();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.add((double) 9);
      matrix0.toRowVector();
      basic2DMatrix1.ensureDimensionsAreCorrect(1, 9);
      int int1 = 789;
      VectorProcedure vectorProcedure0 = null;
      basic2DMatrix1.insert(matrix1, (-2883), 9);
      basic2DMatrix0.eachInColumn(int1, vectorProcedure0);
      basic2DMatrix1.removeRow(int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      Locale locale0 = Locale.JAPANESE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.applyPattern("GUEU:Koj");
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0, "Cannot have negative rows or columns: ", "GUEU:Koj");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector.fromMap(hashMap0, 0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (-1.0));
      MockRandom mockRandom1 = new MockRandom((-3039L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(8, mockRandom1);
      Object object0 = new Object();
      denseMatrix0.equals((Object) basic2DMatrix0);
      Matrix matrix0 = cRSMatrix0.divide(1L);
      Matrix.block(basic2DMatrix0, matrix0, basic2DMatrix0, matrix0);
      basic2DMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 979;
      Matrix matrix0 = Matrix.diagonal(979, 100.0);
      RowMajorSparseMatrix.identity(2271);
      int int1 = 293;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(979, 293);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2271, 2271);
      int int2 = 9;
      basic2DMatrix0.swapColumns(9, 979);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 293);
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom((-4313L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric((-3541), mockRandom0);
      Object object0 = new Object();
      Matrix.block(cRSMatrix0, denseMatrix0, cRSMatrix0, cRSMatrix0);
      int int3 = 9;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int3;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) long0;
      Matrix.identity(int0);
      cRSMatrix0.removeColumn(int1);
      matrix0.removeFirstRow();
      cRSMatrix0.removeColumn(int3);
      denseMatrix0.minInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 8;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 8);
      Matrix matrix0 = sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(76);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1854.0, (double)8, 0.0, (double)1L, (double)8).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      sparseMatrix0.each(matrixProcedure0);
      int int1 = 32;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.sliceBottomRight(0, 32);
      double double0 = (-3959.74912);
      matrix0.getColumn(32);
      matrix0.columns();
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, cRSMatrix1);
      DenseVector denseVector0 = DenseVector.constant(int1, double0);
      int int2 = 290;
      cRSMatrix0.insertRow(int2, denseVector0);
      String string0 = "\"dGa~iNF#lWkk+)3C\\,";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket(string0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInColumn(int1, vectorProcedure0);
      Matrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2271);
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom((-1L));
      // Undeclared exception!
      rowMajorSparseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("        ");
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom(1493L);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1978), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-3333);
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        Matrix.random(0, (-3333), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 747.9;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-350.3015);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1879.35);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (-2387.986602);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.shuffle();
      matrix0.getColumn(2788);
      // Undeclared exception!
      try { 
        matrix0.swapRows(17, 2788);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 366;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(366, 366);
      // Undeclared exception!
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = rowMajorSparseMatrix0.transformColumn(0, vectorFunction0);
      sparseMatrix0.swapColumns(0, 726);
      rowMajorSparseMatrix0.equals(matrix1, (double) 199);
      sparseMatrix0.toRowMajorSparseMatrix();
      CRSMatrix.zero(726, 681, 726);
      rowMajorSparseMatrix0.determinant();
      matrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2566L);
      MockRandom mockRandom1 = new MockRandom(2566L);
      DenseVector denseVector0 = DenseVector.random(0, mockRandom1);
      denseVector0.manhattanNorm();
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2166, 2166);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      sparseVector0.non(vectorPredicate0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseVector denseVector0 = DenseVector.random(4, mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(4, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(0, 0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getInstance(locale0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesSubtraction0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cRSMatrix1.insert((Matrix) basic2DMatrix0);
      cCSMatrix0.subtract((Matrix) cCSMatrix1);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = 201;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(201);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseVector denseVector0 = DenseVector.random(201, mockRandom0);
      int int1 = (-1857);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn((-1857), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..200
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.add(0.0);
      sparseMatrix0.toRowMajorSparseMatrix();
      Integer integer0 = new Integer(0);
      sparseMatrix0.setAll((double) integer0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 673;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.determinant();
      cRSMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2680L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix0.power(950);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfColumns(8);
      cRSMatrix0.determinant();
      cRSMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(2680L);
      int[] intArray0 = new int[1];
      intArray0[0] = 19;
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 2181.176156066735);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      sparseMatrix0.swapColumns(0, (-3557));
      matrix0.equals((Matrix) sparseMatrix0, (double) 0);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-3557);
      doubleArray1[1] = 2181.176156066735;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-3557);
      doubleArray1[4] = 2181.176156066735;
      doubleArray1[5] = 2181.176156066735;
      doubleArray1[6] = (double) 1L;
      doubleArray1[7] = (double) (-3557);
      doubleArray0[0] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(8, mockRandom0);
      Object object0 = new Object();
      sparseMatrix0.add((Matrix) cRSMatrix0);
      cRSMatrix0.equals(object0);
      Matrix.block(sparseMatrix0, sparseMatrix0, matrix0, cRSMatrix0);
      denseMatrix0.toString();
      cRSMatrix0.setAll(2181.176156066735);
      MockRandom mockRandom1 = new MockRandom();
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      sparseMatrix0.blank();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints();
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getInstance(locale0);
      int int0 = 9;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInRows(vectorAccumulator0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.insert((Matrix) basic2DMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.setAll(0.0);
      ColumnMajorSparseMatrix.fromCSV("0.000");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 844, (Random) mockRandom0);
      cCSMatrix1.setAll(1737.733);
      MockRandom mockRandom1 = new MockRandom();
      cCSMatrix0.hadamardProduct(cCSMatrix1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice((-1547), (-1547), (-2147479186), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-1547..-2147479186][-1547..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints((long) 0);
      mockRandom1.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix.unit(0, 0);
      Locale locale0 = Locale.KOREAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      NumberFormat.getInstance(locale0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.trace();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.constant(574, 0.0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertRow(574, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.setSeed(1827L);
      mockRandom0.ints(1L);
      mockRandom0.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.each(matrixProcedure0);
      sparseMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      Locale locale0 = Locale.KOREAN;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInRows(vectorAccumulator0);
      CCSMatrix.identity(0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.add((double) 9);
      basic2DMatrix1.minInRow(9);
      sparseMatrix0.toRowVector();
      basic2DMatrix1.ensureDimensionsAreCorrect(1, 9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints((long) 0);
      mockRandom1.nextDouble();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      Locale locale0 = Locale.KOREAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      NumberFormat.getInstance(locale0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.maxInColumn(21);
      cRSMatrix0.trace();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transform(matrixFunction0);
      int int0 = 10;
      int int1 = 3325;
      // Undeclared exception!
      try { 
        SparseMatrix.random(10, 3325, 2495.8, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
