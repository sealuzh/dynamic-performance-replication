/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:45:34 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.removeLastRow();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        Matrix.constant((-1288490189), 4398, (-1288490189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2146L));
      Matrix matrix0 = Matrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow((-1260));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DecimalFormatSymbols.getInstance();
      boolean boolean0 = matrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 8);
      assertFalse(matrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(boolean0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertEquals(0.125, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.setColumn(0, 0.0);
      rowMajorSparseMatrix0.sliceTopLeft(0, 3002);
      rowMajorSparseMatrix0.columnMajorIterator();
      assertEquals(0.109375, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      assertEquals(5, denseMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.minInColumn(5);
      DenseMatrix denseMatrix1 = cRSMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix1.rows());
      
      Matrix matrix0 = Matrix.identity(5);
      assertEquals(5, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfRows(0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(27, 27);
      assertEquals(27, denseMatrix0.rows());
      
      Matrix.identity(27);
      cRSMatrix0.maxInColumn(2482);
      assertTrue(cRSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      cRSMatrix0.equals((Matrix) cRSMatrix1, (double) 8);
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      cRSMatrix1.mkString((NumberFormat) decimalFormat0);
      cRSMatrix0.toColumnVector();
      int int0 = (-5054);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.identity((-5054));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.setColumn(0, 0.0);
      rowMajorSparseMatrix0.subtract(0.0);
      rowMajorSparseMatrix0.sliceBottomRight(0, 8);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.removeLastRow();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      DecimalFormatSymbols.getInstance();
      cCSMatrix0.equals((Matrix) columnMajorSparseMatrix0, 16.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(4332, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
          Matrix matrix0 = Matrix.unit(8, 8);
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
          AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
          doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
          rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
          MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
          MockRandom mockRandom0 = new MockRandom();
          Matrix.randomSymmetric(56, mockRandom0);
          matrix0.add((Matrix) columnMajorSparseMatrix0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(32, 17);
      matrix0.columnMajorIterator();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1658, (-1.0));
      // Undeclared exception!
      try { 
        denseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1658x1658 does not equal to 32x17.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceBottomRight(2423, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2423..8][8..8].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 557;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 37;
      doubleArray0[3] = 1.0;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 37;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(5, 557, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(8, 8);
      MockRandom mockRandom0 = new MockRandom(8);
      // Undeclared exception!
      try { 
        Matrix.random(8, (-3411), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.euclideanNorm();
      rowMajorSparseMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(8, 8);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(547);
      Vector vector0 = Vector.unit(428);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 428. Should be: 547.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 5;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(48, 5);
      // Undeclared exception!
      try { 
        Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 0);
      DecimalFormatSymbols.getInstance();
      rowMajorSparseMatrix0.equals(matrix0, (double) 37);
      rowMajorSparseMatrix0.sliceTopLeft(0, 0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(8, 8);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      Matrix.diagonal(0, Double.NEGATIVE_INFINITY);
      basic2DMatrix0.add(Double.NEGATIVE_INFINITY);
      basic2DMatrix0.multiply((double) 8);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(17, 503.4);
      Matrix.identity(0);
      // Undeclared exception!
      try { 
        Matrix.from1DArray(6, (-2417), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 6x-2417
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.shuffle();
      Matrix.diagonal(8, (-972));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      denseMatrix0.multiply((double) 0);
      MockRandom mockRandom1 = new MockRandom((-2146L));
      denseMatrix0.equals((Object) mockRandom1);
      denseMatrix0.blankOfRows(0);
      Integer integer0 = new Integer(0);
      Matrix matrix0 = denseMatrix0.copyOfRows(0);
      matrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      NumberFormat.getInstance();
      denseMatrix0.removeFirstColumn();
      denseMatrix0.equals((Object) numberFormat0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumn(5, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      Matrix matrix0 = denseMatrix0.transpose();
      MatrixPredicate matrixPredicate0 = null;
      // Undeclared exception!
      try { 
        matrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.blankOfColumns(14);
      // Undeclared exception!
      CRSMatrix.from1DArray(1968526676, 1968526676, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(89, 89);
      String string0 = rowMajorSparseMatrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(89, 89);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix1.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix.fromMatrixMarket(string0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix1.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 3335);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      basic2DMatrix0.equals((Matrix) basic2DMatrix1, (double) 0);
      basic2DMatrix1.norm();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 45);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = denseMatrix0.multiply((double) 0);
      MockRandom mockRandom1 = new MockRandom(0);
      denseMatrix0.equals((Object) null);
      denseMatrix0.blankOfRows(0);
      Integer integer0 = new Integer(1173);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows((-166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -166x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 2046;
      Matrix matrix0 = Matrix.zero(2046, 1681);
      Matrix matrix1 = matrix0.blankOfColumns((-2147117244));
      matrix1.toRowMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = null;
      matrix1.foldColumn(int0, vectorAccumulator0);
      int int1 = (-2147117369);
      int int2 = (-2147117182);
      Matrix.zero(int1, int2);
      double double0 = (-1.0);
      matrix1.divide(double0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn((-45));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(8, 8);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      Matrix.identity(8);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      matrix0.maxInColumn((-2659));
      int int0 = 4;
      int int1 = 10;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-2659), 4, 2167, 10, 16, 2604);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2167, 10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.unit(55, 55);
          OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
          OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new OoPlaceMatricesAddition();
          matrix0.copyOfRows(2540);
          CRSMatrix.zero(53, 2540, 53);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-2146L));
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 0);
      cRSMatrix0.hashCode();
      Matrix matrix0 = cRSMatrix0.removeRow(0);
      matrix0.toRowVector();
      cRSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(7, 5);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.KOREA;
      Locale locale2 = locale1.stripExtensions();
      NumberFormat.getPercentInstance(locale2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      basic2DMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      // Undeclared exception!
      rowMajorSparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      denseMatrix0.removeFirstColumn();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(1947, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1947
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DecimalFormatSymbols.getInstance();
      matrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 8);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(0, (-2040109464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][0..-2040109464].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(0, 0);
      basic2DMatrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.zero(0, 3335);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      basic2DMatrix0.equals((Matrix) basic2DMatrix1, (double) 0);
      Integer integer0 = new Integer(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.each(matrixProcedure0);
      basic2DMatrix1.divide(0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix1.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(45, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix1.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix rowMajorSparseMatrix2 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n8 8 8\n1 1 8.000\n2 2 8.000\n3 3 8.000\n4 4 8.000\n5 5 8.000\n6 6 8.000\n7 7 8.000\n8 8 8.000\n");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix1.non(advancedMatrixPredicate1);
      rowMajorSparseMatrix1.toSparseMatrix();
      rowMajorSparseMatrix2.subtract((double) 8);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n8 8 8\n1 1 8.000\n2 2 8.000\n3 3 8.000\n4 4 8.000\n5 5 8.000\n6 6 8.000\n7 7 8.000\n8 8 8.000\n");
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight((-1362), (-1362));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1362' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastRow();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 2603;
      int int1 = (-1495);
      int int2 = 2739;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, (-1495), 2603, (-2809), 2739, 2739, 2603);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2809, 2739
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(10.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix1.fold(matrixAccumulator0);
      rowMajorSparseMatrix1.toCSV();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      columnMajorSparseMatrix0.maxInColumn(3);
      int int0 = (-2921);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-2921), Integer.MAX_VALUE, 20, 1264, (-1129), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1129x8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(55, 55);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(55);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 8;
      basic2DMatrix0.select(intArray0, intArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.partiallyApply(rowMajorSparseMatrix0);
      ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 1000;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(45, 10, doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) denseMatrix0, 55, 10, 8, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 45 cols at 55, 10 in a 55x55 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("5");
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.shuffle();
      denseMatrix0.toSparseMatrix();
      int int0 = Double.SIZE;
      matrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(64, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.identity(45);
      matrix0.subtract(137.63720427268183);
      matrix0.removeRow(4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      RowMajorSparseMatrix.zero(0, 3348);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(3348, (-2040109464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..3348][0..-2040109464].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInRow(1636, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int0 = 297;
      int int1 = (-213);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-213), 1278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -213x1278
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      matrix0.maxInColumn((-2659));
      int int0 = 4;
      int int1 = (-13);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-2659), 4, 2167, (-13), 16, 2578);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2167, -13
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(8, 8);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.non(matrixPredicate0);
      Matrix.identity(8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      rowMajorSparseMatrix0.equals(matrix0, (double) 8);
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      Matrix matrix1 = rowMajorSparseMatrix0.removeFirstColumn();
      locale0.toString();
      matrix1.toColumnVector();
      Matrix.identity(3405);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix.unit(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(45, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix1.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix rowMajorSparseMatrix2 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n8 8 8\n1 1 8.000\n2 2 8.000\n3 3 8.000\n4 4 8.000\n5 5 8.000\n6 6 8.000\n7 7 8.000\n8 8 8.000\n");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix2.insertRow((-2250), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          DenseMatrix denseMatrix0 = DenseMatrix.random(55, 55, mockRandom0);
          // Undeclared exception!
          denseMatrix0.multiply((double) 55);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("5");
      sparseVector0.toCSV();
      sparseVector0.toDiagonalMatrix();
      CRSMatrix.fromCSV("5");
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(7, 100.0);
      Matrix matrix0 = Matrix.unit(7, 7);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(Integer.MAX_VALUE, (-3386), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2147483647x-3386
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = Matrix.identity(8);
      matrix0.power(8);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.setColumn(0, 0.0);
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.toRowVector();
      rowMajorSparseMatrix0.blank();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(37, 37, mockRandom0);
      denseMatrix0.multiply((double) 37);
      MockRandom mockRandom1 = new MockRandom((-2146L));
      CRSMatrix cRSMatrix0 = new CRSMatrix(37, 37, 0);
      denseMatrix0.equals((Object) mockRandom1);
      cRSMatrix0.hashCode();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.subtract((double) 0);
      CRSMatrix.fromMatrixMarket("7 ");
      VectorAccumulator vectorAccumulator0 = null;
      denseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(55, 55);
      Matrix matrix0 = Matrix.unit(55, 55);
      int int0 = 118;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(33, 55, 118);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 55 rows and 55 cols at 0, 0 in a 33x55 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      Matrix matrix0 = basic2DMatrix0.multiply((double) 0);
      int int0 = 7;
      basic2DMatrix0.maxInColumn(7);
      matrix0.norm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, 297, 37, 0, 2507, 297, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 2507
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(37, 37, mockRandom0);
      Matrix matrix0 = denseMatrix0.multiply((double) 37);
      MockRandom mockRandom1 = new MockRandom((-2146L));
      Matrix matrix1 = Matrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix1.toRowMajorSparseMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberFormat.getPercentInstance();
      matrix1.toCSV((NumberFormat) decimalFormat0);
      Matrix matrix2 = denseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      matrix0.euclideanNorm();
      Matrix matrix3 = denseMatrix0.copyOfRows(0);
      matrix2.toString();
      matrix2.euclideanNorm();
      matrix3.toColumnVector();
      matrix2.sliceTopLeft(0, 0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix1.apply(matrixOperation0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DecimalFormatSymbols.getInstance();
      Matrix matrix2 = matrix1.insert(matrix0);
      // Undeclared exception!
      try { 
        matrix2.insert((Matrix) rowMajorSparseMatrix0, 5, 5, 578, 8, 578, (-2419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 578x-2419
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      int int0 = 672;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.power((-2196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2196.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.removeLastRow();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0");
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix1);
      DecimalFormatSymbols.getInstance();
      columnMajorSparseMatrix0.equals((Matrix) cRSMatrix0, (-264.46));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
      columnMajorSparseMatrix0.columns();
      rowMajorSparseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.rank();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      Matrix.identity(8);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.euclideanNorm();
      Matrix matrix0 = Matrix.unit(8, 8);
      rowMajorSparseMatrix0.shuffle();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      matrix0.rows();
      sparseMatrix0.determinant();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix0.toCSV(numberFormat0);
      Matrix.identity(8);
      matrix0.trace();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 93;
      int int1 = 32;
      CRSMatrix cRSMatrix0 = new CRSMatrix(93, 32);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(93);
      int int2 = 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(1, vectorFunction0);
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = cRSMatrix0.multiplyByItsTranspose();
      matrix2.maxInRow(int2);
      String string0 = "/oV?LsQ";
      cRSMatrix0.mkString(string0, string0);
      cRSMatrix0.infinityNorm();
      int int3 = (-2388);
      Matrix matrix3 = matrix1.copyOfShape(int3, int3);
      matrix3.swapColumns(int3, int1);
      matrix0.iterator();
      int int4 = (-2358);
      Matrix.zero(int0, int4);
      matrix2.rank();
      MatrixMatrixOperation<SparseMatrix> matrixMatrixOperation0 = null;
      matrix2.apply(matrixMatrixOperation0, (Matrix) sparseMatrix0);
      int int5 = (-1818);
      matrix1.copyOfColumns(int5);
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.removeLastRow();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) cCSMatrix0);
      columnMajorSparseMatrix0.equals((Matrix) cCSMatrix0, (-2056.443538370048));
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(712);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(712, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Basic2DMatrix.zero(8, 8);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      rowMajorSparseMatrix0.multiplyByItsTranspose();
      CRSMatrix.zero(8, 8, 8);
      Locale locale0 = Locale.FRENCH;
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      int int0 = (-1737);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns((-1737), 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1737' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom(1543L);
      matrix1.equals((Object) rowMajorSparseMatrix0);
      Matrix matrix2 = matrix0.blankOfRows(849);
      Integer integer0 = new Integer((-237));
      Matrix matrix3 = matrix1.copyOfRows(8);
      matrix2.toColumnVector();
      matrix3.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      DecimalFormatSymbols.getInstance();
      matrix0.equals((Matrix) cRSMatrix0, 1.0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = denseMatrix0.multiply((double) 0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix1.equals((Matrix) columnMajorSparseMatrix0, 0.0);
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getPercentInstance(locale0);
      matrix1.toColumnVector();
      Matrix.identity(0);
      matrix0.subtract((Matrix) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      denseMatrix0.multiply((double) 0);
      MockRandom mockRandom1 = new MockRandom((-2182L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2182L);
      doubleArray0[1] = (double) (-2182L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2182L);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Locale locale0 = Locale.FRENCH;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = matrix0.toRowMajorSparseMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      rowMajorSparseMatrix1.toCSV((NumberFormat) decimalFormat0);
      rowMajorSparseMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeRow(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(672, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix1.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n8 8 8\n1 1 8.000\n2 2 8.000\n3 3 8.000\n4 4 8.000\n5 5 8.000\n6 6 8.000\n7 7 8.000\n8 8 8.000\n");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.update(matrixFunction0);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow((-872), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      DenseMatrix.identity(5);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(785, 755, 785);
      Matrix matrix0 = Matrix.identity(785);
      matrix0.update((MatrixFunction) null);
      denseMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(0, 0, mockRandom0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      MockRandom mockRandom1 = new MockRandom((-2146L));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-3862.148842593582), (Random) mockRandom1);
      basic2DMatrix0.equals((Object) cRSMatrix0);
      basic2DMatrix0.blankOfRows(0);
      Integer integer0 = new Integer(0);
      cRSMatrix0.copyOfRows(7);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.rows();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 29;
      Matrix matrix0 = Matrix.unit(29, 37);
      String string0 = matrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      RowMajorSparseMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Basic2DMatrix.identity(59);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      denseMatrix0.removeFirstColumn();
      denseMatrix0.mkString("}bjP", "}bjP");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(89, 89);
      Matrix matrix0 = Matrix.unit(89, 89);
      Matrix matrix1 = matrix0.copyOfColumns(17);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix.zero(89, 89, 89);
      matrix0.insert((Matrix) rowMajorSparseMatrix0);
      matrix1.maxInRow(242);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      Matrix matrix0 = Matrix.unit(8, 8);
      rowMajorSparseMatrix0.shuffle();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      matrix0.rows();
      sparseMatrix0.determinant();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("5");
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.shuffle();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.toSparseMatrix();
      denseMatrix0.rows();
      matrix0.determinant();
      denseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 55;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(55, 55, mockRandom0);
      // Undeclared exception!
      denseMatrix0.multiply((double) 55);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(59);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat.getPercentInstance(locale1);
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(55, 55);
      int int0 = 521;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(521);
      int int1 = 45;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(8, 8);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply((DenseMatrix) basic2DMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      cRSMatrix0.equals((Matrix) cRSMatrix1, (double) 8);
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      cRSMatrix1.mkString((NumberFormat) decimalFormat0);
      rowMajorSparseMatrix0.toColumnVector();
      basic2DMatrix1.hadamardProduct(cRSMatrix0);
      basic2DMatrix1.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("5");
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.shuffle();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.toSparseMatrix();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 13, 13);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      matrix0.toColumnVector();
      cRSMatrix0.swapRows(10, 10);
      // Undeclared exception!
      try { 
        cRSMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("5");
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.shuffle();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.toSparseMatrix();
      denseMatrix0.rows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-1876), (-2853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1876x-2853
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      rowMajorSparseMatrix0.toDenseMatrix();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      rowMajorSparseMatrix0.swapColumns(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new OoPlaceMatricesAddition();
      CRSMatrix.zero(282, 282, 8);
      CCSMatrix cCSMatrix0 = new CCSMatrix(282, 8, 282);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 5;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(7, 5);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rows();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      basic2DMatrix0.determinant();
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.9375;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(5, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(89);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.multiply((-1989.2752794904));
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.block(basic2DMatrix0, matrix0, matrix0, matrix0);
      basic2DMatrix1.rank();
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.KOREA;
      locale1.stripExtensions();
      NumberFormat.getPercentInstance(locale1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix1.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 37);
      matrix0.toMatrixMarket();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 45);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.non(advancedMatrixPredicate0);
      RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      matrix0.setRow(2, 343.567);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(6, 45, (-2004318070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2004318070.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8, 8);
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.toMatrixMarket();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(45);
      Matrix matrix0 = Matrix.fromCSV("");
      matrix0.toRowMajorSparseMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      cRSMatrix0.insert(matrix0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 45;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) 45;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(10, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(89, 89);
      Matrix matrix0 = Matrix.unit(89, 89);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 7.105427357601004E-13;
      doubleArray2[1] = (double) 89;
      doubleArray2[2] = 7.105427357601004E-13;
      doubleArray2[3] = 7.105427357601004E-13;
      doubleArray0[1] = doubleArray2;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.rank();
      Locale locale0 = Locale.FRENCH;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
  }
}
