/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:26:16 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(15.938791755232298, 15.938791755232298, 15.938791755232298, 15.938791755232298, 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(3.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2103.364), mnStrategy0, (-1185.39175433672));
      int[] intArray0 = new int[1];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1871.5364772816, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.05;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy(38);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2.590960438901121E7), mnStrategy1, 2594.405859038);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-2.590960438901121E7), 4220);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3171.2882154551294), 100.0, 100.0, (-3171.2882154551294), 100.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(3.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2103.364), mnStrategy0, (-1184.9093161118287));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1871.5364772816, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1356.4791250026294), 499.56, (-1356.4791250026294), Double.POSITIVE_INFINITY, 2310.754).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3617.0136686145);
      doubleArray0[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0.5);
      int[] intArray0 = new int[5];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 3);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1216.2783961118, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.1), (-0.1), (-2649.2), 2.1622776601684692, (-0.1)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1871.5364772816, mnStrategy0, 2.1622776601684692);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-10.0), (-1705));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2126210902, (-2128479379));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3765.0479), 100);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(3.0);
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2103.364), 2474.8882183747783, 3.0, 2474.8882183747783, 1871.5364772816).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5.2, mnStrategy0, 6898.228079894698);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.69394384456403), 2212.879886392012, (-2.69394384456403), (-2.69394384456403), 2212.879886392012).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setGradientTolerance(3.0);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2103.364), mnStrategy0, (-2.69394384456403));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1871.5364772816, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[2] = 0.5;
      doubleArray1[2] = 0.1;
      doubleArray1[3] = (-3617.0136686145);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.1);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 0.0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3445.3), (-2.0), (-3445.3), 2361.0, 3414.9).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0.5);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1.0), 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, (-100.0), 2.0, (-100.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3728.0, mnStrategy0, 2.0);
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3728.0, (-1073741815));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-35, (-1073741815));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross1);
      assertNotSame(mnCross1, mnCross0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2061.6556745952), 2);
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross2);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1073741815), mnStrategy0, 0.5);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross1);
      
      MnCross mnCross3 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-1231.0514972237781), 1654);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross3);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross2);
      
      MnCross mnCross4 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1654, 3);
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnFunctionCross0.equals((Object)mnFunctionCross1));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross4);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnFunctionCross0, mnFunctionCross1);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-100.0);
      doubleArray1[3] = 1.0E-35;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-1073741815);
      doubleArray1[6] = (-100.0);
      doubleArray1[7] = (double) (-1073741815);
      doubleArray1[8] = (-100.0);
      MnCross mnCross5 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray1, (-485.2587176), 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross5.equals((Object)mnCross1));
      assertFalse(mnCross5.equals((Object)mnCross0));
      assertFalse(mnCross5.equals((Object)mnCross3));
      assertFalse(mnCross5.equals((Object)mnCross2));
      assertFalse(mnCross5.equals((Object)mnCross4));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertArrayEquals(new double[] {0.0, 0.0, (-100.0), 1.0E-35, 0.0, (-1.073741815E9), (-100.0), (-1.073741815E9), (-100.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnCross5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross5, mnCross1);
      assertNotSame(mnCross5, mnCross0);
      assertNotSame(mnCross5, mnCross3);
      assertNotSame(mnCross5, mnCross2);
      assertNotSame(mnCross5, mnCross4);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-1.0), (-1.0), (-1.0)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, (-1.0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MnUserParameters mnUserParameters0 = null;
      try {
        mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 1.0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      mnUserParameterState0.setLowerLimit(0, 1.0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(mnStrategy1.isHigh());
      assertFalse(mnStrategy1.isLow());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertNotNull(mnStrategy1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3315.4136165119, 694.3417761089047, 1.0, 1.0E-6, 4.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy1.setGradientNCycles(0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(mnStrategy1.isHigh());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy1.gradientNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertNotSame(mnStrategy1, mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 694.3417761089047, mnStrategy0, 1.0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2302.3248, (-818));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnCross0);
      assertNotSame(mnStrategy0, mnStrategy1);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, (-259));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnCross1);
      assertNotSame(mnStrategy0, mnStrategy1);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145), (-1.0), (-1.0)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, (-1.0));
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", (-0.10472368776252905));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      mnStrategy0.setLowStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      
      mnUserParameterState0.setLowerLimit(0, (-100.0));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnStrategy1);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy1, (-1.0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-2252));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnCross0);
      assertNotSame(mnStrategy1, mnStrategy0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1393.909982559382, 2320.925853226, 2320.925853226, 0.0, 1393.909982559382).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnStrategy0.setGradientTolerance(3.0);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2103.364), mnStrategy0, 1393.909982559382);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1871.5364772816, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3.0, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 0.1;
      doubleArray1[3] = (-3617.0136686145);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145), (-1.0), 0.5).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.5);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 3300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", (-1.0));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      mnUserParameterState0.setLowerLimit(0, (-1.0));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setGradientStepTolerance((-1.0));
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals((-1.0), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(mnStrategy1.isHigh());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertNotNull(mnStrategy1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3315.4136165119, 694.3417761089047, (-1.0), 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy1.setGradientNCycles(0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(mnStrategy1.isHigh());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertNotSame(mnStrategy1, mnStrategy0);
      
      MnStrategy mnStrategy2 = new MnStrategy();
      assertFalse(mnStrategy2.equals((Object)mnStrategy0));
      assertFalse(mnStrategy2.equals((Object)mnStrategy1));
      assertEquals(2, mnStrategy2.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy2.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy2.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy2.strategy());
      assertEquals(0.3, mnStrategy2.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy2.isLow());
      assertFalse(mnStrategy2.isHigh());
      assertEquals(5, mnStrategy2.hessianNCycles());
      assertEquals(0.05, mnStrategy2.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy2.gradientNCycles());
      assertTrue(mnStrategy2.isMedium());
      assertNotNull(mnStrategy2);
      
      mnStrategy2.setGradientTolerance(2.0);
      assertFalse(mnStrategy2.equals((Object)mnStrategy0));
      assertFalse(mnStrategy2.equals((Object)mnStrategy1));
      assertEquals(2, mnStrategy2.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy2.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy2.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy2.strategy());
      assertEquals(0.3, mnStrategy2.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy2.isLow());
      assertFalse(mnStrategy2.isHigh());
      assertEquals(5, mnStrategy2.hessianNCycles());
      assertEquals(3, mnStrategy2.gradientNCycles());
      assertTrue(mnStrategy2.isMedium());
      assertEquals(2.0, mnStrategy2.gradientTolerance(), 0.01);
      assertNotSame(mnStrategy2, mnStrategy0);
      assertNotSame(mnStrategy2, mnStrategy1);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy2, 1.0E-6);
      assertFalse(mnStrategy2.equals((Object)mnStrategy0));
      assertFalse(mnStrategy2.equals((Object)mnStrategy1));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnStrategy2.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy2.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy2.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy2.strategy());
      assertEquals(0.3, mnStrategy2.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy2.isLow());
      assertFalse(mnStrategy2.isHigh());
      assertEquals(5, mnStrategy2.hessianNCycles());
      assertEquals(3, mnStrategy2.gradientNCycles());
      assertTrue(mnStrategy2.isMedium());
      assertEquals(2.0, mnStrategy2.gradientTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setGradientNCycles(0);
      assertFalse(mnStrategy0.equals((Object)mnStrategy2));
      assertFalse(mnStrategy0.equals((Object)mnStrategy1));
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals((-1.0), mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotSame(mnStrategy0, mnStrategy2);
      assertNotSame(mnStrategy0, mnStrategy1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1065.9280444492, (-1));
      assertFalse(mnStrategy2.equals((Object)mnStrategy0));
      assertFalse(mnStrategy2.equals((Object)mnStrategy1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(2, mnStrategy2.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy2.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy2.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy2.strategy());
      assertEquals(0.3, mnStrategy2.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy2.isLow());
      assertFalse(mnStrategy2.isHigh());
      assertEquals(5, mnStrategy2.hessianNCycles());
      assertEquals(3, mnStrategy2.gradientNCycles());
      assertTrue(mnStrategy2.isMedium());
      assertEquals(2.0, mnStrategy2.gradientTolerance(), 0.01);
      assertNotNull(mnCross0);
      assertNotSame(mnStrategy2, mnStrategy0);
      assertNotSame(mnStrategy2, mnStrategy1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3617.0136686145), 8.0, 8.0, 2312.206400430871, 2312.206400430871).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, (-0.6734859611410074));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[0];
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnCross1);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 0.0;
      doubleArray1[2] = 0.1;
      doubleArray1[3] = (-3617.0136686145);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.1);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145), 0.5, (-3617.0136686145)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 0.5);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", (-0.10472368776252905));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      
      mnUserParameterState0.setLowerLimit(0, (-100.0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertNotNull(mnStrategy1);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-100.0), (-0.10472368776252905), (double)0, (-1.0), (-0.10472368776252905)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy1, (-1.0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, (-2252));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertFalse(mnStrategy1.isLow());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy1.isMedium());
      assertNotNull(mnCross0);
      assertNotSame(mnStrategy1, mnStrategy0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 1230.101497223778, 0.0, (-1308.06648092), (-1.0)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 0.0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int int0 = 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3617.0136686145), 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("", 0.0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      double double0 = 1.0085686317106917;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-3617.0136686145), (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 0.0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int int0 = 0;
      mnStrategy0.setLowStrategy();
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[3];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross0);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1.0);
      doubleArray1[4] = (-0.10472368776252905);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnStrategy1);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-100.0), mnStrategy1, 2240.863);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1281.840644), 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertArrayEquals(new double[] {0.5, (-1.0), 0.0, 0.0, (-0.10472368776252905)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertFalse(mnStrategy1.isLow());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertTrue(mnStrategy1.isMedium());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy1.strategy());
      assertFalse(mnStrategy1.isHigh());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnStrategy1, mnStrategy0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1230.101497223778, 1230.101497223778, (-0.42264973081037427)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[21];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-98.27179202514519);
      doubleArray1[3] = (-3617.0136686145);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", (-98.27179202514519));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int[] intArray0 = new int[3];
      doubleArray1[4] = (double) 0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 150, mnStrategy0, 0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1.0), (-634));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-1.0);
      doubleArray1[1] = (-100.0);
      doubleArray1[4] = (-0.10472368776252905);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.10472368776252905), 2.0, 0.5, (-1281.840644)).when(fCNBase1).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy();
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy1);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1281.840644), mnStrategy1, 0.5);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-100.0), 0);
      assertFalse(mnStrategy1.equals((Object)mnStrategy0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.5, (-100.0), 0.0, 0.0, (-0.10472368776252905)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(mnStrategy1.isMedium());
      assertEquals(1, mnStrategy1.strategy());
      assertEquals(0.3, mnStrategy1.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isHigh());
      assertEquals(0.3, mnStrategy1.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy1.isLow());
      assertEquals(2, mnStrategy1.hessianGradientNCycles());
      assertEquals(5, mnStrategy1.hessianNCycles());
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy1.gradientNCycles());
      assertEquals(0.05, mnStrategy1.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnCross0);
      assertNotSame(mnStrategy1, mnStrategy0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1230.101497223778;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-100.0);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1230.101497223778, (-1.0), (-100.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", (-100.0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1230.101497223778, (-1.0), (-100.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-1.0), (-1.0), (-1.0), 1.0085686317106917).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, (-1.0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1230.101497223778, (-1.0), (-100.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int int0 = 0;
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1230.101497223778, (-1.0), (-100.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1230.101497223778, 0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1230.101497223778;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3309.9649, (-1.0), (-1.0), (-1.0), 1.0085686317106917).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 0.0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-1230.101497223778), 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 1230.101497223778, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross1);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.679490899756875;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      String string0 = "PGGL5l':9K*^QHDd";
      mnUserParameterState0.add("PGGL5l':9K*^QHDd", 0.0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1.0), (-1.0)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 3.679490899756875, mnStrategy0, 0.0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[3];
      mnUserParameterState0.setLimits(0, 0.0, 134.1252);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 3302);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.7301182395152783), (-800.45498), (-100.0), (-1.7301182395152783), (-100.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3728.0, mnStrategy0, (-1.7301182395152783));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[2];
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.setUpperLimit(0, (-925.42));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3728.0, (-1073741815));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 2676);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross1);
      assertNotSame(mnCross1, mnCross0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-800.45498);
      doubleArray1[1] = (-800.45498);
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-800.45498), 0);
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {(-800.45498), (-800.45498)}, doubleArray1, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross2);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MnCross mnCross3 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-100.0), 0);
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {(-800.45498), (-800.45498)}, doubleArray1, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross3);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MnCross mnCross4 = mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray0, (-953.95793), (-1073741815));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(mnCross4.equals((Object)mnCross3));
      assertFalse(mnCross4.equals((Object)mnCross2));
      assertFalse(mnCross4.equals((Object)mnCross0));
      assertFalse(mnCross4.equals((Object)mnCross1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.5}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {(-800.45498), (-800.45498)}, doubleArray1, 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(mnCross4, mnCross3);
      assertNotSame(mnCross4, mnCross2);
      assertNotSame(mnCross4, mnCross0);
      assertNotSame(mnCross4, mnCross1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1230.101497223778;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 1230.101497223778;
      doubleArray1[2] = (-199.7);
      doubleArray1[3] = (-3617.0136686145);
      doubleArray1[4] = 1230.101497223778;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      mnUserParameterState0.add("", (-199.7));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), 1230.101497223778, (-3617.0136686145), 1230.101497223778, (-3617.0136686145)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1230.101497223778, mnStrategy0, 1230.101497223778);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      
      mnUserParameterState0.setLowerLimit(0, 1230.101497223778);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.5, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1230.101497223778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5, 1230.101497223778, (-199.7), (-3617.0136686145), 1230.101497223778}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertArrayEquals(new double[] {1230.101497223778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnCross1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross1, mnCross0);
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 3321);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertArrayEquals(new double[] {0.5, 1230.101497223778, (-199.7), (-3617.0136686145), 1230.101497223778}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertNotNull(mnCross2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnUserParameterState0.add("", (-199.7), (double) 0, 0.51, 1230.101497223778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: 
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }
}
