/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:15:17 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.CheckScheme;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, false, true, true, (-3168));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3168' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, false, false, false, 48, false, false, 2018);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '48' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, true, false, true, 72, true, true, 905);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '72' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = checkClassifier0.getOptions();
      M5P m5P0 = new M5P();
      checkClassifier0.setOptions(stringArray0);
      assertFalse(checkClassifier0.getDebug());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, false, false, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, true, false, false, true, true, (-1488));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1488' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, true, true, true, true, true, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '24' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.getRevision();
      boolean boolean1 = true;
      checkClassifier0.weightedInstancesHandler();
      int int0 = 3922;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, true, true, false, true, 3922);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, true, true, false, 101, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '101' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(72, false, true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '72' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int0 = (-3576);
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, true, true, false, false, (-3576));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3576' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, false, false, false, 100000);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '100000' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      Enumeration enumeration0 = new WordTokenizer();
      CheckClassifier.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumRelational(20);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, true, true, 69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '69' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.multiInstanceHandler();
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, false, (-7), false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-7' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int0 = 3393;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, true, true, false, true, false, 3393, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3393' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, true, false, false, false, 79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '79' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      checkClassifier0.m_Classifier = (Classifier) multiClassClassifier0;
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",l%";
      stringArray0[1] = "+'dct]3^#1'T7M";
      stringArray0[2] = "";
      stringArray0[3] = "date";
      stringArray0[4] = " does not have the same ";
      stringArray0[5] = "$U-SJ$K{%t7pc'";
      stringArray0[6] = "l-\"i&3GsYQ[?3n] ";
      stringArray0[7] = "weighted instances classifier...";
      AbstractClassifier.runClassifier(multiClassClassifier0, stringArray0);
      int int0 = 42;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, true, true, false, false, 42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '42' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, false, false, true, false, 1125);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1125' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkClassifier0.multiInstanceHandler();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      int int0 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, false, true, true, (-727));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-727' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      int int0 = 1252;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, true, true, 1252);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1252' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.testToString();
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "";
      stringArray0[1] = ":S%T";
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int0 = (-1622);
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, true, false, true, (-1622));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1622' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      checkClassifier0.m_Classifier = classifier0;
      checkClassifier0.testToString();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(50);
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, true, true, true, true, true, 1221);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1221' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tCalculate performance statistics.");
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, false, true, false, true, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '11' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, true, true, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      checkClassifier0.instanceWeights(true, false, false, false, true, false, 0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 97;
      checkClassifier0.setNumDate(97);
      checkClassifier0.setNumInstancesRelational(97);
      checkClassifier0.canTakeOptions();
      boolean boolean0 = false;
      checkClassifier0.correctBuildInitialisation(true, true, true, true, false, false, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      J48 j48_0 = new J48();
      boolean boolean1 = arrayList0.remove((Object) "INj]XF=");
      Instances instances0 = new Instances("INj]XF=", arrayList0, (-1));
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = true;
      int int1 = (-1276);
      checkClassifier0.correctBuildInitialisation(boolean2, boolean1, boolean3, boolean4, boolean3, boolean2, int1);
      boolean boolean5 = true;
      int int2 = 2652;
      checkClassifier0.doesntUseTestClassVal(boolean2, boolean0, boolean1, boolean5, boolean5, boolean3, int2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      boolean boolean6 = false;
      boolean boolean7 = true;
      boolean boolean8 = false;
      int int3 = (-741);
      checkClassifier0.correctBuildInitialisation(boolean6, boolean0, boolean7, boolean8, boolean4, boolean8, int3);
      int int4 = 178;
      int int5 = 3092;
      int int6 = 100;
      boolean boolean9 = true;
      checkClassifier0.makeTestDataset(int3, costSensitiveClassifier0.MATRIX_SUPPLIED, costSensitiveClassifier0.MATRIX_ON_DEMAND, int4, int4, costSensitiveClassifier0.MATRIX_ON_DEMAND, int5, int6, int0, boolean9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.datasetIntegrity(false, false, false, false, false, false, 0, false, false);
      checkClassifier0.listOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q34";
      stringArray0[1] = "";
      stringArray0[2] = "l(";
      stringArray0[3] = "Problem during testing";
      CheckClassifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, true, true, false, false, (-7), false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-7' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.multiInstanceHandler();
      boolean boolean0 = false;
      int int0 = 0;
      checkClassifier0.multiInstanceHandler();
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.datasetIntegrity(false, true, false, true, true, true, 0, false, false);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.listOptions();
      boolean boolean3 = false;
      int int1 = 32;
      boolean boolean4 = false;
      boolean boolean5 = true;
      boolean boolean6 = true;
      checkClassifier0.doesntUseTestClassVal(boolean4, boolean2, boolean2, boolean5, boolean1, boolean6, int1);
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier2.doTests();
      boolean boolean7 = true;
      boolean boolean8 = false;
      boolean boolean9 = true;
      int int2 = (-4208);
      checkClassifier0.updatingEquality(boolean3, boolean7, boolean8, boolean0, boolean9, boolean6, int2);
      checkClassifier1.doTests();
      checkClassifier1.testToString();
      boolean boolean10 = false;
      boolean boolean11 = true;
      boolean boolean12 = true;
      boolean boolean13 = true;
      boolean boolean14 = false;
      checkClassifier2.correctBuildInitialisation(boolean10, boolean11, boolean12, boolean13, boolean8, boolean14, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "serialVersionUID...";
      stringArray0[2] = "serialVersionUID...";
      stringArray0[3] = "A filter that removes a range of attributes from the dataset. Will re-order the remaining attributes if invert matching sense is turned on and the attribute column indices are not specified in ascending order.";
      stringArray0[4] = "serialVersionUID...";
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(36);
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, false, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.getClassifier();
      Utils.SMALL = (-1.0E100);
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, false, false, (-423), true, false, 31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-423' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, true, false, false, false, false, 0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(2);
      checkClassifier0.updateableClassifier();
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CheckClassifier checkClassifier0 = new CheckClassifier();
          LWL lWL0 = new LWL();
          Classifier classifier0 = lWL0.getClassifier();
          checkClassifier0.m_Classifier = classifier0;
          // Undeclared exception!
          try { 
            checkClassifier0.doTests();
            fail("Expecting exception: Error");
          
          } catch(Error e) {
             //
             // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
             //
             verifyException("weka.classifiers.CheckClassifier", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumDate(97);
      checkClassifier0.setNumInstancesRelational(97);
      checkClassifier0.canTakeOptions();
      checkClassifier0.correctBuildInitialisation(true, true, true, true, false, false, 0);
      J48 j48_0 = new J48();
      checkClassifier0.doTests();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, true, false, false, false, false, 0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(2);
      checkClassifier0.updatingEquality(true, true, true, false, false, true, 3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(true, true, true, false, false, true, 1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(false, true, false, false, true, false, 1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      checkClassifier0.m_Classifier = classifier0;
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, true, true, true, true, false, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.trees.DecisionStump: Cannot handle string attributes!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(1);
      checkClassifier0.updatingEquality(true, false, false, false, true, false, 1);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      M5P m5P0 = new M5P();
      checkClassifier1.setClassifier(m5P0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkScheme_PostProcessor0.getRevision();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      checkClassifier0.multiInstanceHandler();
      boolean boolean0 = true;
      boolean boolean1 = false;
      checkClassifier0.datasetIntegrity(true, true, true, true, false, false, 0, false, false);
      checkClassifier0.listOptions();
      int int0 = 82;
      CheckClassifier checkClassifier1 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier1.canHandleClassAsNthAttribute(true, false, false, false, true, false, 0, 20);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Index: 20, Size: 3
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumDate(48);
      checkClassifier0.setNumInstancesRelational(48);
      checkClassifier0.canTakeOptions();
      checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 0);
      J48 j48_0 = new J48();
      checkClassifier0.doTests();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, true, false, false, false, false, 0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      J48 j48_0 = new J48();
      checkClassifier0.doTests();
  }
}
