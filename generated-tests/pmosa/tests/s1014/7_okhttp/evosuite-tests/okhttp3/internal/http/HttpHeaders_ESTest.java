/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:42:37 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "HEAD";
      HttpHeaders.skipWhitespace("HEAD", 40);
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Headers) null).when(response0).headers();
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "s.limit == s.pos";
      int int0 = 51;
      HttpHeaders.skipWhitespace("s.limit == s.pos", 51);
      HttpHeaders.skipUntil("s.limit == s.pos", 51, "s.limit == s.pos");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpHeaders.skipUntil("7?hTr@t8h\"", 0, "7?hTr@t8h\"");
      HttpHeaders.skipUntil("7?hTr@t8h\"", 0, "");
      HttpHeaders.parseSeconds("7?hTr@t8h\"", 763);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7?hTr@t8h\"";
      stringArray0[1] = "7?hTr@t8h\"";
      stringArray0[2] = "";
      stringArray0[3] = "7?hTr@t8h\"";
      stringArray0[4] = "7?hTr@t8h\"";
      stringArray0[5] = "7?hTr@t8h\"";
      stringArray0[6] = "7?hTr@t8h\"";
      stringArray0[7] = "";
      stringArray0[8] = "7?hTr@t8h\"";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      int int0 = HttpHeaders.skipUntil("okhttp3.internal.http.HttpHeaders", 3, "okhttp3.internal.http.HttpHeaders");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers1.names();
      headers1.toMultimap();
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(193, 193);
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers1, headers0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-KA(qoax2!nS";
      stringArray0[1] = "-KA(qoax2!nS";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "-KA(qoax2!nS");
      assertEquals(0, list0.size());
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = "byteCount < 0: ";
      stringArray0[2] = "`Y";
      stringArray0[3] = "HEAD";
      stringArray0[4] = "TlHmHE&-M*314!V<@.<";
      String string0 = "realm";
      stringArray0[5] = "realm";
      Headers headers0 = Headers.of(stringArray0);
      headers0.names();
      headers0.getDate("pvnpl");
      headers0.values("HEAD");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      int int0 = (-2314);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("", (-2314));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpHeaders.skipWhitespace("M`0`%ubjzh", 0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, (Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpHeaders.skipWhitespace(",;", 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("PF#R(2_io`J.t", 0);
      int int1 = HttpHeaders.skipWhitespace("PF#R(2_io`J.t", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "c]JvbGZ=$";
      String string1 = "^0Muo4d@I9`Hk]C%|MG";
      HttpHeaders.skipUntil("c]JvbGZ=$", 2071, "^0Muo4d@I9`Hk]C%|MG");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "s y`Pdz2Q^vzcB*";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vary";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toMultimap();
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      int int0 = HttpHeaders.parseSeconds("vary", (-1809));
      assertEquals((-1809), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-KA(qoax2!nS";
      stringArray0[1] = "-KA(qoax2!nS";
      HttpHeaders.skipWhitespace("Unexpected protocol: ", 20);
      System.setCurrentTimeMillis(2793L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("8", (-1739));
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-2157L));
      HttpHeaders.skipWhitespace("idx`%|", 3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = "idx`%|";
      stringArray0[2] = "idx`%|";
      stringArray0[3] = "idx`%|";
      stringArray0[4] = "idx`%|";
      stringArray0[5] = "idx`%|";
      Headers headers0 = Headers.of(stringArray0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Length", "Content-Length");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ip?9D]I#Ei6$-,!", ", tag=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "ip?9D]I#Ei6$-,!");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("CEe=eu;=v:!", "^ realmg=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "CEe=eu;=v:!");
      assertTrue(list0.isEmpty());
  }
}
