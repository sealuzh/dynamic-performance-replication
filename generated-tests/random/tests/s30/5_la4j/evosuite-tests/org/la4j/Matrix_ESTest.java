/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:40:14 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 3954;
      Matrix matrix0 = Matrix.unit(9, 3954);
      Matrix matrix1 = matrix0.blankOfColumns(3954);
      matrix1.equals(matrix0, 1.3953915158337245E-25);
      // Undeclared exception!
      try { 
        matrix1.slice(9, (-99), (-99), 3954);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [9..-99][-99..3954].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(14, 14);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Vector vector0 = Vector.fromMap(hashMap0, 14);
      columnMajorSparseMatrix0.multiply(vector0);
      columnMajorSparseMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      Matrix matrix0 = Matrix.constant(14, 44, (-713.7363));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      Matrix matrix1 = columnMajorSparseMatrix0.transpose();
      Matrix matrix2 = matrix1.shuffle();
      matrix1.min();
      matrix1.equals((Object) matrix2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1653;
      Matrix matrix0 = Matrix.identity(1653);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(141);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 2, 1653, 2, 2, 1653, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2, 1653
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(8);
      mockRandom0.nextGaussian();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(8, mockRandom0);
      denseMatrix0.determinant();
      // Undeclared exception!
      try { 
        Matrix.zero(8, (-909));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 262.39;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 857;
      int int1 = (-1529);
      double double0 = 1728.0;
      int int2 = 1;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, (-398), 1, (-1), (-2840), 7, 857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, -2840
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2400;
      DenseVector denseVector0 = DenseVector.zero(2400);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = denseVector0.toColumnMatrix();
      int int1 = 0;
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 0, 2400);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 2400 cols at 0, 0 from a 2400x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      mockRandom0.nextFloat();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(13, mockRandom0);
      Matrix matrix0 = denseMatrix0.sliceBottomRight(13, 13);
      matrix0.toColumnVector();
      denseMatrix0.toMatrixMarket();
      Matrix matrix1 = denseMatrix0.sliceBottomRight(13, 13);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix1.forEach(consumer0);
      matrix1.determinant();
      int int0 = (-1);
      mockRandom0.setSeed(13);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 0.0F;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1), 13, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x13
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1915.953));
      DenseMatrix denseMatrix0 = DenseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 346.7);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, 0, 0, 0, 7, 7, 3189);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = (-2147483149);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformColumn((-2147483149), vectorFunction0);
      int int1 = 7;
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(260L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(30, 30, mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 755.87707853187;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      cRSMatrix0.swapColumns(1127, 1127);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 9, doubleArray0);
      columnMajorSparseMatrix0.rank();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.nonZeroIteratorOfColumn(0);
      Matrix matrix1 = matrix0.blankOfShape(5, 2);
      // Undeclared exception!
      try { 
        matrix1.swapColumns((-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.max();
      int int0 = (-216);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow((-216), vectorProcedure0);
      denseMatrix0.setColumn(1473, (double) 1473);
      int int1 = (-2087831323);
      // Undeclared exception!
      try { 
        denseMatrix0.get(1473, (-2087831323));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1650.801525260336);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1650.801525260336);
      doubleArray2[2] = (-1650.801525260336);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 90.8559;
      doubleArray3[1] = (-1313.4717388);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1650.801525260336);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1313.4717388);
      doubleArray5[2] = (-1313.4717388);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 90.8559;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1313.4717388);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-1650.801525260336);
      doubleArray6[3] = (-1313.4717388);
      doubleArray6[4] = 90.8559;
      doubleArray6[5] = (-1650.801525260336);
      doubleArray6[6] = (-1.0);
      doubleArray6[7] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1313.4717388);
      doubleArray7[1] = (-1650.801525260336);
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      double double0 = matrix0.max();
      assertEquals(90.8559, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      int int1 = 16;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, (-2040109464), 887, 32, (-2673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 32x-2673
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 975.5637195639755;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 975.5637195639755;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 975.5637195639755;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 975.5637195639755;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 975.5637195639755;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.rotate();
      assertEquals(1, matrix1.rows());
      assertEquals(5, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2977.7689594);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1094.9196;
      doubleArray0[4] = (-1.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 450;
      // Undeclared exception!
      try { 
        matrix0.insertRow(450, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIteratorOfColumn(0);
      SparseMatrix sparseMatrix0 = columnMajorSparseMatrix0.toSparseMatrix();
      int int1 = 6;
      Vector vector0 = Vector.constant(0, 0.0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-1), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-589.37);
      doubleArray1[1] = (-1959.813409420699);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 100.0;
      doubleArray1[6] = (-2348.80381331918);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = (-2348.80381331918);
      doubleArray3[2] = (-2348.80381331918);
      doubleArray3[3] = 100.0;
      doubleArray3[4] = 2799.8660674000107;
      doubleArray3[5] = (-1959.813409420699);
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1.0;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..4][2147483647..7].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix.zero(1534, 837);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 48);
      // Undeclared exception!
      try { 
        sparseMatrix0.power(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2 does not equal to 48.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(48);
      matrix0.sliceBottomRight(48, 48);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 213.64009644;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 48;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = (double) 8;
      doubleArray0[8] = (double) 8;
      Matrix matrix1 = Matrix.from1DArray(8, 48, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = 48;
      intArray0[4] = 8;
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(389, 389);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 389;
      doubleArray0[1] = (double) 389;
      doubleArray0[2] = (double) 389;
      doubleArray0[3] = (double) 389;
      doubleArray0[4] = (double) 389;
      doubleArray0[5] = (double) 389;
      doubleArray0[6] = (double) 389;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.blank();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(389, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..388
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 16;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 16;
      Matrix matrix0 = Matrix.from1DArray(16, 16, doubleArray0);
      int int1 = (-1932);
      // Undeclared exception!
      try { 
        matrix0.setColumn((-1932), 16.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1932' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("\n");
      int int0 = (-182);
      columnMajorSparseMatrix0.toRowVector();
      columnMajorSparseMatrix0.swapRows((-1064), (-1064));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow((-182), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(204, 13);
      Matrix matrix0 = sparseMatrix0.blankOfColumns(204);
      assertEquals(204, matrix0.columns());
      assertEquals(204, matrix0.rows());
      
      Matrix matrix1 = sparseMatrix0.blankOfRows(13);
      assertEquals(13, matrix1.columns());
      assertEquals(13, matrix1.rows());
      
      matrix1.toCSV();
      matrix1.swapRows(5, 5);
      assertEquals(13, matrix1.rows());
      assertEquals(13, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.fromCSV("          ");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 23.584918567999996;
      doubleArray2[1] = (-3519.839);
      doubleArray2[2] = 2.9842119076009856E-10;
      doubleArray2[3] = 1572.0;
      doubleArray2[4] = (-1186.869781964);
      doubleArray2[5] = 4.0;
      doubleArray2[6] = (-4030.295);
      doubleArray2[7] = 4.0;
      doubleArray2[8] = 2.0947615702482375E-12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-0.4375);
      doubleArray3[1] = (-4030.295);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 4.0;
      doubleArray4[1] = 4.0;
      doubleArray4[2] = 4.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-3519.839);
      doubleArray5[1] = 4.0;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      double[] doubleArray6 = columnMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
      assertEquals(0, doubleArray6.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 530.6263502;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 522.118841315831;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1186.98;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 522.118841315831;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 530.6263502;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 530.6263502;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.swapColumns(7, 7);
      assertEquals(8, matrix0.columns());
      
      Vector vector0 = matrix0.toColumnVector();
      assertEquals(3, vector0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 210;
      doubleArray0[1] = (double) 2331;
      Matrix matrix0 = Matrix.from1DArray(2331, 210, doubleArray0);
      DenseVector denseVector0 = DenseVector.constant(2331, 210);
      Matrix matrix1 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 228, 2331);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 228 rows and 2331 cols at 0, 0 in a 2331x210 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(17, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow((-2900));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.rotate();
      assertEquals(0, matrix1.rows());
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2);
      int int0 = 5192;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(5192, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5192' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 9);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      boolean boolean0 = matrix0.equals((Matrix) rowMajorSparseMatrix0, (-2148.546));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.398081733190339E-12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2.398081733190339E-12;
      doubleArray2[1] = 2.398081733190339E-12;
      doubleArray2[2] = 2.398081733190339E-12;
      doubleArray2[3] = 2.398081733190339E-12;
      doubleArray2[4] = 2.398081733190339E-12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 2.398081733190339E-12;
      doubleArray3[1] = 2.398081733190339E-12;
      doubleArray3[2] = 2.398081733190339E-12;
      doubleArray3[3] = (-1805.1088692870053);
      doubleArray3[4] = 2.398081733190339E-12;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 2.398081733190339E-12;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1805.1088692870053);
      doubleArray4[1] = 20.94474913485368;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 2.398081733190339E-12;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-100.9335);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 2.398081733190339E-12;
      doubleArray5[5] = 2.398081733190339E-12;
      doubleArray0[4] = doubleArray5;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn(7, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 9);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      Matrix.zero(9, 9);
      matrix0.rows();
      matrix0.setRow(8, (-3432.9852018427846));
      assertEquals((-3432.9852018427846), matrix0.min(), 0.01);
      
      Matrix matrix1 = Matrix.unit(971, 1);
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(568, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      Matrix matrix0 = columnMajorSparseMatrix0.add((-242.32));
      Matrix matrix1 = matrix0.copyOfColumns(10);
      matrix1.toCSV();
      // Undeclared exception!
      try { 
        matrix1.minInRow(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 5;
      DenseVector denseVector0 = DenseVector.zero(5);
      Matrix matrix0 = denseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseVector0.each(vectorProcedure0);
      Matrix matrix1 = matrix0.copy();
      DecimalFormat decimalFormat0 = new DecimalFormat("=,ae06G)`(7xc^f0.M");
      denseVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      int int1 = 5251;
      matrix0.iteratorOfRow(5251);
      matrix0.toCSV();
      Matrix matrix2 = matrix0.add(matrix1);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      // Undeclared exception!
      try { 
        matrix2.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 881;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(881, 881);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int1 = 9;
      RowMajorSparseMatrix.diagonal(9, 881);
      int int2 = 56;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.9842119076009856E-10;
      // Undeclared exception!
      try { 
        denseMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.398081733190339E-12;
      doubleArray1[1] = 1787.87581;
      doubleArray1[2] = 1030.48;
      doubleArray1[3] = 142.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 3616.2304806476;
      doubleArray1[6] = (-52.0);
      doubleArray1[7] = 574.3302224158758;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 3616.2304806476;
      doubleArray2[1] = 142.0;
      doubleArray2[2] = (-52.0);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 142.0;
      doubleArray2[6] = 1787.87581;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 574.3302224158758;
      doubleArray3[1] = 2.398081733190339E-12;
      doubleArray3[2] = (-52.0);
      doubleArray3[3] = 1030.48;
      doubleArray3[4] = 3616.2304806476;
      doubleArray3[5] = 1030.48;
      doubleArray3[6] = 2.398081733190339E-12;
      doubleArray3[7] = 3616.2304806476;
      doubleArray3[8] = (-2423.86);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = denseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1099.336689;
      doubleArray2[4] = 36.00000000000001;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1533.08449778);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 36.00000000000001;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1533.08449778);
      doubleArray4[1] = (-1533.08449778);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 685.5;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1099.336689;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1099.336689;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 685.5;
      doubleArray5[3] = 685.5;
      doubleArray5[4] = 685.5;
      doubleArray5[5] = 1099.336689;
      doubleArray5[6] = (-1533.08449778);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-1533.08449778);
      doubleArray6[1] = 685.5;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.power((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      double double0 = columnMajorSparseMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2483L);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(14);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(14, matrix0.rows());
      
      matrix0.add((Matrix) columnMajorSparseMatrix0);
      assertEquals(14, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 554.0277859;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2.398081733190339E-12;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition(319);
      decimalFormat0.parseObject("x''R_OUm;r_K,", parsePosition0);
      denseMatrix0.toCSV((NumberFormat) decimalFormat0);
      matrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(867);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1448.891254131);
      doubleArray0[1] = 0.75;
      doubleArray0[2] = 1003.2;
      doubleArray0[3] = 1851.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(1200);
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1200;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 1200;
      doubleArray3[1] = (double) 1200;
      doubleArray3[2] = (-227.7569747);
      doubleArray3[3] = (double) 1200;
      doubleArray3[4] = (double) 1200;
      doubleArray3[5] = (double) 1200;
      doubleArray3[6] = (double) 1200;
      doubleArray3[7] = (double) 1200;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-227.7569747);
      doubleArray4[1] = (-227.7569747);
      doubleArray4[2] = (-227.7569747);
      doubleArray4[3] = (double) 1200;
      doubleArray4[4] = (-227.7569747);
      doubleArray4[5] = (-227.7569747);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-227.7569747);
      doubleArray5[1] = (-227.7569747);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1200;
      doubleArray6[1] = (double) 1200;
      doubleArray6[2] = (-227.7569747);
      doubleArray6[3] = (-227.7569747);
      doubleArray6[4] = (-227.7569747);
      doubleArray6[5] = (double) 1200;
      doubleArray6[6] = (double) 1200;
      doubleArray6[7] = (-1830.8);
      doubleArray6[8] = (double) 1200;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-227.7569747);
      doubleArray7[1] = (-1830.8);
      doubleArray7[2] = (-227.7569747);
      doubleArray7[3] = (-1830.8);
      doubleArray7[4] = (double) 1200;
      doubleArray7[5] = (double) 1200;
      doubleArray7[6] = (-1830.8);
      doubleArray7[7] = (-1830.8);
      doubleArray7[8] = (-227.7569747);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (double) 1200;
      doubleArray8[1] = (-1830.8);
      doubleArray8[2] = (double) 1200;
      doubleArray8[3] = (-188.663016);
      doubleArray8[4] = (-1830.8);
      doubleArray8[5] = (-1830.8);
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      boolean boolean0 = matrix0.equals((Matrix) denseMatrix0, 559.215);
      assertEquals(1200, matrix0.columns());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(3326, 0);
      assertEquals(0, basic2DMatrix0.columns());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      BasicVector basicVector0 = (BasicVector)DenseVector.random(0, mockRandom0);
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) basicVector0, (DenseMatrix) basic2DMatrix0);
      Vector.random(3158, mockRandom0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.insertRow(451, basicVector1);
      assertEquals(3326, basic2DMatrix0.rows());
      assertEquals(3327, basic2DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(454, 454);
      // Undeclared exception!
      denseMatrix0.mkString("7'5^ W4Dnnr!D0M&f", "uyiV");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom(1802L);
      Matrix matrix0 = Matrix.random(7, 7, mockRandom0);
      mockRandom0.setSeed(2490L);
      matrix0.toMatrixMarket();
      int int1 = 1129;
      double double0 = 4.0;
      int int2 = (-2268);
      int int3 = 1152;
      // Undeclared exception!
      try { 
        matrix0.slice(7, (-2268), (-2268), 1152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [7..-2268][-2268..1152].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2269, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2269;
      doubleArray0[1] = (double) 2269;
      doubleArray0[2] = (-111.0);
      doubleArray0[3] = (double) 2269;
      doubleArray0[4] = (double) 2269;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2119.800145929201;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(2269, 2269, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, 1, (-652), (-652), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -652x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(240, Double.NEGATIVE_INFINITY);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.insert((Matrix) denseMatrix0, 1, 1);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(240, cRSMatrix0.rows());
      assertEquals(0.004166666666666667, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1380;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1380, (-2818.811605));
      DenseMatrix denseMatrix0 = null;
      Locale locale0 = Locale.KOREAN;
      rowMajorSparseMatrix0.equals((Object) locale0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(5, 345, 5);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = sparseMatrix0.apply((MatrixOperation<Matrix>) ooPlaceMatrixByItsTransposeMultiplication0);
      sparseMatrix0.equals((Object) matrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      try { 
        sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom((-1L));
      columnMajorSparseMatrix0.power(1943);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1027.6661;
      doubleArray1[1] = (-3165.56280193389);
      doubleArray1[2] = (-575.763680754998);
      doubleArray1[3] = (-1193.6251764082165);
      doubleArray1[4] = 3015.54;
      doubleArray1[5] = 1019.784460056247;
      doubleArray1[6] = 5510.70826245;
      doubleArray1[7] = (-52.0);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.subtract((-575.763680754998));
      basic2DMatrix0.getColumn(4);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail("51(9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 51(9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[0][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      DenseMatrix denseMatrix1 = matrix0.toDenseMatrix();
      assertNotSame(denseMatrix0, denseMatrix1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1000;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1000);
      // Undeclared exception!
      rowMajorSparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1047.073579771847;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 3606.4561759282;
      doubleArray2[3] = (-1443.47384988403);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2.0;
      doubleArray2[6] = 1703.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 3606.4561759282;
      doubleArray3[2] = 1703.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 3606.4561759282;
      doubleArray3[5] = 3606.4561759282;
      doubleArray3[6] = (-876.815);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 3606.4561759282;
      doubleArray4[1] = 3606.4561759282;
      doubleArray4[2] = (-876.815);
      doubleArray4[3] = 3606.4561759282;
      doubleArray4[4] = (-3615.251601823657);
      doubleArray4[5] = (-2189.0);
      doubleArray4[6] = 2.0;
      doubleArray4[7] = 2.398081733190339E-12;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = (-876.815);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 3606.4561759282;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 2.0;
      doubleArray7[4] = (-123.0);
      doubleArray7[5] = 3606.4561759282;
      doubleArray7[6] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = 1047.073579771847;
      doubleArray9[1] = (-123.0);
      doubleArray9[2] = (-1.0);
      doubleArray0[8] = doubleArray9;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2971.00054207919);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 36.00000000000001;
      doubleArray2[3] = 5802.249805;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 5802.249805;
      doubleArray3[1] = 5802.249805;
      doubleArray3[2] = 5802.249805;
      doubleArray3[3] = 5802.249805;
      doubleArray3[4] = 5802.249805;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 5802.249805;
      doubleArray5[1] = 36.00000000000001;
      doubleArray5[2] = 36.00000000000001;
      doubleArray5[3] = (-2971.00054207919);
      doubleArray5[4] = 5802.249805;
      doubleArray5[5] = (-2971.00054207919);
      doubleArray5[6] = 705.952356;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 5802.249805;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 36.00000000000001;
      doubleArray6[3] = 705.952356;
      doubleArray6[4] = 705.952356;
      doubleArray6[5] = 705.952356;
      doubleArray6[6] = 705.952356;
      doubleArray6[7] = (-2971.00054207919);
      doubleArray6[8] = (-2971.00054207919);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 5802.249805;
      doubleArray7[1] = 36.00000000000001;
      doubleArray7[2] = 5802.249805;
      doubleArray7[3] = 2686.161933800464;
      doubleArray7[4] = 705.952356;
      doubleArray0[6] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1557, 1557);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.remove((Object) null);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.toColumnMajorSparseMatrix();
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.398081733190339E-12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.398081733190339E-12;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 2.398081733190339E-12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-751.5007901179326);
      doubleArray3[3] = 2.0;
      doubleArray3[4] = 2.398081733190339E-12;
      doubleArray3[5] = 2.398081733190339E-12;
      doubleArray3[6] = 2.0;
      doubleArray3[7] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 2812.5369;
      doubleArray4[1] = (-751.5007901179326);
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.398081733190339E-12;
      doubleArray4[4] = 2.398081733190339E-12;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 2.398081733190339E-12;
      doubleArray7[1] = (-751.5007901179326);
      doubleArray7[2] = 2.0;
      doubleArray7[3] = 2.0;
      doubleArray7[4] = 2812.5369;
      doubleArray7[5] = 2812.5369;
      doubleArray7[6] = (-52.0);
      doubleArray7[7] = 2.398081733190339E-12;
      doubleArray0[6] = doubleArray7;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(7, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2324.795798771466);
      doubleArray1[1] = (-640.85471);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-640.85471);
      doubleArray2[1] = (-2324.795798771466);
      doubleArray2[2] = (-2324.795798771466);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-966.0);
      doubleArray3[1] = (-2324.795798771466);
      doubleArray3[2] = (-2324.795798771466);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2149.82404);
      doubleArray4[1] = (-640.85471);
      doubleArray4[2] = (-966.0);
      doubleArray4[3] = (-966.0);
      doubleArray4[4] = (-640.85471);
      doubleArray4[5] = (-640.85471);
      doubleArray4[6] = (-640.85471);
      doubleArray0[3] = doubleArray4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(4, rowMajorSparseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      Matrix matrix1 = matrix0.shuffle();
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 559, doubleArray0);
      sparseVector0.equals((Object) rowMajorSparseMatrix0);
      SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      sparseVector0.multiply(matrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-1016), 5029, 2, (-940), 559, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2, -940
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 1321;
      int int1 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1321, 7, 7);
      Matrix matrix0 = denseMatrix0.copyOfShape(7, 145);
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 145;
      doubleArray1[2] = (double) 7;
      doubleArray1[3] = 2.398081733190339E-12;
      doubleArray1[4] = (double) 7;
      doubleArray1[5] = (double) 1321;
      doubleArray1[6] = (double) 7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 304.652;
      doubleArray2[1] = 2.398081733190339E-12;
      doubleArray2[2] = 2.398081733190339E-12;
      doubleArray2[3] = 2.398081733190339E-12;
      doubleArray2[4] = 2.398081733190339E-12;
      doubleArray2[5] = (double) 1321;
      doubleArray2[6] = (double) 1321;
      doubleArray2[7] = (double) 1321;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 7;
      doubleArray3[2] = (double) 1321;
      doubleArray3[3] = (-1523.2);
      doubleArray3[4] = 2.398081733190339E-12;
      doubleArray3[5] = (double) 7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 7;
      doubleArray4[1] = (double) 145;
      doubleArray4[2] = (-1523.2);
      doubleArray4[3] = (double) 1321;
      doubleArray4[4] = (double) 1321;
      doubleArray4[5] = (-1523.2);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 1321;
      doubleArray5[1] = (-1523.2);
      doubleArray5[2] = (double) 7;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 7;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (double) 7;
      doubleArray6[2] = 2.398081733190339E-12;
      doubleArray6[3] = (double) 7;
      doubleArray6[4] = (double) 1321;
      doubleArray6[5] = (double) 145;
      doubleArray6[6] = (double) 7;
      doubleArray6[7] = (double) 7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 304.652;
      doubleArray8[2] = (double) 1321;
      doubleArray8[3] = 304.652;
      doubleArray8[4] = 304.652;
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = (double) 145;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = (double) 1321;
      doubleArray9[1] = (-1523.2);
      doubleArray9[2] = (double) 145;
      doubleArray9[3] = 1.0;
      doubleArray9[4] = (double) 7;
      doubleArray9[5] = (double) 1321;
      doubleArray9[6] = (double) 145;
      doubleArray9[7] = (-1523.2);
      doubleArray0[8] = doubleArray9;
      Matrix.from2DArray(doubleArray0);
      matrix0.iteratorOfColumn(1321);
      matrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(470);
      assertEquals(0.002127659574468085, cRSMatrix0.density(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.transpose();
      assertEquals(0, basic2DMatrix0.rows());
      assertNotSame(basic2DMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1354, 197.720489257998);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, 1365, 1365, 1000, 1365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1365, 1365
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(3, 2524);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(2524);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      vector0.get(337);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(vector0, vector0);
      matrix0.removeLastRow();
      // Undeclared exception!
      try { 
        matrix0.setRow(3, vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Matrix.zero(1161, 1155);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1629, 2.0947615702482375E-12, (Random) mockRandom0);
      Vector vector0 = Vector.constant(1629, (-1125.9));
      // Undeclared exception!
      rowMajorSparseMatrix0.insertColumn(4, vector0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 530.6263502;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 522.118841315831;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1186.98;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 522.118841315831;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 530.6263502;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 530.6263502;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int int0 = 7;
      matrix0.swapColumns(7, 7);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(7, (Vector) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.swapRows(2910, 782);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2911
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 4855.682575980573;
      Matrix matrix0 = Matrix.diagonal(21, 4855.682575980573);
      Matrix matrix1 = matrix0.copyOfRows(1240);
      matrix1.max();
      // Undeclared exception!
      matrix1.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 8;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(8);
      sparseMatrix0.setAll((-2.948114821));
      Matrix matrix0 = sparseMatrix0.copyOfRows(8);
      sparseMatrix0.copyOfRows(8);
      matrix0.trace();
      matrix0.rank();
      sparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("`v|>X^kV[+5a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.398081733190339E-12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.398081733190339E-12;
      doubleArray2[1] = 2.398081733190339E-12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2.398081733190339E-12;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 2.398081733190339E-12;
      doubleArray3[3] = 2.398081733190339E-12;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2.0;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = 2.0;
      doubleArray4[5] = 2.0;
      doubleArray4[6] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-3839.9119969);
      doubleArray5[1] = 2.398081733190339E-12;
      doubleArray5[2] = 2.0;
      doubleArray5[3] = 2.398081733190339E-12;
      doubleArray5[4] = 2.0;
      doubleArray5[5] = 2.0;
      doubleArray5[6] = 2.0;
      doubleArray5[7] = 2.398081733190339E-12;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = (-3839.9119969);
      doubleArray6[2] = (-3839.9119969);
      doubleArray6[3] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 2.398081733190339E-12;
      doubleArray7[1] = 2.398081733190339E-12;
      doubleArray7[2] = (-3839.9119969);
      doubleArray7[3] = (-3839.9119969);
      doubleArray7[4] = 1.0;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      
      int int0 = rowMajorSparseMatrix0.rank();
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1904, 1904);
      Matrix matrix0 = columnMajorSparseMatrix0.add(865.69);
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 725.1584029581629;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3129.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1540.7411722925;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.setRow(3, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 9;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(9, 0.0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(710, 710);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, RowMajorSparseMatrix> hashMap0 = new HashMap<Double, RowMajorSparseMatrix>();
      Set<Double> set0 = hashMap0.keySet();
      SparseVector sparseVector0 = SparseVector.fromCollection(set0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.setAll((-1.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      Matrix matrix1 = matrix0.subtract((Matrix) rowMajorSparseMatrix0);
      matrix1.toSparseMatrix();
      matrix1.equals((Matrix) rowMajorSparseMatrix0, 3053.5694);
      int int0 = 1000;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(1000, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1000' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("\n");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("\n");
      choiceFormat0.setMaximumFractionDigits((-4849));
      sparseMatrix0.toMatrixMarket((NumberFormat) choiceFormat0);
      String string0 = sparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.transform(matrixFunction0);
      matrix0.toBinary();
      assertTrue(matrix0.equals((Object)sparseMatrix0));
      assertNotSame(matrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2207, 2207);
      // Undeclared exception!
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1399);
      columnMajorSparseMatrix0.blank();
      Matrix matrix0 = columnMajorSparseMatrix0.blank();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(2602);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1398
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1412);
      columnMajorSparseMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.set(1412, 1412, 1412);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1412' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1144.5;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-124.31077541);
      doubleArray1[3] = (-1707.2213);
      doubleArray1[4] = 100.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2743.233468618;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1707.2213);
      doubleArray2[1] = 100.0;
      doubleArray2[2] = 2743.233468618;
      doubleArray2[3] = 1283.58598;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1707.2213);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertNotNull(matrixInverter0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 56);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 56);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(56, (-3368));
      // Undeclared exception!
      try { 
        matrix0.setColumn(56, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 56. Should be: 8.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(69, 69);
      double double0 = matrix0.diagonalProduct();
      assertEquals(7.596040312163298E126, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(4, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1414.7);
      doubleArray1[1] = 415.409178;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 2958.25;
      doubleArray1[4] = 89.235452;
      doubleArray1[5] = 2957.9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 89.235452;
      doubleArray2[1] = (-1414.7);
      doubleArray2[2] = 2957.9;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.copyOfColumns(0);
      assertEquals(2, matrix1.rows());
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1000, 1000);
      // Undeclared exception!
      denseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1022;
      org.evosuite.runtime.Random.setNextRandom(1022);
      int int1 = 10;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 1022, 1536);
      NumberFormat numberFormat0 = null;
      rowMajorSparseMatrix0.toMatrixMarket((NumberFormat) null);
      SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n10 1022 0\n");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.getOrElse((-1306), (-339), (-339));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1306' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 732.5);
      rowMajorSparseMatrix0.multiply(830.585384137);
      double[] doubleArray0 = new double[0];
      Matrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceBottomRight((-6389), (-6389));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-6389' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-1217.56192042984);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3317, 1300);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 36.00000000000001;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 100.0;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 36.00000000000001;
      doubleArray2[4] = 36.00000000000001;
      doubleArray2[5] = 36.00000000000001;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-46.608188159267);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-3528.90874415751);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-46.608188159267);
      doubleArray5[3] = 36.00000000000001;
      doubleArray5[4] = (-46.608188159267);
      doubleArray5[5] = (-46.608188159267);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      Matrix.from2DArray(doubleArray0);
      int int0 = 4856;
      // Undeclared exception!
      try { 
        Matrix.zero((-889), 4856);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(88, 8);
      MockRandom mockRandom0 = new MockRandom(4);
      int int0 = (-727);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.columnMajorIterator();
      rowMajorSparseMatrix0.is(matrixPredicate0);
      mockRandom0.nextInt((-727));
      Matrix matrix0 = Matrix.random(4, 8, mockRandom0);
      matrix0.removeFirstColumn();
      rowMajorSparseMatrix0.rows();
      MatrixVectorOperation<SparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<SparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseVector.zero(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 22;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(22, 22);
      Matrix matrix0 = denseMatrix0.blankOfShape(22, 22);
      int int1 = 18;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.removeColumn(18);
      matrix0.columnMajorIterator();
      int int2 = (-3636);
      basic2DMatrix0.removeLastColumn();
      int int3 = 24;
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect((-3636), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3636x24
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1076);
      // Undeclared exception!
      denseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 530.6263502;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 522.118841315831;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1186.98;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 522.118841315831;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 530.6263502;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 530.6263502;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.swapColumns(7, 7);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(7, 0.0, (Random) mockRandom0);
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 7 rows and 7 cols at 0, 0 in a 3x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 712;
      DenseVector denseVector0 = DenseVector.constant(712, 555.77383);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(712);
      Vector vector0 = columnMajorSparseMatrix0.getRow(712);
      denseVector0.add(vector0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      locale0.getDisplayCountry();
      String string0 = matrix0.mkString(numberFormat0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "    ";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("    ");
      columnMajorSparseMatrix0.setAll(0.0);
      int int0 = 4;
      int int1 = (-4072);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.isZeroAt(4, (-4072));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(1694, 2.398081733190339E-12);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(1, matrix0.columns());
      
      Matrix matrix1 = matrix0.copyOfRows(1694);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2483L);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(7, 7, 0.0, (Random) mockRandom0);
      sparseMatrix0.hashCode();
      assertEquals(0.14285714285714285, sparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.unit((-368), (-1738));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2481L);
      Matrix matrix0 = Matrix.random(5, 934, mockRandom0);
      // Undeclared exception!
      matrix0.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      doubleArray0[8] = (double) 8;
      Matrix matrix0 = Matrix.from1DArray(8, 8, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(5004, 13);
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 5004;
      doubleArray1[1] = (double) 5004;
      doubleArray1[2] = (double) 5004;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1913.0);
      doubleArray2[1] = 1022.022;
      doubleArray2[2] = (double) 5004;
      doubleArray2[3] = (double) 13;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-1913.0);
      doubleArray3[1] = (double) 5004;
      doubleArray3[2] = 1022.022;
      doubleArray3[3] = (-1913.0);
      doubleArray3[4] = 1022.022;
      doubleArray3[5] = 1022.022;
      doubleArray3[6] = 1022.022;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1913.0);
      doubleArray4[1] = (double) 13;
      doubleArray4[2] = (double) 5004;
      doubleArray4[3] = (double) 13;
      doubleArray4[4] = (double) 13;
      doubleArray4[5] = 1022.022;
      doubleArray4[6] = 1022.022;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 5004;
      doubleArray5[1] = (double) 5004;
      doubleArray5[2] = 1168.21148838;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 13;
      doubleArray6[1] = 1022.022;
      doubleArray6[2] = 1168.21148838;
      doubleArray6[3] = (-1913.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-1913.0);
      doubleArray0[6] = doubleArray7;
      Matrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      denseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Locale locale0 = Locale.CHINA;
      sparseMatrix0.divide(0);
      Matrix matrix0 = Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      matrix0.maxInRow(0);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.toCSV();
      sparseMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-512));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 5;
      int int1 = 593;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 593);
      int int2 = 3263;
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(3263);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1313, 1405);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1406' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("Cj;xP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(32, 933);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      denseVector0.non(vectorPredicate0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "#{ xV>1)i:Zs";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("#{ xV>1)i:Zs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1970.859006556325;
      doubleArray1[2] = 5354.6;
      doubleArray1[3] = (-13.2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 5354.6;
      doubleArray2[1] = (-13.2);
      doubleArray2[2] = 1970.859006556325;
      doubleArray2[3] = 1970.859006556325;
      doubleArray2[4] = (-13.2);
      doubleArray2[5] = (-13.2);
      doubleArray2[6] = (-13.2);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.transformRow(0, vectorFunction0);
      matrix0.slice(0, 0, 0, 0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(0, vectorFunction1);
      matrix0.euclideanNorm();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      matrix0.mkString((NumberFormat) decimalFormat0, "%%MatrixMarket matrix array real general\n2 4\n0.000\n1970.859\n5354.600\n-13.200\n5354.600\n-13.200\n1970.859\n1970.859\n", "%%MatrixMarket matrix array real general\n2 4\n0.000\n1970.859\n5354.600\n-13.200\n5354.600\n-13.200\n1970.859\n1970.859\n");
      ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.multiply((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 8;
      RowMajorSparseMatrix.identity(8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 4);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.norm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 8.881784197001252E-14;
      doubleArray1[1] = (-1347.163);
      doubleArray1[2] = 714.6211603;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 8.881784197001252E-14;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 8.881784197001252E-14;
      doubleArray2[3] = 8.881784197001252E-14;
      doubleArray2[4] = 8.881784197001252E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-1347.163);
      doubleArray3[1] = 2897.827693;
      doubleArray3[2] = 714.6211603;
      doubleArray3[3] = 100.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 714.6211603;
      doubleArray3[6] = 714.6211603;
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = 714.6211603;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2120, (-1.0));
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      double double0 = cRSMatrix0.minInColumn(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 508;
      doubleArray0[1] = (double) 508;
      doubleArray0[2] = (double) 508;
      Matrix matrix0 = Matrix.from1DArray(508, 508, doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-648);
      doubleArray0[1] = (double) (-648);
      doubleArray0[2] = (double) 2562;
      doubleArray0[3] = (double) 2562;
      doubleArray0[4] = (double) (-648);
      doubleArray0[5] = (double) (-648);
      doubleArray0[6] = (double) 2562;
      doubleArray0[7] = (double) (-648);
      doubleArray0[8] = (double) (-648);
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(2562, (-648), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2562x-648
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-840);
      int int1 = (-1740);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-840);
      doubleArray0[1] = (double) (-840);
      doubleArray0[2] = (double) (-840);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-840), (-1740), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -840x-1740
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(460);
      cRSMatrix0.add((double) 460);
      assertEquals(0.002173913043478261, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(17, mockRandom0);
      double double0 = matrix0.infinityNorm();
      assertEquals(0.9, double0, 0.01);
      
      Locale locale0 = Locale.ROOT;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("#Ff45%3\u0005oz3C", decimalFormatSymbols0);
      matrix0.toCSV((NumberFormat) decimalFormat0);
      matrix0.iteratorOfColumn((-1496));
      assertEquals(17, matrix0.rows());
      assertEquals(17, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 32;
      Matrix.zero(32, 32);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      double double0 = denseMatrix0.diagonalProduct();
      assertEquals(9, denseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, denseMatrix0, matrix0, matrix0);
      int int1 = 5025;
      Matrix.constant(5025, 5025, 1.0);
      rowMajorSparseMatrix0.removeFirstRow();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      rowMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 69.935;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = (-2589);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(3520, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "    ";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("    ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("$PUDaYX(8c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 485;
      String string0 = "cI:Ht[JT2b$";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("cI:Ht[JT2b$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
