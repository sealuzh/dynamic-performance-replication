/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 12:43:37 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner.charArrayCompare("N", (-1201), charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N", (-1201));
      jSONReaderScanner0.nextToken((-1201));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'v';
      charArray0[0] = 'v';
      charArray0[1] = 'Z';
      char char1 = '7';
      charArray0[2] = '7';
      charArray0[3] = 'I';
      charArray0[4] = '[';
      char char2 = '1';
      charArray0[5] = '1';
      char char3 = 'T';
      charArray0[6] = 'T';
      int int0 = 1497;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1497, 1497);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 102;
      JSONScanner jSONScanner0 = new JSONScanner(", name ", 102);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanType((String) null);
      Feature feature0 = Feature.DisableASM;
      jSONScanner0.config(feature0, false);
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanSymbol((SymbolTable) null);
      char[] charArray0 = new char[3];
      jSONScanner0.putChar('`');
      charArray0[0] = '(';
      charArray0[1] = '=';
      jSONScanner0.setToken(102);
      jSONScanner0.matchField2(charArray0);
      charArray0[2] = 'R';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 102, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "({c:EG~On?HELf-8H";
      int int0 = (-2249);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("({c:EG~On?HELf-8H", (-2249));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken((-2249));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 9;
      JSONScanner jSONScanner0 = new JSONScanner(",Yos|ih.ti`L/uC2QV", 9);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.nextToken(9);
      int int1 = (-2775);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2775));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect [, actual ");
      jSONScanner0.scanInt('c');
      jSONScanner0.scanDouble('}');
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '!';
      charArray0[2] = 'c';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = '}';
      charArray0[8] = 'c';
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONScanner0.scanFieldStringArray(charArray0, 96, symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/#7J-?9eTvC:c]++", (-1381));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '\\';
      charArray0[2] = 'l';
      charArray0[3] = '_';
      int int0 = 91;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'O';
      charArray0[2] = 'f';
      charArray0[3] = '1';
      charArray0[4] = 'Y';
      charArray0[5] = '\"';
      charArray0[6] = 'Z';
      int int0 = 116;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.features = 116;
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - O, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("can", 70);
      jSONScanner0.nextToken(70);
      jSONScanner0.scanIdent();
      jSONScanner0.numberString();
      jSONScanner0.intValue();
      char[] charArray0 = new char[6];
      char char0 = '0';
      charArray0[0] = '0';
      charArray0[1] = 'o';
      char char1 = '^';
      charArray0[2] = '^';
      charArray0[3] = '/';
      jSONScanner0.matchStat = 127;
      charArray0[4] = '[';
      charArray0[5] = 'O';
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONScanner0.scanFieldStringArray(charArray0, 127, symbolTable0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.np = 559;
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(127, charArray0, (-672), (-672));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U", 2);
      jSONReaderScanner0.eofPos = 2;
      jSONReaderScanner0.nextToken(2);
      int int0 = 120;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.token = 120;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ", 1663);
      char[] charArray0 = new char[18];
      jSONScanner0.isBlankInput();
      char char0 = ' ';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1663);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char[] charArray0 = new char[1];
      char char0 = 'C';
      Object[] objectArray0 = null;
      jSONReaderScanner0.scanDecimal('C');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 112);
      jSONReaderScanner0.pos = 112;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(99999);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 112, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '_';
      charArray0[0] = '_';
      char char1 = 'u';
      charArray0[1] = 'u';
      char char2 = '~';
      charArray0[2] = '~';
      char char3 = 'I';
      charArray0[3] = 'I';
      char char4 = '5';
      charArray0[4] = '5';
      char char5 = 'f';
      charArray0[5] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nzPXdo!-PQfanFRr@");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDecimal('x');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'H';
      charArray0[0] = 'H';
      char char1 = 'n';
      charArray0[1] = 'n';
      int int0 = 63;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 63);
      jSONReaderScanner0.scanBoolean(',');
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("utf8 decode error, ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.info();
      char[] charArray1 = new char[1];
      char char0 = 'K';
      charArray1[0] = 'K';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 92);
      jSONReaderScanner0.scanType("java.time.");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"F\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 108;
      int int1 = 160;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, 160);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.sp = 108;
      Feature feature0 = Feature.SupportAutoType;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ident");
      int int0 = 12;
      jSONReaderScanner0.nextToken(12);
      char char0 = 'j';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - d, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ", 1663);
      char[] charArray0 = new char[4];
      jSONScanner0.isBlankInput();
      charArray0[0] = ' ';
      jSONScanner0.putChar('C');
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanLong(' ');
      jSONScanner0.scanISO8601DateIfMatch(false);
      charArray0[1] = 'u';
      charArray0[2] = 'R';
      jSONScanner0.tokenName();
      charArray0[3] = '3';
      jSONScanner0.matchField2(charArray0);
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDate('r');
      assertEquals(18047, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nx=XxliW8vS9_8");
      jSONReaderScanner0.scanFloat('$');
      jSONReaderScanner0.subString(1518, 1370);
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "m_";
      JSONScanner jSONScanner0 = new JSONScanner("m_");
      jSONScanner0.bytesValue();
      jSONScanner0.setToken((-471));
      char char0 = '7';
      jSONScanner0.scanLong('7');
      jSONScanner0.bp = 1208;
      jSONScanner0.next();
      // Undeclared exception!
      jSONScanner0.nextToken(1215);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char char0 = '^';
      Locale locale0 = Locale.GERMAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      jSONScanner0.locale = locale0;
      jSONScanner0.putChar('^');
      jSONScanner0.scanNumber();
      jSONScanner0.stringDefaultValue = "Set";
      locale0.getUnicodeLocaleKeys();
      char char1 = 'j';
      jSONScanner0.scanInt('j');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 3572;
      JSONScanner jSONScanner0 = new JSONScanner("\"QYjwJo.qN=yFRVM", 3572);
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "null";
      int int0 = 97;
      JSONScanner jSONScanner0 = new JSONScanner("null", 97);
      char char0 = '_';
      jSONScanner0.scanUUID('_');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      jSONScanner0.stringDefaultValue();
      jSONScanner0.longValue();
      jSONScanner0.scanString('d');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1), 1046);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'a';
      charArray0[2] = '6';
      charArray0[3] = 'A';
      charArray0[4] = '>';
      char char0 = 's';
      charArray0[5] = 's';
      charArray0[6] = '^';
      int int0 = 1642;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102, 1642);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanDate('^');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = (-59732540);
      jSONReaderScanner0.features = (-59732540);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '$';
      charArray0[2] = 'i';
      charArray0[3] = ':';
      charArray0[4] = '~';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      int int0 = 48;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 48, 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '';
      charArray0[2] = 'f';
      charArray0[3] = '~';
      charArray0[4] = '-';
      int int0 = 1;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1);
      SymbolTable symbolTable0 = new SymbolTable(2128);
      jSONScanner0.scanFieldStringArray(charArray0, 10, symbolTable0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '|';
      charArray0[2] = 'A';
      charArray0[3] = 'Y';
      charArray0[4] = 'Z';
      charArray0[5] = 'x';
      charArray0[6] = 'g';
      charArray0[7] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1022, (-571));
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$VALUES", 65);
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      jSONScanner0.scanFieldDecimal(charArray0);
      charArray0[1] = 'p';
      charArray0[2] = '{';
      charArray0[3] = 'O';
      charArray0[4] = '<';
      charArray0[5] = 'T';
      charArray0[6] = '*';
      charArray0[7] = '/';
      char[] charArray1 = new char[9];
      charArray1[0] = '<';
      charArray1[1] = 'Y';
      charArray1[2] = '8';
      charArray1[3] = '*';
      charArray1[4] = '8';
      charArray1[5] = 'T';
      charArray1[6] = '/';
      jSONScanner0.nextIdent();
      charArray1[7] = 'p';
      charArray1[8] = '*';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      charArray0[8] = '@';
      SymbolTable symbolTable0 = new SymbolTable(65);
      jSONScanner0.scanFieldStringArray(charArray0, 4232, symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n", 55);
      jSONReaderScanner0.scanString('2');
      jSONReaderScanner0.getFeatures();
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '!';
      charArray0[2] = '2';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteClassName");
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'C';
      charArray0[2] = 'Z';
      charArray0[3] = '+';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      charArray0[4] = 't';
      charArray0[5] = '0';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanDouble('f');
      JSONScanner jSONScanner0 = new JSONScanner("WriteClassName");
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B.", (-942));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "B.";
      objectArray0[1] = (Object) "WRITE_MAP_NULL_FEATURES";
      jSONReaderScanner0.skipWhitespace();
      objectArray0[2] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.isBlankInput();
      objectArray0[3] = (Object) "B.";
      objectArray0[4] = (Object) "B.";
      objectArray0[5] = (Object) "WRITE_MAP_NULL_FEATURES";
      objectArray0[6] = (Object) "B.";
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.lexError("WRITE_MAP_NULL_FEATURES", objectArray0);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.isEnabled(feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-942));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      char char0 = '{';
      charArray0[1] = '{';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type : ");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(5280);
      jSONScanner0.scanEnum(class0, symbolTable0, 'v');
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2;
      JSONScanner jSONScanner0 = new JSONScanner("scan", 2);
      char char0 = ':';
      jSONScanner0.scanStringArray((Collection<String>) null, ':');
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.clone();
      jSONScanner0.timeZone = timeZone0;
      char char1 = '{';
      SymbolTable symbolTable0 = new SymbolTable(45);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str", (-1088483585));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.close();
      char[] charArray1 = new char[5];
      charArray1[0] = '2';
      charArray1[1] = ':';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")(%");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 59;
      JSONScanner jSONScanner0 = new JSONScanner("new", 59);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 1279;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 1279);
      Locale locale0 = Locale.GERMANY;
      locale0.toLanguageTag();
      locale0.getDisplayScript();
      locale0.getDisplayCountry();
      jSONReaderScanner0.subString(1279, 1279);
      Locale.setDefault(locale0);
      jSONReaderScanner0.setLocale(locale0);
      char char0 = 'U';
      jSONReaderScanner0.scanDecimal('U');
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/#7J-?9eTvC:c]++", (-1381));
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = 'x';
      charArray0[2] = '*';
      charArray0[3] = '<';
      charArray0[4] = 'M';
      charArray0[5] = 't';
      charArray0[6] = '\'';
      charArray0[7] = '{';
      int int0 = 1710;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1710, 1710);
      int int1 = 1225;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString(',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "true";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      int int0 = 3968;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      char char0 = '|';
      jSONReaderScanner0.scanDate('|');
      jSONReaderScanner0.config(feature0, true);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 8192);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 34);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFloat('*');
      String string0 = ")N\\!=/Osf5%q>[P";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - *, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 2892);
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'r';
      jSONReaderScanner0.scanInt('l');
      charArray0[2] = '\\';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match C - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "java.util.concurrent.atomic.LongAdder";
      int int0 = 800;
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder", 800);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E5*$h3?HeLd* g})");
      stringReader0.reset();
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-39));
      stringReader0.read();
      jSONReaderScanner0.scanDouble('&');
      jSONReaderScanner0.scanBoolean('`');
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 101, (-39));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '<';
      charArray0[4] = 'B';
      charArray0[5] = 'v';
      charArray0[6] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1839);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$VALUES", 1601);
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1601, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero");
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      jSONScanner0.longValue();
      charArray0[1] = 'G';
      charArray0[2] = '6';
      charArray0[3] = 'G';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.putChar('G');
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldLong(charArray1);
      jSONScanner0.info();
      jSONScanner0.scanFieldDouble(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "+'$Lq+t?0";
      JSONScanner jSONScanner0 = new JSONScanner("+'$Lq+t?0", 127);
      jSONScanner0.nextToken();
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanUUID('m');
      char char0 = '~';
      jSONScanner0.scanStringArray(collection0, '~');
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      jSONScanner0.setLocale(locale0);
      jSONScanner0.matchStat();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+'$Lq+t?0", (-4155));
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Zy:`FY,ZhX[lSSbx\":y");
      char char0 = 'b';
      jSONScanner0.scanString();
      int int0 = (-3889);
      SymbolTable symbolTable0 = new SymbolTable(117);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-3889), (-3889), 47, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 512);
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 13;
      JSONScanner jSONScanner0 = new JSONScanner("4jzs:(", 13);
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'B';
      charArray0[2] = '{';
      charArray0[3] = 'L';
      Locale locale0 = Locale.JAPAN;
      jSONScanner0.locale = locale0;
      charArray0[4] = 'D';
      charArray0[5] = 'r';
      locale0.getDisplayVariant();
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanDecimal('S');
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanInt('S');
      JSONScanner jSONScanner0 = new JSONScanner("false", 108);
      jSONScanner0.scanFloat('Y');
      jSONScanner0.np = (-1);
      jSONScanner0.scanInt('A');
      jSONScanner0.scanInt('S');
      jSONReaderScanner0.next();
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.subString(47, 108);
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.subString(968, 0);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("float", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanLong('f');
      char char0 = 'v';
      jSONReaderScanner0.ch = 'v';
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDecimal('v');
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = '[';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'K';
      charArray0[2] = '{';
      charArray0[3] = 'o';
      charArray0[4] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 43);
      jSONReaderScanner0.eofPos = 43;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("f&@@");
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1844, 553);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4(OfRF@#>0<");
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '(');
      jSONReaderScanner0.isEnabled((-682));
      jSONReaderScanner0.stringDefaultValue = "#V~}";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$VALUES", 90);
      jSONScanner0.bp = 2327;
      Locale locale0 = jSONScanner0.getLocale();
      Locale locale1 = Locale.TAIWAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(arrayList0, set0);
      Locale.getISOLanguages();
      locale1.getDisplayCountry(locale0);
      locale0.getDisplayCountry(locale1);
      jSONScanner0.setLocale(locale0);
      jSONScanner0.putChar('|');
      jSONScanner0.putChar('S');
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'S';
      charArray0[2] = ';';
      charArray0[3] = 'S';
      int int0 = 92;
      SymbolTable symbolTable0 = new SymbolTable(1875);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("fastjson.compatibleWithJavaBean", 1875, 44, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'y';
      charArray0[2] = 'b';
      charArray0[3] = 'i';
      charArray0[4] = 'F';
      charArray0[5] = ';';
      charArray0[6] = '?';
      charArray0[7] = 's';
      charArray0[8] = 'I';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.scanInt('i');
      jSONScanner0.scanLong('F');
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDate(';');
      jSONScanner0.bp = 70;
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.resetStringPosition();
      jSONScanner0.matchStat();
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = ',';
      charArray0[2] = '_';
      charArray0[3] = 'U';
      charArray0[4] = '9';
      charArray0[5] = 'u';
      charArray0[6] = ',';
      charArray0[7] = 'C';
      charArray0[8] = 'F';
      int int0 = 106;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 106);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDate('X');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      char char0 = '{';
      charArray0[1] = '{';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("can");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'd';
      JSONLexerBase.readString(charArray0, 0);
      charArray0[2] = '>';
      jSONScanner0.scanIdent();
      charArray0[3] = 'F';
      charArray0[4] = 'r';
      charArray0[5] = ':';
      charArray0[6] = 'Q';
      charArray0[7] = '\'';
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanLong('d');
      jSONScanner0.isBlankInput();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, '$');
      char[] charArray1 = new char[4];
      charArray1[0] = '\'';
      charArray1[1] = 'F';
      charArray1[2] = 'N';
      charArray1[3] = 'N';
      jSONScanner0.scanFieldIntArray(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'B';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEnabled(44, (-837));
      JSONScanner jSONScanner0 = new JSONScanner("9D\"ug07.3\"Gb", 3819);
      jSONScanner0.skipWhitespace();
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'l');
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      jSONReaderScanner0.scanUUID('2');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ".y^As?`[L#x@H;sx";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".y^As?`[L#x@H;sx");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.longValue();
      char char0 = '?';
      jSONReaderScanner0.scanFloat('?');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ".y^As?`[L#x@H;sx";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4am;%KGXR");
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '[';
      charArray0[2] = '>';
      charArray0[3] = 'O';
      charArray0[4] = 'T';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G.)+b\"w2p~e!ST");
      jSONReaderScanner0.putChar('H');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D", 70);
      jSONReaderScanner0.getCurrent();
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, false);
      Locale locale0 = null;
      jSONReaderScanner0.nextTokenWithChar('D');
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "%_ZgcEgg";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%_ZgcEgg");
      jSONReaderScanner0.isEnabled(13);
      jSONReaderScanner0.getFeatures();
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '7';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1685), (-1685));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1685
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, (-970));
      char[] charArray1 = new char[4];
      charArray1[0] = 'g';
      charArray1[1] = 'R';
      jSONReaderScanner0.stringVal();
      charArray1[2] = '1';
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 2082);
      jSONReaderScanner0.isEnabled(83, (-4701));
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.charAt(2521);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("DisableFieldSmartMatch", (-1));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(342, 110, 342, 364, Integer.MAX_VALUE, 1969);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '!';
      charArray0[2] = '}';
      charArray0[3] = 'z';
      charArray0[4] = 'h';
      charArray0[5] = 'v';
      charArray0[6] = 'h';
      charArray0[7] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('_');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2402, 4190);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal('2');
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2958;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2958);
      int int1 = 637;
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1361), 637);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sbx6Phs<sy}~tj");
      jSONReaderScanner0.ch = 'U';
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[0] = 'U';
      jSONReaderScanner0.nextToken();
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      jSONReaderScanner0.scanInt('O');
      charArray0[3] = 'b';
      charArray0[4] = 'U';
      charArray0[5] = 'b';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals('b', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan", 115);
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(115, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",", 2766);
      jSONScanner0.nextToken(1046);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 1083);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.sbuf = charArray0;
      char char0 = 'S';
      jSONReaderScanner0.scanDouble('S');
      char[] charArray1 = new char[4];
      jSONReaderScanner0.pos = 1083;
      charArray1[0] = 'S';
      charArray1[1] = 'S';
      charArray1[2] = 'S';
      charArray1[3] = 'S';
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("^}zm3nIX|*gV,TA", (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3Vvm~^=rk");
      char char0 = '>';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '>');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '_';
      charArray0[2] = 'u';
      charArray0[3] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3475, 3475);
      jSONReaderScanner0.scanLong('u');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 57);
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = 'c';
      charArray0[3] = 'j';
      charArray0[4] = '-';
      charArray0[5] = 'p';
      charArray0[6] = 'y';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nX!qnf]FOd", (-1613));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('Q');
      jSONReaderScanner0.stringVal();
      assertEquals((-1613), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D");
      jSONReaderScanner0.setToken((-84));
      char[] charArray0 = new char[3];
      char char0 = 'I';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.scanIdent();
      jSONScanner0.scanBoolean('>');
      char char0 = '8';
      jSONScanner0.scanString('8');
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      jSONScanner0.close();
      charArray0[6] = '8';
      charArray0[7] = '8';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 5, json : scan false error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3OG");
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'J';
      charArray0[2] = '{';
      charArray0[3] = ';';
      charArray0[4] = '#';
      charArray0[5] = 'u';
      charArray0[6] = 'L';
      charArray0[7] = 'W';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDouble('V');
      jSONScanner0.getCalendar();
      char[] charArray1 = new char[0];
      jSONScanner0.matchField(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('V', 'V', 'j', '7', '\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 72;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 72);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanLong('`');
      jSONReaderScanner0.sub_chars(48, 48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&**XuyT,:>\"uK");
      jSONScanner0.scanDouble('i');
      int int0 = (-3116);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V2sx>(l");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1109, 1109);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.setTimeZone('\\', '\\', '\\');
      jSONScanner0.pos();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1109, charArray0, 0, 1490);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^NIiNNQG;(\"\"[ri,v");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanISO8601DateIfMatch(true);
      float float0 = jSONScanner0.scanFloat('s');
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.info();
      String string0 = jSONScanner0.scanString('x');
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 's';
      charArray0[5] = 'x';
      charArray0[6] = 's';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SkipTransientField", 43);
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = 'O';
      charArray0[3] = 'V';
      charArray0[4] = ' ';
      charArray0[5] = 'h';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.hasSpecial = false;
      char[] charArray1 = new char[0];
      jSONScanner0.scanType("SkipTransientField");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 216;
      JSONScanner jSONScanner0 = new JSONScanner("y02;~oI]P<ycX", 216);
      jSONScanner0.skipWhitespace();
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "unclosed string : ";
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ", 102);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      jSONReaderScanner0.np = 102;
      jSONReaderScanner0.tokenName();
      charArray0[1] = 'h';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-3866);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3866));
      jSONReaderScanner0.np = (-3866);
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-3866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 40);
      Locale locale0 = Locale.KOREA;
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'd';
      charArray0[2] = 'u';
      charArray0[3] = 'H';
      charArray0[4] = 'X';
      charArray0[5] = '3';
      charArray0[6] = '`';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 71, 1014);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'S';
      charArray0[2] = '>';
      charArray0[3] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.matchStat = 2;
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner("OB)vA3=j9hJk+D'8'M@");
      jSONScanner0.scanUUID('>');
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanLong('=');
      jSONScanner0.scanString('H');
      char[] charArray1 = new char[8];
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = '>';
      charArray1[3] = ':';
      charArray1[4] = '>';
      charArray1[5] = 'q';
      charArray1[6] = '`';
      charArray1[7] = 'T';
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('x');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match x - O, info : pos 0, json : OB)vA3=j9hJk+D'8'M@
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pe9{$9O4_NK'c1v", 118);
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[3];
      charArray1[0] = '0';
      charArray1[1] = '0';
      charArray1[2] = '0';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = '=';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = 123;
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'r';
      charArray0[2] = 't';
      charArray0[3] = 'l';
      charArray0[4] = 'Z';
      charArray0[5] = 's';
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(123);
      jSONScanner0.scanStringArray((Collection<String>) null, 'c');
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-31), (-31));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      JSONScanner jSONScanner0 = new JSONScanner("", Integer.MIN_VALUE);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'y';
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[2] = 'b';
      charArray0[3] = 'U';
      charArray0[4] = '0';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '8';
      charArray0[0] = '8';
      charArray0[1] = 'S';
      charArray0[2] = 'f';
      charArray0[3] = 'k';
      charArray0[4] = 'r';
      charArray0[5] = '8';
      int int0 = 1345;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1345, (-3313));
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        MockCalendar.getInstance(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'b';
      charArray0[2] = 'O';
      charArray0[3] = 'o';
      charArray0[4] = 'R';
      charArray0[5] = 'J';
      charArray0[6] = '\'';
      charArray0[7] = '4';
      charArray0[8] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127);
      jSONReaderScanner0.nextToken(127);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanString('j');
      char[] charArray1 = new char[1];
      charArray1[0] = 'O';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      char[] charArray2 = new char[3];
      jSONReaderScanner0.sp = 127;
      charArray2[0] = 'R';
      charArray2[1] = 'J';
      charArray2[2] = 'A';
      jSONReaderScanner0.scanFieldInt(charArray2);
      jSONReaderScanner0.scanFieldLong(charArray2);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Feature feature0 = Feature.UseObjectArray;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('_');
      jSONScanner0.scanBoolean('v');
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '_';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 26;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int1 = (-508);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-612));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '1';
      charArray0[2] = 'S';
      int int0 = 92;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 118);
      jSONReaderScanner0.scanLong('g');
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetTime");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.config(feature0, false);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QG");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanLong('`');
      jSONReaderScanner0.sub_chars(48, 48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'J';
      charArray0[2] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3600, (-429));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('l');
      assertEquals((-429), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('#');
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      jSONScanner0.scanFieldString(charArray0);
      boolean boolean1 = JSONScanner.checkDate('#', '#', 'J', 'J', 'b', 'J', (-2), (-2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.locale = locale0;
      char char0 = 'L';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&**XuyT,:>\"uK");
      jSONScanner0.scanDouble('i');
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.bp = (-3116);
      jSONScanner0.close();
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("py|3.q+w(");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&**XuyT,:>\"uK");
      jSONScanner0.scanDouble('i');
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.bp = (-3116);
      jSONScanner0.close();
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("py|3.q+w(");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.", (-1060));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      jSONScanner0.scanFieldDate(charArray0);
      charArray0[1] = '#';
      charArray0[2] = '&';
      charArray0[3] = '6';
      jSONScanner0.resetStringPosition();
      charArray0[4] = 'f';
      charArray0[5] = '0';
      charArray0[6] = 'z';
      charArray0[7] = 'p';
      charArray0[8] = '!';
      jSONScanner0.scanFieldString(charArray0);
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '&';
      charArray0[2] = '\'';
      charArray0[3] = '3';
      char[] charArray1 = new char[6];
      charArray1[0] = 'h';
      charArray1[1] = '3';
      charArray1[2] = '3';
      charArray1[3] = '!';
      charArray1[4] = '\'';
      charArray1[5] = '3';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      charArray0[4] = 'h';
      charArray0[5] = 'x';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MW{Y");
      jSONScanner0.nextToken();
      jSONScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '*';
      charArray0[2] = 'Z';
      charArray0[3] = '+';
      charArray0[4] = '9';
      charArray0[5] = '#';
      charArray0[6] = 'y';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'o';
      charArray0[2] = 'O';
      int int0 = 1359;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1359);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(374);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'E');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"~oO\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AllowISO8601DateFormat");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanString('D');
      jSONScanner0.scanDate('S');
      jSONScanner0.intValue();
      SymbolTable symbolTable0 = new SymbolTable(26);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = '#';
      charArray0[1] = '#';
      char char2 = '.';
      charArray0[2] = '.';
      char char3 = 'v';
      charArray0[3] = 'v';
      int int0 = 35;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "Set";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B(+n:vH\"esA");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      char char0 = '`';
      charArray0[1] = '`';
      charArray0[2] = 't';
      char char1 = '\'';
      charArray0[3] = '\'';
      charArray0[4] = 'k';
      charArray0[5] = '+';
      charArray0[6] = '<';
      charArray0[7] = 'T';
      charArray0[8] = '0';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 117, 2482);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "A)F%{5Uf;1mS{0y@{";
      int int0 = 9987;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A)F%{5Uf;1mS{0y@{", 9987);
      jSONReaderScanner0.nextToken(4);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(4);
      symbolTable0.addSymbol("A)F%{5Uf;1mS{0y@{", 4, 0, 4, true);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("A)F%{5Uf;1mS{0y@{", 9987, 0, 9995, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
