/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:19:21 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.List;
import java.util.Locale;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.conn.LanguageConnectionFactory;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.ContainerHandle;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLLongVarbit;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.engine.Session;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      SQLUtil.renderValue(character0);
      String string0 = "J?fq8,hWjbl";
      SQLUtil.isQuery("J?fq8,hWjbl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(318, "J?fq8,hWjbl");
      Integer.getInteger("'5'");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.COMMIT;
      Character.compare('5', '5');
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'5'", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("executecu6gh ?y0z");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("executecu6gh ?y0z", stringBuilder0);
      assertEquals("executecu6gh ?y0z", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isDML("RT,~g6&X$*xj4");
      SQLUtil.parseColumnTypeAndSize("RT,~g6&X$*xj4");
      System.setCurrentTimeMillis(2711L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isProcedureCall("P}a3.e+Dr");
      DBCatalog dBCatalog0 = new DBCatalog("*");
      DBSchema dBSchema0 = new DBSchema("*", dBCatalog0);
      DBCatalog dBCatalog1 = new DBCatalog("*");
      dBCatalog1.toString();
      dBSchema0.getTable("*");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.valueOf(40);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addOptionalCondition("5+q", stringBuilder0);
      assertEquals("5+q", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Dependable.TRIGGER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P}a3.e+Dr";
      String string1 = LanguageConnectionFactory.MODULE;
      DBDataType dBDataType0 = DBDataType.getInstance((-207), "org.apache.derby.iapi.sql.conn.LanguageConnectionFactory");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.sum((-207), (-4595));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.sql.conn.LanguageConnectionFactory", defaultDBTable0, dBDataType0, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(stringArray0[1], "Trigger", defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eI.Gr#bI");
      SQLUtil.isProcedureCall("P}a3.e+Dr");
      DBCatalog dBCatalog0 = new DBCatalog("*");
      DBSchema dBSchema0 = new DBSchema("*", dBCatalog0);
      DBCatalog dBCatalog1 = new DBCatalog("*");
      dBCatalog1.toString();
      dBSchema0.getTable("*");
      DBDataType dBDataType0 = DBDataType.getInstance((-1850281469), "");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = Integer.valueOf(40);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aWeQKBS", (DBTable) null, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("1Q9}AfkDuky-$!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1Q9}AfkDuky-$!", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(125, "1Q9}AfkDuky-$!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1Q9}AfkDuky-$!", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileUtil.canonicalFile("1Q9}AfkDuky-$! 1Q9}AFKDUKY-$! NULL");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("uJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = LogToFile.TEST_SWITCH_LOG_FAIL2;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-1497870793), "CLOB");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4#i:]fA.5/E[?B{\"T", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "4#i:]fA.5/E[?B{\"T";
      stringArray0[3] = "4#i:]fA.5/E[?B{\"T";
      stringArray0[4] = "4#i:]fA.5/E[?B{\"T";
      stringArray0[5] = null;
      stringArray0[6] = "4#i:]fA.5/E[?B{\"T";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4#i:]fA.5/E[?B{\"T", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 4#i:]fA.5/E[?B{\"T UNIQUE (, , 4#i:]fA.5/E[?B{\"T, 4#i:]fA.5/E[?B{\"T, 4#i:]fA.5/E[?B{\"T, , 4#i:]fA.5/E[?B{\"T)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Dependable.TRIGGER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P}a3.e+Dr";
      DBCatalog dBCatalog0 = new DBCatalog("Trigger");
      dBCatalog0.getSchema("P}a3.e+Dr");
      SQLUtil.mutatesStructure("P}a3.e+Dr");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      SQLUtil.typeAndName(defaultDBTable1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P}a3.e+Dr");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(674L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., ., ., ., .", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "EPyicC)1w3~d0SJ";
      SQLUtil.isQuery("EPyicC)1w3~d0SJ");
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("EPyicC)1w3~d0SJ", compositeDBObject0);
      tableContainer0.getTable("EPyicC)1w3~d0SJ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EPyicC)1w3~d0SJ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.removeComments("PRIMARY KEY ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PRIMARY KEY ");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = NoPutResultSet.LAST;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xLwG");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P}a3.e+Dr";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setName("xLwG");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = FBConnectionProperties.USER_NAME_PROPERTY;
      DBSchema dBSchema0 = new DBSchema("O=HA*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o`'DQN@X", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(14, "O=HA*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o`'DQN@X", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.isDML("0L=771)");
      SQLUtil.normalize("0L=771)", false);
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("O=HA*", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = SchemaDescriptor.SYSPROC_SCHEMA_UUID;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("c013800d-00fb-2643-07ec-000000134f30", true);
      SQLUtil.mutatesDataOrStructure("ORDINA_POSITION INT");
      SQLLongVarbit sQLLongVarbit0 = new SQLLongVarbit();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(true);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("\"_}#rZ[7TfQ]3O", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1615227755), 'f');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "4#i:]fA.5/E[?Bq\"T";
      stringArray0[3] = "4#i:]fA.5/E[?Bq\"T";
      stringArray0[4] = "4#i:]fA.5/E[?Bq\"T";
      stringArray0[5] = null;
      stringArray0[6] = stringArray0[5];
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.removeComments("}a3R.e+Dr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(76, "");
      dBDataType0.isNumber();
      Integer integer0 = new Integer(560);
      Integer integer1 = new Integer(4044);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewasr7w{r", defaultDBTable0, dBDataType0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'HBFi9a\"~re1");
      SQLUtil.addOptionalCondition("}a3R.e+Dr", stringBuilder0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("cu6GH ?Y0Z");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu6GH ?Y0Z");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cu6GH ?Y0Z";
      stringArray0[1] = "/*";
      stringArray0[2] = ">7]dL/PTZ";
      String string0 = Dependable.PERM;
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema(">7]dL/PTZ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Jc8(W5Yv;`t", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.leftJoin("e{C6C2=,_Po>4:", stringArray0, ">7]dL/PTZ", "e{C6C2=,_Po>4:", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(">7]dL/PTZ");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_=Zd:#@RX|T");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "_=Zd:#@RX|T", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("epyic", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("callalter index", true, dBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"callalter index\" ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("P}a3.e+Dr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "e+* hT*fyt)";
      stringArray0[2] = "e+* hT*fyt)";
      stringArray0[3] = "WE^___fZJ";
      stringArray0[4] = null;
      stringArray0[5] = "e+* hT*fyt)";
      stringArray0[6] = "alter indexp}a3.e+dr";
      stringArray0[7] = "";
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, e+* hT*fyt), e+* hT*fyt), WE^___fZJ, , e+* hT*fyt), alter indexp}a3.e+dr, ) REFERENCES  join ()", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.normalize("uCT]e/umP`)|qgDcGwt", true);
      assertEquals("uCT ] e / umP `) | qgDcGwt", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[1] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[2] = "uCT ] e / umP `) | qgDcGwt";
      stringArray0[3] = "uCT ] e / umP `) | qgDcGwt";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uCT]e/umP`)|qgDcGwt");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uCT]e/umP`)|qgDcGwt", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT uCT]e/umP`)|qgDcGwt PRIMARY KEY (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", string1);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("new", " = ", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", defaultDatabase0);
      String string2 = SQLUtil.renderValue(dBCatalog0);
      assertEquals("(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", string2);
      
      Session session0 = new Session();
      String string3 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT uCT]e/umP`)|qgDcGwt ", string3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom((-1269));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getCharacterStream((String) null);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("+'FQu;", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_a");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-83474715));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intouct ] e / ump `) | qgdcgwt");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = LanguageConnectionFactory.MODULE;
      TableContainer tableContainer0 = new TableContainer("select intouct ] e / ump `) | qgdcgwt", defaultDBTable0);
      tableContainer0.getTable("a*I;(,;");
      DBDataType dBDataType0 = DBDataType.getInstance((-207), "create materialized view");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("]6=", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized view", dBSchema0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.sql.conn.LanguageConnectionFactory", defaultDBTable1, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " `M3GEa}!9O`vtlm");
      SQLUtil.addOptionalCondition("org.apache.derby.impl.sql.compile.CursorNode", stringBuilder0);
      assertEquals(" `M3GEa}!9O`vtlm or org.apache.derby.impl.sql.compile.CursorNode", stringBuilder0.toString());
      
      StringReader stringReader0 = new StringReader("]6=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer1);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("org.apache.derby.iapi.sql.conn.LanguageConnectionFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionFactory", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a*I;(,;");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("a*I;(,;", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Integer integer0 = new Integer(1437);
      defaultDBTable0.getComponents();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("wW6>Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PRIMARY KEY@";
      Boolean boolean0 = Boolean.TRUE;
      stringArray0[1] = "select(simple, l_, }{y])";
      stringArray0[2] = "PRIMARY KEY@";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("PRIMARY KEY@ = 'PRIMARY KEY@' AND select(simple, l_, }{y]) = 'select(simple, l_, }{y])' AND PRIMARY KEY@ = 'PRIMARY KEY@'", string0);
      
      boolean boolean1 = SQLUtil.isQuery("select(simple, l_, }{y])");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Boolean boolean0 = Boolean.TRUE;
      stringArray0[1] = "select(simple, l_, }{y])";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("select(simple, l_, }{y])");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"simple\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deIOby.versonmaint");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "deIOby.versonmaint";
      stringArray0[1] = "BIT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BIT", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("deIOby.versonmaint", true, dBUniqueConstraint0);
      dBUniqueIndex0.setDoc("SEQUENCEDATATYPE");
      dBUniqueIndex0.setTable(defaultDBTable0);
      dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "deIOby.versonmaint", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("BIT");
      SQLUtil.addRequiredCondition("ydA:JKh>A3NU%uR:", stringBuilder0);
      assertEquals("BIT and ydA:JKh>A3NU%uR:", stringBuilder0.toString());
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&(DWl^-OUlC@4o/", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("UNIQUE (deIOby.versonmaint, BIT)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "cu6GH ?Y0Z";
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      dBCatalog0.getSchema("cu6GH ?Y0Z");
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string1 = Dependable.PERM;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.leftJoin(">]dL/Pd", stringArray0, (String) null, (String) null, stringArray0);
      SQLUtil.normalize("left join null as null on >]dL/Pd.null = null.null", true);
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("RT,~g6&X$*xj4", false);
      assertEquals("RT, ~ g6 & X $ * xj4", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("RT, ~ g6 & X $ * xj4");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RT,~g6&X$*xj4");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getColumns(stringArray0);
      String string1 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog RT, ~ g6 & X $ * xj4", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized viewc013800d-00f8-5b70-bea3-00000019ed88");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Dependable.TRIGGER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P}a3.e+Dr";
      String string1 = LanguageConnectionFactory.MODULE;
      DBDataType dBDataType0 = DBDataType.getInstance((-207), "page=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.sum((-207), (-4595));
      Integer.divideUnsigned((-4595), 210);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",Q", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.substituteMarkers("Trigger", "P}a3.e+Dr", "page=");
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      dBDataType0.isAlpha();
      System.setCurrentTimeMillis((-858L));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DBCatalog dBCatalog0 = new DBCatalog("7E%yi)9c/G1");
      dBCatalog0.getSchema("PRIMARY KEY@");
      SQLUtil.mutatesStructure("PRIMARY KEY@");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.setSchema((DBSchema) null);
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.mutatesStructure("select(simple, l_, }{y])");
      SQLUtil.mutatesDataOrStructure("select(simple, l_, }{y])");
      SQLUtil.leftJoin("drop table", stringArray0, "alter ", "calla*i;(,;", stringArray0);
      SQLUtil.parseColumnTypeAndSize("`639M1FZ7#");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select(simple, l_, }{y])");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.normalize("uCT]e/umP`)|qgDcGwt", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[1] = "uCT]e/umP`)|qgDcGwt";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[2] = "uCT ] e / umP `) | qgDcGwt";
      stringArray0[3] = "uCT ] e / umP `) | qgDcGwt";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uCT]e/umP`)|qgDcGwt");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uCT]e/umP`)|qgDcGwt", false, stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.leftJoin("uCT]e/umP`)|qgDcGwt", stringArray0, "uCT]e/umP`)|qgDcGwt", "(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PRIMARY KEY@";
      String string0 = DataFactory.TEMP_SEGMENT_NAME;
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("tmp");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.dictionary.ViewDescriptor", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("DataFileCache.close() : close");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("M7{Qm|(b12H6^T3l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: M7{Qm|(b12H6^T3l
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "T2KH0w d!MJ@";
      SQLUtil.isDML("insert");
      SQLUtil.parseColumnTypeAndSize("insert");
      System.setCurrentTimeMillis(2711L);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("T2KH0w d!MJ@", "insert", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("%0aC.4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '%0aC.4'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("select8(w{#", true);
      assertEquals("select8 (w { #", string0);
      
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = RawStore.TEST_REENCRYPT_CRASH_BEFORE_RECOVERY_FINAL_CLEANUP;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string2 = SQLUtil.leftJoin("PO0>L!", stringArray0, "lseg", "select8(w{#", stringArray0);
      assertEquals("left join lseg as select8(w{# on PO0>L!.null = select8(w{#.null and PO0>L!.null = select8(w{#.null and PO0>L!.null = select8(w{#.null", string2);
      
      SQLUtil.parseColumnTypeAndSize("2kl8-mDkQ{KT");
      String string3 = SQLUtil.innerJoin((String) null, stringArray0, "alter index", "2kl8-mDkQ{KT", stringArray0);
      assertEquals("alter index as 2kl8-mDkQ{KT on null.null = 2kl8-mDkQ{KT.null and null.null = 2kl8-mDkQ{KT.null and null.null = 2kl8-mDkQ{KT.null", string3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("uCT]e/umP`)|qgDcGwt", false);
      assertEquals("uCT ] e / umP `) | qgDcGwt", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[1] = "uCT]e/umP`)|qgDcGwt";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[2] = "uCT ] e / umP `) | qgDcGwt";
      stringArray0[3] = "uCT ] e / umP `) | qgDcGwt";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uCT]e/umP`)|qgDcGwt");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uCT]e/umP`)|qgDcGwt", true, stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string2 = SQLUtil.leftJoin("m5N", stringArray0, "m5N", "(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)", stringArray0);
      assertEquals("left join m5N as (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt) on m5N.uCT]e/umP`)|qgDcGwt = (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt).uCT]e/umP`)|qgDcGwt and m5N.uCT]e/umP`)|qgDcGwt = (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt).uCT]e/umP`)|qgDcGwt and m5N.uCT ] e / umP `) | qgDcGwt = (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt).uCT ] e / umP `) | qgDcGwt and m5N.uCT ] e / umP `) | qgDcGwt = (uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt).uCT ] e / umP `) | qgDcGwt", string2);
      
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string3 = SQLUtil.normalize("NT^}$tUZ}\"KGvl", true);
      assertEquals("NT ^ } $ tUZ } \"KGvl\"", string3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("cu6GH ?Y0Z");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cu6GH ?Y0Z");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cu6GH ?Y0Z";
      stringArray0[1] = "/*";
      stringArray0[2] = "cu6GH ?Y0Z";
      String string0 = Page.DIAG_NUMOVERFLOWED;
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("cu6GH ?Y0Z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBSchema0.setCatalog(dBCatalog0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = FBConnectionProperties.ENCODING_PROPERTY;
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      String string2 = SchemaDescriptor.SYSFUN_SCHEMA_UUID;
      DBDataType dBDataType0 = DBDataType.getInstance((-2061), "select intoanot instantiate cls");
      Integer integer0 = RawTransaction.COMMIT;
      int int0 = ContainerHandle.MODE_NO_ACTIONS_ON_COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2642-07ec-000000134f30", defaultDBTable0, dBDataType0, integer0, integer0);
      Boolean boolean2 = new Boolean(true);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      StringWriter stringWriter0 = new StringWriter(4801);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 25165824);
      Writer writer0 = bufferedWriter0.append((CharSequence) "cu6GH ?Y0Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a*I;(,;");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("a*I;(,;");
      Boolean boolean0 = SQLUtil.mutatesStructure("a*I;(,;");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("a*I;(,;");
      SQLUtil.typeAndName(defaultDBTable1);
      Boolean.valueOf("alter materialized viewselect intoanot instantiate cls");
      String string0 = SQLUtil.typeAndName(defaultDBTable1);
      assertNotNull(string0);
      assertEquals("table a*I;(,;", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "truncate";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("truncate = 'truncate'", string1);
      
      boolean boolean2 = SQLUtil.isQuery("%Ae}TtL=uTkI+");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.normalize("uCT]e/umP`)|qgDcGwt", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[1] = "uCT]e/umP`)|qgDcGwt";
      stringArray0[2] = "uCT ] e / umP `) | qgDcGwt";
      stringArray0[3] = "uCT ] e / umP `) | qgDcGwt";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uCT]e/umP`)|qgDcGwt");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "uCT]e/umP`)|qgDcGwt", true, stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("uCT]e/umP`)|qgDcGwt", defaultDBTable0, 476, "(uCT]e/umP`)|qgDcGwt, uCT]e/umP`)|qgDcGwt, uCT ] e / umP `) | qgDcGwt, uCT ] e / umP `) | qgDcGwt)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uCT]e/umP`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.normalize("RT,~g6&X$*xj4", false);
      DBCatalog dBCatalog0 = new DBCatalog("RT, ~ g6 & X $ * xj4");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RT,~g6&X$*xj4");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RT, ~ g6 & X $ * xj4";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("RT, ~ g6 & X $ * xj4");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "D{7G lj7/ei6r|n+", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable1);
      DBDataType.getInstance((-2119), "RT,~g6&X$*xj4");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable(" = ");
      DefaultDBTable defaultDBTable3 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable4 = new DefaultDBTable();
      defaultDBTable3.setName("asr7w{r");
      StringWriter stringWriter0 = new StringWriter(5516);
      defaultDBTable1.setOwner(defaultDBTable4);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 5516);
      bufferedWriter0.append((CharSequence) "RT, ~ g6 & X $ * xj4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table RT, ~ g6 & X $ * xj4 (,\n\tCONSTRAINT \"D{7G lj7/ei6r|n+\" PRIMARY KEY (RT, ~ g6 & X $ * xj4)\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Jr,a?;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ordina_");
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      stringArray1[1] = "ordina";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string1 = SQLUtil.leftJoin(stringArray0[0], stringArray1, (String) null, "-8tsW6egxQ&|q-^", stringArray0);
      assertEquals("left join null as -8tsW6egxQ&|q-^ on null.null = -8tsW6egxQ&|q-^.null and null.ordina = -8tsW6egxQ&|q-^.null", string1);
      
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string2);
      assertEquals("table ordina_", string2);
  }
}
