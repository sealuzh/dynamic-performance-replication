/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:45:56 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, Integer>();
      Integer integer0 = new Integer((-2109));
      doubleKeyMap0.put(integer0, (HashMap<Object, Object>) null, integer0);
      Integer integer1 = new Integer((-2109));
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.get(integer1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-3961));
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      String string0 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      Map<String, String> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, String>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.put("'f", integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<HashMap<Map<Object, Map<Object, HashMap<String, Object>>>, Object>, String> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer(1);
      Integer integer1 = doubleKeyMap0.put((Object) map0, (Object) doubleKeyMap1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, String>, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "6q-g#)B2(", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<Object, String>, Object>((Map<Map<String, String>, Map<Map<Object, String>, Object>>) null);
      Map<Map<Object, String>, Object> map0 = doubleKeyMap0.get((Map<String, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<String, String>>();
      DoubleKeyMap<String, HashMap<Map<String, String>, String>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Map<String, String>, String>, Object>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Object) "@@-CRj|6AzL^hW{", (Object) integer0, "");
      String string0 = doubleKeyMap0.put((Object) "@@-CRj|6AzL^hW{", (Object) "@@-CRj|6AzL^hW{", "@@-CRj|6AzL^hW{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap1.put((Object) null, (Object) null, (String) null);
      String string0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Object object0 = new Object();
      Map<String, Integer> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, String>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.remove("wrong proto type map ", object0);
      assertNull(string0);
  }
}
