/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:28:33 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.AwtCodec;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.CharArrayReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.ASMSerializerFactory");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 24);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ;, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*85Lu)");
      defaultJSONParser0.setConfig((ParserConfig) null);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) "*85Lu)", (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("with");
      defaultJSONParser0.setResolveStatus((-2278));
      ArrayDeque<Insets> arrayDeque0 = new ArrayDeque<Insets>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$Emptyap");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.getSymbolTable();
      System.setCurrentTimeMillis(100L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_asm");
      defaultJSONParser0.resolveReference("n2_T `iOgO%AQ`");
      defaultJSONParser0.getExtraTypeProviders();
      Class<PageAttributes> class0 = PageAttributes.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$ref");
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("not support : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : pos 1, json : $ref
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0007;n#?h'a#}");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!>PA#:.=;1]p");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : !>PA#:.=;1]p
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Point> class0 = Point.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~", parserConfig0);
      defaultJSONParser0.handleResovleTask(aSMDeserializerFactory0);
      TreeMap<BigInteger, Point> treeMap0 = new TreeMap<BigInteger, Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : ~
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6y;$az5cAFPRf", parserConfig1, (-1128));
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      Class<MapDeserializer> class0 = MapDeserializer.class;
      classLoader0.setClassAssertionStatus("fastjson.parser.autoTypeSupport", false);
      AwtCodec awtCodec0 = new AwtCodec();
      parserConfig0.putDeserializer(class0, awtCodec0);
      Class<Byte> class1 = Byte.TYPE;
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) treeSet0, (Object) "[-0(cdj.Bl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : [-0(cdj.Bl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : syntax error, expect {, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$i#*2K9xP'T");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : $i#*2K9xP'T
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?%n+*7oK?(#~IK`;[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ), actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'E';
      charArray0[2] = '[';
      charArray0[3] = 'K';
      charArray0[4] = 'F';
      charArray0[5] = '%';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K/T_}WXC@'b", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("j?o&:&C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - K, info : pos 1, json : {K/T_}WXC@'b
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$.com.alibaba.fastjson.parser.JSONReaderScanner@1");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.JSONReaderScanner@1");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[0];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Locale locale0 = Locale.KOREA;
      defaultJSONParser0.parse();
      HashMap<Properties, Annotation> hashMap0 = new HashMap<Properties, Annotation>();
      defaultJSONParser0.checkMapResolve(hashMap0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K>", parserConfig0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5#zz`S", parserConfig0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Float float0 = new Float((double) 0);
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, float0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeSet<Method> treeSet0 = new TreeSet<Method>();
      Class<Double> class0 = Double.TYPE;
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Lv<L<2}qB$V|UApq%|M");
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      int int0 = 24;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 24);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j],g*n'1P^P=");
      Class<Point> class0 = Point.class;
      Class<Float> class1 = Float.class;
      FieldInfo fieldInfo0 = new FieldInfo("j],g*n'1P^P=", class1, class1, class1, (Field) null, 4, (-1668), (-2287));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      defaultJSONParser0.lastBeanContext = beanContext0;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Class<String> class1 = String.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      JavaBeanInfo.build((Class<?>) class1, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null, false, false);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("fastjson.parser.autoTypeSupport", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!B*(2", parserConfig0, 299);
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      defaultJSONParser0.resolveStatus = (int) ';';
      ParserConfig.global = parserConfig0;
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.accept(1, 21);
      assertEquals(0, defaultJSONParser1.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      PageAttributes pageAttributes0 = new PageAttributes();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6>e7D7");
      defaultJSONParser0.getObject("6>e7D7");
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k&XQ&3>v /=G");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = new ParseContext((ParseContext) null, jSONScanner0, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "k&XQ&3>v /=G");
      defaultJSONParser_ResolveTask0.ownerContext = null;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LKaC>UP");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, jSONReaderScanner1, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) charArray0, (Object) jSONReaderScanner1);
      defaultJSONParser0.setContext(parseContext1, (Object) null, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.parser.DefaultJSONParser");
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Long.valueOf((long) 1);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) ", fieldName ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ,, pos 0, fieldName , fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I:yBn?S2a.");
      String string0 = "writeBytes error.";
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("writeBytes error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[2] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeSet<Method> treeSet0 = new TreeSet<Method>();
      Class<Double> class0 = Double.TYPE;
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.parseObject((Type) class0);
      defaultJSONParser0.setDateFormat("");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeSet<Method> treeSet0 = new TreeSet<Method>();
      Class<Double> class0 = Double.TYPE;
      JSONScanner jSONScanner0 = new JSONScanner("5#zz`S");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      ClassLoader.getSystemClassLoader();
      Class<Feature> class0 = Feature.class;
      parserConfig0.checkAutoType("(II)V", class0, (-2899));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(II)V", parserConfig0, (-853));
      Feature feature0 = Feature.SupportArrayToBean;
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraProcessors();
      classLoader0.setPackageAssertionStatus((String) null, true);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      defaultJSONParser0.setResolveStatus((-853));
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but (, pos 1, json : (II)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pF$)RXoRA^a9");
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("~*aG0cu[D)m");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getObject("~*aG0cu[D)m");
      defaultJSONParser0.getResolveTaskList();
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask> hashMap0 = new HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask>();
      Integer integer0 = new Integer(0);
      defaultJSONParser0.checkMapResolve(hashMap0, integer0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5#zz`S", parserConfig0);
      Class<Double> class0 = Double.TYPE;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.resolveReference((String) null);
      Class<Byte> class1 = Byte.class;
      defaultJSONParser0.parseObject(class1);
      TreeMap<MockJapaneseDate, HttpCookie> treeMap0 = new TreeMap<MockJapaneseDate, HttpCookie>();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'W';
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?%n+*7oK?(#~IK`;[");
      charArray0[1] = 'E';
      charArray0[2] = '[';
      charArray0[4] = 'F';
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      parserConfig0.setAutoTypeSupport(false);
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.AllowSingleQuotes;
      defaultJSONParser0.isEnabled(feature0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j%2");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      defaultJSONParser0.setContext((Object) "j%2", (Object) mockGregorianCalendar0);
      defaultJSONParser0.getObject("");
      JobAttributes.DefaultSelectionType jobAttributes_DefaultSelectionType0 = JobAttributes.DefaultSelectionType.RANGE;
      JobAttributes.DestinationType jobAttributes_DestinationType0 = JobAttributes.DestinationType.FILE;
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra((Object) null, "unclosed jsonArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - %, info : pos 1, json : j%2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[9];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2657));
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getInput();
      defaultJSONParser0.getConfig();
      TreeMap<MockJapaneseDate, HttpCookie> treeMap0 = new TreeMap<MockJapaneseDate, HttpCookie>();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "$";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Boolean> class0 = Boolean.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONReaderScanner0.nextIdent();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      char[] charArray0 = new char[6];
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setClassAssertionStatus(">WbNLTZ/>CPpqwwV", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ", parserConfig0, 163);
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Properties properties0 = new Properties();
      MockDate mockDate0 = new MockDate(1291, 16, 101, 18, 163, 101);
      mockDate0.setTime(24);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.handleResovleTask(mockSimpleDateFormat0);
      defaultJSONParser0.getInput();
      defaultJSONParser0.getConfig();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      Type[] typeArray0 = new Type[0];
      defaultJSONParser0.checkListResolve((Collection) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : [-0(cdj.Bl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2110);
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MessageFormat messageFormat0 = new MessageFormat("a_v1c\"($x,[17&E");
      defaultJSONParser0.setContext((Object) null, (Object) messageFormat0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask> hashMap0 = new HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask>();
      defaultJSONParser0.checkMapResolve(hashMap0, 0);
      JSON.DEFAULT_GENERATE_FEATURE = 2;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      Class<Date> class1 = Date.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class0, class1, class0, (Field) null, (-1369), (-1369), 16);
      DateCodec dateCodec0 = DateCodec.instance;
      parserConfig0.putDeserializer(fieldInfo0.declaringClass, dateCodec0);
      JSONScanner jSONScanner0 = new JSONScanner(", name ", (-1369));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.checkListResolve((Collection) null);
      parserConfig0.setAutoTypeSupport(false);
      List<ExtraTypeProvider> list0 = new ArrayList<ExtraTypeProvider>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      classLoader0.setDefaultAssertionStatus(false);
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d,*#wBnxeve\"", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("[m8h/W^A?D3$PWP", parserConfig0, 0);
      defaultJSONParser0.getResolveStatus();
      ParserConfig parserConfig1 = new ParserConfig();
      TreeMap<MockJapaneseDate, MockJapaneseDate> treeMap0 = new TreeMap<MockJapaneseDate, MockJapaneseDate>();
      treeMap0.navigableKeySet();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : *pos 2, json : d,*#wBnxeve\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect {, actual ", parserConfig0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      defaultJSONParser0.handleResovleTask((Object) null);
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'p';
      charArray0[2] = '[';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      String string0 = "8*KWz&)/:L}>pSyf.";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d,*#wBnxeve\"", parserConfig0, (byte)121);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      String string1 = "[m8h/W^A?D3$PWP";
      int int0 = 72;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Boolean> class0 = Boolean.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONReaderScanner0.nextIdent();
      defaultJSONParser0.getResolveTaskList();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(1);
      defaultJSONParser0.handleResovleTask(integer1);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2657));
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("fastjson.parser.deny", 1);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) stringCharacterIterator0, (Object) parserConfig0);
      stringCharacterIterator0.setText("fastjson.parser.autoTypeAccept");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny");
      jSONReaderScanner0.nextIdent();
      defaultJSONParser0.getResolveTaskList();
      Integer integer0 = new Integer(183);
      Integer integer1 = new Integer(22);
      defaultJSONParser0.handleResovleTask((Object) null);
      defaultJSONParser0.getExtraProcessors();
      JobAttributes jobAttributes0 = new JobAttributes();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, (Object) stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName java.text.StringCharacterIterator@c55e7668
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      IdentityHashMap<DecimalFormat, JSONScanner> identityHashMap0 = new IdentityHashMap<DecimalFormat, JSONScanner>();
      Class<Boolean> class0 = Boolean.TYPE;
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss", 3089);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      Long long0 = new Long(989);
      defaultJSONParser0.setContext((ParseContext) null, (Object) jSONArray0, (Object) long0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      Vector<Float> vector0 = new Vector<Float>();
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      Object object0 = new Object();
      Vector<Float> vector1 = new Vector<Float>();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      IdentityHashMap<DecimalFormat, JSONScanner> identityHashMap0 = new IdentityHashMap<DecimalFormat, JSONScanner>();
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      jSONReaderScanner0.nextIdent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      Short short0 = new Short((short)63);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject(";Ljava/lang/reflect/Type;)Ljava/lang/Object;", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/reflect/Type;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(parserConfig0, jSONReaderScanner0, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      Class<BigInteger> class1 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[25];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[6] = 'K';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-o(cdjSBl");
      Feature feature0 = Feature.DisableASM;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      defaultJSONParser0.config(feature0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Class<String> class1 = String.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      parameterizedTypeImpl0.getTypeName();
      JavaBeanInfo.build((Class<?>) class1, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null, false, true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask> hashMap0 = new HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.getContext();
      defaultJSONParser0.resolveStatus = defaultJSONParser0.resolveStatus;
      defaultJSONParser0.checkMapResolve(hashMap0, 0);
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextIdent();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Class<String> class1 = String.class;
      Class<Date> class2 = Date.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("fQ^", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("fQ^", class2, class1, class0, (Field) null, (-1968), (-1968), (-1369));
      ParserConfig parserConfig0 = new ParserConfig(false);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer(fieldInfo0);
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class3).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      DateCodec dateCodec0 = DateCodec.instance;
      parserConfig0.putDeserializer(class0, objectDeserializer0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", (-1273));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig1 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 1260, 26);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig1);
      IdentityHashMap<Object, Object> identityHashMap0 = new IdentityHashMap<Object, Object>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[8];
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'F';
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.configFromPropety(properties0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}([%6z^YSEMSf7tw", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }([%6z^YSEMSf7tw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      defaultJSONParser0.getSymbolTable();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", name ", parserConfig0, 1);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSON.DEFAULT_GENERATE_FEATURE = 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONReaderScanner0.nextIdent();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.checkListResolve(list0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = '[';
      charArray0[4] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader.getSystemClassLoader();
      Stack<DecimalFormatSymbols> stack0 = new Stack<DecimalFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig1);
      parserConfig1.asmFactory = aSMDeserializerFactory0;
      Short short0 = new Short((short)63);
      Hashtable<Date, ParameterizedTypeImpl> hashtable0 = new Hashtable<Date, ParameterizedTypeImpl>();
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.UseObjectArray;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature[] featureArray1 = new Feature[6];
      featureArray1[0] = feature1;
      featureArray1[1] = feature1;
      Feature feature2 = Feature.SupportAutoType;
      featureArray1[2] = feature2;
      featureArray1[3] = feature0;
      featureArray1[4] = feature0;
      featureArray1[5] = feature0;
      JSON.parseObject("NaN", featureArray1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Feature feature0 = Feature.UseObjectArray;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      Boolean boolean0 = new Boolean("{om.alibaba.fastjsonutilServiceLoader");
      Feature[] featureArray0 = new Feature[5];
      featureArray0[0] = feature1;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      featureArray0[3] = feature1;
      featureArray0[4] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("{om.alibaba.fastjsonutilServiceLoader", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '[';
      String string0 = "Yu)v3`*r";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yu)v3`*r");
      jSONReaderScanner0.nextIdent();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      System.setCurrentTimeMillis((-156L));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      classLoader0.clearAssertionStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : [-0(cdj.Bl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d,*#wBnxeve\"", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(parserConfig0, defaultJSONParser0.lexer, parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("[m8h/WA?D3$PW", parserConfig0, 0);
      defaultJSONParser0.getResolveStatus();
      ParserConfig parserConfig1 = new ParserConfig(false);
      TreeMap<MockJapaneseDate, MockJapaneseDate> treeMap0 = new TreeMap<MockJapaneseDate, MockJapaneseDate>();
      ParserConfig parserConfig2 = new ParserConfig();
      DefaultJSONParser defaultJSONParser3 = new DefaultJSONParser("[m8h/WA?D3$PW", defaultJSONParser0.lexer, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader.getSystemClassLoader();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      defaultJSONParser3.checkListResolve(arrayList0);
      Class<Feature> class1 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser2.parseArray((Class<?>) class1, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [m8h/WA?D3$PW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      String string0 = "null";
      JSONScanner jSONScanner0 = new JSONScanner("null", (-2240));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Hashtable<Date, ParameterizedTypeImpl> hashtable0 = new Hashtable<Date, ParameterizedTypeImpl>();
      Class<BigInteger> class0 = BigInteger.class;
      defaultJSONParser1.parseObject(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassLoader.getSystemClassLoader();
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[25];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[14] = 'k';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-o(cdjSBl");
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      defaultJSONParser0.config(feature0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Class<String> class1 = String.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      parameterizedTypeImpl0.getTypeName();
      JavaBeanInfo.build((Class<?>) class1, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null, false, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-0(cdj.Bl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AwtCodec awtCodec0 = new AwtCodec();
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      HashSet<MockThaiBuddhistDate> hashSet0 = new HashSet<MockThaiBuddhistDate>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TreeMap<MockJapaneseDate, HttpCookie> treeMap0 = new TreeMap<MockJapaneseDate, HttpCookie>();
      TreeMap<MockJapaneseDate, HttpCookie> treeMap1 = new TreeMap<MockJapaneseDate, HttpCookie>();
      defaultJSONParser0.getContext();
      Short short0 = new Short((short)2137);
      Byte byte0 = new Byte((byte)40);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) mockHijrahDate1);
      Vector<Float> vector0 = new Vector<Float>();
      TreeMap<String, BufferCapabilities> treeMap2 = new TreeMap<String, BufferCapabilities>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Feature feature0 = Feature.AllowArbitraryCommas;
      defaultJSONParser0.config(feature0, false);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[-0(cdj.Bl");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : [-0(cdj.Bl
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-o(cdjSBl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Class<String> class1 = String.class;
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      JavaBeanInfo.build((Class<?>) class1, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null, false, true);
      TreeSet<RuleBasedCollator> treeSet0 = new TreeSet<RuleBasedCollator>();
      treeSet0.clone();
      defaultJSONParser0.checkListResolve(treeSet0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.nextIdent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask> hashMap0 = new HashMap<MockHijrahDate, DefaultJSONParser.ResolveTask>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.getContext();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) jSONReaderScanner0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.deny");
      hashMap0.put(mockHijrahDate0, defaultJSONParser_ResolveTask0);
      defaultJSONParser0.resolveStatus = 1;
      // Undeclared exception!
      try { 
        defaultJSONParser0.checkMapResolve(hashMap0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Class<String> class1 = String.class;
      Class<Date> class2 = Date.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("fQ^", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("fQ^", class2, class1, class0, (Field) null, (-1968), (-1968), (-2040433559));
      ParserConfig parserConfig0 = new ParserConfig(false);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer(fieldInfo0);
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class3).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      parserConfig0.putDeserializer(class0, objectDeserializer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader.getSystemClassLoader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 1618, 7);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      Stack<MockHijrahDate> stack0 = new Stack<MockHijrahDate>();
      defaultJSONParser0.checkListResolve(list0);
      Point point0 = new Point((-4159), 1);
      Point point1 = new Point(point0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(jSONReaderScanner0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      IdentityHashMap<DecimalFormat, JSONScanner> identityHashMap0 = new IdentityHashMap<DecimalFormat, JSONScanner>();
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 3089);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Hashtable<Date, ParameterizedTypeImpl> hashtable0 = new Hashtable<Date, ParameterizedTypeImpl>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.popContext();
      JSONScanner jSONScanner1 = new JSONScanner("b");
      defaultJSONParser0.parse((Object) jSONArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j%2");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2);
      MockInstant.now();
      mockGregorianCalendar0.setTimeInMillis((-74L));
      JSON.DEFAULT_TYPE_KEY = "p-Zm?}1=fF<l";
      defaultJSONParser0.setContext((Object) "j%2", (Object) mockGregorianCalendar0);
      defaultJSONParser0.getObject("");
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.popContext();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      AwtCodec awtCodec0 = AwtCodec.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-o(cdjSBl");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.getDateFormat();
      Object object0 = new Object();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept", 1);
      defaultJSONParser0.getExtraTypeProviders();
      Class<Byte> class0 = Byte.class;
      defaultJSONParser0.getDateFormat();
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner2.nextIdent();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[-o(cdjSBl");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      IdentityHashMap<DecimalFormat, JSONScanner> identityHashMap0 = new IdentityHashMap<DecimalFormat, JSONScanner>();
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 3089);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Hashtable<Date, ParameterizedTypeImpl> hashtable0 = new Hashtable<Date, ParameterizedTypeImpl>();
      Class<BigInteger> class0 = BigInteger.class;
      defaultJSONParser0.parseObject(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.checkListResolve(jSONArray0);
      defaultJSONParser0.popContext();
      JSONScanner jSONScanner1 = new JSONScanner("b");
      char[] charArray0 = new char[0];
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      defaultJSONParser0.setContext((Object) classLoader1, (Object) dateFormatSymbols0);
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
