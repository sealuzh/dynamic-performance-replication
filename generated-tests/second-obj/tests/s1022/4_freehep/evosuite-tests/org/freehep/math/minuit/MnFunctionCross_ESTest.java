/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:23:16 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4530.29704, 4530.29704, 4530.29704, 8.0, (-0.7512331639082114)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1544.510583993981);
      doubleArray0[3] = (-1544.510583993981);
      doubleArray0[3] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-309.0), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4530.29704, 4530.29704, 4530.29704, 8.0, 8.881784197001252E-16).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1564.0711968398848);
      doubleArray0[1] = (-1564.0711968398848);
      doubleArray0[3] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(1, (double) 1, (-1564.0711968398848));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-309.0), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4530.29704, 4530.29704, 4530.29704, 4530.29704, 4530.29704).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1544.510583993981);
      doubleArray0[1] = (-1544.510583993981);
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = (-1544.510583993981);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(1, (double) 1, (-1544.510583993981));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-233.0), (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = (-1.0);
      doubleArray0[5] = 209.70000000000005;
      doubleArray0[8] = 209.70000000000005;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      double[] doubleArray1 = mnUserParameters0.params();
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 209.70000000000005, mnStrategy0, 0.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-509.493), 1161868500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-230.43812587294792), (-230.43812587294792), (-230.43812587294792), 6219.8593162383, (-230.43812587294792)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-230.43812587294792), mnStrategy0, (-230.43812587294792));
      mnStrategy0.setHessianG2Tolerance((-230.43812587294792));
      double[] doubleArray0 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 200);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1132.638650835048, 1704);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4530.29704, 4530.29704, 4530.29704, 8.0, (-0.7512331639082114)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1544.510583993981);
      doubleArray0[3] = (-1544.510583993981);
      doubleArray0[3] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      int int0 = 1;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameterState0.toString();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, (-1.0), 2126199947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.54531107140446), (-1285.0), (-271.54531107140446), 6219.8593162383, (-271.54531107140446)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[2] = (-271.54531107140446);
      doubleArray0[5] = 1121.245021640646;
      doubleArray0[8] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnUserTransformation0.add("org.freehep.math.minuit.MnHesse$MnHesseFailed", (-2379.0904905335055), 6219.8593162383);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      double[] doubleArray1 = mnUserParameters0.params();
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1121.245021640646, mnStrategy0, (-271.54531107140446));
      mnAlgebraicSymMatrix0.toString();
      mnStrategy0.setHessianG2Tolerance(1121.245021640646);
      mnUserParameterState0.add("", (-0.5), (-271.54531107140446));
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance((-1285.0));
      mnStrategy0.setLowStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-271.54531107140446), 3139);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-1285.0), (-233.0), (-233.0), (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-233.0);
      doubleArray0[4] = (-233.0);
      doubleArray0[5] = 1121.245021641;
      doubleArray0[6] = (-233.0);
      doubleArray0[1] = 1121.245021641;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[5] = (-1285.0);
      doubleArray1[3] = 1121.245021641;
      doubleArray1[3] = (-1285.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-233.0), mnStrategy0, 1018.081);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 0.0, (-1921));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-233.0), (-233.0), (-233.0), (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2865.26;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-520.223787831);
      doubleArray0[3] = 1121.245021640646;
      doubleArray0[4] = (-0.5);
      doubleArray0[1] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.0, mnStrategy0, (-1.0));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.5), (-2103));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-230.43812587294792), (-230.43812587294792), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = 6219.8593162383;
      doubleArray0[2] = (-230.43812587294792);
      doubleArray0[4] = (-230.43812587294792);
      doubleArray0[5] = 6219.8593162383;
      doubleArray0[8] = (-230.43812587294792);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6219.8593162383, mnStrategy0, 1600.424242016043);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-4, (-1));
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4009.145, 4009.145, 4009.145, 4009.145, 4009.145).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1544.590405111014);
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = 3798.2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      intArray0[2] = 1;
      mnUserParameterState0.add("3", (-1544.590405111014), 2.2);
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance((-1544.590405111014));
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-73.9889085191), 3139);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-231.38574422571966), (-231.38574422571966), 1.0E-4, 1423.47811909, 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 4.194865211199532;
      doubleArray0[5] = 0.3;
      doubleArray0[6] = (-831.8);
      doubleArray0[7] = 10.0;
      doubleArray0[1] = 4.194865211199532;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 8.0, mnStrategy0, 2865.26);
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3073.46, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.3, 0);
      mnStrategy0.setHighStrategy();
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 4.194865211199532, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-1285.0), (-520.223787831)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2866.6750916344417;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (-0.5);
      doubleArray0[5] = 0.3;
      doubleArray0[6] = (-831.8);
      doubleArray0[7] = 9.012818178025872;
      doubleArray0[8] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(0);
      MnStrategy mnStrategy0 = new MnStrategy((-2928));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2928), mnStrategy0, 1.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 635.6, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-230.43812587294792), (-230.43812587294792), (-230.43812587294792), 6219.8593162383, (-230.43812587294792)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = 6219.8593162383;
      doubleArray0[2] = (-230.43812587294792);
      doubleArray0[4] = 6219.8593162383;
      doubleArray0[5] = 6219.8593162383;
      doubleArray0[17] = (-230.43812587294792);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6219.8593162383, mnStrategy0, (-230.43812587294792));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.02, (-1));
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-1285.0), (-233.0), 6219.8593162383, (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-233.0);
      doubleArray0[4] = (-1285.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-233.0);
      doubleArray0[8] = (-1.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      int[] intArray0 = new int[0];
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = new MnAlgebraicSymMatrix(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = new MnAlgebraicSymMatrix(0);
      mnUserTransformation1.int2extCovariance(mnAlgebraicVector1, mnAlgebraicSymMatrix2);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, (-233.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 459.2109714, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-1285.0), (-520.223787831), 6219.8593162383, (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2866.6750916344417;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-520.223787831);
      doubleArray0[4] = (-0.5);
      doubleArray0[5] = 0.3;
      doubleArray0[6] = (-831.8);
      doubleArray0[7] = 9.012818178025872;
      doubleArray0[8] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-0.5), mnStrategy0, (-520.223787831));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.5), (-1518088719));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-233.0), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2866.6750916344417;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-520.223787831);
      doubleArray0[4] = 19.32391506583965;
      doubleArray0[5] = 0.3;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 9.012818178025872;
      doubleArray0[8] = 1102.5497122803229;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy(260);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-520.223787831), mnStrategy0, 0.3);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.49992345590919557), (-687));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-230.43812587294792), (-230.43812587294792), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = 6219.8593162383;
      doubleArray0[2] = (-230.43812587294792);
      doubleArray0[4] = 6219.8593162383;
      doubleArray0[5] = 165.497386;
      doubleArray0[8] = (-230.43812587294792);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 165.497386, mnStrategy0, (-230.43812587294792));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.02, (-1));
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4009.145, 4009.145, 4009.145, 4009.145, 4009.145).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 4009.145;
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = 3798.2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      mnUserParameters0.setLimits(1, 4009.145, (-1933.9997312561213));
      intArray0[0] = 1;
      mnUserParameterState0.setLowerLimit(1, 1.2);
      intArray0[2] = 1;
      mnUserParameterState0.add("3", 0.0, 2.2);
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance(4009.145);
      mnUserParameterState0.setError(1, 1.2);
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 3134);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4009.145, 4009.145, 4009.145, 4009.145, 4009.145).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1544.510583993981);
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = 3798.2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      mnUserParameters0.setLimits(1, (-1544.510583993981), (-1933.9997312561213));
      intArray0[2] = 1;
      mnUserParameterState0.add("3", (-1544.510583993981), 2.2);
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance((-1544.510583993981));
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-73.9889085191), 3139);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-271.54531107140446), (-271.54531107140446), (-271.54531107140446), 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[2] = (-271.54531107140446);
      doubleArray0[5] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      double[] doubleArray1 = mnUserParameters0.params();
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1121.245021640646, mnStrategy0, (-271.54531107140446));
      mnStrategy0.setHessianNCycles((-1));
      mnStrategy0.setHessianG2Tolerance(1121.245021640646);
      mnAlgebraicVector0.toString();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10000.0, (-29));
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 17.6, (-1));
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError((-1), 1121.245021640646);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1544.510583993981);
      doubleArray0[2] = 3798.2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      mnUserParameterState0.add("3", (-1544.510583993981), 2588.4906);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2588.4906, 1.0, 9.567499176980312E11, (double)1, 3798.2).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 9.567499176980312E11, mnStrategy1, 1);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2970.682458465518), 65);
      mnUserParameters0.setLowerLimit(1, (double) 1);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, (MnUserParameterState) null, 10, mnStrategy0, 3798.2);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3798.2;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4530.29704, 4530.29704, 4530.29704, 4530.29704, 4530.29704).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1544.510583993981);
      doubleArray0[1] = (-1544.510583993981);
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = (-1544.510583993981);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(1, (double) 1, (-1544.510583993981));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      mnUserParameters0.toString();
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      mnUserParameters0.setLimits(1, (-1544.510583993981), (-1933.9997312561213));
      intArray0[0] = 1;
      intArray0[2] = 1;
      mnUserParameterState0.add("3", (-1544.510583993981), 2.2);
      mnStrategy0.setLowStrategy();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 1);
      mnStrategy0.setLowStrategy();
      mnUserParameters0.setUpperLimit(1, 3798.2);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4530.29704, 3);
      mnUserCovariance0.toString();
      mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnUserParameters0.fix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-230.43812587294792), (-230.43812587294792), (-230.43812587294792), 6219.8593162383, (-230.43812587294792)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = 6219.8593162383;
      doubleArray0[2] = (-230.43812587294792);
      doubleArray0[4] = (-230.43812587294792);
      doubleArray0[5] = 6219.8593162383;
      doubleArray0[8] = (-230.43812587294792);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6219.8593162383, mnStrategy0, (-230.43812587294792));
      mnStrategy0.setHessianG2Tolerance((-230.43812587294792));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.16227766016838, 1);
      MnUserParameterState mnUserParameterState1 = null;
      try {
        mnUserParameterState1 = new MnUserParameterState(doubleArray0, doubleArray0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-233.0), (-233.0), 6219.8593162383, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-233.0);
      doubleArray0[4] = (-233.0);
      doubleArray0[5] = 1121.245021640646;
      doubleArray0[6] = (-233.0);
      doubleArray0[8] = 1121.245021640646;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance0 = mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      double[] doubleArray1 = mnUserParameters0.params();
      int[] intArray0 = new int[0];
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = new MnAlgebraicSymMatrix(0);
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy1 = new MnStrategy((-2121734443));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 1121.245021640646, mnStrategy0, 6219.8593162383);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 498.0, (-2121734443));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.2, (-1518088719));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 1.0, (-198697241));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1544.510583993981);
      doubleArray0[1] = (-1544.510583993981);
      doubleArray0[2] = 3798.2;
      doubleArray0[3] = 3798.2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3798.2, mnStrategy0, 1);
      int[] intArray0 = new int[3];
      mnUserParameters0.setLimits(1, (-1544.510583993981), (-1933.9997312561213));
      mnUserParameterState0.add("^nMRqDF)b&g", 3798.2, 0.02);
      mnStrategy0.setLowStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianG2Tolerance(3798.2);
      mnStrategy0.setLowStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 567.6189082302508, mnStrategy1, (-1544.510583993981));
      // Undeclared exception!
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 17.6, 3134);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-233.0), (-233.0), (-233.0), 6219.8593162383, (-233.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[26];
      doubleArray0[24] = 6219.8593162383;
      doubleArray0[2] = (-233.0);
      doubleArray0[4] = (-233.0);
      doubleArray0[5] = 209.70000000000005;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[1];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 209.70000000000005, mnStrategy0, (-233.0));
      mnStrategy0.setHessianG2Tolerance(0.0);
      mnUserParameterState0.add("", 6219.8593162383);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.02, (-7));
      mnUserTransformation0.setUpperLimit(4, (-7));
      mnStrategy0.setHessianNCycles((-10));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-7);
      doubleArray1[1] = 6219.8593162383;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.02, (-1));
      int[] intArray1 = new int[15];
      intArray1[0] = (-7);
      intArray1[1] = (-7);
      intArray1[2] = (-10);
      intArray1[3] = 4;
      intArray1[4] = (-7);
      intArray1[5] = (-7);
  }
}
