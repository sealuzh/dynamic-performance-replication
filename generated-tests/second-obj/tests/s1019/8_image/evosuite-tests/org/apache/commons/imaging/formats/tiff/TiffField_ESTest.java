/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:27:45 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)103;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2479, 2479, fieldTypeByte0, 2479, (-324L), byteArray0, byteOrder0, (byte)103);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-324L), tiffElement0.offset);
      assertNotNull(tiffElement0);
      assertEquals(2479, tiffField0.getDirectoryType());
      assertEquals(2479, tiffField0.getTag());
      assertEquals(103, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(34850, "");
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34850, 34850, fieldTypeAscii0, 34850, 34850, byteArray0, byteOrder0, 34850);
      String string0 = tiffField0.getValueDescription();
      assertEquals(34850, tiffField0.getBytesLength());
      assertEquals(34850, tiffField0.getTag());
      assertEquals(34850, tiffField0.getOffset());
      assertEquals(34850, tiffField0.getSortHint());
      assertEquals(34850, tiffField0.getDirectoryType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(2871, (String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 2871, fieldTypeAscii0, 1527L, 0, byteArray0, byteOrder0, (byte) (-69));
      String string0 = tiffField0.getValueDescription();
      assertEquals(0, tiffField0.getTag());
      assertEquals((-69), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(2871, tiffField0.getDirectoryType());
      assertEquals(1527, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-4), "p:gSz2Bfb+$EdZ");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-4), 12, fieldTypeDouble0, (-4), (-2658L), (byte[]) null, byteOrder0, 0);
      assertTrue(tiffField0.isLocalValue());
      
      tiffField0.getOversizeValueElement();
      assertEquals((-4), tiffField0.getTag());
      assertEquals(12, tiffField0.getDirectoryType());
      assertEquals((-2658), tiffField0.getOffset());
      assertEquals((-4L), tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeShort0, 0, 1L, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeFloat0, 2167L, 1L, byteArray0, byteOrder0, 32);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@7296ef30 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(34850, "");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34850, 34850, fieldTypeAscii0, 34850, 34850, byteArray0, byteOrder0, 34850);
      String string0 = tiffField0.getTagName();
      assertEquals(34850, tiffField0.getDirectoryType());
      assertEquals(34850, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x8822)", string0);
      assertEquals(34850, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(34848, (-3368), fieldTypeLong0, 2005L, 34848, byteArray0, byteOrder0, 34848);
      tiffField0.getDirectoryType();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(209, 209, fieldTypeLong0, 209, 209, (byte[]) null, byteOrder0, 209);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(209, 209);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(209, tiffField0.getOffset());
      assertEquals(209, tiffField0.getSortHint());
      assertEquals(209, tiffField0.getTag());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: IFD", string0);
      assertEquals(209, tiffField0.getDirectoryType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(34850, "L");
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34850, 34850, fieldTypeAscii0, 34850, 34850, byteArray0, byteOrder0, 34850);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, ";6_w,rm)SZ84&0>Y<LU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(547, "PixelFormat");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(547, 547, fieldTypeByte0, 547, 547, byteArray0, byteOrder0, 13);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [B@5b23687f
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField((-1), (-1), fieldTypeByte0, (-868L), (-1), (byte[]) null, (ByteOrder) null, (-1));
      int int0 = tiffField0.getTag();
      int int1 = tiffField0.getOffset();
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-868), tiffField0.getBytesLength());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeFloat0, 2167L, 1L, byteArray0, byteOrder0, 32);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2167L, tiffField0.getCount());
      assertEquals(32, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(8668, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(32, tiffField0.getTag());
      assertEquals(32, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(32, 334, fieldTypeLong0, 32, 733L, byteArray0, (ByteOrder) null, (-82));
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getDirectoryType();
      assertEquals(32L, tiffField0.getCount());
      assertEquals(32, tiffField0.getTag());
      assertEquals(334, int0);
      assertEquals((-82), tiffField0.getSortHint());
      assertEquals(733, tiffField0.getOffset());
      assertEquals(128, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(0, "_uLJ&_5-u^wD%LG");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 0, 0, byteArray0, byteOrder0, 0);
      ByteOrder.nativeOrder();
      tiffField0.getOffset();
      ByteOrder.nativeOrder();
      int int0 = tiffField0.getSortHint();
      assertEquals(0, int0);
      
      tiffField0.getIntArrayValue();
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[8];
      TiffField tiffField0 = new TiffField(124, 124, fieldTypeRational0, 1910L, 124, byteArray0, (ByteOrder) null, 124);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeFloat0, 2167L, 1L, byteArray0, byteOrder0, 32);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@30fa3906 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      int int0 = Pattern.COMMENTS;
      int int1 = ObjectStreamConstants.baseWireHandle;
      TiffField tiffField0 = new TiffField(1093, 1093, fieldTypeShort0, 12, 4L, byteArray0, byteOrder1, 50);
      int int2 = tiffField0.getIntValueOrArraySum();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1093, tiffField0.getTag());
      assertEquals(0, int2);
      assertEquals(4, tiffField0.getOffset());
      assertEquals(12L, tiffField0.getCount());
      assertEquals(24, tiffField0.getBytesLength());
      assertEquals(1093, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(33, "6~TwL'nbdW");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(33, 33, fieldTypeAscii0, 33, 200L, byteArray0, byteOrder0, (-1650));
      String string0 = tiffField0.getStringValue();
      assertEquals(33, tiffField0.getBytesLength());
      assertEquals(200, tiffField0.getOffset());
      assertEquals((-1650), tiffField0.getSortHint());
      assertEquals(33, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(33, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-99);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1493, 1493, fieldTypeDouble0, 1493, 1176L, byteArray0, byteOrder0, (byte) (-99));
      tiffField0.getDoubleArrayValue();
      assertEquals(1493L, tiffField0.getCount());
      assertEquals(1493, tiffField0.getDirectoryType());
      assertEquals(1493, tiffField0.getTag());
      assertEquals(11944, tiffField0.getBytesLength());
      assertEquals(1176, tiffField0.getOffset());
      assertEquals((-99), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)19);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(290, 290, fieldTypeByte0, 510L, 510L, byteArray0, byteOrder0, (-1186));
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@5d0bbbde for: 290 (0x122: GrayResponseUnit): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(41498, 41498, fieldTypeShort0, 41498, (-172L), byteArray0, byteOrder0, 27);
      String string0 = tiffField0.getValueDescription();
      assertEquals(41498, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(27, tiffField0.getSortHint());
      assertEquals(41498, tiffField0.getDirectoryType());
      assertEquals((-172), tiffField0.getOffset());
      assertEquals(82996, tiffField0.getBytesLength());
      assertEquals(41498L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[37];
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(20, 20, fieldTypeShort0.DOUBLE, 2921L, 20, byteArray0, byteOrder0, 20);
      String string0 = tiffField0.getValueDescription();
      assertEquals(23368, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(20, tiffField0.getDirectoryType());
      assertEquals(2921L, tiffField0.getCount());
      assertEquals(20, tiffField0.getTag());
      assertEquals(20, tiffField0.getOffset());
      assertEquals(20, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      int int0 = Pattern.MULTILINE;
      String string0 = File.separator;
      TiffField tiffField0 = new TiffField(30, 95, fieldTypeShort0, 8, 51087, byteArray0, byteOrder0, 95);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(95, tiffField0.getSortHint());
      assertEquals(51087, tiffField0.getOffset());
      assertEquals(30, tiffField0.getTag());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(95, tiffField0.getDirectoryType());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(8L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)23;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(442, 442, fieldTypeLong0, 442, 442, byteArray0, byteOrder0, (byte)23);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(442, int0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(442, 13);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertNull(string0);
      
      int int1 = tiffField0.getIntValueOrArraySum();
      assertEquals(442L, tiffField0.getCount());
      assertEquals(23, tiffField0.getSortHint());
      assertEquals(442, tiffField0.getTag());
      assertEquals(442, tiffField0.getOffset());
      assertEquals(1768, tiffField0.getBytesLength());
      assertEquals(1507328, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[215];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(66, 29, fieldTypeShort0, 29, (-1L), byteArray0, byteOrder0, 29);
      tiffField0.getDoubleArrayValue();
      assertEquals(29, tiffField0.getSortHint());
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(58, tiffField0.getBytesLength());
      assertEquals(29L, tiffField0.getCount());
      assertEquals(66, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(11, "");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeDouble0, 11, 0L, byteArray0, byteOrder0, 11);
      tiffField0.getFieldTypeName();
      String string0 = tiffField0.getTagName();
      assertEquals(11, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(11, tiffField0.getTag());
      assertEquals("ProcessingSoftware", string0);
      assertEquals(11, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[235];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((byte)50, 2689, fieldTypeFloat0, 1L, 1L, byteArray0, byteOrder1, (byte)50);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(1L, tiffField0.getCount());
      assertEquals(50, tiffField0.getTag());
      assertEquals(2689, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1960), 3, fieldTypeByte0, 1L, (-476L), byteArray0, byteOrder0, 0);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getDoubleArrayValue();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-476), tiffField0.getOffset());
      assertEquals((-1960), tiffField0.getTag());
      assertEquals(3, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[9];
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      int int0 = 42;
      TiffField tiffField0 = new TiffField((-443), 39, fieldTypeRational0, 1L, 202836L, byteArray0, byteOrder0, 42);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[202];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      String string0 = File.pathSeparator;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder.nativeOrder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte1 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField((-377), (-377), fieldTypeByte1, 23, 23, byteArray0, byteOrder0, 1103);
      String string1 = tiffField0.getValueDescription();
      assertNotNull(string1);
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", string1);
      
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      int int0 = tiffField0.getTag();
      assertEquals((-377), tiffField0.getDirectoryType());
      assertEquals(1103, tiffField0.getSortHint());
      assertEquals(23, tiffField0.getOffset());
      assertEquals((-377), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[117];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      Byte byte0 = new Byte((byte)88);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)50, (byte)88, fieldTypeRational0, (byte)88, (byte)88, byteArray0, byteOrder2, (-1427));
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("50 (0x32: Unknown Tag): ", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals((-1427), tiffField0.getSortHint());
      assertEquals(88, tiffField0.getOffset());
      assertEquals(704, tiffField0.getBytesLength());
      assertEquals(88, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong((-1911), "");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-63);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1952), 4, fieldTypeLong0, 4, (-1243L), byteArray0, byteOrder0, (byte) (-1));
      ByteOrder.nativeOrder();
      tiffField0.getDoubleArrayValue();
      try { 
        MockURI.URI("", "", "", 4, "", "", "LensModel");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:4?#LensModel
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-1);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2446, 2446, fieldTypeFloat0, 2446, 206L, byteArray0, byteOrder0, (byte)0);
      ByteOrder.nativeOrder();
      int int0 = tiffField0.getDirectoryType();
      assertEquals(2446, int0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(9784, tiffField0.getBytesLength());
      assertEquals(2446, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(206, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)61;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.slice();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = byteBuffer1.order();
      TiffField tiffField0 = new TiffField(2415, 2398, fieldTypeFloat0, 4L, 4L, byteArray0, byteOrder1, (byte)68);
      tiffField0.getDoubleArrayValue();
      assertEquals(2398, tiffField0.getDirectoryType());
      assertEquals(2415, tiffField0.getTag());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(68, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[52];
      Charset.defaultCharset();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField((-1764), 41, fieldTypeRational0, 1L, (-1764), byteArray0, byteOrder0, 41);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(124, (-1269), fieldTypeRational0, 1910L, 124, byteArray0, (ByteOrder) null, (-1269));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      
      tiffField0.getTagInfo();
      assertEquals((-1269), tiffField0.getSortHint());
      assertEquals((-1269), tiffField0.getDirectoryType());
      assertEquals(124, tiffField0.getTag());
      assertEquals(15280, tiffField0.getBytesLength());
      assertEquals(124, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[54];
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Pattern.MULTILINE;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldType.getFieldType(8);
      TiffField tiffField0 = new TiffField(34647, 34647, fieldTypeByte0, 34647, 50, byteArray0, byteOrder0, 50);
      tiffField0.dump();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(34647, tiffField0.getDirectoryType());
      assertEquals(34647, tiffField0.getTag());
      assertEquals(34647, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[52];
      Charset.defaultCharset();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(33478, 33478, fieldTypeAscii0, 33478, (-1764), byteArray0, byteOrder0, (-2606));
      tiffField0.toString();
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(33478, tiffField0.getDirectoryType());
      assertFalse(boolean0);
      assertEquals((-2606), tiffField0.getSortHint());
      assertEquals((-1764), tiffField0.getOffset());
      assertEquals(33478, tiffField0.getTag());
      assertEquals(33478, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(34, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte)101;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(9, 9, fieldTypeRational0, 34, 2340L, byteArray0, byteOrder0, (byte) (-50));
      tiffField0.getIntArrayValue();
      assertEquals((-50), tiffField0.getSortHint());
      assertEquals(9, tiffField0.getTag());
      assertEquals(9, tiffField0.getDirectoryType());
      assertEquals(2340, tiffField0.getOffset());
      assertEquals(272, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[317];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      int int0 = Double.BYTES;
      FieldTypeFloat fieldTypeFloat1 = FieldType.FLOAT;
      System.setCurrentTimeMillis((-1750L));
      TiffField tiffField0 = new TiffField(48, (-1), fieldTypeShort0, (byte)62, 8, byteArray0, (ByteOrder) null, 520);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (62)", string0);
      
      tiffField0.getFieldType();
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getOffset());
      assertEquals(48, tiffField0.getTag());
      assertEquals(520, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[215];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteOrder.nativeOrder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(50973, "XPosition");
      TiffField tiffField0 = new TiffField(50973, (-1), fieldTypeLong0, 828, (-1), byteArray0, byteOrder0, (-1));
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getTag();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(3312, tiffField0.getBytesLength());
      assertEquals(50973, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[235];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(257, 257, fieldTypeFloat0, 257, (-9120L), byteArray0, byteOrder0, (-217));
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      tiffField0.getValueDescription();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      int int0 = Double.BYTES;
      int int1 = Long.SIZE;
      assertEquals(64, int1);
  }
}
