/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:48:10 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(16, 16);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix.unit(12, 12);
      MockRandom mockRandom0 = new MockRandom((-2431L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(12, 32, mockRandom0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(16, 0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(27, 27);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(11);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(11, mockRandom0);
      assertEquals(11, denseMatrix0.rows());
      assertEquals(11, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(11, denseMatrix0.rows());
      assertEquals(11, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(11, denseMatrix0.rows());
      assertEquals(11, denseMatrix0.columns());
      assertNotNull(matrixArray0);
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(denseMatrix0);
      assertEquals(11, denseMatrix0.rows());
      assertEquals(11, denseMatrix0.columns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(12, 12);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 32);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(11);
      assertEquals(11, rowMajorSparseMatrix0.rows());
      assertEquals(0.09090909090909091, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(11, rowMajorSparseMatrix0.cardinality());
      assertEquals(11, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(11, rowMajorSparseMatrix0.rows());
      assertEquals(0.09090909090909091, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(11, rowMajorSparseMatrix0.cardinality());
      assertEquals(11, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(11, rowMajorSparseMatrix0.rows());
      assertEquals(0.09090909090909091, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(11, rowMajorSparseMatrix0.cardinality());
      assertEquals(11, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DenseMatrix denseMatrix0 = DenseMatrix.unit(54, 54);
          assertEquals(54, denseMatrix0.rows());
          assertEquals(54, denseMatrix0.columns());
          assertNotNull(denseMatrix0);
          
          SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
          assertEquals(54, denseMatrix0.rows());
          assertEquals(54, denseMatrix0.columns());
          assertNotNull(singularValueDecompositor0);
          
          Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
          assertEquals(54, denseMatrix0.rows());
          assertEquals(54, denseMatrix0.columns());
          assertNotNull(matrixArray0);
          
          // Undeclared exception!
          singularValueDecompositor0.decompose();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
