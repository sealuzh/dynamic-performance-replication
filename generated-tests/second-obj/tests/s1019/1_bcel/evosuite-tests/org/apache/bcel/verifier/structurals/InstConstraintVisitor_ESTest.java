/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:10:23 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.lang.reflect.Array;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        i2F0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DDIV dDIV0 = new DDIV();
      ALOAD aLOAD0 = new ALOAD(2548);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals(4, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LDC lDC0 = new LDC(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(lDC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1652));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(36, 36);
      ConstantClass constantClass0 = new ConstantClass((-1652));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("@p2LVS+:2xw", "@p2LVS+:2xw", "@p2LVS+:2xw");
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ATHROW aTHROW0 = new ATHROW();
      assertEquals((short)191, aTHROW0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitInvokeInstruction((InvokeInstruction) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(1854);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals(4, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)87);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals(3, sIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IALOAD iALOAD0 = new IALOAD();
      iALOAD0.getExceptions();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      assertEquals(1, lCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(103);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(103, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-38));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(196);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR_W((JSR_W) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      F2L f2L0 = new F2L();
      ILOAD iLOAD0 = new ILOAD(2);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals("iload_2", iLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFLOAD((FLOAD) null);
      POP pOP0 = new POP();
      L2F l2F0 = new L2F();
      assertEquals("l2f", l2F0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B((I2B) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(49, 49);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LAND lAND0 = new LAND();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ASTORE aSTORE0 = new ASTORE(1);
      LLOAD lLOAD0 = new LLOAD(3);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals((short)33, lLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(1858);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals("getstatic", gETSTATIC0.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(755);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(755, fSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR((JSR) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO((GOTO) null);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      NEW nEW0 = new NEW(67);
      NEW nEW1 = new NEW(67);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(3);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(3, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2D i2D0 = new I2D();
      i2D0.toString();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals((short)14, dCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DDIV dDIV0 = new DDIV();
      Frame frame0 = new Frame(281, 2148);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ISTORE iSTORE0 = new ISTORE(2148);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot consume 1 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 2148.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("U};");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      RET rET0 = new RET(0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("U};");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The 'value' is not of a ReferenceType but of type ");
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'U}'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("\"[;");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.initializeObject((UninitializedObjectType) null);
      LocalVariables localVariables0 = new LocalVariables(2);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      IINC iINC0 = new IINC(1435, 2);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type '\"['.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.clone();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack((byte)63, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      lDIV1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      D2L d2L0 = new D2L();
      d2L0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.getClone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LDIV lDIV1 = new LDIV();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(349);
      ObjectType objectType0 = new ObjectType("SD@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      FRETURN fRETURN0 = new FRETURN();
      FRETURN fRETURN1 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'SD@#%.7d^8cJ7Dz'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      FREM fREM0 = new FREM();
      FREM fREM1 = new FREM();
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Class<JSR>[] classArray0 = (Class<JSR>[]) Array.newInstance(Class.class, 3);
      Class<JSR> class0 = JSR.class;
      classArray0[0] = class0;
      Class<JSR> class1 = JSR.class;
      classArray0[1] = class1;
      Class<JSR> class2 = JSR.class;
      classArray0[2] = class2;
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(170);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("V");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean(true);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g`G");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables1.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB((ISUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(206);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(localVariables0);
      localVariables1.toString();
      localVariables1.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      operandStack0.getClone();
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      InstructionList instructionList0 = new InstructionList(lSUB0);
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instructionList0.insert((BranchInstruction) gOTO0);
      I2S i2S0 = new I2S();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      mONITORENTER0.consumeStack((ConstantPoolGen) null);
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      Boolean boolean0 = new Boolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(205);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType1 = ObjectType.getInstance("Current method has return type of '");
      OperandStack operandStack0 = new OperandStack(205, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType1);
      Frame.setThis(uninitializedObjectType0);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM((IREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      rETURN0.copy();
      rETURN0.toString();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      localVariables0.merge(localVariables0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.getClone();
      frame0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      localVariables1.getClone();
      localVariables1.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      I2C i2C0 = new I2C();
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(136);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(136, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1063);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      LDIV lDIV1 = new LDIV();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV2 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IINC iINC0 = new IINC(868, 136);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("Z");
      OperandStack operandStack0 = new OperandStack(48, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      DUP2 dUP2_0 = new DUP2();
      IINC iINC0 = new IINC(48, 183);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(170);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("V");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      frame0.getClone();
      Frame.getThis();
      OperandStack operandStack2 = new OperandStack((byte)108);
      operandStack1.initializeObject((UninitializedObjectType) null);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'V'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 183;
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("Z");
      int int1 = 48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(183);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack1 = new OperandStack(48, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NOP nOP0 = new NOP();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Z'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      I2D i2D0 = new I2D();
      InstructionList instructionList0 = new InstructionList(i2D0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("fstore_2");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(183, 183);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(171, 183);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(183);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(183);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(183, 183);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D((F2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      byte[] byteArray0 = new byte[8];
      OperandStack operandStack1 = new OperandStack(183, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BIPUSH bIPUSH0 = new BIPUSH((byte)90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      instructionHandle0.accept(instConstraintVisitor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fstore_2");
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      mONITORENTER0.consumeStack((ConstantPoolGen) null);
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TGw");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(349);
      ObjectType objectType0 = new ObjectType("SD@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      IAND iAND0 = new IAND();
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      operandStack1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'SD@#%.7d^8cJ7Dz'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = ObjectType.getInstance("bastore");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      operandStack0.equals(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = (Frame)frame0.clone();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LDIV lDIV1 = new LDIV();
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'bastore'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      frame0.getClone();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '.' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 183;
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      LSUB lSUB0 = new LSUB();
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      I2D i2D0 = new I2D();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) i2D0);
      instructionHandle0.removeAllTargeters();
      InstructionHandle instructionHandle1 = instructionList0.getStart();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(instConstraintVisitor0);
      localVariables1.clone();
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.push(objectType0);
      localVariables1.toString();
      operandStack0.pop(Integer.MIN_VALUE);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG((DCMPG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(349);
      ObjectType objectType0 = new ObjectType("SD@#%.7d^8cJ7Dz");
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = new Frame(localVariables0, operandStack1);
      Frame frame2 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame2);
      MONITORENTER mONITORENTER2 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER2);
      IMUL iMUL0 = new IMUL();
      IMUL iMUL1 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'SD@#%.7d^8cJ7Dz'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(349);
      ObjectType objectType0 = ObjectType.getInstance("SD@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(218, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Class<IFNULL>[] classArray0 = (Class<IFNULL>[]) Array.newInstance(Class.class, 0);
      Type.getTypes(classArray0);
      localVariables0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean(true);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SD@#%.7d^8cJ7Dz");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "39sSK&aJ@_L");
      ILOAD iLOAD0 = new ILOAD(349);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_0;
      instConstraintVisitor0.visitLocalVariableInstruction(iSTORE0);
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ARETURN aRETURN0 = new ARETURN();
      aRETURN0.getType();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-108));
      NOP nOP0 = new NOP();
      instConstraintVisitor1.visitNOP(nOP0);
      assertEquals(1, nOP0.getLength());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      byte[] byteArray0 = new byte[8];
      OperandStack operandStack1 = new OperandStack(183);
      operandStack1.equals(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      BIPUSH bIPUSH0 = new BIPUSH((byte)77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SALOAD sALOAD0 = new SALOAD();
      ObjectType objectType0 = ObjectType.getInstance("9Ts_");
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.LONG);
      Type type0 = nEWARRAY0.getType();
      Type.getMethodSignature(objectType0, type0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()L9Ts_;");
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      byte byte0 = (byte)100;
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type '9Ts_'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      byte[] byteArray0 = new byte[8];
      OperandStack operandStack1 = new OperandStack(183, objectType0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      BIPUSH bIPUSH0 = new BIPUSH((byte)90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(":");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i@Dk\",J\"?(F3C");
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type ':'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = ObjectType.getInstance("U};");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      RET rET0 = new RET(183);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type 'U}'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(170);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("V");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Class<DUP2_X1>[] classArray0 = (Class<DUP2_X1>[]) Array.newInstance(Class.class, 3);
      Class<DUP2_X1> class0 = DUP2_X1.class;
      classArray0[0] = class0;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D((L2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(193);
      LocalVariables localVariables1 = new LocalVariables(193);
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("A.");
      OperandStack operandStack0 = new OperandStack(193, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      IINC iINC0 = new IINC(193, 193);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RETURN rETURN0 = new RETURN();
      LSUB lSUB0 = new LSUB();
      LSUB lSUB1 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'A.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("]");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      localVariables1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      mONITORENTER1.consumeStack((ConstantPoolGen) null);
      LDIV lDIV1 = new LDIV();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ISHR iSHR0 = new ISHR();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(48);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Read-Access on local variable 48 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 183;
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      mONITORENTER1.consumeStack((ConstantPoolGen) null);
      FMUL fMUL0 = new FMUL();
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(315);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("SQ@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      operandStack0.merge(operandStack1);
      localVariables0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FRETURN fRETURN0 = new FRETURN();
      FRETURN fRETURN1 = new FRETURN();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SQ@#%.7d^8cJ7Dz");
      OperandStack operandStack2 = new OperandStack(315);
      BasicType basicType0 = Type.DOUBLE;
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'SQ@#%.7d^8cJ7Dz'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      LADD lADD0 = new LADD();
      lADD0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 183;
      int int1 = 468;
      LocalVariables localVariables0 = new LocalVariables(468);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(468, objectType0);
      RETURN rETURN0 = new RETURN();
      LDC_W lDC_W0 = new LDC_W(183);
      operandStack0.equals(lDC_W0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      LSTORE lSTORE0 = new LSTORE(183);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(46, 183);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1800), 183);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      lSTORE0.toString(constantPool1);
      operandStack0.equals(lSTORE0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("U};");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      LUSHR lUSHR0 = new LUSHR();
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'U}'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(210);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("NgI#?");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.toString();
      LocalVariables localVariables2 = new LocalVariables(210);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(210);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      operandStack0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables3 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables3, operandStack1);
      L2F l2F0 = new L2F();
      F2L f2L0 = new F2L();
      InstructionList instructionList0 = new InstructionList(f2L0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) f2L0);
      instructionHandle0.removeAttribute(localVariables1);
      FSTORE fSTORE0 = new FSTORE(210);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'NgI#?'; Instruction type: 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      ObjectType.getInstance("`f@Igkq");
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      LDC_W lDC_W0 = new LDC_W(210);
      PUTFIELD pUTFIELD0 = new PUTFIELD(210);
      operandStack0.equals(pUTFIELD0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MockFile mockFile0 = new MockFile((File) null, "");
      MockFile mockFile1 = new MockFile("");
      mockFile1.deleteOnExit();
      mockFile0.setExecutable(false, false);
      LUSHR lUSHR0 = new LUSHR();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      IAND iAND0 = new IAND();
      IAND iAND1 = new IAND();
      IAND iAND2 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("MZF#=18sFW4VQPqi`4=");
      OperandStack operandStack0 = new OperandStack(117, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER1);
      D2F d2F0 = new D2F();
      D2F d2F1 = new D2F();
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("fstore_2");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables1 = new LocalVariables(106);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.getClone();
      localVariables1.getClone();
      localVariables2.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IINC iINC0 = new IINC(671, 106);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iINC0.getType(constantPoolGen0);
      operandStack0.push(type0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MONITORENTER constraint violated: The stack top should be of a ReferenceType, but is 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(315);
      ObjectType objectType0 = ObjectType.getInstance("SD@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FRETURN fRETURN0 = new FRETURN();
      FRETURN fRETURN1 = new FRETURN();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      I2C i2C0 = new I2C();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'SD@#%.7d^8cJ7Dz'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(182);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(182, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      localVariables0.clone();
      localVariables1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(39, objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.getClone();
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LDIV lDIV1 = new LDIV();
      IINC iINC0 = new IINC(183, 183);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MONITORENTER mONITORENTER2 = new MONITORENTER();
      MONITORENTER mONITORENTER3 = new MONITORENTER();
      mONITORENTER1.accept(instConstraintVisitor0);
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER1);
      LDIV lDIV2 = new LDIV();
      FALOAD fALOAD0 = new FALOAD();
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("(~");
      ObjectType objectType1 = new ObjectType("(~");
      OperandStack operandStack0 = new OperandStack(65536, objectType1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type '(~'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 139;
      LocalVariables localVariables0 = new LocalVariables(139);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.BOOLEAN);
      OperandStack operandStack0 = new OperandStack(139, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      localVariables1.toString();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      LDIV lDIV0 = new LDIV();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      LSUB lSUB1 = new LSUB();
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      ObjectType objectType1 = ObjectType.getInstance("BG[v{,mJ6xT,GN(");
      OperandStack operandStack0 = new OperandStack(2174, objectType1);
      operandStack0.equals("");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LDIV lDIV1 = new LDIV();
      IINC iINC0 = new IINC(2174, 172);
      DMUL dMUL0 = new DMUL();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'BG[v{,mJ6xT,GN('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      byte[] byteArray0 = new byte[8];
      OperandStack operandStack1 = new OperandStack(183, objectType0);
      operandStack1.equals(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      BIPUSH bIPUSH0 = new BIPUSH((byte)77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(169);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(169, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = new LocalVariables(169);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      localVariables0.merge(localVariables1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BIPUSH bIPUSH0 = new BIPUSH((byte)90);
      CHECKCAST cHECKCAST0 = new CHECKCAST(3021);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      localVariables1.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      I2C i2C0 = new I2C();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1679);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("SQ@#%.7d^8cJ7Dz");
      OperandStack operandStack0 = new OperandStack(206, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      localVariables0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      FRETURN fRETURN0 = new FRETURN();
      FRETURN fRETURN1 = new FRETURN();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      OperandStack operandStack2 = new OperandStack(3);
      BasicType basicType0 = Type.DOUBLE;
      SALOAD sALOAD0 = new SALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSALOAD(sALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SALOAD constraint violated: The 'index' is not of type int but of type SQ@#%.7d^8cJ7Dz.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance("'Y%QA.de(0hDCW");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.VOID);
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      operandStack0.getClone();
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      IXOR iXOR0 = new IXOR();
      LocalVariables localVariables1 = new LocalVariables(117);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.merge(localVariables2);
      localVariables2.getClone();
      NEWARRAY nEWARRAY1 = new NEWARRAY(objectType0.BYTE);
      LDIV lDIV0 = new LDIV();
      MONITORENTER mONITORENTER2 = new MONITORENTER();
      LDIV lDIV1 = new LDIV();
      FALOAD fALOAD0 = new FALOAD();
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''Y%QA.de(0hDCW'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance("");
      RETURN rETURN0 = new RETURN();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      IAND iAND0 = new IAND();
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LSUB lSUB1 = new LSUB();
      ISUB iSUB0 = new ISUB();
      ISUB iSUB1 = new ISUB();
      iSUB1.copy();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      mONITOREXIT0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD((GETFIELD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      lDIV0.copy();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV1 = new LDIV();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LUSHR lUSHR0 = new LUSHR();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(4256);
      ObjectType objectType0 = new ObjectType("`X63V>}^Gek'XP],");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      IAND iAND0 = new IAND();
      ObjectType objectType1 = new ObjectType("`X63V>}^Gek'XP],");
      OperandStack operandStack0 = new OperandStack(4256, objectType1);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LSUB lSUB1 = new LSUB();
      ISUB iSUB0 = new ISUB();
      ISUB iSUB1 = new ISUB();
      iSUB0.copy();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      Frame.getThis();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n");
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER2 = new MONITORENTER();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type '`X63V>}^Gek'XP],'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(218);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(218, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(39, objectType0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      Frame frame3 = frame1.getClone();
      Frame.getThis();
      frame3.equals(frame2);
      Frame.setThis((UninitializedObjectType) null);
      frame3.clone();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame3);
      LDIV lDIV0 = new LDIV();
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(1105, (byte)90);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '90' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(210);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("NgI#?");
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LSUB lSUB1 = new LSUB();
      ISUB iSUB0 = new ISUB();
      localVariables0.getClone();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iSUB0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      IFEQ iFEQ1 = new IFEQ(instructionHandle0);
      iFEQ0.setTarget(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type 'NgI#?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LDIV lDIV0 = new LDIV();
      ObjectType.getInstance("");
      IXOR iXOR0 = new IXOR();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM((LREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fsVoe_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(108);
      byte byte0 = (byte) (-87);
      LDIV lDIV0 = new LDIV();
      IXOR iXOR0 = new IXOR();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      String string0 = Constants.CONSTRUCTOR_NAME;
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      F2D f2D0 = new F2D();
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGE0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IF_ICMPGE iF_ICMPGE1 = new IF_ICMPGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type 'fsVoe_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.equals(frame0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      ObjectType objectType1 = new ObjectType("");
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(468);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(instConstraintVisitor0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.getClone();
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(5);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("NgI#?");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.toString();
      localVariables1.clone();
      localVariables0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(2242);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      localVariables0.getClone();
      F2L f2L0 = new F2L();
      InstructionList instructionList0 = new InstructionList(f2L0);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'NgI#?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(205);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(205, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 205);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) lDIV0);
      IFLE iFLE0 = new IFLE(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^'ZA_H");
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      DMUL dMUL0 = new DMUL();
      F2L f2L0 = new F2L();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      F2L f2L1 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      frame0.getClone();
      byte[] byteArray0 = new byte[8];
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LocalVariables localVariables3 = localVariables1.getClone();
      localVariables2.merge(localVariables3);
      localVariables2.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = new Frame(183, 183);
      frame2.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame1);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(210);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("NgI#?");
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LSUB lSUB1 = new LSUB();
      ISUB iSUB0 = new ISUB();
      localVariables0.getClone();
      IREM iREM0 = new IREM();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'NgI#?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(170);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("V");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      F2L f2L0 = new F2L();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      DCONST dCONST0 = null;
      try {
        dCONST0 = new DCONST(170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DCONST can be used only for 0.0 and 1.0: 170.0
         //
         verifyException("org.apache.bcel.generic.DCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      frame0.clone();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL((ISHL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("ishr");
      localVariables1.merge(localVariables0);
      OperandStack operandStack0 = new OperandStack(72, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LDIV lDIV1 = new LDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LDIV lDIV2 = new LDIV();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LSUB lSUB0 = new LSUB();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2((DUP_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("a(n@TY40$y&C\"r9");
      ObjectType objectType1 = new ObjectType("8");
      OperandStack operandStack0 = new OperandStack(2410, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(183);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance("Sl");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      Frame frame2 = new Frame(localVariables1, operandStack0);
      localVariables0.clone();
      localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(210, objectType0);
      LocalVariables localVariables2 = new LocalVariables(210);
      Frame frame3 = new Frame(localVariables2, operandStack1);
      frame2.getClone();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'Sl'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1568);
      ObjectType objectType0 = new ObjectType(".");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(233, objectType0);
      OperandStack operandStack1 = new OperandStack(1568);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      operandStack1.initializeObject((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      InstructionList instructionList0 = new InstructionList();
      ASTORE aSTORE0 = new ASTORE(233);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(933);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitINVOKESPECIAL(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(122);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(122, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = new OperandStack(32);
      operandStack1.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BIPUSH bIPUSH0 = new BIPUSH((byte)90);
      DRETURN dRETURN0 = new DRETURN();
      dRETURN0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(148);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(148, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      operandStack0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1816, (-1860));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantClass constantClass0 = new ConstantClass((-631));
      ConstantClass constantClass1 = new ConstantClass(148);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(148, 1568);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      DUP dUP0 = new DUP();
      dUP0.consumeStack((ConstantPoolGen) null);
      dUP0.toString();
      instConstraintVisitor0.visitDUP(dUP0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = new ObjectType(".");
      OperandStack operandStack0 = new OperandStack(210, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP((LCMP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      ObjectType objectType0 = ObjectType.getInstance(".");
      OperandStack operandStack0 = new OperandStack(134, objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      localVariables1.toString();
      localVariables2.merge(localVariables0);
      Frame frame1 = new Frame(1237, (-5782));
      L2F l2F0 = new L2F();
      DMUL dMUL0 = new DMUL();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type '.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("fstore_2");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      instConstraintVisitor0.setFrame(frame0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(183, 183);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(171, 183);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(183);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(183);
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(183, 183);
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantMethodType2;
      constantArray0[4] = (Constant) constantMethodType2;
      constantArray0[5] = (Constant) constantMethodType1;
      constantArray0[6] = (Constant) constantMethodType0;
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(210);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.");
      LSUB lSUB0 = new LSUB();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      localVariables0.getClone();
      IAND iAND0 = new IAND();
      ObjectType objectType1 = new ObjectType("k6RdB,:~EC&A_nDP");
      OperandStack operandStack0 = new OperandStack(22, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      LSUB lSUB1 = new LSUB();
      ISUB iSUB0 = new ISUB();
      ISUB iSUB1 = new ISUB();
      iSUB1.copy();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      Frame.getThis();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?]C`Q'quTS#");
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      MONITORENTER mONITORENTER2 = new MONITORENTER();
      DDIV dDIV0 = new DDIV();
      IFGE iFGE0 = new IFGE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type 'In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(170);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("V");
      OperandStack operandStack0 = new OperandStack(170, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      F2L f2L0 = new F2L();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      F2L f2L1 = new F2L();
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_0;
      InstructionList instructionList1 = new InstructionList(iCONST0);
      InstructionList instructionList2 = new InstructionList();
      instructionList0.append(instructionList2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      LDIV lDIV0 = new LDIV();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Frame frame1 = new Frame(333, 333);
      Frame frame2 = frame1.getClone();
      frame2.toString();
      frame2.clone();
      LXOR lXOR0 = new LXOR();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(183);
      ObjectType objectType0 = new ObjectType("fstore_2");
      OperandStack operandStack0 = new OperandStack(183, objectType0);
      LSTORE lSTORE0 = new LSTORE(183);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-109), 183);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1800), 183);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      lSTORE0.toString(constantPool1);
      operandStack0.equals(lSTORE0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'fstore_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(169);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(169, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType.getInstance("");
      OperandStack operandStack1 = new OperandStack(169, objectType0);
      frame0.getClone();
      LocalVariables localVariables1 = new LocalVariables(313);
      LocalVariables localVariables2 = localVariables0.getClone();
      LocalVariables localVariables3 = localVariables2.getClone();
      Frame frame1 = new Frame(localVariables3, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      ISUB iSUB0 = new ISUB();
      iSUB0.copy();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstructionHandle instructionHandle0 = null;
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
