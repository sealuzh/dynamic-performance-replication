/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:42:00 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 349;
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(349, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("N\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "UNSUPPORTED_SCHEME";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("UNSUPPORTED_SCHEME");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("UNSUPPORTED_SCHEME");
      String string1 = "e{,Y3AG";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("e{,Y3AG");
      int int0 = (-2148);
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment((-2148), "e{,Y3AG");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "#\u0007s+g,";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-4866), "|%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        HttpUrl.getChecked("|\"_dV?w23");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for |\"_dV?w23
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        HttpUrl.getChecked("source == this");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for source == this
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        HttpUrl.getChecked("y*`/e");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for y*`/e
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("4:!ntf~?@j:f");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("4:!ntf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 4:!ntf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Unexpected hex string: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("Unexpected hex string: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("/...");
      String string1 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("", "-Ok");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username("");
      int int0 = 761;
      httpUrl_Builder5.port(761);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.port(2032);
      // Undeclared exception!
      try { 
        httpUrl_Builder6.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1131
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "..";
      httpUrl_Builder0.addQueryParameter("..", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query(":");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(127);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("5Be0a{N36WK/)5IP]#6");
      String string0 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(40, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "GCy*vY=\"gI";
      try { 
        HttpUrl.getChecked("GCy*vY=\"gI");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for GCy*vY=\"gI
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "C3 'M";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("C3 'M");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("C3 'M");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-1744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("C3 'M");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "content == null";
      HttpUrl.parse("content == null");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("content == null", "content == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("++:Ih#::om ", "++:Ih#::om ");
      String string1 = "8Nir!V/_\"`a%6$";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("X7bA\n\"C&soJ&:X", "8Nir!V/_\"`a%6$");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("+");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, "+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "1:D.\\Z";
      httpUrl_Builder0.encodedQuery("ZR3V[a=+y");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("^T", (String) null);
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedQueryParameter((String) null, "okio.timeout");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/p1/htp");
      assertEquals("https://p1/htp", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query((String) null);
      httpUrl_Builder0.reencodeForUri();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("Invalid URL: ");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/...");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("", "okio.Buffer");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("C'#W^~%d?=bF");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("C'#W^~%d?=bF");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.query("");
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("W%{e");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("4");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(3, "4");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "t[92y+AC[xE]%8X";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("t[92y+AC[xE]%8X");
      String string1 = "dQB[>s<W<ZT";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(32, "dQB[>s<W<ZT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("UTF-16BE", "UTF-16BE");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("x&Kmu");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("KAC");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("UTF-16BE", "");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("");
      httpUrl_Builder5.reencodeForUri();
      httpUrl_Builder5.addEncodedQueryParameter("encodedPassword == null", "x&Kmu");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(9, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery(":");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("\n not found: size=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //  not found: size=
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "unexpected port: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("unexpected port: ");
      String string1 = "username == null";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("username == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "SuQu";
      HttpUrl.defaultPort("SuQu");
      String string1 = "";
      HttpUrl.queryStringToNamesAndValues("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 11;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.percentDecode("%s: actual 0x%08x != expected 0x%08x", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("");
      String string0 = "U \"#IM?F3/=eCJ[0";
      httpUrl_Builder1.removeAllEncodedQueryParameters("U \"#IM?F3/=eCJ[0");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(") 21VA+%:");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [\u0000-\u001F-\u009Fp{javaWhitespace}]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("%2e");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("/...");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("_%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: _%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(112);
      httpUrl_Builder2.username("BU/g,$mG");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("BU/g,$mG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: BU/g,$mG
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "GCy*vY=\"gI";
      String string1 = "::";
      try { 
        HttpUrl.getChecked("::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "C3 'M";
      String string1 = "$qb!NaZxv)b!PAos?";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("$qb!NaZxv)b!PAos?");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("$qb!NaZxv)b!PAos?");
      httpUrl_Builder1.password("}^c0\"[2E'%IF2E");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("}^c0\"[2E'%IF2E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: }^c0\"[2E'%IF2E
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%26_Ej2n{Ji%26Y%");
      HttpUrl httpUrl0 = HttpUrl.parse("http:ia8");
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://ia8/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("vq;rvn");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("~VClTJl");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http::/htxp:3152/http");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http::/htxp:3152/http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(48);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        HttpUrl.getChecked("A:y");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for A:y
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      httpUrl_Builder0.addPathSegments("");
      HttpUrl.queryStringToNamesAndValues(".{-]7G=+CDK");
      try { 
        HttpUrl.getChecked("l\"oq?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for l\"oq?
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("\n not found: size=");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "C3 'M";
      String string1 = "$qb!NaZxv)b!PAos?";
      httpUrl_Builder0.removeAllQueryParameters("$qb!NaZxv)b!PAos?");
      httpUrl_Builder0.encodedPassword("$qb!NaZxv)b!PAos?");
      httpUrl_Builder0.encodedPassword("X7bA\n%22C%26soJ%26:X");
      httpUrl_Builder0.addPathSegments("~Y");
      try { 
        HttpUrl.getChecked("X7bA\n%22C%26soJ%26:X");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for X7bA
         // %22C%26soJ%26:X
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Z&$3^-(kCjl6(";
      HttpUrl.queryStringToNamesAndValues("Z&$3^-(kCjl6(");
      String string1 = "s.limit == s.pos";
      try { 
        MockURI.URI("Z&$3^-(kCjl6(", "Z&$3^-(kCjl6(", "s.limit == s.pos");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 1: Z&$3^-(kCjl6(:Z&$3%5E-(kCjl6(#s.limit%20==%20s.pos
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("TQU'");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(".Ki!dNeko+EeS+c");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("G`?Z]");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port((-1203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1203
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.parse("I;^");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters(")%2021VA+%:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("okio.Timeout");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("x%26Kmu");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter(")%2021VA+%:", "I;^");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("I;3BqP?a.g7{~w{_4/", "UTF-8");
      httpUrl_Builder5.encodedFragment("3OCg_C^H9Q<!");
      String string0 = ".V}<`P!o";
      httpUrl_Builder3.addEncodedQueryParameter("G", ".V}<`P!o");
      httpUrl_Builder1.addPathSegment("3OCg_C^H9Q<!");
      String string1 = "<4-cs";
      httpUrl_Builder0.password(")%2021va+%:");
      httpUrl_Builder4.encodedFragment("UTF-8");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setEncodedQueryParameter("a6=& :+o,'/i8", "source is closed");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.removePathSegment((-626));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(".");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment(".");
      int int0 = (-100);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "I\\;^";
      HttpUrl.parse("I;^");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "/";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("/", "I;^");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("okio.Timeout");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("I;^");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("}");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-1985573614), "/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.decodeHexDigit('l');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("@!{");
      String string0 = "pathSegments == null";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("pathSegments == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment('l');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "WkG+SxO9bU";
      try { 
        HttpUrl.getChecked("WkG+SxO9bU");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for WkG+SxO9bU
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("WkG+SxO9bU");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("WkG+SxO9bU");
      httpUrl_Builder2.fragment("WkG+SxO9bU");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("s", "N)5VQ? b");
      httpUrl_Builder3.encodedFragment = "WkG+SxO9bU";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("N)5VQ? b", "WkG+SxO9bU");
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl0.password();
      httpUrl0.isHttps();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("..");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      String string1 = "HmacSHA256";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("HmacSHA256", "HmacSHA256");
      int int0 = 114;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string2 = "dmIM\\\"AR";
      String string3 = null;
      httpUrl_Builder0.addEncodedQueryParameter("dmIM\"AR", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(114, ".%2e");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      httpUrl_Builder1.fragment(";");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(67, "/\u2026");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1), "\u2026]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-3000));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "username == null");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/tlmkjr0oe.h2fl2/$*g0]#4f)4b/0000ffff");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%FZLF&%22(";
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%FZLF&%22(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %FZLF&%22(
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 57;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4~!ntf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4~!ntf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0(:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0(:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "C3M(M";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("hwIOrf%7C-8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(5, "U=c");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("N%0A", "https:", true, true, true, false);
      assertEquals("N%0A", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(127);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("4:!ntf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4:!ntf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:;4>ex");
      httpUrl0.encodedPathSegments();
      httpUrl0.encodedQuery();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1043));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals(1, list0.size());
      
      httpUrl0.queryParameterValues("4[,3hC{&DI*");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://;4>ex/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.URL("https", "https", "*LC!JB*t`\"J@\";");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.equals("*LC!JB*t`\"J@\";");
      assertEquals("https://https*LC!JB*t%60%22J@\";/", httpUrl0.toString());
      assertEquals("https*LC!JB*t`\"J", httpUrl0.username());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("F56%D_vM");
      assertNotNull(httpUrl_Builder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder1.addEncodedPathSegments("string == null");
      httpUrl0.querySize();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      httpUrl0.queryParameterNames();
      httpUrl0.newBuilder(".%2e");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://;4>ex/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      httpUrl0.encodedPassword();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/htp:1/http");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertEquals("https://htp:1/http", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("4:!ntf~?@j:f", "\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("uf");
      httpUrl_Builder2.removeAllEncodedQueryParameters("QXf1?s76");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.fragment("\n");
      String string0 = "BKEK1`%~tArR!lio:";
      httpUrl_Builder1.username("4:!ntf~?@j:f");
      httpUrl_Builder2.addEncodedPathSegments("uf");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("4:!ntf~?@j:f", "\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("uf");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("QXf1?s76");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("%2e%2e", "&n2p?MjQ");
      httpUrl_Builder4.setQueryParameter("%2e%2e", "QXf1?s76");
      httpUrl_Builder2.setEncodedQueryParameter("%%y1 $Wjuf!Kl", "&n2p?MjQ");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("F56%D_vM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      httpUrl0.querySize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(127);
      String string0 = "4:!ntf~?@j:f";
      httpUrl_Builder0.username("4:!ntf~?@j:f");
      httpUrl_Builder0.addEncodedPathSegments("4:!ntf~?@j:f");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("hwIOrf%7C-8");
      httpUrl_Builder0.port(15);
      httpUrl_Builder0.host("^QP!$)thqg$K");
      httpUrl_Builder1.fragment("^QP!$)thqg$K");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "'\\zvk2) c'9V? '";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("'zvk2) c'9V? '");
      String string1 = "%2e%2e";
      String string2 = "4:C::tf~?@j:f";
      httpUrl_Builder0.setEncodedQueryParameter("4:C::tf~?@j:f", ".outputStream()");
      String string3 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedQuery((String) null);
      httpUrl_Builder2.encodedPassword("4:C::tf~?@j:f");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setQueryParameter((String) null, ".outputStream()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("F56%D_vM");
      assertNotNull(httpUrl_Builder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.encodedPath();
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/F56%D_vM", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      httpUrl0.queryParameterNames();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "http";
      int int0 = 2475;
      String string1 = "";
      URL uRL0 = MockURL.URL("http", "$0|~#", 64, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl0.newBuilder("[q$ru^'}%lv\"}t%~@r");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl0.resolve("[q$ru^'}%lv\"}t%~@r");
      int int0 = 998;
      try { 
        HttpUrl.getChecked("8KTKN");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 8KTKN
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("hwIOrf%7C-8");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("4:c::tf~?@j:f");
      httpUrl_Builder1.port(15);
      String string0 = "^QP!$)thqg$K";
      String string1 = "Expected leading [0-9] or '-' character but was %#x";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("https", "Expected leading [0-9] or '-' character but was %#x");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("4:c::tf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4:c::tf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("C4:c!ntf~?@j:f");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("C4:c!ntf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: C4:c!ntf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("::");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("::", "::");
      httpUrl_Builder0.setQueryParameter("_RzeRpk;vZ.", "::");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      URL uRL1 = httpUrl0.url();
      URI uRI0 = MockURL.toURI(uRL1);
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      URI uRI1 = httpUrl1.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI1.toString());
      
      httpUrl1.scheme();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexaple");
      httpUrl0.newBuilder();
      httpUrl0.queryParameterValues((String) null);
      assertEquals("https://www.somefakebutwellformedurl.org/fooexaple", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/http:1/http");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, ":::", 12, 12, false);
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://http:1/http", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("::");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("::");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("::");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.canonicalize("0#]d|+f:=L>5", "::", true, true, true, true);
      httpUrl_Builder2.parse(httpUrl0, "*PD+R7wpt_L`,W\"5C\"x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("RD|4v_");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedPassword("4:C!ntf~?@j:f");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.setEncodedQueryParameter(".", "::");
      httpUrl_Builder5.setQueryParameter("WV", "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      httpUrl_Builder6.addEncodedPathSegments("::");
      httpUrl_Builder6.addQueryParameter("::", "%R*q_wK5+=|");
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      assertEquals("http://:4%3AC!ntf~%3F%40j%3Af@www.somefakebutwellformedurl.org/*PD+R7wpt_L%60,W%225C%22x/RD%7C4v_/::?::&.=::&WV=([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]%2B)&::=%25R*q_wK5%2B%3D|#::", httpUrl1.toString());
      assertEquals("4:C!ntf~?@j:f", httpUrl1.password());
      
      httpUrl_Builder6.parse(httpUrl0, "N>L_nx>j");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      httpUrl0.queryParameterValues("4[,3hC{&DI*");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1043));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-125886972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ",.nyn@NrSoPK(\"1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(",.nyn@NrSoPK(\"1", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(703, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl0.query();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("a@*g'%20p);ya%22v5m%7f");
      httpUrl0.toString();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("_RzeRpk;vZ.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("y8 (98M46uFw-`mRrd", "encodedUsername == null");
      httpUrl_Builder2.encodedFragment("");
      httpUrl_Builder1.setEncodedQueryParameter("y8 (98M46uFw-`mRrd", " \"':;<=>@[]^`{}|/?#");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("[q$ru^'}%lv\"}t%~@r");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl0.resolve("[q$ru^'}%lv\"}t%~@r");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.redact();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("|%");
      httpUrl_Builder0.removeAllEncodedQueryParameters(" +G[Sl");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password(" +G[Sl");
      String string0 = "!p7z%22.l%7bc3nje";
      httpUrl_Builder1.host("!p7z%22.l%7bc3nje");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 3152, "http");
      URL uRL1 = MockURL.URL(uRL0, "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.queryParameter((String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/http:1/http");
      httpUrl0.equals("https:/http:1/http");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      URL uRL1 = httpUrl0.url();
      URI uRI0 = MockURL.toURI(uRL1);
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      httpUrl1.uri();
      httpUrl0.equals(uRL1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.pathSize();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      URL uRL1 = httpUrl0.url();
      MockURL.toURI(uRL1);
      httpUrl0.uri();
      httpUrl0.equals(uRL1);
      httpUrl0.hashCode();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-127518392), "b::ek1`%~tarr!lio:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = ":c";
      httpUrl0.newBuilder("U|Q=xn_VdL#_5rd");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::c.ntf~@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::c.ntf~@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "b.kek1`Fj%~tarr!lo:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b.kek1`Fj%~tarr!lo:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b.kek1`Fj%~tarr!lo:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("6`O4|l^uj");
      httpUrl0.uri();
      httpUrl0.encodedPathSegments();
      HttpUrl.queryStringToNamesAndValues("N(e('0L");
      httpUrl1.encodedQuery();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment((String) null);
      httpUrl0.fragment();
      httpUrl0.queryParameterValues("[bkek1`%~tarr!lio:");
      httpUrl1.encodedPassword();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("!P7Z\".l{C3Nje");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl0.password();
      httpUrl_Builder0.parse(httpUrl1, "w$}R9~'!+MQ;8tP");
      httpUrl1.port();
      httpUrl1.encodedQuery();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/..");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("/..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("C'#W^~%d?=bF");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("C'#W^~%d?=bF");
      httpUrl_Builder4.query("");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hdP9D%1[T?hVd#W8AN7");
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("ShiC$/D4LZ>rdHV");
      httpUrl1.newBuilder("A2kh*E+3");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl1.newBuilder("?-*\"J(cRvDS");
      HttpUrl.queryStringToNamesAndValues("(['.#iFldB\"~");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::c!ntf~?@j:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::c!ntf~?@j:f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl0.query();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl0.pathSegments();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("htp{:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("htp{:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("0+u4JUPL9d`J`x9]Z*D");
      httpUrl_Builder0.setQueryParameter("%2e%2e", "bq:O@PIly]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("<@IIH1y$0p>UNZ9up(g");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removePathSegment(0);
      httpUrl_Builder5.removePathSegment(0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.parse("b:kek1`Fj%~tarr!lo:");
      try { 
        HttpUrl.getChecked("b:kek1`Fj%~tarr!lo:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for b:kek1`Fj%~tarr!lo:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      httpUrl0.queryParameterNames();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(517);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "4:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "http:;4>ex";
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      String string1 = "80Y=GVf37?";
      httpUrl0.query();
      String string2 = "MD1$,>##bC";
      try { 
        MockURI.URI("http:;4>ex", "80Y=GVf37?", "", "MD1$,>##bC");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 7: http:;4>ex://80Y=GVf37?#MD1$,%3E%23%23bC
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("!P7Z\".l{C3Nje");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("!P7Z\".l{C3Nje");
      httpUrl0.newBuilder("!P7Z\".l{C3Nje");
      httpUrl0.newBuilder("!P7Z\".l{C3Nje");
      httpUrl0.resolve("http:/");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      httpUrl0.redact();
      httpUrl1.queryParameter("|I");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("\n");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("\n");
      httpUrl0.newBuilder("..");
      HttpUrl.queryStringToNamesAndValues("jk']G[");
      httpUrl_Builder0.parse(httpUrl0, "hdp9d%1[t?hvd#w8an7");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("hdP9D%1[T?hVd#W8AN7");
      httpUrl1.resolve("hdP9D%1[T?hVd#W8AN7");
      httpUrl1.queryParameterValues("hdP9D%1[T?hVd#W8AN7");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("hdP9D%1[T?hVd#W8AN7");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "\"c?|:6tps", "=yi N");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameterValues("=yi N");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      httpUrl_Builder1.addEncodedPathSegments("\n");
      httpUrl_Builder1.username("\n");
      StringBuilder stringBuilder0 = new StringBuilder("\"c?|:6tps");
      int int0 = 994;
      int int1 = 55;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(994, (CharSequence) "\"c?|:6tps", 55, 994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 994
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl0.queryParameterNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Object object0 = new Object();
      httpUrl0.equals(object0);
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder2.encodedFragment(".%2e");
      httpUrl_Builder1.username(".%2e");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockURL.getHost(uRL0);
      Object object0 = new Object();
      HttpUrl httpUrl1 = httpUrl0.resolve(":");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockURL.getHost(uRL0);
      Object object0 = new Object();
      HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve(":");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username(")q`b");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("%2e.");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      MockURL.getHost(uRL0);
      httpUrl0.uri();
      httpUrl0.uri();
      HttpUrl.percentEncoded("%'V*SnE)q##lhX#WI", 1, 57);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:;4>ex");
      httpUrl0.queryParameterNames();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:;4>ex");
      httpUrl0.host();
      httpUrl_Builder0.password(";4>ex");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 11;
      String string0 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(11, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      try { 
        HttpUrl.getChecked("https:%60fj%~tarr!l%7fo:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:%60fj%~tarr!l%7fo:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[4:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [4:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockURL.getHttpExample();
      URL uRL0 = MockURL.URL("https", "[07:", 1233, "i`7");
      MockURL.URL(uRL0, "i`7");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.URL("http", "[::", "qZsLV}NF0H{w q1{>");
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("6fC(s", 923, 923, "(}C(t", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockURL.getHttpExample();
      URL uRL0 = MockURL.URL("http", "http", "J1TSuH<@j}AJ;lv]/t");
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("J1TSuH<@j}AJ;lv]/t");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("http");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegments("%20%22'%3C%3E%23&=");
      httpUrl_Builder5.password("http");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      URI uRI0 = httpUrl0.uri();
      URI uRI1 = MockURI.resolve(uRI0, "~@I_NI?");
      HttpUrl httpUrl1 = HttpUrl.get(uRI1);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName((-3564));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "https:/\\j1tsuh<@j}aj;lv]/t\\j1tsuh<@j}aj;lv]/t";
      httpUrl0.resolve("https:/j1tsuh<@j}aj;lv]/tj1tsuh<@j}aj;lv]/t");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("https:/j1tsuh<@j}aj;lv]/tj1tsuh<@j}aj;lv]/t");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("https:/j1tsuh<@j}aj;lv]/tj1tsuh<@j}aj;lv]/t");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("http:4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: http:4
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("w'!1ddN?+<gvM*g?");
      httpUrl1.uri();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("w'!1ddN?+<gvM*g?", 68, 68, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("6P2>(?h;r");
      httpUrl1.query();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "http";
      int int0 = 2450;
      URL uRL0 = MockURL.URL("http", "sC\"VW{\"hnnD1}Zu9", 2450, "http");
      URL uRL1 = MockURL.URL(uRL0, "sC\"VW{\"hnnD1}Zu9");
      HttpUrl.get(uRL1);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("sC\"VW{\"hnnD1}Zu9");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(2450);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2450, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.create("http:tf~?@j:f");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRI2);
      HttpUrl httpUrl1 = httpUrl0.resolve("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
      httpUrl_Builder0.parse(httpUrl1, "http:tf~?@j:f");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("@cf:8xT[qj~j5o*<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: @cf:8xT[qj~j5o*<
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("K");
      try { 
        HttpUrl.getChecked("https:be:f#d0");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:be:f#d0
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 20, "http");
      MockURL.URL(uRL0, "http");
      URI uRI0 = MockURI.URI("http", "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.newBuilder();
      httpUrl0.host();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 3152, "http");
      MockURL.URL(uRL0, "http");
      URI uRI0 = MockURI.URI("http", "http", "http", 3152, "", "_=oXVUO7jsGb@?T:[J", "");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(3152);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6305, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "[::c.'tf~@j@ef", 38, "XJj_M_(kl]Kk^zak9K$");
      MockURL.URL(uRL0, "[::c.'tf~@j@ef");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0:b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0:b
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("1:3D.Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 1:3D.Z
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::3D.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::3D.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::3D.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
