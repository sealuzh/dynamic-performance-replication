/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:02:41 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Random;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import javax.swing.JSplitPane;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.LMT;
import weka.clusterers.AbstractClusterer;
import weka.clusterers.EM;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<BinarySparseInstance> vector0 = new Vector<BinarySparseInstance>();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[8];
      stringArray0[7] = "";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 1834);
      assertNull(costMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.fMeasure(0);
      assertEquals(0.0, double2, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.fMeasure(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!W");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.pctIncorrect();
      evaluation0.kappa();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      SGD sGD0 = new SGD();
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      evaluation0.addNumericTrainClass(Double.NaN, 1);
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("Ckec7>JTt8O~HkJCy");
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 2848.0950889667);
      evaluation0.falsePositiveRate(2605);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = DefaultEditorKit.insertContentAction;
      evaluation0.toMatrixString();
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.SFMeanSchemeEntropy();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed((-2));
      Instances instances0 = testInstances0.generate("KxRb");
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.addNumericTrainClass(1.0, (-1));
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifier0, instances0, 489, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString("X4", true);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 42;
      try { 
        Evaluation.handleCostOption(".bsi", 42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          Instances instances0 = textDirectoryLoader0.getDataSet();
          Evaluation evaluation0 = new Evaluation(instances0);
          char[] charArray0 = new char[5];
          charArray0[0] = '_';
          charArray0[1] = '\"';
          charArray0[2] = 'w';
          charArray0[3] = 'M';
          charArray0[4] = ']';
          evaluation0.num2ShortID(2641, charArray0, 2641);
          textDirectoryLoader0.setCharSet("Ckec7>JTt8O~HkJCy");
          evaluation0.updateNumericScores((double[]) null, (double[]) null, 2848.0950889667);
          evaluation0.sizeOfPredictedRegions();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("hU@JF");
      testInstances0.getRevision();
      testInstances0.setNumInstances(4105);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = PlainDocument.tabSizeAttribute;
      Instances instances1 = testInstances0.getData();
      instances0.equalHeaders(instances1);
      evaluation0.addNumericTrainClass((-1), (-2));
      evaluation0.rootRelativeSquaredError();
      evaluation0.pctCorrect();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.relativeAbsoluteError();
      evaluation0.trueNegativeRate(0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(euclideanDistance0);
      evaluation0.numFalseNegatives(12);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.m_SumPriorEntropy = 733.2;
      evaluation0.SFPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.rootMeanPriorSquaredError();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      evaluation0.getRevision();
      doubleArray0[0] = (double) (-1);
      evaluation0.weightedAreaUnderROC();
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      doubleArray0[4] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2785.80544386755));
      evaluation0.unclassified();
      evaluation0.numFalsePositives((-179));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed((-566));
      Instances instances0 = testInstances0.generate("KxRb");
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.addNumericTrainClass(0, (-566));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.numTruePositives(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!W");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses((-3716));
      evaluation0.toSummaryString("listOptions", false);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.toString();
      evaluation0.getClassPriors();
      evaluation0.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation0.weightedRecall();
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.priorEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.pctIncorrect();
      evaluation0.kappa();
      SGD sGD0 = new SGD();
      sGD0.reset();
      sGD0.getRevision();
      sGD0.setDontNormalize(true);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      String string1 = XML.DTD_REQUIRED;
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.getClassPriors();
      evaluation0.KBMeanInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBInformation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      double double1 = evaluation0.m_WithClass;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.getClassPriors();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.toSummaryString("@relation", true);
      ZeroR zeroR0 = new ZeroR();
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_SumSqrClass;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getHeader();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "3 U)e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation.handleCostOption((String) null, 1834);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.toSummaryString("`6\"", true);
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) stacking0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tin conjunction with the '-p' option (only nominal classes).\n");
      org.evosuite.runtime.Random.setNextRandom((-9));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.rootMeanPriorSquaredError();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, (Object[]) multiClassClassifier0.TAGS_METHOD);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      double double0 = UnivariateKernelEstimator.CONST;
      textDirectoryLoader0.reset();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.equals(textDirectoryLoader0);
      evaluation0.trueNegativeRate(2493);
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      evaluation0.num2ShortID((-2), charArray0, 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("WR~1*=8");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      String[] stringArray0 = new String[0];
      ZeroR zeroR0 = new ZeroR();
      String string0 = DefaultEditorKit.beepAction;
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_SumSqrClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.useNoPriors();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelation("@relation\nTotal Number of Instances                0     \n");
      evaluation0.KBMeanInformation();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TestInstances.forCapabilities(capabilities0);
      evaluation0.SFEntropyGain();
      evaluation0.KBInformation();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.falsePositiveRate(8);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2564));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2564
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      String string0 = JSplitPane.RIGHT;
      evaluation0.toMatrixString();
      evaluation0.trueNegativeRate((-2));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.makeDistribution(0.0);
      SMOreg sMOreg0 = new SMOreg();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMOreg0);
      additiveRegression0.listOptions();
      evaluation0.pctIncorrect();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Integer integer0 = new Integer(3);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 4469.228728286688);
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = 1192;
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 673;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-55.0), intArray0, 673);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(3814);
      Instances instances0 = testInstances0.generate("!W");
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      evaluation0.toCumulativeMarginDistributionString();
      instances0.clear();
      evaluation0.addNumericTrainClass(1884.92443334538, 0.01);
      evaluation0.KBInformation();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.pctIncorrect();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.m_MinTarget = (-450.39628466826);
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
      evaluation0.rootMeanPriorSquaredError();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      double[] doubleArray0 = new double[0];
      evaluation0.sizeOfPredictedRegions();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.weightedRecall();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = (ZeroR)stacking0.getMetaClassifier();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      String[] stringArray0 = new String[0];
      zeroR0.setOptions(stringArray0);
      objectArray0[4] = (Object) stacking0;
      objectArray0[7] = (Object) unaryOperator0;
      Evaluation.makeOptionString(zeroR0, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      String string0 = DefaultEditorKit.beepAction;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFMeanEntropyGain();
      evaluation0.confusionMatrix();
      evaluation0.rootRelativeSquaredError();
      evaluation0.toSummaryString(false);
      Stacking stacking0 = new Stacking();
      instances1.toString();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      evaluation0.totalCost();
      CostMatrix costMatrix0 = new CostMatrix(484);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(1);
      Evaluation.makeOptionString((Classifier) null, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate();
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation0 = new Evaluation(instances2);
      evaluation0.priorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      evaluation1.falsePositiveRate(1);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPredicted;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      RBFKernel rBFKernel0 = new RBFKernel();
      Capabilities capabilities0 = rBFKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities1 = classificationViaRegression0.getCapabilities();
      capabilities1.dependencies();
      testInstances0.setNumRelationalNumeric((-1));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_SumClass;
      evaluation0.useNoPriors();
      evaluation0.unweightedMacroFmeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedFalsePositiveRate();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      SMOreg sMOreg0 = new SMOreg();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMOreg0);
      double double0 = evaluation0.m_SumClassPredicted;
      testInstances0.setNumRelationalNumeric((-151));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.getDiscardPredictions();
      evaluation0.setNumericPriorsFromBuffer();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedFMeasure();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.falsePositiveRate(121);
      double double0 = evaluation0.m_Unclassified;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tin conjunction with the '-p' option (only nominal classes).\n");
      org.evosuite.runtime.Random.setNextRandom((-9));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      evaluation1.equals(evaluation0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      instances1.equalHeaders(instances2);
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.makeDistribution(1.0E-6);
      instances0.parallelStream();
      SMOreg sMOreg0 = new SMOreg();
      LWL lWL0 = new LWL();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.KBMeanInformation();
      evaluation0.weightedAreaUnderPRC();
      DenseInstance denseInstance0 = new DenseInstance((-8.040973075455643), doubleArray0);
      Evaluation.main((String[]) null);
      double double0 = evaluation0.m_SumSqrClass;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.pctUnclassified();
      simpleKMeans0.getClusterCentroids();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(" ", true);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getCapabilities();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.pctUnclassified();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      evaluation0.getClassPriors();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Stacking stacking0 = new Stacking();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelation("costMatrixTipText");
      evaluation0.KBMeanInformation();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TestInstances.forCapabilities(capabilities0);
      System.setCurrentTimeMillis((-1L));
      evaluation0.SFEntropyGain();
      evaluation0.KBInformation();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.disableAllAttributes();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      evaluation0.addNumericTrainClass((-2), 2);
      evaluation1.weightedTruePositiveRate();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("hU@JF");
      testInstances0.getRevision();
      testInstances0.setNumInstances(4105);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      Instances instances1 = testInstances0.getData();
      instances0.equalHeaders(instances1);
      evaluation0.addNumericTrainClass((-1), (-2));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      LMT lMT0 = new LMT();
      evaluation0.equals(lMT0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.SFMeanEntropyGain();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.indexOf(testInstances0);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.makeDistribution(0.0);
      SMOreg sMOreg0 = new SMOreg();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMOreg0);
      additiveRegression0.listOptions();
      evaluation0.pctIncorrect();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      ArffLoader arffLoader0 = new ArffLoader();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      SMO sMO0 = new SMO();
      evaluation0.equals(sMO0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.setPriors(instances0);
      org.evosuite.runtime.Random.setNextRandom(1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      arffLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-222.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.makeDistribution(Double.NaN);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_METHOD;
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      mockRandom0.nextFloat();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      Object[] objectArray0 = new Object[2];
      evaluation0.weightedAreaUnderPRC();
      evaluation0.areaUnderROC(452);
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, 486, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.m_SumClassPredicted = Double.NaN;
      evaluation0.KBInformation();
      evaluation0.addNumericTrainClass(0.0, 0.0);
      String[] stringArray0 = new String[0];
      instances0.clear();
      try { 
        evaluation0.crossValidateModel("13-^+ojB,=g", instances0, 92, stringArray0, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 13-^+ojB,=g
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      MultiClassClassifier multiClassClassifier1 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      evaluation1.relativeAbsoluteError();
      evaluation0.trueNegativeRate((-1222));
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation1.equals(evaluation0);
      MultiClassClassifier multiClassClassifier2 = new MultiClassClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate("<!-- technical-plaintext-end -->");
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.Stacking:
         // 
         // -M <scheme specification>
         // \tFull name of meta classifier, followed by options.
         // \t(default: \"weka.classifiers.rules.Zero\")
         // -X <number of folds>
         // \tSets the number of cross-validation folds.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("hU@JF");
      testInstances0.getRevision();
      testInstances0.setNumInstances(4105);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      Instances instances1 = testInstances0.getData();
      instances0.equalHeaders(instances1);
      evaluation0.addNumericTrainClass((-1), (-2));
      evaluation0.rootRelativeSquaredError();
      evaluation0.pctCorrect();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Evaluation.makeOptionString(lWL0, false);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toCumulativeMarginDistributionString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")zQYL");
      textDirectoryLoader0.setDebug(false);
      Evaluation evaluation3 = new Evaluation(instances0);
      Evaluation evaluation4 = new Evaluation(instances1);
      try { 
        evaluation4.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      evaluation0.toSummaryString((String) null, true);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      mockRandom0.nextFloat();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TreeSet<Bagging> treeSet0 = new TreeSet<Bagging>();
      instances0.retainAll(treeSet0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      org.evosuite.runtime.Random.setNextRandom(1);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UnaryOperator.identity();
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      capabilities0.getAttributeCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = KStarConstants.FLOOR1;
      evaluation0.setNumericPriorsFromBuffer();
      DenseInstance denseInstance0 = new DenseInstance(1);
      evaluation0.avgCost();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiClassClassifier.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.falseNegativeRate(1);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      SMOreg sMOreg0 = new SMOreg();
      LWL lWL0 = new LWL();
      MockRandom mockRandom0 = new MockRandom();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc1 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader1.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.toSummaryString("@relation", true);
      ZeroR zeroR0 = new ZeroR();
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_SumSqrClass;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.truePositiveRate(0);
      Evaluation.main(stringArray0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanPriorEntropy();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = 1538.880438;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 3;
      evaluation0.updateMargins(doubleArray0, 0, 0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      instances1.addAll((Collection<? extends Instance>) instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      SMOreg sMOreg0 = new SMOreg();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMOreg0);
      double double0 = evaluation0.m_SumClassPredicted;
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNumeric(426);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.getDiscardPredictions();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      MockRandom mockRandom0 = new MockRandom(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedFMeasure();
      evaluation0.toMatrixString();
      evaluation0.meanPriorAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EM eM0 = new EM();
      AbstractClusterer.makeCopies(eM0, 2);
      evaluation0.KBMeanInformation();
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnaryOperator.identity();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      double[] doubleArray0 = evaluation0.getClassPriors();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Stacking stacking0 = new Stacking();
      instances0.toString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      evaluation0.unweightedMacroFmeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.listOptions();
      evaluation0.KBInformation();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(674);
      evaluation0.pctUnclassified();
      org.evosuite.runtime.Random.setNextRandom(2);
      evaluation0.setDiscardPredictions(false);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.precision(20);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.priorEntropy();
      instances0.addAll((Collection<? extends Instance>) instances1);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = evaluation0.makeDistribution(1.0E-6);
      instances0.parallelStream();
      SMOreg sMOreg0 = new SMOreg();
      LWL lWL0 = new LWL();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals((Object) null);
      evaluation0.updateMargins(doubleArray0, 1, 474.145942563);
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.SFPriorEntropy();
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate(" ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = KStarConstants.EPSILON;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.avgCost();
      evaluation0.SFSchemeEntropy();
      evaluation0.areaUnderPRC(102261132);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      evaluation0.toSummaryString();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Enumeration enumeration0 = new NGramTokenizer();
      evaluation0.KBInformation();
      simpleKMeans0.getClusterStandardDevs();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(674);
      evaluation0.pctUnclassified();
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 482, (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation1.toClassDetailsString();
      evaluation1.toMatrixString();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.trueNegativeRate((-2));
      Evaluation evaluation3 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-relational-numeric <num>");
      evaluation3.toMatrixString();
      testInstances0.getData();
      instances1.equalHeaders(instances2);
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation2.SFEntropyGain();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation3.truePositiveRate(486);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(850.7549821, (int[]) null, 40);
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      ZeroR zeroR0 = new ZeroR();
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_SumSqrClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.useNoPriors();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      String string1 = "p.oO(jh*ML%<Tk#:V";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p.oO(jh*ML%<Tk#:V");
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((-2363.59903), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2363
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      ZeroR zeroR0 = new ZeroR();
      String string0 = DefaultEditorKit.beepAction;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation\nTotal Number of Instances                0     \n";
      ZeroR.main(stringArray0);
      String[] stringArray1 = new String[0];
      Object[] objectArray0 = new Object[0];
      evaluation0.m_Header = instances0;
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.main(stringArray1);
      double double0 = evaluation0.m_SumSqrClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.useNoPriors();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities(evaluation0.m_Header);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelation("@relation\nTotal Number of Instances                0     \n");
      evaluation0.KBRelativeInformation();
      evaluation0.SFSchemeEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UnaryOperator.identity();
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      capabilities0.getAttributeCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = KStarConstants.FLOOR1;
      evaluation0.setNumericPriorsFromBuffer();
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.evaluateModelOnce(533.713, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      String string0 = DefaultEditorKit.beepAction;
      SparseInstance sparseInstance0 = new SparseInstance(8);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSqrClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class complexity | order 0         ");
      testInstances0.setNumString(498);
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MINOR = (-2);
      evaluation0.useNoPriors();
      evaluation0.m_SumPredicted = (double) (-2);
      evaluation0.m_WithClass = (double) (-2);
      testInstances0.setRelation("@relation");
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalsePositives((-964));
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(112);
      Stacking stacking0 = new Stacking();
      try { 
        AbstractClassifier.forName(".arff", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.SFPriorEntropy();
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      capabilities0.getAttributeCapabilities();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setSource(file0);
      textDirectoryLoader0.getDataSet();
      double double1 = KStarConstants.FLOOR1;
      evaluation1.setNumericPriorsFromBuffer();
      testInstances0.setNumNominalValues(578);
      MultiClassClassifier.main(testInstances0.DEFAULT_WORDS);
      evaluation1.correlationCoefficient();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 578;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.SFPriorEntropy();
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      capabilities0.getAttributeCapabilities();
      Evaluation evaluation1 = new Evaluation(instances1);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.listOptions();
      serializedClassifier0.getCapabilities();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      TestInstances testInstances1 = new TestInstances();
      evaluation1.getHeader();
      evaluation1.getRevision();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.SFPriorEntropy();
      UnaryOperator.identity();
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(" ");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation3 = new Evaluation(instances1);
      testInstances0.setNumNominalValues(578);
      MultiClassClassifier.main((String[]) null);
      evaluation1.correlationCoefficient();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) m5Rules0, instances1, 6, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation2.m_SumClass;
      evaluation1.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_SumClass;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      evaluation1.useNoPriors();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation3.unweightedMacroFmeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation2.equals(evaluation1);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier1.getCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances.forCapabilities(capabilities0);
      evaluation3.setNumericPriorsFromBuffer();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation3.toClassDetailsString("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
      evaluation3.getDiscardPredictions();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UnaryOperator.identity();
      M5Rules m5Rules0 = new M5Rules();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      LogitBoost logitBoost0 = new LogitBoost();
      capabilities0.getAttributeCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
